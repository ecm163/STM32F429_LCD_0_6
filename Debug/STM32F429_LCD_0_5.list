
STM32F429_LCD_0_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f888  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a50  0800fa38  0800fa38  0001fa38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012488  08012488  000300f0  2**0
                  CONTENTS
  4 .ARM          00000008  08012488  08012488  00022488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012490  08012490  000300f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012490  08012490  00022490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012494  08012494  00022494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08012498  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300f0  2**0
                  CONTENTS
 10 .bss          00004c60  200000f0  200000f0  000300f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004d50  20004d50  000300f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000321fb  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000693c  00000000  00000000  0006231b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002790  00000000  00000000  00068c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002500  00000000  00000000  0006b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f1ec  00000000  00000000  0006d8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033f36  00000000  00000000  0009cad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001059c2  00000000  00000000  000d0a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d63cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a9b0  00000000  00000000  001d641c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fa20 	.word	0x0800fa20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	0800fa20 	.word	0x0800fa20

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <vApplicationGetIdleTaskMemory+0x2c>)
 8000504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <vApplicationGetIdleTaskMemory+0x30>)
 800050a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	2000010c 	.word	0x2000010c
 8000524:	20000160 	.word	0x20000160

08000528 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800052c:	f001 f8fe 	bl	800172c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000530:	20ca      	movs	r0, #202	; 0xca
 8000532:	f000 f95d 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000536:	20c3      	movs	r0, #195	; 0xc3
 8000538:	f000 f967 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800053c:	2008      	movs	r0, #8
 800053e:	f000 f964 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000542:	2050      	movs	r0, #80	; 0x50
 8000544:	f000 f961 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000548:	20cf      	movs	r0, #207	; 0xcf
 800054a:	f000 f951 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800054e:	2000      	movs	r0, #0
 8000550:	f000 f95b 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000554:	20c1      	movs	r0, #193	; 0xc1
 8000556:	f000 f958 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800055a:	2030      	movs	r0, #48	; 0x30
 800055c:	f000 f955 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000560:	20ed      	movs	r0, #237	; 0xed
 8000562:	f000 f945 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000566:	2064      	movs	r0, #100	; 0x64
 8000568:	f000 f94f 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800056c:	2003      	movs	r0, #3
 800056e:	f000 f94c 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000572:	2012      	movs	r0, #18
 8000574:	f000 f949 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000578:	2081      	movs	r0, #129	; 0x81
 800057a:	f000 f946 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800057e:	20e8      	movs	r0, #232	; 0xe8
 8000580:	f000 f936 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000584:	2085      	movs	r0, #133	; 0x85
 8000586:	f000 f940 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800058a:	2000      	movs	r0, #0
 800058c:	f000 f93d 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000590:	2078      	movs	r0, #120	; 0x78
 8000592:	f000 f93a 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000596:	20cb      	movs	r0, #203	; 0xcb
 8000598:	f000 f92a 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800059c:	2039      	movs	r0, #57	; 0x39
 800059e:	f000 f934 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80005a2:	202c      	movs	r0, #44	; 0x2c
 80005a4:	f000 f931 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 f92e 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80005ae:	2034      	movs	r0, #52	; 0x34
 80005b0:	f000 f92b 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80005b4:	2002      	movs	r0, #2
 80005b6:	f000 f928 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80005ba:	20f7      	movs	r0, #247	; 0xf7
 80005bc:	f000 f918 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80005c0:	2020      	movs	r0, #32
 80005c2:	f000 f922 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80005c6:	20ea      	movs	r0, #234	; 0xea
 80005c8:	f000 f912 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 f91c 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 f919 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80005d8:	20b1      	movs	r0, #177	; 0xb1
 80005da:	f000 f909 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 f913 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80005e4:	201b      	movs	r0, #27
 80005e6:	f000 f910 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80005ea:	20b6      	movs	r0, #182	; 0xb6
 80005ec:	f000 f900 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80005f0:	200a      	movs	r0, #10
 80005f2:	f000 f90a 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80005f6:	20a2      	movs	r0, #162	; 0xa2
 80005f8:	f000 f907 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80005fc:	20c0      	movs	r0, #192	; 0xc0
 80005fe:	f000 f8f7 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000602:	2010      	movs	r0, #16
 8000604:	f000 f901 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000608:	20c1      	movs	r0, #193	; 0xc1
 800060a:	f000 f8f1 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800060e:	2010      	movs	r0, #16
 8000610:	f000 f8fb 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000614:	20c5      	movs	r0, #197	; 0xc5
 8000616:	f000 f8eb 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800061a:	2045      	movs	r0, #69	; 0x45
 800061c:	f000 f8f5 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000620:	2015      	movs	r0, #21
 8000622:	f000 f8f2 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000626:	20c7      	movs	r0, #199	; 0xc7
 8000628:	f000 f8e2 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800062c:	2090      	movs	r0, #144	; 0x90
 800062e:	f000 f8ec 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000632:	2036      	movs	r0, #54	; 0x36
 8000634:	f000 f8dc 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000638:	20c8      	movs	r0, #200	; 0xc8
 800063a:	f000 f8e6 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800063e:	20f2      	movs	r0, #242	; 0xf2
 8000640:	f000 f8d6 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f8e0 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800064a:	20b0      	movs	r0, #176	; 0xb0
 800064c:	f000 f8d0 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000650:	20c2      	movs	r0, #194	; 0xc2
 8000652:	f000 f8da 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000656:	20b6      	movs	r0, #182	; 0xb6
 8000658:	f000 f8ca 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800065c:	200a      	movs	r0, #10
 800065e:	f000 f8d4 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000662:	20a7      	movs	r0, #167	; 0xa7
 8000664:	f000 f8d1 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000668:	2027      	movs	r0, #39	; 0x27
 800066a:	f000 f8ce 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800066e:	2004      	movs	r0, #4
 8000670:	f000 f8cb 	bl	800080a <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000674:	202a      	movs	r0, #42	; 0x2a
 8000676:	f000 f8bb 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800067a:	2000      	movs	r0, #0
 800067c:	f000 f8c5 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000680:	2000      	movs	r0, #0
 8000682:	f000 f8c2 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f8bf 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800068c:	20ef      	movs	r0, #239	; 0xef
 800068e:	f000 f8bc 	bl	800080a <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000692:	202b      	movs	r0, #43	; 0x2b
 8000694:	f000 f8ac 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000698:	2000      	movs	r0, #0
 800069a:	f000 f8b6 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 f8b3 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f000 f8b0 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80006aa:	203f      	movs	r0, #63	; 0x3f
 80006ac:	f000 f8ad 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80006b0:	20f6      	movs	r0, #246	; 0xf6
 80006b2:	f000 f89d 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 f8a7 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 f8a4 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80006c2:	2006      	movs	r0, #6
 80006c4:	f000 f8a1 	bl	800080a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80006c8:	202c      	movs	r0, #44	; 0x2c
 80006ca:	f000 f891 	bl	80007f0 <ili9341_WriteReg>
  LCD_Delay(200);
 80006ce:	20c8      	movs	r0, #200	; 0xc8
 80006d0:	f001 f91a 	bl	8001908 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80006d4:	2026      	movs	r0, #38	; 0x26
 80006d6:	f000 f88b 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 f895 	bl	800080a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80006e0:	20e0      	movs	r0, #224	; 0xe0
 80006e2:	f000 f885 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80006e6:	200f      	movs	r0, #15
 80006e8:	f000 f88f 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80006ec:	2029      	movs	r0, #41	; 0x29
 80006ee:	f000 f88c 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80006f2:	2024      	movs	r0, #36	; 0x24
 80006f4:	f000 f889 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80006f8:	200c      	movs	r0, #12
 80006fa:	f000 f886 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80006fe:	200e      	movs	r0, #14
 8000700:	f000 f883 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000704:	2009      	movs	r0, #9
 8000706:	f000 f880 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800070a:	204e      	movs	r0, #78	; 0x4e
 800070c:	f000 f87d 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000710:	2078      	movs	r0, #120	; 0x78
 8000712:	f000 f87a 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000716:	203c      	movs	r0, #60	; 0x3c
 8000718:	f000 f877 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800071c:	2009      	movs	r0, #9
 800071e:	f000 f874 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000722:	2013      	movs	r0, #19
 8000724:	f000 f871 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000728:	2005      	movs	r0, #5
 800072a:	f000 f86e 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800072e:	2017      	movs	r0, #23
 8000730:	f000 f86b 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000734:	2011      	movs	r0, #17
 8000736:	f000 f868 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800073a:	2000      	movs	r0, #0
 800073c:	f000 f865 	bl	800080a <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000740:	20e1      	movs	r0, #225	; 0xe1
 8000742:	f000 f855 	bl	80007f0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000746:	2000      	movs	r0, #0
 8000748:	f000 f85f 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800074c:	2016      	movs	r0, #22
 800074e:	f000 f85c 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000752:	201b      	movs	r0, #27
 8000754:	f000 f859 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000758:	2004      	movs	r0, #4
 800075a:	f000 f856 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800075e:	2011      	movs	r0, #17
 8000760:	f000 f853 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000764:	2007      	movs	r0, #7
 8000766:	f000 f850 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800076a:	2031      	movs	r0, #49	; 0x31
 800076c:	f000 f84d 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000770:	2033      	movs	r0, #51	; 0x33
 8000772:	f000 f84a 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000776:	2042      	movs	r0, #66	; 0x42
 8000778:	f000 f847 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800077c:	2005      	movs	r0, #5
 800077e:	f000 f844 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000782:	200c      	movs	r0, #12
 8000784:	f000 f841 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000788:	200a      	movs	r0, #10
 800078a:	f000 f83e 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800078e:	2028      	movs	r0, #40	; 0x28
 8000790:	f000 f83b 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000794:	202f      	movs	r0, #47	; 0x2f
 8000796:	f000 f838 	bl	800080a <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800079a:	200f      	movs	r0, #15
 800079c:	f000 f835 	bl	800080a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80007a0:	2011      	movs	r0, #17
 80007a2:	f000 f825 	bl	80007f0 <ili9341_WriteReg>
  LCD_Delay(200);
 80007a6:	20c8      	movs	r0, #200	; 0xc8
 80007a8:	f001 f8ae 	bl	8001908 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80007ac:	2029      	movs	r0, #41	; 0x29
 80007ae:	f000 f81f 	bl	80007f0 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80007b2:	202c      	movs	r0, #44	; 0x2c
 80007b4:	f000 f81c 	bl	80007f0 <ili9341_WriteReg>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80007c0:	f000 ffb4 	bl	800172c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80007c4:	2103      	movs	r1, #3
 80007c6:	20d3      	movs	r0, #211	; 0xd3
 80007c8:	f000 f82c 	bl	8000824 <ili9341_ReadData>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b29b      	uxth	r3, r3
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80007d8:	2029      	movs	r0, #41	; 0x29
 80007da:	f000 f809 	bl	80007f0 <ili9341_WriteReg>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80007e6:	2028      	movs	r0, #40	; 0x28
 80007e8:	f000 f802 	bl	80007f0 <ili9341_WriteReg>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 f82f 	bl	8001860 <LCD_IO_WriteReg>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	4618      	mov	r0, r3
 8000818:	f001 f800 	bl	800181c <LCD_IO_WriteData>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	80fb      	strh	r3, [r7, #6]
 8000830:	4613      	mov	r3, r2
 8000832:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000834:	797a      	ldrb	r2, [r7, #5]
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f001 f832 	bl	80018a4 <LCD_IO_ReadData>
 8000840:	4603      	mov	r3, r0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800084e:	23f0      	movs	r3, #240	; 0xf0
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800085e:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b5b0      	push	{r4, r5, r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000872:	f002 fc1f 	bl	80030b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000876:	f000 f82f 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087a:	f000 fb19 	bl	8000eb0 <MX_GPIO_Init>
  MX_CRC_Init();
 800087e:	f000 f8e7 	bl	8000a50 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000882:	f000 f8f9 	bl	8000a78 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000886:	f000 fac3 	bl	8000e10 <MX_FMC_Init>
  MX_I2C3_Init();
 800088a:	f000 f927 	bl	8000adc <MX_I2C3_Init>
  MX_LTDC_Init();
 800088e:	f000 f965 	bl	8000b5c <MX_LTDC_Init>
  MX_SPI5_Init();
 8000892:	f000 f9e3 	bl	8000c5c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000896:	f000 fa17 	bl	8000cc8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800089a:	f000 fa8f 	bl	8000dbc <MX_USART1_UART_Init>
  MX_UART5_Init();
 800089e:	f000 fa63 	bl	8000d68 <MX_UART5_Init>
  MX_ADC1_Init();
 80008a2:	f000 f883 	bl	80009ac <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <main+0x64>)
 80008a8:	1d3c      	adds	r4, r7, #4
 80008aa:	461d      	mov	r5, r3
 80008ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f009 ff44 	bl	800a74a <osThreadCreate>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a03      	ldr	r2, [pc, #12]	; (80008d4 <main+0x68>)
 80008c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008c8:	f009 ff38 	bl	800a73c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <main+0x60>
 80008ce:	bf00      	nop
 80008d0:	0800fa44 	.word	0x0800fa44
 80008d4:	20000648 	.word	0x20000648

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b094      	sub	sp, #80	; 0x50
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0320 	add.w	r3, r7, #32
 80008e2:	2230      	movs	r2, #48	; 0x30
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f00e ff94 	bl	800f814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <SystemClock_Config+0xcc>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	4a27      	ldr	r2, [pc, #156]	; (80009a4 <SystemClock_Config+0xcc>)
 8000906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090a:	6413      	str	r3, [r2, #64]	; 0x40
 800090c:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <SystemClock_Config+0xcc>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <SystemClock_Config+0xd0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <SystemClock_Config+0xd0>)
 8000922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <SystemClock_Config+0xd0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000942:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000948:	2304      	movs	r3, #4
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800094c:	23a8      	movs	r3, #168	; 0xa8
 800094e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000954:	2307      	movs	r3, #7
 8000956:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	4618      	mov	r0, r3
 800095e:	f006 f985 	bl	8006c6c <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000968:	f000 fe1c 	bl	80015a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2302      	movs	r3, #2
 8000972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000978:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800097c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000982:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2105      	movs	r1, #5
 800098a:	4618      	mov	r0, r3
 800098c:	f006 fbe6 	bl	800715c <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000996:	f000 fe05 	bl	80015a4 <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3750      	adds	r7, #80	; 0x50
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40007000 	.word	0x40007000

080009ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b2:	463b      	mov	r3, r7
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <MX_ADC1_Init+0x98>)
 80009c0:	4a21      	ldr	r2, [pc, #132]	; (8000a48 <MX_ADC1_Init+0x9c>)
 80009c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <MX_ADC1_Init+0x98>)
 80009c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_ADC1_Init+0x98>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_ADC1_Init+0x98>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_ADC1_Init+0x98>)
 80009da:	2200      	movs	r2, #0
 80009dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_ADC1_Init+0x98>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_ADC1_Init+0x98>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_ADC1_Init+0x98>)
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <MX_ADC1_Init+0xa0>)
 80009f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_ADC1_Init+0x98>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_ADC1_Init+0x98>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_ADC1_Init+0x98>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_ADC1_Init+0x98>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <MX_ADC1_Init+0x98>)
 8000a0e:	f002 fbb7 	bl	8003180 <HAL_ADC_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a18:	f000 fdc4 	bl	80015a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a1c:	2305      	movs	r3, #5
 8000a1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a20:	2301      	movs	r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_ADC1_Init+0x98>)
 8000a2e:	f002 fbeb 	bl	8003208 <HAL_ADC_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a38:	f000 fdb4 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000360 	.word	0x20000360
 8000a48:	40012000 	.word	0x40012000
 8000a4c:	0f000001 	.word	0x0f000001

08000a50 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_CRC_Init+0x20>)
 8000a56:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <MX_CRC_Init+0x24>)
 8000a58:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_CRC_Init+0x20>)
 8000a5c:	f002 fee4 	bl	8003828 <HAL_CRC_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a66:	f000 fd9d 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200003a8 	.word	0x200003a8
 8000a74:	40023000 	.word	0x40023000

08000a78 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000a7e:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <MX_DMA2D_Init+0x60>)
 8000a80:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000aae:	f003 f895 	bl	8003bdc <HAL_DMA2D_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000ab8:	f000 fd74 	bl	80015a4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000abc:	2101      	movs	r1, #1
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000ac0:	f003 fafa 	bl	80040b8 <HAL_DMA2D_ConfigLayer>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000aca:	f000 fd6b 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200003b0 	.word	0x200003b0
 8000ad8:	4002b000 	.word	0x4002b000

08000adc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <MX_I2C3_Init+0x78>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <MX_I2C3_Init+0x7c>)
 8000aea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000afa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000b1a:	f005 fad7 	bl	80060cc <HAL_I2C_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b24:	f000 fd3e 	bl	80015a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4809      	ldr	r0, [pc, #36]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000b2c:	f005 fc12 	bl	8006354 <HAL_I2CEx_ConfigAnalogFilter>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000b36:	f000 fd35 	bl	80015a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000b3e:	f005 fc45 	bl	80063cc <HAL_I2CEx_ConfigDigitalFilter>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b48:	f000 fd2c 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200003f0 	.word	0x200003f0
 8000b54:	40005c00 	.word	0x40005c00
 8000b58:	000186a0 	.word	0x000186a0

08000b5c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08e      	sub	sp, #56	; 0x38
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2234      	movs	r2, #52	; 0x34
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f00e fe53 	bl	800f814 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b6e:	4b39      	ldr	r3, [pc, #228]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000b70:	4a39      	ldr	r2, [pc, #228]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000b72:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b74:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b7a:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b80:	4b34      	ldr	r3, [pc, #208]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b86:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000b8c:	4b31      	ldr	r3, [pc, #196]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000b8e:	2209      	movs	r2, #9
 8000b90:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000b92:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000b98:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000b9a:	221d      	movs	r2, #29
 8000b9c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000ba4:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000ba6:	f240 120d 	movw	r2, #269	; 0x10d
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000bac:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000bae:	f240 1243 	movw	r2, #323	; 0x143
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000bb6:	f240 1217 	movw	r2, #279	; 0x117
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000bbc:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000bbe:	f240 1247 	movw	r2, #327	; 0x147
 8000bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bcc:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bdc:	481d      	ldr	r0, [pc, #116]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000bde:	f005 fc35 	bl	800644c <HAL_LTDC_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000be8:	f000 fcdc 	bl	80015a4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000bf0:	23f0      	movs	r3, #240	; 0xf0
 8000bf2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000bf8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bfc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c02:	23ff      	movs	r3, #255	; 0xff
 8000c04:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c0e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c10:	2307      	movs	r3, #7
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000c14:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000c1a:	23f0      	movs	r3, #240	; 0xf0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000c1e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_LTDC_Init+0xf8>)
 8000c3e:	f005 fd97 	bl	8006770 <HAL_LTDC_ConfigLayer>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000c48:	f000 fcac 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	3738      	adds	r7, #56	; 0x38
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000444 	.word	0x20000444
 8000c58:	40016800 	.word	0x40016800

08000c5c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_SPI5_Init+0x64>)
 8000c62:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <MX_SPI5_Init+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_SPI5_Init+0x64>)
 8000c68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c6c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_SPI5_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_SPI5_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_SPI5_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_SPI5_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_SPI5_Init+0x64>)
 8000c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_SPI5_Init+0x64>)
 8000c90:	2218      	movs	r2, #24
 8000c92:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <MX_SPI5_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_SPI5_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <MX_SPI5_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_SPI5_Init+0x64>)
 8000ca8:	220a      	movs	r2, #10
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_SPI5_Init+0x64>)
 8000cae:	f006 fef8 	bl	8007aa2 <HAL_SPI_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000cb8:	f000 fc74 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200004ec 	.word	0x200004ec
 8000cc4:	40015000 	.word	0x40015000

08000cc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <MX_TIM1_Init+0x98>)
 8000ce6:	4a1f      	ldr	r2, [pc, #124]	; (8000d64 <MX_TIM1_Init+0x9c>)
 8000ce8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <MX_TIM1_Init+0x98>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_TIM1_Init+0x98>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_TIM1_Init+0x98>)
 8000cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_TIM1_Init+0x98>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_TIM1_Init+0x98>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_TIM1_Init+0x98>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d10:	4813      	ldr	r0, [pc, #76]	; (8000d60 <MX_TIM1_Init+0x98>)
 8000d12:	f007 fca5 	bl	8008660 <HAL_TIM_Base_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d1c:	f000 fc42 	bl	80015a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <MX_TIM1_Init+0x98>)
 8000d2e:	f007 fe5f 	bl	80089f0 <HAL_TIM_ConfigClockSource>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d38:	f000 fc34 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d44:	463b      	mov	r3, r7
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_TIM1_Init+0x98>)
 8000d4a:	f008 f87b 	bl	8008e44 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d54:	f000 fc26 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000544 	.word	0x20000544
 8000d64:	40010000 	.word	0x40010000

08000d68 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_UART5_Init+0x4c>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <MX_UART5_Init+0x50>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <MX_UART5_Init+0x4c>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_UART5_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_UART5_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MX_UART5_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_UART5_Init+0x4c>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MX_UART5_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_UART5_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_UART5_Init+0x4c>)
 8000da0:	f008 f8e0 	bl	8008f64 <HAL_UART_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000daa:	f000 fbfb 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000058c 	.word	0x2000058c
 8000db8:	40005000 	.word	0x40005000

08000dbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <MX_USART1_UART_Init+0x50>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000df4:	f008 f8b6 	bl	8008f64 <HAL_UART_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dfe:	f000 fbd1 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200005d0 	.word	0x200005d0
 8000e0c:	40011000 	.word	0x40011000

08000e10 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
 8000e24:	615a      	str	r2, [r3, #20]
 8000e26:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <MX_FMC_Init+0x98>)
 8000e2a:	4a20      	ldr	r2, [pc, #128]	; (8000eac <MX_FMC_Init+0x9c>)
 8000e2c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <MX_FMC_Init+0x98>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000e34:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <MX_FMC_Init+0x98>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <MX_FMC_Init+0x98>)
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <MX_FMC_Init+0x98>)
 8000e42:	2210      	movs	r2, #16
 8000e44:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <MX_FMC_Init+0x98>)
 8000e48:	2240      	movs	r2, #64	; 0x40
 8000e4a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <MX_FMC_Init+0x98>)
 8000e4e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000e52:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <MX_FMC_Init+0x98>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <MX_FMC_Init+0x98>)
 8000e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e60:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_FMC_Init+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MX_FMC_Init+0x98>)
 8000e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e74:	2307      	movs	r3, #7
 8000e76:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000e80:	2303      	movs	r3, #3
 8000e82:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_FMC_Init+0x98>)
 8000e92:	f006 fd75 	bl	8007980 <HAL_SDRAM_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000e9c:	f000 fb82 	bl	80015a4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ea0:	bf00      	nop
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000614 	.word	0x20000614
 8000eac:	a0000140 	.word	0xa0000140

08000eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
 8000eca:	4b84      	ldr	r3, [pc, #528]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a83      	ldr	r2, [pc, #524]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b81      	ldr	r3, [pc, #516]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	623b      	str	r3, [r7, #32]
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	4b7d      	ldr	r3, [pc, #500]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a7c      	ldr	r2, [pc, #496]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b7a      	ldr	r3, [pc, #488]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	61fb      	str	r3, [r7, #28]
 8000efc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
 8000f02:	4b76      	ldr	r3, [pc, #472]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a75      	ldr	r2, [pc, #468]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f08:	f043 0320 	orr.w	r3, r3, #32
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b73      	ldr	r3, [pc, #460]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0320 	and.w	r3, r3, #32
 8000f16:	61bb      	str	r3, [r7, #24]
 8000f18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	4b6f      	ldr	r3, [pc, #444]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a6e      	ldr	r2, [pc, #440]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b6c      	ldr	r3, [pc, #432]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b68      	ldr	r3, [pc, #416]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a67      	ldr	r2, [pc, #412]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b65      	ldr	r3, [pc, #404]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b61      	ldr	r3, [pc, #388]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a60      	ldr	r2, [pc, #384]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b5e      	ldr	r3, [pc, #376]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	4b5a      	ldr	r3, [pc, #360]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a59      	ldr	r2, [pc, #356]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b57      	ldr	r3, [pc, #348]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b53      	ldr	r3, [pc, #332]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a52      	ldr	r2, [pc, #328]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b50      	ldr	r3, [pc, #320]	; (80010dc <MX_GPIO_Init+0x22c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_BLUE_1_Pin|LED_YELLOW_2_Pin|LED_GREEN_3_Pin|LED_RED_4_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	213c      	movs	r1, #60	; 0x3c
 8000faa:	484d      	ldr	r0, [pc, #308]	; (80010e0 <MX_GPIO_Init+0x230>)
 8000fac:	f003 fc6a 	bl	8004884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2116      	movs	r1, #22
 8000fb4:	484b      	ldr	r0, [pc, #300]	; (80010e4 <MX_GPIO_Init+0x234>)
 8000fb6:	f003 fc65 	bl	8004884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	484a      	ldr	r0, [pc, #296]	; (80010e8 <MX_GPIO_Init+0x238>)
 8000fc0:	f003 fc60 	bl	8004884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000fca:	4848      	ldr	r0, [pc, #288]	; (80010ec <MX_GPIO_Init+0x23c>)
 8000fcc:	f003 fc5a 	bl	8004884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000fd6:	4846      	ldr	r0, [pc, #280]	; (80010f0 <MX_GPIO_Init+0x240>)
 8000fd8:	f003 fc54 	bl	8004884 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_1_Pin LED_YELLOW_2_Pin LED_GREEN_3_Pin LED_RED_4_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_1_Pin|LED_YELLOW_2_Pin|LED_GREEN_3_Pin|LED_RED_4_Pin;
 8000fdc:	233c      	movs	r3, #60	; 0x3c
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	483b      	ldr	r0, [pc, #236]	; (80010e0 <MX_GPIO_Init+0x230>)
 8000ff4:	f003 f98e 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000ff8:	2316      	movs	r3, #22
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	4619      	mov	r1, r3
 800100e:	4835      	ldr	r0, [pc, #212]	; (80010e4 <MX_GPIO_Init+0x234>)
 8001010:	f003 f980 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001014:	f248 0307 	movw	r3, #32775	; 0x8007
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800101a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001028:	4619      	mov	r1, r3
 800102a:	482f      	ldr	r0, [pc, #188]	; (80010e8 <MX_GPIO_Init+0x238>)
 800102c:	f003 f972 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	4619      	mov	r1, r3
 8001046:	4828      	ldr	r0, [pc, #160]	; (80010e8 <MX_GPIO_Init+0x238>)
 8001048:	f003 f964 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800104c:	2320      	movs	r3, #32
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001050:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	4820      	ldr	r0, [pc, #128]	; (80010e4 <MX_GPIO_Init+0x234>)
 8001062:	f003 f957 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001066:	2304      	movs	r3, #4
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106a:	2300      	movs	r3, #0
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	481e      	ldr	r0, [pc, #120]	; (80010f4 <MX_GPIO_Init+0x244>)
 800107a:	f003 f94b 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800107e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001084:	2300      	movs	r3, #0
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	4816      	ldr	r0, [pc, #88]	; (80010ec <MX_GPIO_Init+0x23c>)
 8001094:	f003 f93e 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001098:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ae:	4619      	mov	r1, r3
 80010b0:	480e      	ldr	r0, [pc, #56]	; (80010ec <MX_GPIO_Init+0x23c>)
 80010b2:	f003 f92f 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80010b6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	4619      	mov	r1, r3
 80010ce:	4808      	ldr	r0, [pc, #32]	; (80010f0 <MX_GPIO_Init+0x240>)
 80010d0:	f003 f920 	bl	8004314 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010d4:	bf00      	nop
 80010d6:	3738      	adds	r7, #56	; 0x38
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020c00 	.word	0x40020c00
 80010f0:	40021800 	.word	0x40021800
 80010f4:	40020400 	.word	0x40020400

080010f8 <apaga_leds>:

/* USER CODE BEGIN 4 */
void apaga_leds(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2104      	movs	r1, #4
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <apaga_leds+0x30>)
 8001102:	f003 fbbf 	bl	8004884 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2108      	movs	r1, #8
 800110a:	4807      	ldr	r0, [pc, #28]	; (8001128 <apaga_leds+0x30>)
 800110c:	f003 fbba 	bl	8004884 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2110      	movs	r1, #16
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <apaga_leds+0x30>)
 8001116:	f003 fbb5 	bl	8004884 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2120      	movs	r1, #32
 800111e:	4802      	ldr	r0, [pc, #8]	; (8001128 <apaga_leds+0x30>)
 8001120:	f003 fbb0 	bl	8004884 <HAL_GPIO_WritePin>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40021000 	.word	0x40021000

0800112c <ExecutionTime_task>:
void ExecutionTime_task(void *pvParameters)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    //#define configuse_newlib_reentrant 0
	/*##-1- LCD Initialization #################################################*/
	/* Initialize the LCD */
	BSP_LCD_Init();
 8001134:	f000 fbf4 	bl	8001920 <BSP_LCD_Init>

	/* Layer2 Init */
	BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 8001138:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800113c:	2001      	movs	r0, #1
 800113e:	f000 fc71 	bl	8001a24 <BSP_LCD_LayerDefaultInit>
	/* Set Foreground Layer */
	BSP_LCD_SelectLayer(1);
 8001142:	2001      	movs	r0, #1
 8001144:	f000 fcd2 	bl	8001aec <BSP_LCD_SelectLayer>
	/* Clear the LCD */
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 fd7c 	bl	8001c48 <BSP_LCD_Clear>
	BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	2001      	movs	r0, #1
 8001156:	f000 fd17 	bl	8001b88 <BSP_LCD_SetColorKeying>
	BSP_LCD_SetLayerVisible(1, DISABLE);
 800115a:	2100      	movs	r1, #0
 800115c:	2001      	movs	r0, #1
 800115e:	f000 fcd5 	bl	8001b0c <BSP_LCD_SetLayerVisible>

	/* Layer1 Init */
	BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8001162:	496f      	ldr	r1, [pc, #444]	; (8001320 <ExecutionTime_task+0x1f4>)
 8001164:	2000      	movs	r0, #0
 8001166:	f000 fc5d 	bl	8001a24 <BSP_LCD_LayerDefaultInit>

	/* Set Foreground Layer */
	BSP_LCD_SelectLayer(0);
 800116a:	2000      	movs	r0, #0
 800116c:	f000 fcbe 	bl	8001aec <BSP_LCD_SelectLayer>

	/* Enable The LCD */
	BSP_LCD_DisplayOn();
 8001170:	f000 fe94 	bl	8001e9c <BSP_LCD_DisplayOn>

	/* Clear the LCD */
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 fd66 	bl	8001c48 <BSP_LCD_Clear>

	BSP_LCD_SetFont(&Font20);
 800117c:	4869      	ldr	r0, [pc, #420]	; (8001324 <ExecutionTime_task+0x1f8>)
 800117e:	f000 fd49 	bl	8001c14 <BSP_LCD_SetFont>

	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - (27*2), (uint8_t*)"Execution Time:", CENTER_MODE);
 8001182:	f000 fc43 	bl	8001a0c <BSP_LCD_GetYSize>
 8001186:	4603      	mov	r3, r0
 8001188:	085b      	lsrs	r3, r3, #1
 800118a:	b29b      	uxth	r3, r3
 800118c:	3b36      	subs	r3, #54	; 0x36
 800118e:	b299      	uxth	r1, r3
 8001190:	2301      	movs	r3, #1
 8001192:	4a65      	ldr	r2, [pc, #404]	; (8001328 <ExecutionTime_task+0x1fc>)
 8001194:	2000      	movs	r0, #0
 8001196:	f000 fdc3 	bl	8001d20 <BSP_LCD_DisplayStringAt>

		/* Clear the LCD */
		//BSP_LCD_Clear(LCD_COLOR_WHITE);

		/* Set Touchscreen Demo description */
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800119a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800119e:	f000 fd07 	bl	8001bb0 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80011a2:	f04f 30ff 	mov.w	r0, #4294967295
 80011a6:	f000 fd1b 	bl	8001be0 <BSP_LCD_SetBackColor>

		//BSP_LCD_SetFont(&Font12);
		if(cont_sec <= 9){
 80011aa:	4b60      	ldr	r3, [pc, #384]	; (800132c <ExecutionTime_task+0x200>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b09      	cmp	r3, #9
 80011b0:	d809      	bhi.n	80011c6 <ExecutionTime_task+0x9a>
			sec[0] = '0';
 80011b2:	4b5f      	ldr	r3, [pc, #380]	; (8001330 <ExecutionTime_task+0x204>)
 80011b4:	2230      	movs	r2, #48	; 0x30
 80011b6:	701a      	strb	r2, [r3, #0]
			sec[1] = (char)cont_sec + '0';
 80011b8:	4b5c      	ldr	r3, [pc, #368]	; (800132c <ExecutionTime_task+0x200>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	3330      	adds	r3, #48	; 0x30
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b5b      	ldr	r3, [pc, #364]	; (8001330 <ExecutionTime_task+0x204>)
 80011c2:	705a      	strb	r2, [r3, #1]
 80011c4:	e0c9      	b.n	800135a <ExecutionTime_task+0x22e>
		}
		else if((cont_sec > 9) && (cont_sec <= 59)){
 80011c6:	4b59      	ldr	r3, [pc, #356]	; (800132c <ExecutionTime_task+0x200>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b09      	cmp	r3, #9
 80011cc:	d921      	bls.n	8001212 <ExecutionTime_task+0xe6>
 80011ce:	4b57      	ldr	r3, [pc, #348]	; (800132c <ExecutionTime_task+0x200>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b3b      	cmp	r3, #59	; 0x3b
 80011d4:	d81d      	bhi.n	8001212 <ExecutionTime_task+0xe6>
			uint8_t aux1 = cont_sec / 10;
 80011d6:	4b55      	ldr	r3, [pc, #340]	; (800132c <ExecutionTime_task+0x200>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	4a56      	ldr	r2, [pc, #344]	; (8001334 <ExecutionTime_task+0x208>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	08db      	lsrs	r3, r3, #3
 80011e2:	73fb      	strb	r3, [r7, #15]
			uint8_t aux2 = cont_sec - (aux1 * 10);
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	461a      	mov	r2, r3
 80011e8:	0152      	lsls	r2, r2, #5
 80011ea:	1ad2      	subs	r2, r2, r3
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b4d      	ldr	r3, [pc, #308]	; (800132c <ExecutionTime_task+0x200>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	73bb      	strb	r3, [r7, #14]
			sec[0] = (char)aux1 + '0';
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	3330      	adds	r3, #48	; 0x30
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b4b      	ldr	r3, [pc, #300]	; (8001330 <ExecutionTime_task+0x204>)
 8001204:	701a      	strb	r2, [r3, #0]
			sec[1] = (char)aux2 + '0';
 8001206:	7bbb      	ldrb	r3, [r7, #14]
 8001208:	3330      	adds	r3, #48	; 0x30
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b48      	ldr	r3, [pc, #288]	; (8001330 <ExecutionTime_task+0x204>)
 800120e:	705a      	strb	r2, [r3, #1]
		else if((cont_sec > 9) && (cont_sec <= 59)){
 8001210:	e0a3      	b.n	800135a <ExecutionTime_task+0x22e>
		}
		else{ // cont_sec == 60
			sec[0] = '0';
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <ExecutionTime_task+0x204>)
 8001214:	2230      	movs	r2, #48	; 0x30
 8001216:	701a      	strb	r2, [r3, #0]
			sec[1] = '0';
 8001218:	4b45      	ldr	r3, [pc, #276]	; (8001330 <ExecutionTime_task+0x204>)
 800121a:	2230      	movs	r2, #48	; 0x30
 800121c:	705a      	strb	r2, [r3, #1]
			cont_sec = 0;
 800121e:	4b43      	ldr	r3, [pc, #268]	; (800132c <ExecutionTime_task+0x200>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]

			cont_min++;
 8001224:	4b44      	ldr	r3, [pc, #272]	; (8001338 <ExecutionTime_task+0x20c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b42      	ldr	r3, [pc, #264]	; (8001338 <ExecutionTime_task+0x20c>)
 800122e:	701a      	strb	r2, [r3, #0]

			if(cont_min <= 9){
 8001230:	4b41      	ldr	r3, [pc, #260]	; (8001338 <ExecutionTime_task+0x20c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b09      	cmp	r3, #9
 8001236:	d809      	bhi.n	800124c <ExecutionTime_task+0x120>
				min[0] = '0';
 8001238:	4b40      	ldr	r3, [pc, #256]	; (800133c <ExecutionTime_task+0x210>)
 800123a:	2230      	movs	r2, #48	; 0x30
 800123c:	701a      	strb	r2, [r3, #0]
				min[1] = (char)cont_min + '0';
 800123e:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <ExecutionTime_task+0x20c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	3330      	adds	r3, #48	; 0x30
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b3d      	ldr	r3, [pc, #244]	; (800133c <ExecutionTime_task+0x210>)
 8001248:	705a      	strb	r2, [r3, #1]
 800124a:	e086      	b.n	800135a <ExecutionTime_task+0x22e>
			}
			else if((cont_min > 9) && (cont_min <= 59)){
 800124c:	4b3a      	ldr	r3, [pc, #232]	; (8001338 <ExecutionTime_task+0x20c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b09      	cmp	r3, #9
 8001252:	d921      	bls.n	8001298 <ExecutionTime_task+0x16c>
 8001254:	4b38      	ldr	r3, [pc, #224]	; (8001338 <ExecutionTime_task+0x20c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b3b      	cmp	r3, #59	; 0x3b
 800125a:	d81d      	bhi.n	8001298 <ExecutionTime_task+0x16c>
				uint8_t aux1 = cont_min / 10;
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <ExecutionTime_task+0x20c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4a34      	ldr	r2, [pc, #208]	; (8001334 <ExecutionTime_task+0x208>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	737b      	strb	r3, [r7, #13]
				uint8_t aux2 = cont_min - (aux1 * 10);
 800126a:	7b7b      	ldrb	r3, [r7, #13]
 800126c:	461a      	mov	r2, r3
 800126e:	0152      	lsls	r2, r2, #5
 8001270:	1ad2      	subs	r2, r2, r3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <ExecutionTime_task+0x20c>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	733b      	strb	r3, [r7, #12]
				min[0] = (char)aux1 + '0';
 8001282:	7b7b      	ldrb	r3, [r7, #13]
 8001284:	3330      	adds	r3, #48	; 0x30
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b2c      	ldr	r3, [pc, #176]	; (800133c <ExecutionTime_task+0x210>)
 800128a:	701a      	strb	r2, [r3, #0]
				min[1] = (char)aux2 + '0';
 800128c:	7b3b      	ldrb	r3, [r7, #12]
 800128e:	3330      	adds	r3, #48	; 0x30
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b2a      	ldr	r3, [pc, #168]	; (800133c <ExecutionTime_task+0x210>)
 8001294:	705a      	strb	r2, [r3, #1]
			else if((cont_min > 9) && (cont_min <= 59)){
 8001296:	e060      	b.n	800135a <ExecutionTime_task+0x22e>
			}
			else{ // min >= 60
				min[0] = '0';
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <ExecutionTime_task+0x210>)
 800129a:	2230      	movs	r2, #48	; 0x30
 800129c:	701a      	strb	r2, [r3, #0]
				min[1] = '0';
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <ExecutionTime_task+0x210>)
 80012a0:	2230      	movs	r2, #48	; 0x30
 80012a2:	705a      	strb	r2, [r3, #1]
				cont_min = 0;
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <ExecutionTime_task+0x20c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]

				cont_hora++;
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <ExecutionTime_task+0x214>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <ExecutionTime_task+0x214>)
 80012b4:	701a      	strb	r2, [r3, #0]
				if(cont_hora <= 9){
 80012b6:	4b22      	ldr	r3, [pc, #136]	; (8001340 <ExecutionTime_task+0x214>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b09      	cmp	r3, #9
 80012bc:	d809      	bhi.n	80012d2 <ExecutionTime_task+0x1a6>
					hora[0] = '0';
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <ExecutionTime_task+0x218>)
 80012c0:	2230      	movs	r2, #48	; 0x30
 80012c2:	701a      	strb	r2, [r3, #0]
					hora[1] = (char)cont_hora + '0';
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <ExecutionTime_task+0x214>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	3330      	adds	r3, #48	; 0x30
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <ExecutionTime_task+0x218>)
 80012ce:	705a      	strb	r2, [r3, #1]
 80012d0:	e043      	b.n	800135a <ExecutionTime_task+0x22e>
				}
				else if((cont_hora > 9) && (cont_hora < 24)){
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <ExecutionTime_task+0x214>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b09      	cmp	r3, #9
 80012d8:	d936      	bls.n	8001348 <ExecutionTime_task+0x21c>
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <ExecutionTime_task+0x214>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b17      	cmp	r3, #23
 80012e0:	d832      	bhi.n	8001348 <ExecutionTime_task+0x21c>
					uint8_t aux1 = cont_hora / 10;
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <ExecutionTime_task+0x214>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <ExecutionTime_task+0x208>)
 80012e8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ec:	08db      	lsrs	r3, r3, #3
 80012ee:	72fb      	strb	r3, [r7, #11]
					uint8_t aux2 = cont_hora - (aux1 * 10);
 80012f0:	7afb      	ldrb	r3, [r7, #11]
 80012f2:	461a      	mov	r2, r3
 80012f4:	0152      	lsls	r2, r2, #5
 80012f6:	1ad2      	subs	r2, r2, r3
 80012f8:	0092      	lsls	r2, r2, #2
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <ExecutionTime_task+0x214>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4413      	add	r3, r2
 8001306:	72bb      	strb	r3, [r7, #10]
					hora[0] = (char)aux1 + '0';
 8001308:	7afb      	ldrb	r3, [r7, #11]
 800130a:	3330      	adds	r3, #48	; 0x30
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <ExecutionTime_task+0x218>)
 8001310:	701a      	strb	r2, [r3, #0]
					hora[1] = (char)aux2 + '0';
 8001312:	7abb      	ldrb	r3, [r7, #10]
 8001314:	3330      	adds	r3, #48	; 0x30
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <ExecutionTime_task+0x218>)
 800131a:	705a      	strb	r2, [r3, #1]
				else if((cont_hora > 9) && (cont_hora < 24)){
 800131c:	e01d      	b.n	800135a <ExecutionTime_task+0x22e>
 800131e:	bf00      	nop
 8001320:	d0130000 	.word	0xd0130000
 8001324:	20000050 	.word	0x20000050
 8001328:	0800fa60 	.word	0x0800fa60
 800132c:	20000654 	.word	0x20000654
 8001330:	20000038 	.word	0x20000038
 8001334:	cccccccd 	.word	0xcccccccd
 8001338:	20000655 	.word	0x20000655
 800133c:	2000003c 	.word	0x2000003c
 8001340:	20000656 	.word	0x20000656
 8001344:	20000040 	.word	0x20000040
				}
				else{ // cont_hora == 24
					cont_hora = 0;
 8001348:	4b53      	ldr	r3, [pc, #332]	; (8001498 <ExecutionTime_task+0x36c>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
					hora[0] = '0';
 800134e:	4b53      	ldr	r3, [pc, #332]	; (800149c <ExecutionTime_task+0x370>)
 8001350:	2230      	movs	r2, #48	; 0x30
 8001352:	701a      	strb	r2, [r3, #0]
					hora[1] = '0';
 8001354:	4b51      	ldr	r3, [pc, #324]	; (800149c <ExecutionTime_task+0x370>)
 8001356:	2230      	movs	r2, #48	; 0x30
 8001358:	705a      	strb	r2, [r3, #1]
				}
			}
		}

		uint8_t dosPuntos = 58; // 58 = ':' en código ASCII.
 800135a:	233a      	movs	r3, #58	; 0x3a
 800135c:	727b      	strb	r3, [r7, #9]
		char dosPuntosChar = (char)dosPuntos;
 800135e:	7a7b      	ldrb	r3, [r7, #9]
 8001360:	723b      	strb	r3, [r7, #8]

//		BSP_LCD_SetFont(&Font20);
//
//		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - (27*2), (uint8_t*)"Execution Time:", CENTER_MODE);

		BSP_LCD_SetFont(&Font24);
 8001362:	484f      	ldr	r0, [pc, #316]	; (80014a0 <ExecutionTime_task+0x374>)
 8001364:	f000 fc56 	bl	8001c14 <BSP_LCD_SetFont>

		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2 - (14*4), BSP_LCD_GetYSize()/2, hora[0]);
 8001368:	f000 fb44 	bl	80019f4 <BSP_LCD_GetXSize>
 800136c:	4603      	mov	r3, r0
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	b29b      	uxth	r3, r3
 8001372:	3b38      	subs	r3, #56	; 0x38
 8001374:	b29c      	uxth	r4, r3
 8001376:	f000 fb49 	bl	8001a0c <BSP_LCD_GetYSize>
 800137a:	4603      	mov	r3, r0
 800137c:	085b      	lsrs	r3, r3, #1
 800137e:	b29b      	uxth	r3, r3
 8001380:	4a46      	ldr	r2, [pc, #280]	; (800149c <ExecutionTime_task+0x370>)
 8001382:	7812      	ldrb	r2, [r2, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	4620      	mov	r0, r4
 8001388:	f000 fc86 	bl	8001c98 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2 - (14*3), BSP_LCD_GetYSize()/2, hora[1]);
 800138c:	f000 fb32 	bl	80019f4 <BSP_LCD_GetXSize>
 8001390:	4603      	mov	r3, r0
 8001392:	085b      	lsrs	r3, r3, #1
 8001394:	b29b      	uxth	r3, r3
 8001396:	3b2a      	subs	r3, #42	; 0x2a
 8001398:	b29c      	uxth	r4, r3
 800139a:	f000 fb37 	bl	8001a0c <BSP_LCD_GetYSize>
 800139e:	4603      	mov	r3, r0
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4a3d      	ldr	r2, [pc, #244]	; (800149c <ExecutionTime_task+0x370>)
 80013a6:	7852      	ldrb	r2, [r2, #1]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4620      	mov	r0, r4
 80013ac:	f000 fc74 	bl	8001c98 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2 - (14*2), BSP_LCD_GetYSize()/2, dosPuntosChar);
 80013b0:	f000 fb20 	bl	80019f4 <BSP_LCD_GetXSize>
 80013b4:	4603      	mov	r3, r0
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	3b1c      	subs	r3, #28
 80013bc:	b29c      	uxth	r4, r3
 80013be:	f000 fb25 	bl	8001a0c <BSP_LCD_GetYSize>
 80013c2:	4603      	mov	r3, r0
 80013c4:	085b      	lsrs	r3, r3, #1
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	7a3a      	ldrb	r2, [r7, #8]
 80013ca:	4619      	mov	r1, r3
 80013cc:	4620      	mov	r0, r4
 80013ce:	f000 fc63 	bl	8001c98 <BSP_LCD_DisplayChar>

		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2 - 14, BSP_LCD_GetYSize()/2, min[0]);
 80013d2:	f000 fb0f 	bl	80019f4 <BSP_LCD_GetXSize>
 80013d6:	4603      	mov	r3, r0
 80013d8:	085b      	lsrs	r3, r3, #1
 80013da:	b29b      	uxth	r3, r3
 80013dc:	3b0e      	subs	r3, #14
 80013de:	b29c      	uxth	r4, r3
 80013e0:	f000 fb14 	bl	8001a0c <BSP_LCD_GetYSize>
 80013e4:	4603      	mov	r3, r0
 80013e6:	085b      	lsrs	r3, r3, #1
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4a2e      	ldr	r2, [pc, #184]	; (80014a4 <ExecutionTime_task+0x378>)
 80013ec:	7812      	ldrb	r2, [r2, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	4620      	mov	r0, r4
 80013f2:	f000 fc51 	bl	8001c98 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2, min[1]);
 80013f6:	f000 fafd 	bl	80019f4 <BSP_LCD_GetXSize>
 80013fa:	4603      	mov	r3, r0
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	b29c      	uxth	r4, r3
 8001400:	f000 fb04 	bl	8001a0c <BSP_LCD_GetYSize>
 8001404:	4603      	mov	r3, r0
 8001406:	085b      	lsrs	r3, r3, #1
 8001408:	b29b      	uxth	r3, r3
 800140a:	4a26      	ldr	r2, [pc, #152]	; (80014a4 <ExecutionTime_task+0x378>)
 800140c:	7852      	ldrb	r2, [r2, #1]
 800140e:	4619      	mov	r1, r3
 8001410:	4620      	mov	r0, r4
 8001412:	f000 fc41 	bl	8001c98 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2 + 14, BSP_LCD_GetYSize()/2, dosPuntosChar);
 8001416:	f000 faed 	bl	80019f4 <BSP_LCD_GetXSize>
 800141a:	4603      	mov	r3, r0
 800141c:	085b      	lsrs	r3, r3, #1
 800141e:	b29b      	uxth	r3, r3
 8001420:	330e      	adds	r3, #14
 8001422:	b29c      	uxth	r4, r3
 8001424:	f000 faf2 	bl	8001a0c <BSP_LCD_GetYSize>
 8001428:	4603      	mov	r3, r0
 800142a:	085b      	lsrs	r3, r3, #1
 800142c:	b29b      	uxth	r3, r3
 800142e:	7a3a      	ldrb	r2, [r7, #8]
 8001430:	4619      	mov	r1, r3
 8001432:	4620      	mov	r0, r4
 8001434:	f000 fc30 	bl	8001c98 <BSP_LCD_DisplayChar>

		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2 + (14*2), BSP_LCD_GetYSize()/2, sec[0]);
 8001438:	f000 fadc 	bl	80019f4 <BSP_LCD_GetXSize>
 800143c:	4603      	mov	r3, r0
 800143e:	085b      	lsrs	r3, r3, #1
 8001440:	b29b      	uxth	r3, r3
 8001442:	331c      	adds	r3, #28
 8001444:	b29c      	uxth	r4, r3
 8001446:	f000 fae1 	bl	8001a0c <BSP_LCD_GetYSize>
 800144a:	4603      	mov	r3, r0
 800144c:	085b      	lsrs	r3, r3, #1
 800144e:	b29b      	uxth	r3, r3
 8001450:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <ExecutionTime_task+0x37c>)
 8001452:	7812      	ldrb	r2, [r2, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	4620      	mov	r0, r4
 8001458:	f000 fc1e 	bl	8001c98 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2 + (14*3), BSP_LCD_GetYSize()/2, sec[1]);
 800145c:	f000 faca 	bl	80019f4 <BSP_LCD_GetXSize>
 8001460:	4603      	mov	r3, r0
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	b29b      	uxth	r3, r3
 8001466:	332a      	adds	r3, #42	; 0x2a
 8001468:	b29c      	uxth	r4, r3
 800146a:	f000 facf 	bl	8001a0c <BSP_LCD_GetYSize>
 800146e:	4603      	mov	r3, r0
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	b29b      	uxth	r3, r3
 8001474:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <ExecutionTime_task+0x37c>)
 8001476:	7852      	ldrb	r2, [r2, #1]
 8001478:	4619      	mov	r1, r3
 800147a:	4620      	mov	r0, r4
 800147c:	f000 fc0c 	bl	8001c98 <BSP_LCD_DisplayChar>

		cont_sec++;
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <ExecutionTime_task+0x380>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <ExecutionTime_task+0x380>)
 800148a:	701a      	strb	r2, [r3, #0]
		vTaskDelay(1000);// Retraso 1s, que son 1000 ticks de reloj
 800148c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001490:	f00a feea 	bl	800c268 <vTaskDelay>
	{
 8001494:	e681      	b.n	800119a <ExecutionTime_task+0x6e>
 8001496:	bf00      	nop
 8001498:	20000656 	.word	0x20000656
 800149c:	20000040 	.word	0x20000040
 80014a0:	20000048 	.word	0x20000048
 80014a4:	2000003c 	.word	0x2000003c
 80014a8:	20000038 	.word	0x20000038
 80014ac:	20000654 	.word	0x20000654

080014b0 <Sequence_task>:
	}
}
void Sequence_task(void *pvParameters)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    #define configuse_newlib_reentrant 1

	while(1)
	{
		//vTaskDelay(1500/portTICK_PERIOD_MS);
		vTaskDelay(1500);
 80014b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80014bc:	f00a fed4 	bl	800c268 <vTaskDelay>

        //#define configuse_newlib_reentrant 1

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2104      	movs	r1, #4
 80014c4:	4812      	ldr	r0, [pc, #72]	; (8001510 <Sequence_task+0x60>)
 80014c6:	f003 f9dd 	bl	8004884 <HAL_GPIO_WritePin>

		//vTaskDelay(1500/portTICK_PERIOD_MS);
		vTaskDelay(1500);
 80014ca:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80014ce:	f00a fecb 	bl	800c268 <vTaskDelay>

        //#define configuse_newlib_reentrant 1

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	2108      	movs	r1, #8
 80014d6:	480e      	ldr	r0, [pc, #56]	; (8001510 <Sequence_task+0x60>)
 80014d8:	f003 f9d4 	bl	8004884 <HAL_GPIO_WritePin>

		//vTaskDelay(1500/portTICK_PERIOD_MS);
		vTaskDelay(1500);
 80014dc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80014e0:	f00a fec2 	bl	800c268 <vTaskDelay>

        //#define configuse_newlib_reentrant 1

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2110      	movs	r1, #16
 80014e8:	4809      	ldr	r0, [pc, #36]	; (8001510 <Sequence_task+0x60>)
 80014ea:	f003 f9cb 	bl	8004884 <HAL_GPIO_WritePin>

		//vTaskDelay(1500/portTICK_PERIOD_MS);
		vTaskDelay(1500);
 80014ee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80014f2:	f00a feb9 	bl	800c268 <vTaskDelay>

        //#define configuse_newlib_reentrant 1

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	2120      	movs	r1, #32
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <Sequence_task+0x60>)
 80014fc:	f003 f9c2 	bl	8004884 <HAL_GPIO_WritePin>

		//vTaskDelay(1500/portTICK_PERIOD_MS);
		vTaskDelay(1500);
 8001500:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001504:	f00a feb0 	bl	800c268 <vTaskDelay>
		apaga_leds();
 8001508:	f7ff fdf6 	bl	80010f8 <apaga_leds>
		vTaskDelay(1500);
 800150c:	e7d4      	b.n	80014b8 <Sequence_task+0x8>
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af02      	add	r7, sp, #8
 800151a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800151c:	f00d fe2a 	bl	800f174 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //CREACION DE TAREAS CON ASIGNACION DE MEMORIA DINAMICA
	  taskENTER_CRITICAL();  // Entrar en la zona crítica
 8001520:	f009 fe18 	bl	800b154 <vPortEnterCritical>
	  // Crear tarea TASK1
	  xTaskCreate(	(TaskFunction_t )ExecutionTime_task,	//Funcion de la Tarea a ejecutar
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <StartDefaultTask+0x50>)
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	2300      	movs	r3, #0
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2300      	movs	r3, #0
 800152e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001532:	490d      	ldr	r1, [pc, #52]	; (8001568 <StartDefaultTask+0x54>)
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <StartDefaultTask+0x58>)
 8001536:	f00a fcd0 	bl	800beda <xTaskCreate>
	  			(const char*    )"ExecutionTimeTask",		//Nombre de la Tarea, propositos de Depuracion
	  			(uint16_t       )2048+1024,					//Pila de Memoria a usar en esta Tarea
	  			(void*          )NULL,						//Ningun apuntero a parametros
	  			(UBaseType_t    )0,							//Prioridad Normal de la Tarea
	  			(TaskHandle_t*  )&ExecutionTime_Handler);	// ID declarado de esta Tarea
	  xTaskCreate(	(TaskFunction_t )Sequence_task,	        //Funcion de la Tarea a ejecutar
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <StartDefaultTask+0x5c>)
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	2300      	movs	r3, #0
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2300      	movs	r3, #0
 8001544:	2280      	movs	r2, #128	; 0x80
 8001546:	490b      	ldr	r1, [pc, #44]	; (8001574 <StartDefaultTask+0x60>)
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <StartDefaultTask+0x64>)
 800154a:	f00a fcc6 	bl	800beda <xTaskCreate>
	  			(const char*    )"Sequence_LEDS",		    //Nombre de la Tarea, propositos de Depuracion
	  			(uint16_t       )128,					    //Pila de Memoria a usar en esta Tarea
	  			(void*          )NULL,						//Ningun apuntero a parametros
	  			(UBaseType_t    )0,							//Prioridad Normal de la Tarea
	  			(TaskHandle_t*  )&SequenceTask_Handler);	// ID declarado de esta Tarea
	  vTaskDelete(defaultTaskHandle); //Borrar esta tarea
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <StartDefaultTask+0x68>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f00a fdf8 	bl	800c148 <vTaskDelete>
	  taskEXIT_CRITICAL();            //Salir en la zona crítica
 8001558:	f009 fe2c 	bl	800b1b4 <vPortExitCritical>
	  osDelay(1);
 800155c:	2001      	movs	r0, #1
 800155e:	f009 f940 	bl	800a7e2 <osDelay>
	  taskENTER_CRITICAL();  // Entrar en la zona crítica
 8001562:	e7dd      	b.n	8001520 <StartDefaultTask+0xc>
 8001564:	2000064c 	.word	0x2000064c
 8001568:	0800fa70 	.word	0x0800fa70
 800156c:	0800112d 	.word	0x0800112d
 8001570:	20000650 	.word	0x20000650
 8001574:	0800fa84 	.word	0x0800fa84
 8001578:	080014b1 	.word	0x080014b1
 800157c:	20000648 	.word	0x20000648

08001580 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001592:	f001 fdb1 	bl	80030f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40001000 	.word	0x40001000

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ac:	e7fe      	b.n	80015ac <Error_Handler+0x8>
	...

080015b0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80015b4:	4819      	ldr	r0, [pc, #100]	; (800161c <SPIx_Init+0x6c>)
 80015b6:	f006 ff14 	bl	80083e2 <HAL_SPI_GetState>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d12b      	bne.n	8001618 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <SPIx_Init+0x6c>)
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <SPIx_Init+0x70>)
 80015c4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <SPIx_Init+0x6c>)
 80015c8:	2218      	movs	r2, #24
 80015ca:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <SPIx_Init+0x6c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <SPIx_Init+0x6c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <SPIx_Init+0x6c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <SPIx_Init+0x6c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <SPIx_Init+0x6c>)
 80015e6:	2207      	movs	r2, #7
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <SPIx_Init+0x6c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <SPIx_Init+0x6c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <SPIx_Init+0x6c>)
 80015f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <SPIx_Init+0x6c>)
 8001600:	2200      	movs	r2, #0
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SPIx_Init+0x6c>)
 8001606:	f44f 7282 	mov.w	r2, #260	; 0x104
 800160a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800160c:	4803      	ldr	r0, [pc, #12]	; (800161c <SPIx_Init+0x6c>)
 800160e:	f000 f853 	bl	80016b8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001612:	4802      	ldr	r0, [pc, #8]	; (800161c <SPIx_Init+0x6c>)
 8001614:	f006 fa45 	bl	8007aa2 <HAL_SPI_Init>
  } 
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000658 	.word	0x20000658
 8001620:	40015000 	.word	0x40015000

08001624 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <SPIx_Read+0x38>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f107 0108 	add.w	r1, r7, #8
 800163e:	4808      	ldr	r0, [pc, #32]	; (8001660 <SPIx_Read+0x3c>)
 8001640:	f006 fc1c 	bl	8007e7c <HAL_SPI_Receive>
 8001644:	4603      	mov	r3, r0
 8001646:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800164e:	f000 f827 	bl	80016a0 <SPIx_Error>
  }
  
  return readvalue;
 8001652:	68bb      	ldr	r3, [r7, #8]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000044 	.word	0x20000044
 8001660:	20000658 	.word	0x20000658

08001664 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <SPIx_Write+0x34>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	1db9      	adds	r1, r7, #6
 8001678:	2201      	movs	r2, #1
 800167a:	4808      	ldr	r0, [pc, #32]	; (800169c <SPIx_Write+0x38>)
 800167c:	f006 fac2 	bl	8007c04 <HAL_SPI_Transmit>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800168a:	f000 f809 	bl	80016a0 <SPIx_Error>
  }
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000044 	.word	0x20000044
 800169c:	20000658 	.word	0x20000658

080016a0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80016a4:	4803      	ldr	r0, [pc, #12]	; (80016b4 <SPIx_Error+0x14>)
 80016a6:	f006 fa85 	bl	8007bb4 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80016aa:	f7ff ff81 	bl	80015b0 <SPIx_Init>
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000658 	.word	0x20000658

080016b8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <SPIx_MspInit+0x6c>)
 80016c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c8:	4a16      	ldr	r2, [pc, #88]	; (8001724 <SPIx_MspInit+0x6c>)
 80016ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016ce:	6453      	str	r3, [r2, #68]	; 0x44
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <SPIx_MspInit+0x6c>)
 80016d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	4b10      	ldr	r3, [pc, #64]	; (8001724 <SPIx_MspInit+0x6c>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	4a0f      	ldr	r2, [pc, #60]	; (8001724 <SPIx_MspInit+0x6c>)
 80016e6:	f043 0320 	orr.w	r3, r3, #32
 80016ea:	6313      	str	r3, [r2, #48]	; 0x30
 80016ec:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <SPIx_MspInit+0x6c>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	f003 0320 	and.w	r3, r3, #32
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80016f8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001702:	2302      	movs	r3, #2
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001706:	2301      	movs	r3, #1
 8001708:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800170a:	2305      	movs	r3, #5
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <SPIx_MspInit+0x70>)
 8001716:	f002 fdfd 	bl	8004314 <HAL_GPIO_Init>
}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	; 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40021400 	.word	0x40021400

0800172c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001732:	4b36      	ldr	r3, [pc, #216]	; (800180c <LCD_IO_Init+0xe0>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d164      	bne.n	8001804 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800173a:	4b34      	ldr	r3, [pc, #208]	; (800180c <LCD_IO_Init+0xe0>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	4b32      	ldr	r3, [pc, #200]	; (8001810 <LCD_IO_Init+0xe4>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	4a31      	ldr	r2, [pc, #196]	; (8001810 <LCD_IO_Init+0xe4>)
 800174a:	f043 0308 	orr.w	r3, r3, #8
 800174e:	6313      	str	r3, [r2, #48]	; 0x30
 8001750:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <LCD_IO_Init+0xe4>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800175c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001760:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800176a:	2302      	movs	r3, #2
 800176c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	4619      	mov	r1, r3
 8001774:	4827      	ldr	r0, [pc, #156]	; (8001814 <LCD_IO_Init+0xe8>)
 8001776:	f002 fdcd 	bl	8004314 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <LCD_IO_Init+0xe4>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a23      	ldr	r2, [pc, #140]	; (8001810 <LCD_IO_Init+0xe4>)
 8001784:	f043 0308 	orr.w	r3, r3, #8
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <LCD_IO_Init+0xe4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4619      	mov	r1, r3
 80017ae:	4819      	ldr	r0, [pc, #100]	; (8001814 <LCD_IO_Init+0xe8>)
 80017b0:	f002 fdb0 	bl	8004314 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <LCD_IO_Init+0xe4>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	4a14      	ldr	r2, [pc, #80]	; (8001810 <LCD_IO_Init+0xe4>)
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	6313      	str	r3, [r2, #48]	; 0x30
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <LCD_IO_Init+0xe4>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80017d0:	2304      	movs	r3, #4
 80017d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80017dc:	2302      	movs	r3, #2
 80017de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	480c      	ldr	r0, [pc, #48]	; (8001818 <LCD_IO_Init+0xec>)
 80017e8:	f002 fd94 	bl	8004314 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80017ec:	2200      	movs	r2, #0
 80017ee:	2104      	movs	r1, #4
 80017f0:	4809      	ldr	r0, [pc, #36]	; (8001818 <LCD_IO_Init+0xec>)
 80017f2:	f003 f847 	bl	8004884 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80017f6:	2201      	movs	r2, #1
 80017f8:	2104      	movs	r1, #4
 80017fa:	4807      	ldr	r0, [pc, #28]	; (8001818 <LCD_IO_Init+0xec>)
 80017fc:	f003 f842 	bl	8004884 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001800:	f7ff fed6 	bl	80015b0 <SPIx_Init>
  }
}
 8001804:	bf00      	nop
 8001806:	3720      	adds	r7, #32
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200006b0 	.word	0x200006b0
 8001810:	40023800 	.word	0x40023800
 8001814:	40020c00 	.word	0x40020c00
 8001818:	40020800 	.word	0x40020800

0800181c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001826:	2201      	movs	r2, #1
 8001828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182c:	480a      	ldr	r0, [pc, #40]	; (8001858 <LCD_IO_WriteData+0x3c>)
 800182e:	f003 f829 	bl	8004884 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001832:	2200      	movs	r2, #0
 8001834:	2104      	movs	r1, #4
 8001836:	4809      	ldr	r0, [pc, #36]	; (800185c <LCD_IO_WriteData+0x40>)
 8001838:	f003 f824 	bl	8004884 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff10 	bl	8001664 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001844:	2201      	movs	r2, #1
 8001846:	2104      	movs	r1, #4
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <LCD_IO_WriteData+0x40>)
 800184a:	f003 f81b 	bl	8004884 <HAL_GPIO_WritePin>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40020c00 	.word	0x40020c00
 800185c:	40020800 	.word	0x40020800

08001860 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001870:	480a      	ldr	r0, [pc, #40]	; (800189c <LCD_IO_WriteReg+0x3c>)
 8001872:	f003 f807 	bl	8004884 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001876:	2200      	movs	r2, #0
 8001878:	2104      	movs	r1, #4
 800187a:	4809      	ldr	r0, [pc, #36]	; (80018a0 <LCD_IO_WriteReg+0x40>)
 800187c:	f003 f802 	bl	8004884 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	b29b      	uxth	r3, r3
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff feed 	bl	8001664 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800188a:	2201      	movs	r2, #1
 800188c:	2104      	movs	r1, #4
 800188e:	4804      	ldr	r0, [pc, #16]	; (80018a0 <LCD_IO_WriteReg+0x40>)
 8001890:	f002 fff8 	bl	8004884 <HAL_GPIO_WritePin>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40020c00 	.word	0x40020c00
 80018a0:	40020800 	.word	0x40020800

080018a4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	460a      	mov	r2, r1
 80018ae:	80fb      	strh	r3, [r7, #6]
 80018b0:	4613      	mov	r3, r2
 80018b2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80018b8:	2200      	movs	r2, #0
 80018ba:	2104      	movs	r1, #4
 80018bc:	4810      	ldr	r0, [pc, #64]	; (8001900 <LCD_IO_ReadData+0x5c>)
 80018be:	f002 ffe1 	bl	8004884 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c8:	480e      	ldr	r0, [pc, #56]	; (8001904 <LCD_IO_ReadData+0x60>)
 80018ca:	f002 ffdb 	bl	8004884 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fec7 	bl	8001664 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80018d6:	797b      	ldrb	r3, [r7, #5]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fea3 	bl	8001624 <SPIx_Read>
 80018de:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80018e0:	2201      	movs	r2, #1
 80018e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018e6:	4807      	ldr	r0, [pc, #28]	; (8001904 <LCD_IO_ReadData+0x60>)
 80018e8:	f002 ffcc 	bl	8004884 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80018ec:	2201      	movs	r2, #1
 80018ee:	2104      	movs	r1, #4
 80018f0:	4803      	ldr	r0, [pc, #12]	; (8001900 <LCD_IO_ReadData+0x5c>)
 80018f2:	f002 ffc7 	bl	8004884 <HAL_GPIO_WritePin>
  
  return readvalue;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40020800 	.word	0x40020800
 8001904:	40020c00 	.word	0x40020c00

08001908 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f001 fc11 	bl	8003138 <HAL_Delay>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001924:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <BSP_LCD_Init+0xbc>)
 8001926:	4a2e      	ldr	r2, [pc, #184]	; (80019e0 <BSP_LCD_Init+0xc0>)
 8001928:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800192a:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <BSP_LCD_Init+0xbc>)
 800192c:	2209      	movs	r2, #9
 800192e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001930:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <BSP_LCD_Init+0xbc>)
 8001932:	2201      	movs	r2, #1
 8001934:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001936:	4b29      	ldr	r3, [pc, #164]	; (80019dc <BSP_LCD_Init+0xbc>)
 8001938:	221d      	movs	r2, #29
 800193a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800193c:	4b27      	ldr	r3, [pc, #156]	; (80019dc <BSP_LCD_Init+0xbc>)
 800193e:	2203      	movs	r2, #3
 8001940:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <BSP_LCD_Init+0xbc>)
 8001944:	f240 120d 	movw	r2, #269	; 0x10d
 8001948:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <BSP_LCD_Init+0xbc>)
 800194c:	f240 1243 	movw	r2, #323	; 0x143
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001952:	4b22      	ldr	r3, [pc, #136]	; (80019dc <BSP_LCD_Init+0xbc>)
 8001954:	f240 1217 	movw	r2, #279	; 0x117
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <BSP_LCD_Init+0xbc>)
 800195c:	f240 1247 	movw	r2, #327	; 0x147
 8001960:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <BSP_LCD_Init+0xbc>)
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800196a:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <BSP_LCD_Init+0xbc>)
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <BSP_LCD_Init+0xbc>)
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <BSP_LCD_Init+0xc4>)
 800197c:	2208      	movs	r2, #8
 800197e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <BSP_LCD_Init+0xc4>)
 8001982:	22c0      	movs	r2, #192	; 0xc0
 8001984:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <BSP_LCD_Init+0xc4>)
 8001988:	2204      	movs	r2, #4
 800198a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <BSP_LCD_Init+0xc4>)
 800198e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001994:	4813      	ldr	r0, [pc, #76]	; (80019e4 <BSP_LCD_Init+0xc4>)
 8001996:	f005 fe33 	bl	8007600 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <BSP_LCD_Init+0xbc>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <BSP_LCD_Init+0xbc>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <BSP_LCD_Init+0xbc>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <BSP_LCD_Init+0xbc>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80019b2:	f000 fa83 	bl	8001ebc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80019b6:	4809      	ldr	r0, [pc, #36]	; (80019dc <BSP_LCD_Init+0xbc>)
 80019b8:	f004 fd48 	bl	800644c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <BSP_LCD_Init+0xc8>)
 80019be:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <BSP_LCD_Init+0xcc>)
 80019c0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <BSP_LCD_Init+0xc8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80019ca:	f000 fc65 	bl	8002298 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80019ce:	4808      	ldr	r0, [pc, #32]	; (80019f0 <BSP_LCD_Init+0xd0>)
 80019d0:	f000 f920 	bl	8001c14 <BSP_LCD_SetFont>

  return LCD_OK;
 80019d4:	2300      	movs	r3, #0
}  
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200006b4 	.word	0x200006b4
 80019e0:	40016800 	.word	0x40016800
 80019e4:	2000079c 	.word	0x2000079c
 80019e8:	200007e8 	.word	0x200007e8
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000048 	.word	0x20000048

080019f4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <BSP_LCD_GetXSize+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	4798      	blx	r3
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200007e8 	.word	0x200007e8

08001a0c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <BSP_LCD_GetYSize+0x14>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	4798      	blx	r3
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200007e8 	.word	0x200007e8

08001a24 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b090      	sub	sp, #64	; 0x40
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001a34:	f7ff ffde 	bl	80019f4 <BSP_LCD_GetXSize>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001a40:	f7ff ffe4 	bl	8001a0c <BSP_LCD_GetYSize>
 8001a44:	4603      	mov	r3, r0
 8001a46:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001a50:	23ff      	movs	r3, #255	; 0xff
 8001a52:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001a6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001a70:	2307      	movs	r3, #7
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001a74:	f7ff ffbe 	bl	80019f4 <BSP_LCD_GetXSize>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001a7c:	f7ff ffc6 	bl	8001a0c <BSP_LCD_GetYSize>
 8001a80:	4603      	mov	r3, r0
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001a84:	88fa      	ldrh	r2, [r7, #6]
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4814      	ldr	r0, [pc, #80]	; (8001ae0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001a8e:	f004 fe6f 	bl	8006770 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001a92:	88fa      	ldrh	r2, [r7, #6]
 8001a94:	4913      	ldr	r1, [pc, #76]	; (8001ae4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001aa8:	88fa      	ldrh	r2, [r7, #6]
 8001aaa:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3308      	adds	r3, #8
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001aba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001abc:	88fa      	ldrh	r2, [r7, #6]
 8001abe:	4909      	ldr	r1, [pc, #36]	; (8001ae4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001ace:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001ad2:	f004 ff09 	bl	80068e8 <HAL_LTDC_EnableDither>
}
 8001ad6:	bf00      	nop
 8001ad8:	3740      	adds	r7, #64	; 0x40
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200006b4 	.word	0x200006b4
 8001ae4:	200007d0 	.word	0x200007d0
 8001ae8:	20000048 	.word	0x20000048

08001aec <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <BSP_LCD_SelectLayer+0x1c>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	200007cc 	.word	0x200007cc

08001b0c <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d112      	bne.n	8001b44 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <BSP_LCD_SetLayerVisible+0x78>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	01db      	lsls	r3, r3, #7
 8001b28:	4413      	add	r3, r2
 8001b2a:	3384      	adds	r3, #132	; 0x84
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <BSP_LCD_SetLayerVisible+0x78>)
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	4611      	mov	r1, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	01d2      	lsls	r2, r2, #7
 8001b38:	440a      	add	r2, r1
 8001b3a:	3284      	adds	r2, #132	; 0x84
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e011      	b.n	8001b68 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <BSP_LCD_SetLayerVisible+0x78>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	01db      	lsls	r3, r3, #7
 8001b4e:	4413      	add	r3, r2
 8001b50:	3384      	adds	r3, #132	; 0x84
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <BSP_LCD_SetLayerVisible+0x78>)
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	01d2      	lsls	r2, r2, #7
 8001b5e:	440a      	add	r2, r1
 8001b60:	3284      	adds	r2, #132	; 0x84
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <BSP_LCD_SetLayerVisible+0x78>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <BSP_LCD_SetLayerVisible+0x78>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	200006b4 	.word	0x200006b4

08001b88 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6839      	ldr	r1, [r7, #0]
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <BSP_LCD_SetColorKeying+0x24>)
 8001b98:	f004 fe28 	bl	80067ec <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	4803      	ldr	r0, [pc, #12]	; (8001bac <BSP_LCD_SetColorKeying+0x24>)
 8001ba0:	f004 fe68 	bl	8006874 <HAL_LTDC_EnableColorKeying>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200006b4 	.word	0x200006b4

08001bb0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <BSP_LCD_SetTextColor+0x28>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4907      	ldr	r1, [pc, #28]	; (8001bdc <BSP_LCD_SetTextColor+0x2c>)
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	601a      	str	r2, [r3, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	200007cc 	.word	0x200007cc
 8001bdc:	200007d0 	.word	0x200007d0

08001be0 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <BSP_LCD_SetBackColor+0x2c>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4908      	ldr	r1, [pc, #32]	; (8001c10 <BSP_LCD_SetBackColor+0x30>)
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	601a      	str	r2, [r3, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	200007cc 	.word	0x200007cc
 8001c10:	200007d0 	.word	0x200007d0

08001c14 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <BSP_LCD_SetFont+0x2c>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4908      	ldr	r1, [pc, #32]	; (8001c44 <BSP_LCD_SetFont+0x30>)
 8001c22:	4613      	mov	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	601a      	str	r2, [r3, #0]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	200007cc 	.word	0x200007cc
 8001c44:	200007d0 	.word	0x200007d0

08001c48 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <BSP_LCD_Clear+0x48>)
 8001c52:	681c      	ldr	r4, [r3, #0]
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <BSP_LCD_Clear+0x48>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <BSP_LCD_Clear+0x4c>)
 8001c5a:	2134      	movs	r1, #52	; 0x34
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	335c      	adds	r3, #92	; 0x5c
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	461e      	mov	r6, r3
 8001c68:	f7ff fec4 	bl	80019f4 <BSP_LCD_GetXSize>
 8001c6c:	4605      	mov	r5, r0
 8001c6e:	f7ff fecd 	bl	8001a0c <BSP_LCD_GetYSize>
 8001c72:	4602      	mov	r2, r0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	462a      	mov	r2, r5
 8001c80:	4631      	mov	r1, r6
 8001c82:	4620      	mov	r0, r4
 8001c84:	f000 fad0 	bl	8002228 <FillBuffer>
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c90:	200007cc 	.word	0x200007cc
 8001c94:	200006b4 	.word	0x200006b4

08001c98 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	80bb      	strh	r3, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <BSP_LCD_DisplayChar+0x80>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	491b      	ldr	r1, [pc, #108]	; (8001d1c <BSP_LCD_DisplayChar+0x84>)
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	3308      	adds	r3, #8
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6819      	ldr	r1, [r3, #0]
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <BSP_LCD_DisplayChar+0x80>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4c14      	ldr	r4, [pc, #80]	; (8001d1c <BSP_LCD_DisplayChar+0x84>)
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4423      	add	r3, r4
 8001cd6:	3308      	adds	r3, #8
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001cdc:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <BSP_LCD_DisplayChar+0x80>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4c0d      	ldr	r4, [pc, #52]	; (8001d1c <BSP_LCD_DisplayChar+0x84>)
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4423      	add	r3, r4
 8001cf0:	3308      	adds	r3, #8
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	889b      	ldrh	r3, [r3, #4]
 8001cf6:	3307      	adds	r3, #7
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	da00      	bge.n	8001cfe <BSP_LCD_DisplayChar+0x66>
 8001cfc:	3307      	adds	r3, #7
 8001cfe:	10db      	asrs	r3, r3, #3
 8001d00:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001d04:	18ca      	adds	r2, r1, r3
 8001d06:	88b9      	ldrh	r1, [r7, #4]
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f9d2 	bl	80020b4 <DrawChar>
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd90      	pop	{r4, r7, pc}
 8001d18:	200007cc 	.word	0x200007cc
 8001d1c:	200007d0 	.word	0x200007d0

08001d20 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001d20:	b5b0      	push	{r4, r5, r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60ba      	str	r2, [r7, #8]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	81fb      	strh	r3, [r7, #14]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	81bb      	strh	r3, [r7, #12]
 8001d32:	4613      	mov	r3, r2
 8001d34:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001d36:	2301      	movs	r3, #1
 8001d38:	83fb      	strh	r3, [r7, #30]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001d4a:	e002      	b.n	8001d52 <BSP_LCD_DisplayStringAt+0x32>
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	617a      	str	r2, [r7, #20]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f6      	bne.n	8001d4c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001d5e:	f7ff fe49 	bl	80019f4 <BSP_LCD_GetXSize>
 8001d62:	4601      	mov	r1, r0
 8001d64:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <BSP_LCD_DisplayStringAt+0x174>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	484b      	ldr	r0, [pc, #300]	; (8001e98 <BSP_LCD_DisplayStringAt+0x178>)
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4403      	add	r3, r0
 8001d74:	3308      	adds	r3, #8
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	889b      	ldrh	r3, [r3, #4]
 8001d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d7e:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d01c      	beq.n	8001dc0 <BSP_LCD_DisplayStringAt+0xa0>
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	dc33      	bgt.n	8001df2 <BSP_LCD_DisplayStringAt+0xd2>
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d002      	beq.n	8001d94 <BSP_LCD_DisplayStringAt+0x74>
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d019      	beq.n	8001dc6 <BSP_LCD_DisplayStringAt+0xa6>
 8001d92:	e02e      	b.n	8001df2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	1ad1      	subs	r1, r2, r3
 8001d9a:	4b3e      	ldr	r3, [pc, #248]	; (8001e94 <BSP_LCD_DisplayStringAt+0x174>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	483e      	ldr	r0, [pc, #248]	; (8001e98 <BSP_LCD_DisplayStringAt+0x178>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4403      	add	r3, r0
 8001daa:	3308      	adds	r3, #8
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	889b      	ldrh	r3, [r3, #4]
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	085b      	lsrs	r3, r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	89fb      	ldrh	r3, [r7, #14]
 8001dba:	4413      	add	r3, r2
 8001dbc:	83fb      	strh	r3, [r7, #30]
      break;
 8001dbe:	e01b      	b.n	8001df8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8001dc0:	89fb      	ldrh	r3, [r7, #14]
 8001dc2:	83fb      	strh	r3, [r7, #30]
      break;
 8001dc4:	e018      	b.n	8001df8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	b299      	uxth	r1, r3
 8001dce:	4b31      	ldr	r3, [pc, #196]	; (8001e94 <BSP_LCD_DisplayStringAt+0x174>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4831      	ldr	r0, [pc, #196]	; (8001e98 <BSP_LCD_DisplayStringAt+0x178>)
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4403      	add	r3, r0
 8001dde:	3308      	adds	r3, #8
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	889b      	ldrh	r3, [r3, #4]
 8001de4:	fb11 f303 	smulbb	r3, r1, r3
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	4413      	add	r3, r2
 8001dee:	83fb      	strh	r3, [r7, #30]
      break;
 8001df0:	e002      	b.n	8001df8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8001df2:	89fb      	ldrh	r3, [r7, #14]
 8001df4:	83fb      	strh	r3, [r7, #30]
      break;
 8001df6:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001df8:	e01a      	b.n	8001e30 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	89b9      	ldrh	r1, [r7, #12]
 8001e00:	8bfb      	ldrh	r3, [r7, #30]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff48 	bl	8001c98 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001e08:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <BSP_LCD_DisplayStringAt+0x174>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4922      	ldr	r1, [pc, #136]	; (8001e98 <BSP_LCD_DisplayStringAt+0x178>)
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	3308      	adds	r3, #8
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	889a      	ldrh	r2, [r3, #4]
 8001e1e:	8bfb      	ldrh	r3, [r7, #30]
 8001e20:	4413      	add	r3, r2
 8001e22:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
    i++;
 8001e2a:	8bbb      	ldrh	r3, [r7, #28]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf14      	ite	ne
 8001e38:	2301      	movne	r3, #1
 8001e3a:	2300      	moveq	r3, #0
 8001e3c:	b2dc      	uxtb	r4, r3
 8001e3e:	f7ff fdd9 	bl	80019f4 <BSP_LCD_GetXSize>
 8001e42:	8bb9      	ldrh	r1, [r7, #28]
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <BSP_LCD_DisplayStringAt+0x174>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4d13      	ldr	r5, [pc, #76]	; (8001e98 <BSP_LCD_DisplayStringAt+0x178>)
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	442b      	add	r3, r5
 8001e54:	3308      	adds	r3, #8
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	889b      	ldrh	r3, [r3, #4]
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	1ac3      	subs	r3, r0, r3
 8001e60:	b299      	uxth	r1, r3
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <BSP_LCD_DisplayStringAt+0x174>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	480c      	ldr	r0, [pc, #48]	; (8001e98 <BSP_LCD_DisplayStringAt+0x178>)
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4403      	add	r3, r0
 8001e72:	3308      	adds	r3, #8
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	889b      	ldrh	r3, [r3, #4]
 8001e78:	4299      	cmp	r1, r3
 8001e7a:	bf2c      	ite	cs
 8001e7c:	2301      	movcs	r3, #1
 8001e7e:	2300      	movcc	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	4023      	ands	r3, r4
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1b7      	bne.n	8001dfa <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8001e8a:	bf00      	nop
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bdb0      	pop	{r4, r5, r7, pc}
 8001e94:	200007cc 	.word	0x200007cc
 8001e98:	200007d0 	.word	0x200007d0

08001e9c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <BSP_LCD_DisplayOn+0x1c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8001eaa:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <BSP_LCD_DisplayOn+0x1c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4798      	blx	r3
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200007e8 	.word	0x200007e8

08001ebc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08e      	sub	sp, #56	; 0x38
 8001ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
 8001ec6:	4b61      	ldr	r3, [pc, #388]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a60      	ldr	r2, [pc, #384]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001ecc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b5e      	ldr	r3, [pc, #376]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eda:	623b      	str	r3, [r7, #32]
 8001edc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	4b5a      	ldr	r3, [pc, #360]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a59      	ldr	r2, [pc, #356]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001ee8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b57      	ldr	r3, [pc, #348]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	4b53      	ldr	r3, [pc, #332]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a52      	ldr	r2, [pc, #328]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b50      	ldr	r3, [pc, #320]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	4b4c      	ldr	r3, [pc, #304]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a4b      	ldr	r2, [pc, #300]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b49      	ldr	r3, [pc, #292]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	4b45      	ldr	r3, [pc, #276]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a44      	ldr	r2, [pc, #272]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b42      	ldr	r3, [pc, #264]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b3e      	ldr	r3, [pc, #248]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a3d      	ldr	r2, [pc, #244]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	4b37      	ldr	r3, [pc, #220]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a36      	ldr	r2, [pc, #216]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f74:	f043 0320 	orr.w	r3, r3, #32
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b34      	ldr	r3, [pc, #208]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	4b30      	ldr	r3, [pc, #192]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a2f      	ldr	r2, [pc, #188]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b2d      	ldr	r3, [pc, #180]	; (800204c <BSP_LCD_MspInit+0x190>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001fa2:	f641 0358 	movw	r3, #6232	; 0x1858
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001fb4:	230e      	movs	r3, #14
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4824      	ldr	r0, [pc, #144]	; (8002050 <BSP_LCD_MspInit+0x194>)
 8001fc0:	f002 f9a8 	bl	8004314 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001fc4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4820      	ldr	r0, [pc, #128]	; (8002054 <BSP_LCD_MspInit+0x198>)
 8001fd2:	f002 f99f 	bl	8004314 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001fd6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	481d      	ldr	r0, [pc, #116]	; (8002058 <BSP_LCD_MspInit+0x19c>)
 8001fe4:	f002 f996 	bl	8004314 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001fe8:	2348      	movs	r3, #72	; 0x48
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	481a      	ldr	r0, [pc, #104]	; (800205c <BSP_LCD_MspInit+0x1a0>)
 8001ff4:	f002 f98e 	bl	8004314 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002002:	4619      	mov	r1, r3
 8002004:	4816      	ldr	r0, [pc, #88]	; (8002060 <BSP_LCD_MspInit+0x1a4>)
 8002006:	f002 f985 	bl	8004314 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800200a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002014:	4619      	mov	r1, r3
 8002016:	4813      	ldr	r0, [pc, #76]	; (8002064 <BSP_LCD_MspInit+0x1a8>)
 8002018:	f002 f97c 	bl	8004314 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800201c:	2303      	movs	r3, #3
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002020:	2309      	movs	r3, #9
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002028:	4619      	mov	r1, r3
 800202a:	480a      	ldr	r0, [pc, #40]	; (8002054 <BSP_LCD_MspInit+0x198>)
 800202c:	f002 f972 	bl	8004314 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002030:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203a:	4619      	mov	r1, r3
 800203c:	4809      	ldr	r0, [pc, #36]	; (8002064 <BSP_LCD_MspInit+0x1a8>)
 800203e:	f002 f969 	bl	8004314 <HAL_GPIO_Init>
}
 8002042:	bf00      	nop
 8002044:	3738      	adds	r7, #56	; 0x38
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40020000 	.word	0x40020000
 8002054:	40020400 	.word	0x40020400
 8002058:	40020800 	.word	0x40020800
 800205c:	40020c00 	.word	0x40020c00
 8002060:	40021400 	.word	0x40021400
 8002064:	40021800 	.word	0x40021800

08002068 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002068:	b5b0      	push	{r4, r5, r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	603a      	str	r2, [r7, #0]
 8002072:	80fb      	strh	r3, [r7, #6]
 8002074:	460b      	mov	r3, r1
 8002076:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <BSP_LCD_DrawPixel+0x44>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <BSP_LCD_DrawPixel+0x48>)
 800207e:	2134      	movs	r1, #52	; 0x34
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	335c      	adds	r3, #92	; 0x5c
 8002088:	681c      	ldr	r4, [r3, #0]
 800208a:	88bd      	ldrh	r5, [r7, #4]
 800208c:	f7ff fcb2 	bl	80019f4 <BSP_LCD_GetXSize>
 8002090:	4603      	mov	r3, r0
 8002092:	fb03 f205 	mul.w	r2, r3, r5
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4423      	add	r3, r4
 800209e:	461a      	mov	r2, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bdb0      	pop	{r4, r5, r7, pc}
 80020ac:	200007cc 	.word	0x200007cc
 80020b0:	200006b4 	.word	0x200006b4

080020b4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	603a      	str	r2, [r7, #0]
 80020be:	80fb      	strh	r3, [r7, #6]
 80020c0:	460b      	mov	r3, r1
 80020c2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <DrawChar+0x16c>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4953      	ldr	r1, [pc, #332]	; (8002224 <DrawChar+0x170>)
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3308      	adds	r3, #8
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	88db      	ldrh	r3, [r3, #6]
 80020e6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80020e8:	4b4d      	ldr	r3, [pc, #308]	; (8002220 <DrawChar+0x16c>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	494d      	ldr	r1, [pc, #308]	; (8002224 <DrawChar+0x170>)
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	3308      	adds	r3, #8
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	889b      	ldrh	r3, [r3, #4]
 80020fe:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002100:	8a3b      	ldrh	r3, [r7, #16]
 8002102:	3307      	adds	r3, #7
 8002104:	2b00      	cmp	r3, #0
 8002106:	da00      	bge.n	800210a <DrawChar+0x56>
 8002108:	3307      	adds	r3, #7
 800210a:	10db      	asrs	r3, r3, #3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	b2da      	uxtb	r2, r3
 8002112:	8a3b      	ldrh	r3, [r7, #16]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	e076      	b.n	800220e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002120:	8a3b      	ldrh	r3, [r7, #16]
 8002122:	3307      	adds	r3, #7
 8002124:	2b00      	cmp	r3, #0
 8002126:	da00      	bge.n	800212a <DrawChar+0x76>
 8002128:	3307      	adds	r3, #7
 800212a:	10db      	asrs	r3, r3, #3
 800212c:	461a      	mov	r2, r3
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fb02 f303 	mul.w	r3, r2, r3
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	4413      	add	r3, r2
 8002138:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800213a:	8a3b      	ldrh	r3, [r7, #16]
 800213c:	3307      	adds	r3, #7
 800213e:	2b00      	cmp	r3, #0
 8002140:	da00      	bge.n	8002144 <DrawChar+0x90>
 8002142:	3307      	adds	r3, #7
 8002144:	10db      	asrs	r3, r3, #3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d002      	beq.n	8002150 <DrawChar+0x9c>
 800214a:	2b02      	cmp	r3, #2
 800214c:	d004      	beq.n	8002158 <DrawChar+0xa4>
 800214e:	e00c      	b.n	800216a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	617b      	str	r3, [r7, #20]
      break;
 8002156:	e016      	b.n	8002186 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	3201      	adds	r2, #1
 8002162:	7812      	ldrb	r2, [r2, #0]
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
      break;
 8002168:	e00d      	b.n	8002186 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	041a      	lsls	r2, r3, #16
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	3301      	adds	r3, #1
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	4313      	orrs	r3, r2
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	3202      	adds	r2, #2
 800217e:	7812      	ldrb	r2, [r2, #0]
 8002180:	4313      	orrs	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
      break;
 8002184:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
 800218a:	e036      	b.n	80021fa <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800218c:	8a3a      	ldrh	r2, [r7, #16]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	1ad2      	subs	r2, r2, r3
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	4413      	add	r3, r2
 8002196:	3b01      	subs	r3, #1
 8002198:	2201      	movs	r2, #1
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d012      	beq.n	80021ce <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	4413      	add	r3, r2
 80021b0:	b298      	uxth	r0, r3
 80021b2:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <DrawChar+0x16c>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	491b      	ldr	r1, [pc, #108]	; (8002224 <DrawChar+0x170>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	88bb      	ldrh	r3, [r7, #4]
 80021c6:	4619      	mov	r1, r3
 80021c8:	f7ff ff4e 	bl	8002068 <BSP_LCD_DrawPixel>
 80021cc:	e012      	b.n	80021f4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	4413      	add	r3, r2
 80021d6:	b298      	uxth	r0, r3
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <DrawChar+0x16c>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4911      	ldr	r1, [pc, #68]	; (8002224 <DrawChar+0x170>)
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	3304      	adds	r3, #4
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	88bb      	ldrh	r3, [r7, #4]
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7ff ff3a 	bl	8002068 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	3301      	adds	r3, #1
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	8a3b      	ldrh	r3, [r7, #16]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d3c4      	bcc.n	800218c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002202:	88bb      	ldrh	r3, [r7, #4]
 8002204:	3301      	adds	r3, #1
 8002206:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	3301      	adds	r3, #1
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	8a7b      	ldrh	r3, [r7, #18]
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	429a      	cmp	r2, r3
 8002214:	d384      	bcc.n	8002120 <DrawChar+0x6c>
  }
}
 8002216:	bf00      	nop
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	200007cc 	.word	0x200007cc
 8002224:	200007d0 	.word	0x200007d0

08002228 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002236:	4b16      	ldr	r3, [pc, #88]	; (8002290 <FillBuffer+0x68>)
 8002238:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800223c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <FillBuffer+0x68>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002244:	4a12      	ldr	r2, [pc, #72]	; (8002290 <FillBuffer+0x68>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <FillBuffer+0x68>)
 800224c:	4a11      	ldr	r2, [pc, #68]	; (8002294 <FillBuffer+0x6c>)
 800224e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002250:	480f      	ldr	r0, [pc, #60]	; (8002290 <FillBuffer+0x68>)
 8002252:	f001 fcc3 	bl	8003bdc <HAL_DMA2D_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d115      	bne.n	8002288 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800225c:	68f9      	ldr	r1, [r7, #12]
 800225e:	480c      	ldr	r0, [pc, #48]	; (8002290 <FillBuffer+0x68>)
 8002260:	f001 ff2a 	bl	80040b8 <HAL_DMA2D_ConfigLayer>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10e      	bne.n	8002288 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69f9      	ldr	r1, [r7, #28]
 8002274:	4806      	ldr	r0, [pc, #24]	; (8002290 <FillBuffer+0x68>)
 8002276:	f001 fcfa 	bl	8003c6e <HAL_DMA2D_Start>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d103      	bne.n	8002288 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002280:	210a      	movs	r1, #10
 8002282:	4803      	ldr	r0, [pc, #12]	; (8002290 <FillBuffer+0x68>)
 8002284:	f001 fd1e 	bl	8003cc4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	2000075c 	.word	0x2000075c
 8002294:	4002b000 	.word	0x4002b000

08002298 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800229c:	4b29      	ldr	r3, [pc, #164]	; (8002344 <BSP_SDRAM_Init+0xac>)
 800229e:	4a2a      	ldr	r2, [pc, #168]	; (8002348 <BSP_SDRAM_Init+0xb0>)
 80022a0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <BSP_SDRAM_Init+0xb4>)
 80022a4:	2202      	movs	r2, #2
 80022a6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80022a8:	4b28      	ldr	r3, [pc, #160]	; (800234c <BSP_SDRAM_Init+0xb4>)
 80022aa:	2207      	movs	r2, #7
 80022ac:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80022ae:	4b27      	ldr	r3, [pc, #156]	; (800234c <BSP_SDRAM_Init+0xb4>)
 80022b0:	2204      	movs	r2, #4
 80022b2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80022b4:	4b25      	ldr	r3, [pc, #148]	; (800234c <BSP_SDRAM_Init+0xb4>)
 80022b6:	2207      	movs	r2, #7
 80022b8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <BSP_SDRAM_Init+0xb4>)
 80022bc:	2202      	movs	r2, #2
 80022be:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80022c0:	4b22      	ldr	r3, [pc, #136]	; (800234c <BSP_SDRAM_Init+0xb4>)
 80022c2:	2202      	movs	r2, #2
 80022c4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80022c6:	4b21      	ldr	r3, [pc, #132]	; (800234c <BSP_SDRAM_Init+0xb4>)
 80022c8:	2202      	movs	r2, #2
 80022ca:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <BSP_SDRAM_Init+0xac>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <BSP_SDRAM_Init+0xac>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <BSP_SDRAM_Init+0xac>)
 80022da:	2204      	movs	r2, #4
 80022dc:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <BSP_SDRAM_Init+0xac>)
 80022e0:	2210      	movs	r2, #16
 80022e2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <BSP_SDRAM_Init+0xac>)
 80022e6:	2240      	movs	r2, #64	; 0x40
 80022e8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <BSP_SDRAM_Init+0xac>)
 80022ec:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80022f0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <BSP_SDRAM_Init+0xac>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <BSP_SDRAM_Init+0xac>)
 80022fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022fe:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002300:	4b10      	ldr	r3, [pc, #64]	; (8002344 <BSP_SDRAM_Init+0xac>)
 8002302:	2200      	movs	r2, #0
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <BSP_SDRAM_Init+0xac>)
 8002308:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800230c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800230e:	2100      	movs	r1, #0
 8002310:	480c      	ldr	r0, [pc, #48]	; (8002344 <BSP_SDRAM_Init+0xac>)
 8002312:	f000 f87f 	bl	8002414 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002316:	490d      	ldr	r1, [pc, #52]	; (800234c <BSP_SDRAM_Init+0xb4>)
 8002318:	480a      	ldr	r0, [pc, #40]	; (8002344 <BSP_SDRAM_Init+0xac>)
 800231a:	f005 fb31 	bl	8007980 <HAL_SDRAM_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <BSP_SDRAM_Init+0xb8>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	e002      	b.n	8002332 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <BSP_SDRAM_Init+0xb8>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002332:	f240 506a 	movw	r0, #1386	; 0x56a
 8002336:	f000 f80d 	bl	8002354 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <BSP_SDRAM_Init+0xb8>)
 800233c:	781b      	ldrb	r3, [r3, #0]
}
 800233e:	4618      	mov	r0, r3
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200007ec 	.word	0x200007ec
 8002348:	a0000140 	.word	0xa0000140
 800234c:	20000820 	.word	0x20000820
 8002350:	20000058 	.word	0x20000058

08002354 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002360:	4b2a      	ldr	r3, [pc, #168]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002366:	4b29      	ldr	r3, [pc, #164]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002368:	2208      	movs	r2, #8
 800236a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800236e:	2201      	movs	r2, #1
 8002370:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800237c:	4923      	ldr	r1, [pc, #140]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800237e:	4824      	ldr	r0, [pc, #144]	; (8002410 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002380:	f005 fb32 	bl	80079e8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002384:	2001      	movs	r0, #1
 8002386:	f000 fed7 	bl	8003138 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800238c:	2202      	movs	r2, #2
 800238e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002390:	4b1e      	ldr	r3, [pc, #120]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002392:	2208      	movs	r2, #8
 8002394:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002398:	2201      	movs	r2, #1
 800239a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80023a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023a6:	4919      	ldr	r1, [pc, #100]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023a8:	4819      	ldr	r0, [pc, #100]	; (8002410 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80023aa:	f005 fb1d 	bl	80079e8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80023ae:	4b17      	ldr	r3, [pc, #92]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023b0:	2203      	movs	r2, #3
 80023b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023b6:	2208      	movs	r2, #8
 80023b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023bc:	2204      	movs	r2, #4
 80023be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80023c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ca:	4910      	ldr	r1, [pc, #64]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023cc:	4810      	ldr	r0, [pc, #64]	; (8002410 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80023ce:	f005 fb0b 	bl	80079e8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80023d2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80023d6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023da:	2204      	movs	r2, #4
 80023dc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023e0:	2208      	movs	r2, #8
 80023e2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4a07      	ldr	r2, [pc, #28]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023ee:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80023f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023f4:	4905      	ldr	r1, [pc, #20]	; (800240c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023f6:	4806      	ldr	r0, [pc, #24]	; (8002410 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80023f8:	f005 faf6 	bl	80079e8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4804      	ldr	r0, [pc, #16]	; (8002410 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002400:	f005 fb27 	bl	8007a52 <HAL_SDRAM_ProgramRefreshRate>
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	2000083c 	.word	0x2000083c
 8002410:	200007ec 	.word	0x200007ec

08002414 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b090      	sub	sp, #64	; 0x40
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80ec 	beq.w	80025fe <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
 800242a:	4b77      	ldr	r3, [pc, #476]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	4a76      	ldr	r2, [pc, #472]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6393      	str	r3, [r2, #56]	; 0x38
 8002436:	4b74      	ldr	r3, [pc, #464]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
 8002446:	4b70      	ldr	r3, [pc, #448]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a6f      	ldr	r2, [pc, #444]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 800244c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b6d      	ldr	r3, [pc, #436]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	623b      	str	r3, [r7, #32]
 8002462:	4b69      	ldr	r3, [pc, #420]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a68      	ldr	r2, [pc, #416]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b66      	ldr	r3, [pc, #408]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	623b      	str	r3, [r7, #32]
 8002478:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	4b62      	ldr	r3, [pc, #392]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a61      	ldr	r2, [pc, #388]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b5f      	ldr	r3, [pc, #380]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	4b5b      	ldr	r3, [pc, #364]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a5a      	ldr	r2, [pc, #360]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 80024a0:	f043 0308 	orr.w	r3, r3, #8
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b58      	ldr	r3, [pc, #352]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	61bb      	str	r3, [r7, #24]
 80024b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	4b54      	ldr	r3, [pc, #336]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a53      	ldr	r2, [pc, #332]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 80024bc:	f043 0310 	orr.w	r3, r3, #16
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b51      	ldr	r3, [pc, #324]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	4b4d      	ldr	r3, [pc, #308]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a4c      	ldr	r2, [pc, #304]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 80024d8:	f043 0320 	orr.w	r3, r3, #32
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b4a      	ldr	r3, [pc, #296]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b46      	ldr	r3, [pc, #280]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a45      	ldr	r2, [pc, #276]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 80024f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b43      	ldr	r3, [pc, #268]	; (8002608 <BSP_SDRAM_MspInit+0x1f4>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800250a:	2302      	movs	r3, #2
 800250c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002512:	230c      	movs	r3, #12
 8002514:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002516:	2360      	movs	r3, #96	; 0x60
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800251a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800251e:	4619      	mov	r1, r3
 8002520:	483a      	ldr	r0, [pc, #232]	; (800260c <BSP_SDRAM_MspInit+0x1f8>)
 8002522:	f001 fef7 	bl	8004314 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002526:	2301      	movs	r3, #1
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800252a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800252e:	4619      	mov	r1, r3
 8002530:	4837      	ldr	r0, [pc, #220]	; (8002610 <BSP_SDRAM_MspInit+0x1fc>)
 8002532:	f001 feef 	bl	8004314 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002536:	f24c 7303 	movw	r3, #50947	; 0xc703
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800253c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002540:	4619      	mov	r1, r3
 8002542:	4834      	ldr	r0, [pc, #208]	; (8002614 <BSP_SDRAM_MspInit+0x200>)
 8002544:	f001 fee6 	bl	8004314 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002548:	f64f 7383 	movw	r3, #65411	; 0xff83
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800254e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002552:	4619      	mov	r1, r3
 8002554:	4830      	ldr	r0, [pc, #192]	; (8002618 <BSP_SDRAM_MspInit+0x204>)
 8002556:	f001 fedd 	bl	8004314 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800255a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002560:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002564:	4619      	mov	r1, r3
 8002566:	482d      	ldr	r0, [pc, #180]	; (800261c <BSP_SDRAM_MspInit+0x208>)
 8002568:	f001 fed4 	bl	8004314 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800256c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002576:	4619      	mov	r1, r3
 8002578:	4829      	ldr	r0, [pc, #164]	; (8002620 <BSP_SDRAM_MspInit+0x20c>)
 800257a:	f001 fecb 	bl	8004314 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800257e:	4b29      	ldr	r3, [pc, #164]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 8002580:	2200      	movs	r2, #0
 8002582:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 8002586:	2280      	movs	r2, #128	; 0x80
 8002588:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800258a:	4b26      	ldr	r3, [pc, #152]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 800258c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002590:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 8002594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002598:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 800259c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025a0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 80025a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025a8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 80025b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025b6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 80025c0:	2203      	movs	r2, #3
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80025c4:	4b17      	ldr	r3, [pc, #92]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80025d0:	4b14      	ldr	r3, [pc, #80]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 80025d2:	4a15      	ldr	r2, [pc, #84]	; (8002628 <BSP_SDRAM_MspInit+0x214>)
 80025d4:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
 80025dc:	4a11      	ldr	r2, [pc, #68]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80025e2:	4810      	ldr	r0, [pc, #64]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 80025e4:	f001 f9ea 	bl	80039bc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80025e8:	480e      	ldr	r0, [pc, #56]	; (8002624 <BSP_SDRAM_MspInit+0x210>)
 80025ea:	f001 f939 	bl	8003860 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	210f      	movs	r1, #15
 80025f2:	2038      	movs	r0, #56	; 0x38
 80025f4:	f001 f8ee 	bl	80037d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80025f8:	2038      	movs	r0, #56	; 0x38
 80025fa:	f001 f907 	bl	800380c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80025fe:	bf00      	nop
 8002600:	3740      	adds	r7, #64	; 0x40
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	40020400 	.word	0x40020400
 8002610:	40020800 	.word	0x40020800
 8002614:	40020c00 	.word	0x40020c00
 8002618:	40021000 	.word	0x40021000
 800261c:	40021400 	.word	0x40021400
 8002620:	40021800 	.word	0x40021800
 8002624:	2000084c 	.word	0x2000084c
 8002628:	40026410 	.word	0x40026410

0800262c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_MspInit+0x54>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	4a11      	ldr	r2, [pc, #68]	; (8002680 <HAL_MspInit+0x54>)
 800263c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002640:	6453      	str	r3, [r2, #68]	; 0x44
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_MspInit+0x54>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_MspInit+0x54>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_MspInit+0x54>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_MspInit+0x54>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	210f      	movs	r1, #15
 800266e:	f06f 0001 	mvn.w	r0, #1
 8002672:	f001 f8af 	bl	80037d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800

08002684 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a17      	ldr	r2, [pc, #92]	; (8002700 <HAL_ADC_MspInit+0x7c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d127      	bne.n	80026f6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <HAL_ADC_MspInit+0x80>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4a15      	ldr	r2, [pc, #84]	; (8002704 <HAL_ADC_MspInit+0x80>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b4:	6453      	str	r3, [r2, #68]	; 0x44
 80026b6:	4b13      	ldr	r3, [pc, #76]	; (8002704 <HAL_ADC_MspInit+0x80>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <HAL_ADC_MspInit+0x80>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a0e      	ldr	r2, [pc, #56]	; (8002704 <HAL_ADC_MspInit+0x80>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <HAL_ADC_MspInit+0x80>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026de:	2320      	movs	r3, #32
 80026e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026e2:	2303      	movs	r3, #3
 80026e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	4619      	mov	r1, r3
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <HAL_ADC_MspInit+0x84>)
 80026f2:	f001 fe0f 	bl	8004314 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026f6:	bf00      	nop
 80026f8:	3728      	adds	r7, #40	; 0x28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40012000 	.word	0x40012000
 8002704:	40023800 	.word	0x40023800
 8002708:	40020000 	.word	0x40020000

0800270c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0b      	ldr	r2, [pc, #44]	; (8002748 <HAL_CRC_MspInit+0x3c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10d      	bne.n	800273a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_CRC_MspInit+0x40>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a09      	ldr	r2, [pc, #36]	; (800274c <HAL_CRC_MspInit+0x40>)
 8002728:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b07      	ldr	r3, [pc, #28]	; (800274c <HAL_CRC_MspInit+0x40>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40023000 	.word	0x40023000
 800274c:	40023800 	.word	0x40023800

08002750 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <HAL_DMA2D_MspInit+0x48>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d115      	bne.n	800278e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_DMA2D_MspInit+0x4c>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a0c      	ldr	r2, [pc, #48]	; (800279c <HAL_DMA2D_MspInit+0x4c>)
 800276c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <HAL_DMA2D_MspInit+0x4c>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2105      	movs	r1, #5
 8002782:	205a      	movs	r0, #90	; 0x5a
 8002784:	f001 f826 	bl	80037d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002788:	205a      	movs	r0, #90	; 0x5a
 800278a:	f001 f83f 	bl	800380c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	4002b000 	.word	0x4002b000
 800279c:	40023800 	.word	0x40023800

080027a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a29      	ldr	r2, [pc, #164]	; (8002864 <HAL_I2C_MspInit+0xc4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d14b      	bne.n	800285a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	4b28      	ldr	r3, [pc, #160]	; (8002868 <HAL_I2C_MspInit+0xc8>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a27      	ldr	r2, [pc, #156]	; (8002868 <HAL_I2C_MspInit+0xc8>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b25      	ldr	r3, [pc, #148]	; (8002868 <HAL_I2C_MspInit+0xc8>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b21      	ldr	r3, [pc, #132]	; (8002868 <HAL_I2C_MspInit+0xc8>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a20      	ldr	r2, [pc, #128]	; (8002868 <HAL_I2C_MspInit+0xc8>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_I2C_MspInit+0xc8>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80027fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002800:	2312      	movs	r3, #18
 8002802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002804:	2301      	movs	r3, #1
 8002806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002808:	2300      	movs	r3, #0
 800280a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800280c:	2304      	movs	r3, #4
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	4619      	mov	r1, r3
 8002816:	4815      	ldr	r0, [pc, #84]	; (800286c <HAL_I2C_MspInit+0xcc>)
 8002818:	f001 fd7c 	bl	8004314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800281c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002822:	2312      	movs	r3, #18
 8002824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002826:	2301      	movs	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800282e:	2304      	movs	r3, #4
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002832:	f107 0314 	add.w	r3, r7, #20
 8002836:	4619      	mov	r1, r3
 8002838:	480d      	ldr	r0, [pc, #52]	; (8002870 <HAL_I2C_MspInit+0xd0>)
 800283a:	f001 fd6b 	bl	8004314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <HAL_I2C_MspInit+0xc8>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a08      	ldr	r2, [pc, #32]	; (8002868 <HAL_I2C_MspInit+0xc8>)
 8002848:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_I2C_MspInit+0xc8>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800285a:	bf00      	nop
 800285c:	3728      	adds	r7, #40	; 0x28
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40005c00 	.word	0x40005c00
 8002868:	40023800 	.word	0x40023800
 800286c:	40020800 	.word	0x40020800
 8002870:	40020000 	.word	0x40020000

08002874 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b09a      	sub	sp, #104	; 0x68
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800288c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002890:	2230      	movs	r2, #48	; 0x30
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f00c ffbd 	bl	800f814 <memset>
  if(hltdc->Instance==LTDC)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a85      	ldr	r2, [pc, #532]	; (8002ab4 <HAL_LTDC_MspInit+0x240>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	f040 8103 	bne.w	8002aac <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80028a6:	2308      	movs	r3, #8
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 90;
 80028aa:	235a      	movs	r3, #90	; 0x5a
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80028ae:	2305      	movs	r3, #5
 80028b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80028b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028b6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028bc:	4618      	mov	r0, r3
 80028be:	f004 fe9f 	bl	8007600 <HAL_RCCEx_PeriphCLKConfig>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80028c8:	f7fe fe6c 	bl	80015a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
 80028d0:	4b79      	ldr	r3, [pc, #484]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 80028d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d4:	4a78      	ldr	r2, [pc, #480]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 80028d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028da:	6453      	str	r3, [r2, #68]	; 0x44
 80028dc:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028e4:	623b      	str	r3, [r7, #32]
 80028e6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	4b72      	ldr	r3, [pc, #456]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	4a71      	ldr	r2, [pc, #452]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 80028f2:	f043 0320 	orr.w	r3, r3, #32
 80028f6:	6313      	str	r3, [r2, #48]	; 0x30
 80028f8:	4b6f      	ldr	r3, [pc, #444]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	4b6b      	ldr	r3, [pc, #428]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	4a6a      	ldr	r2, [pc, #424]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6313      	str	r3, [r2, #48]	; 0x30
 8002914:	4b68      	ldr	r3, [pc, #416]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	4b64      	ldr	r3, [pc, #400]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	4a63      	ldr	r2, [pc, #396]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 800292a:	f043 0302 	orr.w	r3, r3, #2
 800292e:	6313      	str	r3, [r2, #48]	; 0x30
 8002930:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	4b5d      	ldr	r3, [pc, #372]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	4a5c      	ldr	r2, [pc, #368]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 8002946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800294a:	6313      	str	r3, [r2, #48]	; 0x30
 800294c:	4b5a      	ldr	r3, [pc, #360]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	4b56      	ldr	r3, [pc, #344]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	4a55      	ldr	r2, [pc, #340]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 8002962:	f043 0304 	orr.w	r3, r3, #4
 8002966:	6313      	str	r3, [r2, #48]	; 0x30
 8002968:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002974:	2300      	movs	r3, #0
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	4b4f      	ldr	r3, [pc, #316]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	4a4e      	ldr	r2, [pc, #312]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 800297e:	f043 0308 	orr.w	r3, r3, #8
 8002982:	6313      	str	r3, [r2, #48]	; 0x30
 8002984:	4b4c      	ldr	r3, [pc, #304]	; (8002ab8 <HAL_LTDC_MspInit+0x244>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002994:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	2300      	movs	r3, #0
 80029a0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80029a2:	230e      	movs	r3, #14
 80029a4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80029a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029aa:	4619      	mov	r1, r3
 80029ac:	4843      	ldr	r0, [pc, #268]	; (8002abc <HAL_LTDC_MspInit+0x248>)
 80029ae:	f001 fcb1 	bl	8004314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80029b2:	f641 0358 	movw	r3, #6232	; 0x1858
 80029b6:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	2300      	movs	r3, #0
 80029c2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80029c4:	230e      	movs	r3, #14
 80029c6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029cc:	4619      	mov	r1, r3
 80029ce:	483c      	ldr	r0, [pc, #240]	; (8002ac0 <HAL_LTDC_MspInit+0x24c>)
 80029d0:	f001 fca0 	bl	8004314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80029d4:	2303      	movs	r3, #3
 80029d6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	2300      	movs	r3, #0
 80029e2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80029e4:	2309      	movs	r3, #9
 80029e6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029ec:	4619      	mov	r1, r3
 80029ee:	4835      	ldr	r0, [pc, #212]	; (8002ac4 <HAL_LTDC_MspInit+0x250>)
 80029f0:	f001 fc90 	bl	8004314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80029f4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80029f8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a06:	230e      	movs	r3, #14
 8002a08:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a0e:	4619      	mov	r1, r3
 8002a10:	482c      	ldr	r0, [pc, #176]	; (8002ac4 <HAL_LTDC_MspInit+0x250>)
 8002a12:	f001 fc7f 	bl	8004314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002a16:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002a1a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2300      	movs	r3, #0
 8002a26:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a28:	230e      	movs	r3, #14
 8002a2a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a30:	4619      	mov	r1, r3
 8002a32:	4825      	ldr	r0, [pc, #148]	; (8002ac8 <HAL_LTDC_MspInit+0x254>)
 8002a34:	f001 fc6e 	bl	8004314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002a38:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002a3c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a4a:	230e      	movs	r3, #14
 8002a4c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a52:	4619      	mov	r1, r3
 8002a54:	481d      	ldr	r0, [pc, #116]	; (8002acc <HAL_LTDC_MspInit+0x258>)
 8002a56:	f001 fc5d 	bl	8004314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002a5a:	2348      	movs	r3, #72	; 0x48
 8002a5c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a6a:	230e      	movs	r3, #14
 8002a6c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a72:	4619      	mov	r1, r3
 8002a74:	4816      	ldr	r0, [pc, #88]	; (8002ad0 <HAL_LTDC_MspInit+0x25c>)
 8002a76:	f001 fc4d 	bl	8004314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002a7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a7e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002a8c:	2309      	movs	r3, #9
 8002a8e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a94:	4619      	mov	r1, r3
 8002a96:	480c      	ldr	r0, [pc, #48]	; (8002ac8 <HAL_LTDC_MspInit+0x254>)
 8002a98:	f001 fc3c 	bl	8004314 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2105      	movs	r1, #5
 8002aa0:	2058      	movs	r0, #88	; 0x58
 8002aa2:	f000 fe97 	bl	80037d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002aa6:	2058      	movs	r0, #88	; 0x58
 8002aa8:	f000 feb0 	bl	800380c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002aac:	bf00      	nop
 8002aae:	3768      	adds	r7, #104	; 0x68
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40016800 	.word	0x40016800
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40021400 	.word	0x40021400
 8002ac0:	40020000 	.word	0x40020000
 8002ac4:	40020400 	.word	0x40020400
 8002ac8:	40021800 	.word	0x40021800
 8002acc:	40020800 	.word	0x40020800
 8002ad0:	40020c00 	.word	0x40020c00

08002ad4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08a      	sub	sp, #40	; 0x28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a19      	ldr	r2, [pc, #100]	; (8002b58 <HAL_SPI_MspInit+0x84>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d12c      	bne.n	8002b50 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <HAL_SPI_MspInit+0x88>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <HAL_SPI_MspInit+0x88>)
 8002b00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b04:	6453      	str	r3, [r2, #68]	; 0x44
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <HAL_SPI_MspInit+0x88>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_SPI_MspInit+0x88>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a10      	ldr	r2, [pc, #64]	; (8002b5c <HAL_SPI_MspInit+0x88>)
 8002b1c:	f043 0320 	orr.w	r3, r3, #32
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <HAL_SPI_MspInit+0x88>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002b2e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002b40:	2305      	movs	r3, #5
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4805      	ldr	r0, [pc, #20]	; (8002b60 <HAL_SPI_MspInit+0x8c>)
 8002b4c:	f001 fbe2 	bl	8004314 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002b50:	bf00      	nop
 8002b52:	3728      	adds	r7, #40	; 0x28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40015000 	.word	0x40015000
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40021400 	.word	0x40021400

08002b64 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a08      	ldr	r2, [pc, #32]	; (8002b94 <HAL_SPI_MspDeInit+0x30>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10a      	bne.n	8002b8c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <HAL_SPI_MspDeInit+0x34>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <HAL_SPI_MspDeInit+0x34>)
 8002b7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b80:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002b82:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002b86:	4805      	ldr	r0, [pc, #20]	; (8002b9c <HAL_SPI_MspDeInit+0x38>)
 8002b88:	f001 fd70 	bl	800466c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40015000 	.word	0x40015000
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40021400 	.word	0x40021400

08002ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a0b      	ldr	r2, [pc, #44]	; (8002bdc <HAL_TIM_Base_MspInit+0x3c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d10d      	bne.n	8002bce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_TIM_Base_MspInit+0x40>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	4a09      	ldr	r2, [pc, #36]	; (8002be0 <HAL_TIM_Base_MspInit+0x40>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <HAL_TIM_Base_MspInit+0x40>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	40023800 	.word	0x40023800

08002be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08c      	sub	sp, #48	; 0x30
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 031c 	add.w	r3, r7, #28
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a42      	ldr	r2, [pc, #264]	; (8002d0c <HAL_UART_MspInit+0x128>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d14b      	bne.n	8002c9e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_UART_MspInit+0x12c>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a40      	ldr	r2, [pc, #256]	; (8002d10 <HAL_UART_MspInit+0x12c>)
 8002c10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
 8002c16:	4b3e      	ldr	r3, [pc, #248]	; (8002d10 <HAL_UART_MspInit+0x12c>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c1e:	61bb      	str	r3, [r7, #24]
 8002c20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <HAL_UART_MspInit+0x12c>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a39      	ldr	r2, [pc, #228]	; (8002d10 <HAL_UART_MspInit+0x12c>)
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <HAL_UART_MspInit+0x12c>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <HAL_UART_MspInit+0x12c>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4a32      	ldr	r2, [pc, #200]	; (8002d10 <HAL_UART_MspInit+0x12c>)
 8002c48:	f043 0308 	orr.w	r3, r3, #8
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4e:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <HAL_UART_MspInit+0x12c>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c6c:	2308      	movs	r3, #8
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c70:	f107 031c 	add.w	r3, r7, #28
 8002c74:	4619      	mov	r1, r3
 8002c76:	4827      	ldr	r0, [pc, #156]	; (8002d14 <HAL_UART_MspInit+0x130>)
 8002c78:	f001 fb4c 	bl	8004314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c90:	f107 031c 	add.w	r3, r7, #28
 8002c94:	4619      	mov	r1, r3
 8002c96:	4820      	ldr	r0, [pc, #128]	; (8002d18 <HAL_UART_MspInit+0x134>)
 8002c98:	f001 fb3c 	bl	8004314 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c9c:	e031      	b.n	8002d02 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a1e      	ldr	r2, [pc, #120]	; (8002d1c <HAL_UART_MspInit+0x138>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d12c      	bne.n	8002d02 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <HAL_UART_MspInit+0x12c>)
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <HAL_UART_MspInit+0x12c>)
 8002cb2:	f043 0310 	orr.w	r3, r3, #16
 8002cb6:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb8:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <HAL_UART_MspInit+0x12c>)
 8002cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_UART_MspInit+0x12c>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <HAL_UART_MspInit+0x12c>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <HAL_UART_MspInit+0x12c>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002ce0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cf2:	2307      	movs	r3, #7
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf6:	f107 031c 	add.w	r3, r7, #28
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4808      	ldr	r0, [pc, #32]	; (8002d20 <HAL_UART_MspInit+0x13c>)
 8002cfe:	f001 fb09 	bl	8004314 <HAL_GPIO_Init>
}
 8002d02:	bf00      	nop
 8002d04:	3730      	adds	r7, #48	; 0x30
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40005000 	.word	0x40005000
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40020800 	.word	0x40020800
 8002d18:	40020c00 	.word	0x40020c00
 8002d1c:	40011000 	.word	0x40011000
 8002d20:	40020000 	.word	0x40020000

08002d24 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002d38:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <HAL_FMC_MspInit+0x104>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d16f      	bne.n	8002e20 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002d40:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_FMC_MspInit+0x104>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	4b38      	ldr	r3, [pc, #224]	; (8002e2c <HAL_FMC_MspInit+0x108>)
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	4a37      	ldr	r2, [pc, #220]	; (8002e2c <HAL_FMC_MspInit+0x108>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6393      	str	r3, [r2, #56]	; 0x38
 8002d56:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <HAL_FMC_MspInit+0x108>)
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002d62:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002d66:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d74:	230c      	movs	r3, #12
 8002d76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	482c      	ldr	r0, [pc, #176]	; (8002e30 <HAL_FMC_MspInit+0x10c>)
 8002d7e:	f001 fac9 	bl	8004314 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002d82:	2301      	movs	r3, #1
 8002d84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	2302      	movs	r3, #2
 8002d88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d92:	230c      	movs	r3, #12
 8002d94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4826      	ldr	r0, [pc, #152]	; (8002e34 <HAL_FMC_MspInit+0x110>)
 8002d9c:	f001 faba 	bl	8004314 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002da0:	f248 1333 	movw	r3, #33075	; 0x8133
 8002da4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dae:	2303      	movs	r3, #3
 8002db0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002db2:	230c      	movs	r3, #12
 8002db4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	4619      	mov	r1, r3
 8002dba:	481f      	ldr	r0, [pc, #124]	; (8002e38 <HAL_FMC_MspInit+0x114>)
 8002dbc:	f001 faaa 	bl	8004314 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002dc0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002dc4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dd2:	230c      	movs	r3, #12
 8002dd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4818      	ldr	r0, [pc, #96]	; (8002e3c <HAL_FMC_MspInit+0x118>)
 8002ddc:	f001 fa9a 	bl	8004314 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002de0:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002de4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dee:	2303      	movs	r3, #3
 8002df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002df2:	230c      	movs	r3, #12
 8002df4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4811      	ldr	r0, [pc, #68]	; (8002e40 <HAL_FMC_MspInit+0x11c>)
 8002dfc:	f001 fa8a 	bl	8004314 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002e00:	2360      	movs	r3, #96	; 0x60
 8002e02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e04:	2302      	movs	r3, #2
 8002e06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e10:	230c      	movs	r3, #12
 8002e12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	4619      	mov	r1, r3
 8002e18:	480a      	ldr	r0, [pc, #40]	; (8002e44 <HAL_FMC_MspInit+0x120>)
 8002e1a:	f001 fa7b 	bl	8004314 <HAL_GPIO_Init>
 8002e1e:	e000      	b.n	8002e22 <HAL_FMC_MspInit+0xfe>
    return;
 8002e20:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	200008ac 	.word	0x200008ac
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40021400 	.word	0x40021400
 8002e34:	40020800 	.word	0x40020800
 8002e38:	40021800 	.word	0x40021800
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40020c00 	.word	0x40020c00
 8002e44:	40020400 	.word	0x40020400

08002e48 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002e50:	f7ff ff68 	bl	8002d24 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08e      	sub	sp, #56	; 0x38
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	4b33      	ldr	r3, [pc, #204]	; (8002f40 <HAL_InitTick+0xe4>)
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	4a32      	ldr	r2, [pc, #200]	; (8002f40 <HAL_InitTick+0xe4>)
 8002e76:	f043 0310 	orr.w	r3, r3, #16
 8002e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7c:	4b30      	ldr	r3, [pc, #192]	; (8002f40 <HAL_InitTick+0xe4>)
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e88:	f107 0210 	add.w	r2, r7, #16
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f004 fb82 	bl	800759c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ea2:	f004 fb53 	bl	800754c <HAL_RCC_GetPCLK1Freq>
 8002ea6:	6378      	str	r0, [r7, #52]	; 0x34
 8002ea8:	e004      	b.n	8002eb4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002eaa:	f004 fb4f 	bl	800754c <HAL_RCC_GetPCLK1Freq>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb6:	4a23      	ldr	r2, [pc, #140]	; (8002f44 <HAL_InitTick+0xe8>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	0c9b      	lsrs	r3, r3, #18
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ec2:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <HAL_InitTick+0xec>)
 8002ec4:	4a21      	ldr	r2, [pc, #132]	; (8002f4c <HAL_InitTick+0xf0>)
 8002ec6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <HAL_InitTick+0xec>)
 8002eca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ece:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ed0:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <HAL_InitTick+0xec>)
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <HAL_InitTick+0xec>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002edc:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <HAL_InitTick+0xec>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee2:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <HAL_InitTick+0xec>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002ee8:	4817      	ldr	r0, [pc, #92]	; (8002f48 <HAL_InitTick+0xec>)
 8002eea:	f005 fbb9 	bl	8008660 <HAL_TIM_Base_Init>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002ef4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d11b      	bne.n	8002f34 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002efc:	4812      	ldr	r0, [pc, #72]	; (8002f48 <HAL_InitTick+0xec>)
 8002efe:	f005 fbff 	bl	8008700 <HAL_TIM_Base_Start_IT>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002f08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d111      	bne.n	8002f34 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f10:	2036      	movs	r0, #54	; 0x36
 8002f12:	f000 fc7b 	bl	800380c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b0f      	cmp	r3, #15
 8002f1a:	d808      	bhi.n	8002f2e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	2036      	movs	r0, #54	; 0x36
 8002f22:	f000 fc57 	bl	80037d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f26:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <HAL_InitTick+0xf4>)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	e002      	b.n	8002f34 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002f34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3738      	adds	r7, #56	; 0x38
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40023800 	.word	0x40023800
 8002f44:	431bde83 	.word	0x431bde83
 8002f48:	200008b0 	.word	0x200008b0
 8002f4c:	40001000 	.word	0x40001000
 8002f50:	20000060 	.word	0x20000060

08002f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f58:	e7fe      	b.n	8002f58 <NMI_Handler+0x4>

08002f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f5e:	e7fe      	b.n	8002f5e <HardFault_Handler+0x4>

08002f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f64:	e7fe      	b.n	8002f64 <MemManage_Handler+0x4>

08002f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f66:	b480      	push	{r7}
 8002f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f6a:	e7fe      	b.n	8002f6a <BusFault_Handler+0x4>

08002f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <UsageFault_Handler+0x4>

08002f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f84:	4802      	ldr	r0, [pc, #8]	; (8002f90 <TIM6_DAC_IRQHandler+0x10>)
 8002f86:	f005 fc2b 	bl	80087e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	200008b0 	.word	0x200008b0

08002f94 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002f98:	4802      	ldr	r0, [pc, #8]	; (8002fa4 <OTG_HS_IRQHandler+0x10>)
 8002f9a:	f001 fef7 	bl	8004d8c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20004a3c 	.word	0x20004a3c

08002fa8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <LTDC_IRQHandler+0x10>)
 8002fae:	f003 fb1d 	bl	80065ec <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000444 	.word	0x20000444

08002fbc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002fc0:	4802      	ldr	r0, [pc, #8]	; (8002fcc <DMA2D_IRQHandler+0x10>)
 8002fc2:	f000 ff68 	bl	8003e96 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200003b0 	.word	0x200003b0

08002fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fd8:	4a14      	ldr	r2, [pc, #80]	; (800302c <_sbrk+0x5c>)
 8002fda:	4b15      	ldr	r3, [pc, #84]	; (8003030 <_sbrk+0x60>)
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fe4:	4b13      	ldr	r3, [pc, #76]	; (8003034 <_sbrk+0x64>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d102      	bne.n	8002ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <_sbrk+0x64>)
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <_sbrk+0x68>)
 8002ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <_sbrk+0x64>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d207      	bcs.n	8003010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003000:	f00c fbc0 	bl	800f784 <__errno>
 8003004:	4603      	mov	r3, r0
 8003006:	220c      	movs	r2, #12
 8003008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800300a:	f04f 33ff 	mov.w	r3, #4294967295
 800300e:	e009      	b.n	8003024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003010:	4b08      	ldr	r3, [pc, #32]	; (8003034 <_sbrk+0x64>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <_sbrk+0x64>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	4a05      	ldr	r2, [pc, #20]	; (8003034 <_sbrk+0x64>)
 8003020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003022:	68fb      	ldr	r3, [r7, #12]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20030000 	.word	0x20030000
 8003030:	00000400 	.word	0x00000400
 8003034:	200008f8 	.word	0x200008f8
 8003038:	20004d50 	.word	0x20004d50

0800303c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <SystemInit+0x20>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	4a05      	ldr	r2, [pc, #20]	; (800305c <SystemInit+0x20>)
 8003048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800304c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003098 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003064:	480d      	ldr	r0, [pc, #52]	; (800309c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003066:	490e      	ldr	r1, [pc, #56]	; (80030a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003068:	4a0e      	ldr	r2, [pc, #56]	; (80030a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800306a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800306c:	e002      	b.n	8003074 <LoopCopyDataInit>

0800306e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800306e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003072:	3304      	adds	r3, #4

08003074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003078:	d3f9      	bcc.n	800306e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800307a:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800307c:	4c0b      	ldr	r4, [pc, #44]	; (80030ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800307e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003080:	e001      	b.n	8003086 <LoopFillZerobss>

08003082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003084:	3204      	adds	r2, #4

08003086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003088:	d3fb      	bcc.n	8003082 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800308a:	f7ff ffd7 	bl	800303c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800308e:	f00c fb7f 	bl	800f790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003092:	f7fd fbeb 	bl	800086c <main>
  bx  lr    
 8003096:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003098:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800309c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a0:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80030a4:	08012498 	.word	0x08012498
  ldr r2, =_sbss
 80030a8:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80030ac:	20004d50 	.word	0x20004d50

080030b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030b0:	e7fe      	b.n	80030b0 <ADC_IRQHandler>
	...

080030b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030b8:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <HAL_Init+0x40>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a0d      	ldr	r2, [pc, #52]	; (80030f4 <HAL_Init+0x40>)
 80030be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_Init+0x40>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <HAL_Init+0x40>)
 80030ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_Init+0x40>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a07      	ldr	r2, [pc, #28]	; (80030f4 <HAL_Init+0x40>)
 80030d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030dc:	2003      	movs	r0, #3
 80030de:	f000 fb6e 	bl	80037be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030e2:	200f      	movs	r0, #15
 80030e4:	f7ff feba 	bl	8002e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030e8:	f7ff faa0 	bl	800262c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40023c00 	.word	0x40023c00

080030f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_IncTick+0x20>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_IncTick+0x24>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4413      	add	r3, r2
 8003108:	4a04      	ldr	r2, [pc, #16]	; (800311c <HAL_IncTick+0x24>)
 800310a:	6013      	str	r3, [r2, #0]
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	20000064 	.word	0x20000064
 800311c:	200008fc 	.word	0x200008fc

08003120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return uwTick;
 8003124:	4b03      	ldr	r3, [pc, #12]	; (8003134 <HAL_GetTick+0x14>)
 8003126:	681b      	ldr	r3, [r3, #0]
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	200008fc 	.word	0x200008fc

08003138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7ff ffee 	bl	8003120 <HAL_GetTick>
 8003144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d005      	beq.n	800315e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003152:	4b0a      	ldr	r3, [pc, #40]	; (800317c <HAL_Delay+0x44>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800315e:	bf00      	nop
 8003160:	f7ff ffde 	bl	8003120 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	429a      	cmp	r2, r3
 800316e:	d8f7      	bhi.n	8003160 <HAL_Delay+0x28>
  {
  }
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000064 	.word	0x20000064

08003180 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e033      	b.n	80031fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff fa70 	bl	8002684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d118      	bne.n	80031f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031c6:	f023 0302 	bic.w	r3, r3, #2
 80031ca:	f043 0202 	orr.w	r2, r3, #2
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f94a 	bl	800346c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f023 0303 	bic.w	r3, r3, #3
 80031e6:	f043 0201 	orr.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
 80031ee:	e001      	b.n	80031f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1c>
 8003220:	2302      	movs	r3, #2
 8003222:	e113      	b.n	800344c <HAL_ADC_ConfigChannel+0x244>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b09      	cmp	r3, #9
 8003232:	d925      	bls.n	8003280 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68d9      	ldr	r1, [r3, #12]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	3b1e      	subs	r3, #30
 800324a:	2207      	movs	r2, #7
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43da      	mvns	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	400a      	ands	r2, r1
 8003258:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68d9      	ldr	r1, [r3, #12]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	b29b      	uxth	r3, r3
 800326a:	4618      	mov	r0, r3
 800326c:	4603      	mov	r3, r0
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4403      	add	r3, r0
 8003272:	3b1e      	subs	r3, #30
 8003274:	409a      	lsls	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	e022      	b.n	80032c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6919      	ldr	r1, [r3, #16]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	2207      	movs	r2, #7
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	400a      	ands	r2, r1
 80032a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6919      	ldr	r1, [r3, #16]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	4618      	mov	r0, r3
 80032b6:	4603      	mov	r3, r0
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4403      	add	r3, r0
 80032bc:	409a      	lsls	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d824      	bhi.n	8003318 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	3b05      	subs	r3, #5
 80032e0:	221f      	movs	r2, #31
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43da      	mvns	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	400a      	ands	r2, r1
 80032ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4618      	mov	r0, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	3b05      	subs	r3, #5
 800330a:	fa00 f203 	lsl.w	r2, r0, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	635a      	str	r2, [r3, #52]	; 0x34
 8003316:	e04c      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b0c      	cmp	r3, #12
 800331e:	d824      	bhi.n	800336a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	3b23      	subs	r3, #35	; 0x23
 8003332:	221f      	movs	r2, #31
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43da      	mvns	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	400a      	ands	r2, r1
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	4618      	mov	r0, r3
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	3b23      	subs	r3, #35	; 0x23
 800335c:	fa00 f203 	lsl.w	r2, r0, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
 8003368:	e023      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	3b41      	subs	r3, #65	; 0x41
 800337c:	221f      	movs	r2, #31
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	400a      	ands	r2, r1
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	4618      	mov	r0, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	3b41      	subs	r3, #65	; 0x41
 80033a6:	fa00 f203 	lsl.w	r2, r0, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033b2:	4b29      	ldr	r3, [pc, #164]	; (8003458 <HAL_ADC_ConfigChannel+0x250>)
 80033b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a28      	ldr	r2, [pc, #160]	; (800345c <HAL_ADC_ConfigChannel+0x254>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10f      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x1d8>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b12      	cmp	r3, #18
 80033c6:	d10b      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	; (800345c <HAL_ADC_ConfigChannel+0x254>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d12b      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x23a>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1c      	ldr	r2, [pc, #112]	; (8003460 <HAL_ADC_ConfigChannel+0x258>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x1f4>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b11      	cmp	r3, #17
 80033fa:	d122      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a11      	ldr	r2, [pc, #68]	; (8003460 <HAL_ADC_ConfigChannel+0x258>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d111      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800341e:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_ADC_ConfigChannel+0x25c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_ADC_ConfigChannel+0x260>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	0c9a      	lsrs	r2, r3, #18
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003434:	e002      	b.n	800343c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	3b01      	subs	r3, #1
 800343a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f9      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40012300 	.word	0x40012300
 800345c:	40012000 	.word	0x40012000
 8003460:	10000012 	.word	0x10000012
 8003464:	2000005c 	.word	0x2000005c
 8003468:	431bde83 	.word	0x431bde83

0800346c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003474:	4b79      	ldr	r3, [pc, #484]	; (800365c <ADC_Init+0x1f0>)
 8003476:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	431a      	orrs	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	021a      	lsls	r2, r3, #8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6899      	ldr	r1, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	4a58      	ldr	r2, [pc, #352]	; (8003660 <ADC_Init+0x1f4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d022      	beq.n	800354a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003512:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6899      	ldr	r1, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6899      	ldr	r1, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	e00f      	b.n	800356a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003568:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0202 	bic.w	r2, r2, #2
 8003578:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	7e1b      	ldrb	r3, [r3, #24]
 8003584:	005a      	lsls	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01b      	beq.n	80035d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6859      	ldr	r1, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	3b01      	subs	r3, #1
 80035c4:	035a      	lsls	r2, r3, #13
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	e007      	b.n	80035e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	051a      	lsls	r2, r3, #20
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6899      	ldr	r1, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003622:	025a      	lsls	r2, r3, #9
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6899      	ldr	r1, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	029a      	lsls	r2, r3, #10
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	40012300 	.word	0x40012300
 8003660:	0f000001 	.word	0x0f000001

08003664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003680:	4013      	ands	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800368c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003696:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	60d3      	str	r3, [r2, #12]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <__NVIC_GetPriorityGrouping+0x18>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	0a1b      	lsrs	r3, r3, #8
 80036b6:	f003 0307 	and.w	r3, r3, #7
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	db0b      	blt.n	80036f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	f003 021f 	and.w	r2, r3, #31
 80036e0:	4907      	ldr	r1, [pc, #28]	; (8003700 <__NVIC_EnableIRQ+0x38>)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	2001      	movs	r0, #1
 80036ea:	fa00 f202 	lsl.w	r2, r0, r2
 80036ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000e100 	.word	0xe000e100

08003704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	6039      	str	r1, [r7, #0]
 800370e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003714:	2b00      	cmp	r3, #0
 8003716:	db0a      	blt.n	800372e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	490c      	ldr	r1, [pc, #48]	; (8003750 <__NVIC_SetPriority+0x4c>)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	0112      	lsls	r2, r2, #4
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	440b      	add	r3, r1
 8003728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800372c:	e00a      	b.n	8003744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4908      	ldr	r1, [pc, #32]	; (8003754 <__NVIC_SetPriority+0x50>)
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	3b04      	subs	r3, #4
 800373c:	0112      	lsls	r2, r2, #4
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	440b      	add	r3, r1
 8003742:	761a      	strb	r2, [r3, #24]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000e100 	.word	0xe000e100
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f1c3 0307 	rsb	r3, r3, #7
 8003772:	2b04      	cmp	r3, #4
 8003774:	bf28      	it	cs
 8003776:	2304      	movcs	r3, #4
 8003778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3304      	adds	r3, #4
 800377e:	2b06      	cmp	r3, #6
 8003780:	d902      	bls.n	8003788 <NVIC_EncodePriority+0x30>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3b03      	subs	r3, #3
 8003786:	e000      	b.n	800378a <NVIC_EncodePriority+0x32>
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800378c:	f04f 32ff 	mov.w	r2, #4294967295
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43da      	mvns	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	401a      	ands	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a0:	f04f 31ff 	mov.w	r1, #4294967295
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	fa01 f303 	lsl.w	r3, r1, r3
 80037aa:	43d9      	mvns	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b0:	4313      	orrs	r3, r2
         );
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3724      	adds	r7, #36	; 0x24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff ff4c 	bl	8003664 <__NVIC_SetPriorityGrouping>
}
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037e6:	f7ff ff61 	bl	80036ac <__NVIC_GetPriorityGrouping>
 80037ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	6978      	ldr	r0, [r7, #20]
 80037f2:	f7ff ffb1 	bl	8003758 <NVIC_EncodePriority>
 80037f6:	4602      	mov	r2, r0
 80037f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037fc:	4611      	mov	r1, r2
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff ff80 	bl	8003704 <__NVIC_SetPriority>
}
 8003804:	bf00      	nop
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff ff54 	bl	80036c8 <__NVIC_EnableIRQ>
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e00e      	b.n	8003858 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	795b      	ldrb	r3, [r3, #5]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d105      	bne.n	8003850 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fe ff5e 	bl	800270c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800386c:	f7ff fc58 	bl	8003120 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e099      	b.n	80039b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800389c:	e00f      	b.n	80038be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800389e:	f7ff fc3f 	bl	8003120 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b05      	cmp	r3, #5
 80038aa:	d908      	bls.n	80038be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2203      	movs	r2, #3
 80038b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e078      	b.n	80039b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e8      	bne.n	800389e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4b38      	ldr	r3, [pc, #224]	; (80039b8 <HAL_DMA_Init+0x158>)
 80038d8:	4013      	ands	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003902:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	2b04      	cmp	r3, #4
 8003916:	d107      	bne.n	8003928 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003920:	4313      	orrs	r3, r2
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f023 0307 	bic.w	r3, r3, #7
 800393e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	2b04      	cmp	r3, #4
 8003950:	d117      	bne.n	8003982 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00e      	beq.n	8003982 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f8bd 	bl	8003ae4 <DMA_CheckFifoParam>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2240      	movs	r2, #64	; 0x40
 8003974:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800397e:	2301      	movs	r3, #1
 8003980:	e016      	b.n	80039b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f874 	bl	8003a78 <DMA_CalcBaseAndBitshift>
 8003990:	4603      	mov	r3, r0
 8003992:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	223f      	movs	r2, #63	; 0x3f
 800399a:	409a      	lsls	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	f010803f 	.word	0xf010803f

080039bc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e050      	b.n	8003a70 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d101      	bne.n	80039de <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80039da:	2302      	movs	r3, #2
 80039dc:	e048      	b.n	8003a70 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0201 	bic.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2200      	movs	r2, #0
 80039fc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2221      	movs	r2, #33	; 0x21
 8003a1c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f82a 	bl	8003a78 <DMA_CalcBaseAndBitshift>
 8003a24:	4603      	mov	r3, r0
 8003a26:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	223f      	movs	r2, #63	; 0x3f
 8003a52:	409a      	lsls	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	3b10      	subs	r3, #16
 8003a88:	4a14      	ldr	r2, [pc, #80]	; (8003adc <DMA_CalcBaseAndBitshift+0x64>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a92:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <DMA_CalcBaseAndBitshift+0x68>)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d909      	bls.n	8003aba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aae:	f023 0303 	bic.w	r3, r3, #3
 8003ab2:	1d1a      	adds	r2, r3, #4
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ab8:	e007      	b.n	8003aca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ac2:	f023 0303 	bic.w	r3, r3, #3
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	aaaaaaab 	.word	0xaaaaaaab
 8003ae0:	08012480 	.word	0x08012480

08003ae4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d11f      	bne.n	8003b3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d856      	bhi.n	8003bb2 <DMA_CheckFifoParam+0xce>
 8003b04:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <DMA_CheckFifoParam+0x28>)
 8003b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0a:	bf00      	nop
 8003b0c:	08003b1d 	.word	0x08003b1d
 8003b10:	08003b2f 	.word	0x08003b2f
 8003b14:	08003b1d 	.word	0x08003b1d
 8003b18:	08003bb3 	.word	0x08003bb3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d046      	beq.n	8003bb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b2c:	e043      	b.n	8003bb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b36:	d140      	bne.n	8003bba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b3c:	e03d      	b.n	8003bba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b46:	d121      	bne.n	8003b8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d837      	bhi.n	8003bbe <DMA_CheckFifoParam+0xda>
 8003b4e:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <DMA_CheckFifoParam+0x70>)
 8003b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b54:	08003b65 	.word	0x08003b65
 8003b58:	08003b6b 	.word	0x08003b6b
 8003b5c:	08003b65 	.word	0x08003b65
 8003b60:	08003b7d 	.word	0x08003b7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
      break;
 8003b68:	e030      	b.n	8003bcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d025      	beq.n	8003bc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7a:	e022      	b.n	8003bc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b84:	d11f      	bne.n	8003bc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b8a:	e01c      	b.n	8003bc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d903      	bls.n	8003b9a <DMA_CheckFifoParam+0xb6>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d003      	beq.n	8003ba0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b98:	e018      	b.n	8003bcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b9e:	e015      	b.n	8003bcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00e      	beq.n	8003bca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb0:	e00b      	b.n	8003bca <DMA_CheckFifoParam+0xe6>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e00a      	b.n	8003bcc <DMA_CheckFifoParam+0xe8>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e008      	b.n	8003bcc <DMA_CheckFifoParam+0xe8>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e006      	b.n	8003bcc <DMA_CheckFifoParam+0xe8>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e004      	b.n	8003bcc <DMA_CheckFifoParam+0xe8>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e002      	b.n	8003bcc <DMA_CheckFifoParam+0xe8>
      break;   
 8003bc6:	bf00      	nop
 8003bc8:	e000      	b.n	8003bcc <DMA_CheckFifoParam+0xe8>
      break;
 8003bca:	bf00      	nop
    }
  } 
  
  return status; 
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop

08003bdc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e03b      	b.n	8003c66 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fe fda4 	bl	8002750 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2c:	f023 0107 	bic.w	r1, r3, #7
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	68d1      	ldr	r1, [r2, #12]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	430b      	orrs	r3, r1
 8003c54:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af02      	add	r7, sp, #8
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_DMA2D_Start+0x1c>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e018      	b.n	8003cbc <HAL_DMA2D_Start+0x4e>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2202      	movs	r2, #2
 8003c96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 fa99 	bl	80041dc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d056      	beq.n	8003d8e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ce0:	f7ff fa1e 	bl	8003120 <HAL_GetTick>
 8003ce4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003ce6:	e04b      	b.n	8003d80 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d023      	beq.n	8003d42 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	f043 0202 	orr.w	r2, r3, #2
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1e:	f043 0201 	orr.w	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2221      	movs	r2, #33	; 0x21
 8003d2c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2204      	movs	r2, #4
 8003d32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e0a5      	b.n	8003e8e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d01a      	beq.n	8003d80 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7ff f9e9 	bl	8003120 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <HAL_DMA2D_PollForTransfer+0x9c>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10f      	bne.n	8003d80 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	f043 0220 	orr.w	r2, r3, #32
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2203      	movs	r2, #3
 8003d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e086      	b.n	8003e8e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0ac      	beq.n	8003ce8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d061      	beq.n	8003e74 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003db0:	f7ff f9b6 	bl	8003120 <HAL_GetTick>
 8003db4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003db6:	e056      	b.n	8003e66 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d02e      	beq.n	8003e28 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd8:	f043 0204 	orr.w	r2, r3, #4
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	f043 0202 	orr.w	r2, r3, #2
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2229      	movs	r2, #41	; 0x29
 8003e12:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2204      	movs	r2, #4
 8003e18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e032      	b.n	8003e8e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2e:	d01a      	beq.n	8003e66 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e30:	f7ff f976 	bl	8003120 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d302      	bcc.n	8003e46 <HAL_DMA2D_PollForTransfer+0x182>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10f      	bne.n	8003e66 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	f043 0220 	orr.w	r2, r3, #32
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2203      	movs	r2, #3
 8003e56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e013      	b.n	8003e8e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0a1      	beq.n	8003db8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2212      	movs	r2, #18
 8003e7a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d026      	beq.n	8003f06 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d021      	beq.n	8003f06 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ed0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	f043 0201 	orr.w	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2204      	movs	r2, #4
 8003eea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d026      	beq.n	8003f5e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d021      	beq.n	8003f5e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f28:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	f043 0202 	orr.w	r2, r3, #2
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2204      	movs	r2, #4
 8003f42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d026      	beq.n	8003fb6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d021      	beq.n	8003fb6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f80:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2208      	movs	r2, #8
 8003f88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8e:	f043 0204 	orr.w	r2, r3, #4
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2204      	movs	r2, #4
 8003f9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d013      	beq.n	8003fe8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00e      	beq.n	8003fe8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2204      	movs	r2, #4
 8003fe0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f853 	bl	800408e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d024      	beq.n	800403c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01f      	beq.n	800403c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800400a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2202      	movs	r2, #2
 8004012:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01f      	beq.n	8004086 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01a      	beq.n	8004086 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800405e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2210      	movs	r2, #16
 8004066:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f80e 	bl	80040a2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_DMA2D_ConfigLayer+0x20>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e079      	b.n	80041cc <HAL_DMA2D_ConfigLayer+0x114>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	3318      	adds	r3, #24
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	4413      	add	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004102:	4b35      	ldr	r3, [pc, #212]	; (80041d8 <HAL_DMA2D_ConfigLayer+0x120>)
 8004104:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b0a      	cmp	r3, #10
 800410c:	d003      	beq.n	8004116 <HAL_DMA2D_ConfigLayer+0x5e>
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b09      	cmp	r3, #9
 8004114:	d107      	bne.n	8004126 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	e005      	b.n	8004132 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	061b      	lsls	r3, r3, #24
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d120      	bne.n	800417a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	43db      	mvns	r3, r3
 8004142:	ea02 0103 	and.w	r1, r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	430a      	orrs	r2, r1
 800414e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b0a      	cmp	r3, #10
 8004160:	d003      	beq.n	800416a <HAL_DMA2D_ConfigLayer+0xb2>
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b09      	cmp	r3, #9
 8004168:	d127      	bne.n	80041ba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004176:	629a      	str	r2, [r3, #40]	; 0x28
 8004178:	e01f      	b.n	80041ba <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69da      	ldr	r2, [r3, #28]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	43db      	mvns	r3, r3
 8004184:	ea02 0103 	and.w	r1, r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	430a      	orrs	r2, r1
 8004190:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b0a      	cmp	r3, #10
 80041a2:	d003      	beq.n	80041ac <HAL_DMA2D_ConfigLayer+0xf4>
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b09      	cmp	r3, #9
 80041aa:	d106      	bne.n	80041ba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80041b8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	ff03000f 	.word	0xff03000f

080041dc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80041dc:	b480      	push	{r7}
 80041de:	b08b      	sub	sp, #44	; 0x2c
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	041a      	lsls	r2, r3, #16
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	431a      	orrs	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004214:	d174      	bne.n	8004300 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800421c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004224:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800422c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d108      	bne.n	800424e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	431a      	orrs	r2, r3
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	4313      	orrs	r3, r2
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
 800424c:	e053      	b.n	80042f6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d106      	bne.n	8004264 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	4313      	orrs	r3, r2
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
 8004262:	e048      	b.n	80042f6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d111      	bne.n	8004290 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	0cdb      	lsrs	r3, r3, #19
 8004270:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	0a9b      	lsrs	r3, r3, #10
 8004276:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	08db      	lsrs	r3, r3, #3
 800427c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	02db      	lsls	r3, r3, #11
 8004286:	4313      	orrs	r3, r2
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
 800428e:	e032      	b.n	80042f6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d117      	bne.n	80042c8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	0fdb      	lsrs	r3, r3, #31
 800429c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	0cdb      	lsrs	r3, r3, #19
 80042a2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	0adb      	lsrs	r3, r3, #11
 80042a8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	08db      	lsrs	r3, r3, #3
 80042ae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	029b      	lsls	r3, r3, #10
 80042b8:	431a      	orrs	r2, r3
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	03db      	lsls	r3, r3, #15
 80042be:	4313      	orrs	r3, r2
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
 80042c6:	e016      	b.n	80042f6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	0f1b      	lsrs	r3, r3, #28
 80042cc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	0d1b      	lsrs	r3, r3, #20
 80042d2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	0b1b      	lsrs	r3, r3, #12
 80042d8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	011a      	lsls	r2, r3, #4
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	431a      	orrs	r2, r3
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	031b      	lsls	r3, r3, #12
 80042ee:	4313      	orrs	r3, r2
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80042fe:	e003      	b.n	8004308 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	60da      	str	r2, [r3, #12]
}
 8004308:	bf00      	nop
 800430a:	372c      	adds	r7, #44	; 0x2c
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004314:	b480      	push	{r7}
 8004316:	b089      	sub	sp, #36	; 0x24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004322:	2300      	movs	r3, #0
 8004324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004326:	2300      	movs	r3, #0
 8004328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	e177      	b.n	8004620 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004330:	2201      	movs	r2, #1
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4013      	ands	r3, r2
 8004342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	429a      	cmp	r2, r3
 800434a:	f040 8166 	bne.w	800461a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b01      	cmp	r3, #1
 8004358:	d005      	beq.n	8004366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004362:	2b02      	cmp	r3, #2
 8004364:	d130      	bne.n	80043c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	2203      	movs	r2, #3
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	43db      	mvns	r3, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4013      	ands	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4313      	orrs	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800439c:	2201      	movs	r2, #1
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4013      	ands	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	f003 0201 	and.w	r2, r3, #1
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4313      	orrs	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d017      	beq.n	8004404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	2203      	movs	r2, #3
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	43db      	mvns	r3, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4013      	ands	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d123      	bne.n	8004458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	08da      	lsrs	r2, r3, #3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3208      	adds	r2, #8
 8004418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800441c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	220f      	movs	r2, #15
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4313      	orrs	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	08da      	lsrs	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3208      	adds	r2, #8
 8004452:	69b9      	ldr	r1, [r7, #24]
 8004454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	2203      	movs	r2, #3
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	43db      	mvns	r3, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4013      	ands	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0203 	and.w	r2, r3, #3
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80c0 	beq.w	800461a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	4b66      	ldr	r3, [pc, #408]	; (8004638 <HAL_GPIO_Init+0x324>)
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	4a65      	ldr	r2, [pc, #404]	; (8004638 <HAL_GPIO_Init+0x324>)
 80044a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044a8:	6453      	str	r3, [r2, #68]	; 0x44
 80044aa:	4b63      	ldr	r3, [pc, #396]	; (8004638 <HAL_GPIO_Init+0x324>)
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044b6:	4a61      	ldr	r2, [pc, #388]	; (800463c <HAL_GPIO_Init+0x328>)
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	3302      	adds	r3, #2
 80044be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	220f      	movs	r2, #15
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4013      	ands	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a58      	ldr	r2, [pc, #352]	; (8004640 <HAL_GPIO_Init+0x32c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d037      	beq.n	8004552 <HAL_GPIO_Init+0x23e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a57      	ldr	r2, [pc, #348]	; (8004644 <HAL_GPIO_Init+0x330>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d031      	beq.n	800454e <HAL_GPIO_Init+0x23a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a56      	ldr	r2, [pc, #344]	; (8004648 <HAL_GPIO_Init+0x334>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d02b      	beq.n	800454a <HAL_GPIO_Init+0x236>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a55      	ldr	r2, [pc, #340]	; (800464c <HAL_GPIO_Init+0x338>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d025      	beq.n	8004546 <HAL_GPIO_Init+0x232>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a54      	ldr	r2, [pc, #336]	; (8004650 <HAL_GPIO_Init+0x33c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01f      	beq.n	8004542 <HAL_GPIO_Init+0x22e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a53      	ldr	r2, [pc, #332]	; (8004654 <HAL_GPIO_Init+0x340>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d019      	beq.n	800453e <HAL_GPIO_Init+0x22a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a52      	ldr	r2, [pc, #328]	; (8004658 <HAL_GPIO_Init+0x344>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <HAL_GPIO_Init+0x226>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a51      	ldr	r2, [pc, #324]	; (800465c <HAL_GPIO_Init+0x348>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00d      	beq.n	8004536 <HAL_GPIO_Init+0x222>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a50      	ldr	r2, [pc, #320]	; (8004660 <HAL_GPIO_Init+0x34c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d007      	beq.n	8004532 <HAL_GPIO_Init+0x21e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a4f      	ldr	r2, [pc, #316]	; (8004664 <HAL_GPIO_Init+0x350>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d101      	bne.n	800452e <HAL_GPIO_Init+0x21a>
 800452a:	2309      	movs	r3, #9
 800452c:	e012      	b.n	8004554 <HAL_GPIO_Init+0x240>
 800452e:	230a      	movs	r3, #10
 8004530:	e010      	b.n	8004554 <HAL_GPIO_Init+0x240>
 8004532:	2308      	movs	r3, #8
 8004534:	e00e      	b.n	8004554 <HAL_GPIO_Init+0x240>
 8004536:	2307      	movs	r3, #7
 8004538:	e00c      	b.n	8004554 <HAL_GPIO_Init+0x240>
 800453a:	2306      	movs	r3, #6
 800453c:	e00a      	b.n	8004554 <HAL_GPIO_Init+0x240>
 800453e:	2305      	movs	r3, #5
 8004540:	e008      	b.n	8004554 <HAL_GPIO_Init+0x240>
 8004542:	2304      	movs	r3, #4
 8004544:	e006      	b.n	8004554 <HAL_GPIO_Init+0x240>
 8004546:	2303      	movs	r3, #3
 8004548:	e004      	b.n	8004554 <HAL_GPIO_Init+0x240>
 800454a:	2302      	movs	r3, #2
 800454c:	e002      	b.n	8004554 <HAL_GPIO_Init+0x240>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <HAL_GPIO_Init+0x240>
 8004552:	2300      	movs	r3, #0
 8004554:	69fa      	ldr	r2, [r7, #28]
 8004556:	f002 0203 	and.w	r2, r2, #3
 800455a:	0092      	lsls	r2, r2, #2
 800455c:	4093      	lsls	r3, r2
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4313      	orrs	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004564:	4935      	ldr	r1, [pc, #212]	; (800463c <HAL_GPIO_Init+0x328>)
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	089b      	lsrs	r3, r3, #2
 800456a:	3302      	adds	r3, #2
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004572:	4b3d      	ldr	r3, [pc, #244]	; (8004668 <HAL_GPIO_Init+0x354>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	43db      	mvns	r3, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4013      	ands	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004596:	4a34      	ldr	r2, [pc, #208]	; (8004668 <HAL_GPIO_Init+0x354>)
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800459c:	4b32      	ldr	r3, [pc, #200]	; (8004668 <HAL_GPIO_Init+0x354>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4013      	ands	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045c0:	4a29      	ldr	r2, [pc, #164]	; (8004668 <HAL_GPIO_Init+0x354>)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045c6:	4b28      	ldr	r3, [pc, #160]	; (8004668 <HAL_GPIO_Init+0x354>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	43db      	mvns	r3, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4013      	ands	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045ea:	4a1f      	ldr	r2, [pc, #124]	; (8004668 <HAL_GPIO_Init+0x354>)
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045f0:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <HAL_GPIO_Init+0x354>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4013      	ands	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004614:	4a14      	ldr	r2, [pc, #80]	; (8004668 <HAL_GPIO_Init+0x354>)
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	3301      	adds	r3, #1
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	2b0f      	cmp	r3, #15
 8004624:	f67f ae84 	bls.w	8004330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004628:	bf00      	nop
 800462a:	bf00      	nop
 800462c:	3724      	adds	r7, #36	; 0x24
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40023800 	.word	0x40023800
 800463c:	40013800 	.word	0x40013800
 8004640:	40020000 	.word	0x40020000
 8004644:	40020400 	.word	0x40020400
 8004648:	40020800 	.word	0x40020800
 800464c:	40020c00 	.word	0x40020c00
 8004650:	40021000 	.word	0x40021000
 8004654:	40021400 	.word	0x40021400
 8004658:	40021800 	.word	0x40021800
 800465c:	40021c00 	.word	0x40021c00
 8004660:	40022000 	.word	0x40022000
 8004664:	40022400 	.word	0x40022400
 8004668:	40013c00 	.word	0x40013c00

0800466c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800467e:	2300      	movs	r3, #0
 8004680:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	e0d9      	b.n	800483c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004688:	2201      	movs	r2, #1
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	4013      	ands	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	429a      	cmp	r2, r3
 80046a0:	f040 80c9 	bne.w	8004836 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80046a4:	4a6b      	ldr	r2, [pc, #428]	; (8004854 <HAL_GPIO_DeInit+0x1e8>)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	089b      	lsrs	r3, r3, #2
 80046aa:	3302      	adds	r3, #2
 80046ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	220f      	movs	r2, #15
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	4013      	ands	r3, r2
 80046c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a63      	ldr	r2, [pc, #396]	; (8004858 <HAL_GPIO_DeInit+0x1ec>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d037      	beq.n	800473e <HAL_GPIO_DeInit+0xd2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a62      	ldr	r2, [pc, #392]	; (800485c <HAL_GPIO_DeInit+0x1f0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d031      	beq.n	800473a <HAL_GPIO_DeInit+0xce>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a61      	ldr	r2, [pc, #388]	; (8004860 <HAL_GPIO_DeInit+0x1f4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d02b      	beq.n	8004736 <HAL_GPIO_DeInit+0xca>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a60      	ldr	r2, [pc, #384]	; (8004864 <HAL_GPIO_DeInit+0x1f8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d025      	beq.n	8004732 <HAL_GPIO_DeInit+0xc6>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a5f      	ldr	r2, [pc, #380]	; (8004868 <HAL_GPIO_DeInit+0x1fc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01f      	beq.n	800472e <HAL_GPIO_DeInit+0xc2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a5e      	ldr	r2, [pc, #376]	; (800486c <HAL_GPIO_DeInit+0x200>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d019      	beq.n	800472a <HAL_GPIO_DeInit+0xbe>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a5d      	ldr	r2, [pc, #372]	; (8004870 <HAL_GPIO_DeInit+0x204>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_GPIO_DeInit+0xba>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a5c      	ldr	r2, [pc, #368]	; (8004874 <HAL_GPIO_DeInit+0x208>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00d      	beq.n	8004722 <HAL_GPIO_DeInit+0xb6>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a5b      	ldr	r2, [pc, #364]	; (8004878 <HAL_GPIO_DeInit+0x20c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d007      	beq.n	800471e <HAL_GPIO_DeInit+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a5a      	ldr	r2, [pc, #360]	; (800487c <HAL_GPIO_DeInit+0x210>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <HAL_GPIO_DeInit+0xae>
 8004716:	2309      	movs	r3, #9
 8004718:	e012      	b.n	8004740 <HAL_GPIO_DeInit+0xd4>
 800471a:	230a      	movs	r3, #10
 800471c:	e010      	b.n	8004740 <HAL_GPIO_DeInit+0xd4>
 800471e:	2308      	movs	r3, #8
 8004720:	e00e      	b.n	8004740 <HAL_GPIO_DeInit+0xd4>
 8004722:	2307      	movs	r3, #7
 8004724:	e00c      	b.n	8004740 <HAL_GPIO_DeInit+0xd4>
 8004726:	2306      	movs	r3, #6
 8004728:	e00a      	b.n	8004740 <HAL_GPIO_DeInit+0xd4>
 800472a:	2305      	movs	r3, #5
 800472c:	e008      	b.n	8004740 <HAL_GPIO_DeInit+0xd4>
 800472e:	2304      	movs	r3, #4
 8004730:	e006      	b.n	8004740 <HAL_GPIO_DeInit+0xd4>
 8004732:	2303      	movs	r3, #3
 8004734:	e004      	b.n	8004740 <HAL_GPIO_DeInit+0xd4>
 8004736:	2302      	movs	r3, #2
 8004738:	e002      	b.n	8004740 <HAL_GPIO_DeInit+0xd4>
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <HAL_GPIO_DeInit+0xd4>
 800473e:	2300      	movs	r3, #0
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	f002 0203 	and.w	r2, r2, #3
 8004746:	0092      	lsls	r2, r2, #2
 8004748:	4093      	lsls	r3, r2
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	429a      	cmp	r2, r3
 800474e:	d132      	bne.n	80047b6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004750:	4b4b      	ldr	r3, [pc, #300]	; (8004880 <HAL_GPIO_DeInit+0x214>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	43db      	mvns	r3, r3
 8004758:	4949      	ldr	r1, [pc, #292]	; (8004880 <HAL_GPIO_DeInit+0x214>)
 800475a:	4013      	ands	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800475e:	4b48      	ldr	r3, [pc, #288]	; (8004880 <HAL_GPIO_DeInit+0x214>)
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	43db      	mvns	r3, r3
 8004766:	4946      	ldr	r1, [pc, #280]	; (8004880 <HAL_GPIO_DeInit+0x214>)
 8004768:	4013      	ands	r3, r2
 800476a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800476c:	4b44      	ldr	r3, [pc, #272]	; (8004880 <HAL_GPIO_DeInit+0x214>)
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	43db      	mvns	r3, r3
 8004774:	4942      	ldr	r1, [pc, #264]	; (8004880 <HAL_GPIO_DeInit+0x214>)
 8004776:	4013      	ands	r3, r2
 8004778:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800477a:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_GPIO_DeInit+0x214>)
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	43db      	mvns	r3, r3
 8004782:	493f      	ldr	r1, [pc, #252]	; (8004880 <HAL_GPIO_DeInit+0x214>)
 8004784:	4013      	ands	r3, r2
 8004786:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	220f      	movs	r2, #15
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004798:	4a2e      	ldr	r2, [pc, #184]	; (8004854 <HAL_GPIO_DeInit+0x1e8>)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	089b      	lsrs	r3, r3, #2
 800479e:	3302      	adds	r3, #2
 80047a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	43da      	mvns	r2, r3
 80047a8:	482a      	ldr	r0, [pc, #168]	; (8004854 <HAL_GPIO_DeInit+0x1e8>)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	089b      	lsrs	r3, r3, #2
 80047ae:	400a      	ands	r2, r1
 80047b0:	3302      	adds	r3, #2
 80047b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	2103      	movs	r1, #3
 80047c0:	fa01 f303 	lsl.w	r3, r1, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	401a      	ands	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	08da      	lsrs	r2, r3, #3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3208      	adds	r2, #8
 80047d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	220f      	movs	r2, #15
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	43db      	mvns	r3, r3
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	08d2      	lsrs	r2, r2, #3
 80047ec:	4019      	ands	r1, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3208      	adds	r2, #8
 80047f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	2103      	movs	r1, #3
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	401a      	ands	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	2101      	movs	r1, #1
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	fa01 f303 	lsl.w	r3, r1, r3
 8004818:	43db      	mvns	r3, r3
 800481a:	401a      	ands	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	2103      	movs	r1, #3
 800482a:	fa01 f303 	lsl.w	r3, r1, r3
 800482e:	43db      	mvns	r3, r3
 8004830:	401a      	ands	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	3301      	adds	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2b0f      	cmp	r3, #15
 8004840:	f67f af22 	bls.w	8004688 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40013800 	.word	0x40013800
 8004858:	40020000 	.word	0x40020000
 800485c:	40020400 	.word	0x40020400
 8004860:	40020800 	.word	0x40020800
 8004864:	40020c00 	.word	0x40020c00
 8004868:	40021000 	.word	0x40021000
 800486c:	40021400 	.word	0x40021400
 8004870:	40021800 	.word	0x40021800
 8004874:	40021c00 	.word	0x40021c00
 8004878:	40022000 	.word	0x40022000
 800487c:	40022400 	.word	0x40022400
 8004880:	40013c00 	.word	0x40013c00

08004884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	807b      	strh	r3, [r7, #2]
 8004890:	4613      	mov	r3, r2
 8004892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004894:	787b      	ldrb	r3, [r7, #1]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800489a:	887a      	ldrh	r2, [r7, #2]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048a0:	e003      	b.n	80048aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048a2:	887b      	ldrh	r3, [r7, #2]
 80048a4:	041a      	lsls	r2, r3, #16
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	619a      	str	r2, [r3, #24]
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80048b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048b8:	b08f      	sub	sp, #60	; 0x3c
 80048ba:	af0a      	add	r7, sp, #40	; 0x28
 80048bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e054      	b.n	8004972 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f00a fc9a 	bl	800f21c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2203      	movs	r2, #3
 80048ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d102      	bne.n	8004902 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f004 ff7a 	bl	8009800 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	603b      	str	r3, [r7, #0]
 8004912:	687e      	ldr	r6, [r7, #4]
 8004914:	466d      	mov	r5, sp
 8004916:	f106 0410 	add.w	r4, r6, #16
 800491a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800491c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800491e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004922:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004926:	e885 0003 	stmia.w	r5, {r0, r1}
 800492a:	1d33      	adds	r3, r6, #4
 800492c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800492e:	6838      	ldr	r0, [r7, #0]
 8004930:	f004 fef4 	bl	800971c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2101      	movs	r1, #1
 800493a:	4618      	mov	r0, r3
 800493c:	f004 ff71 	bl	8009822 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	687e      	ldr	r6, [r7, #4]
 8004948:	466d      	mov	r5, sp
 800494a:	f106 0410 	add.w	r4, r6, #16
 800494e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004956:	e894 0003 	ldmia.w	r4, {r0, r1}
 800495a:	e885 0003 	stmia.w	r5, {r0, r1}
 800495e:	1d33      	adds	r3, r6, #4
 8004960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004962:	6838      	ldr	r0, [r7, #0]
 8004964:	f005 f8fa 	bl	8009b5c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800497a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800497a:	b590      	push	{r4, r7, lr}
 800497c:	b089      	sub	sp, #36	; 0x24
 800497e:	af04      	add	r7, sp, #16
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	4608      	mov	r0, r1
 8004984:	4611      	mov	r1, r2
 8004986:	461a      	mov	r2, r3
 8004988:	4603      	mov	r3, r0
 800498a:	70fb      	strb	r3, [r7, #3]
 800498c:	460b      	mov	r3, r1
 800498e:	70bb      	strb	r3, [r7, #2]
 8004990:	4613      	mov	r3, r2
 8004992:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_HCD_HC_Init+0x28>
 800499e:	2302      	movs	r3, #2
 80049a0:	e076      	b.n	8004a90 <HAL_HCD_HC_Init+0x116>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	212c      	movs	r1, #44	; 0x2c
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	333d      	adds	r3, #61	; 0x3d
 80049b8:	2200      	movs	r2, #0
 80049ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	212c      	movs	r1, #44	; 0x2c
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	4413      	add	r3, r2
 80049c8:	3338      	adds	r3, #56	; 0x38
 80049ca:	787a      	ldrb	r2, [r7, #1]
 80049cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	212c      	movs	r1, #44	; 0x2c
 80049d4:	fb01 f303 	mul.w	r3, r1, r3
 80049d8:	4413      	add	r3, r2
 80049da:	3340      	adds	r3, #64	; 0x40
 80049dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80049de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	212c      	movs	r1, #44	; 0x2c
 80049e6:	fb01 f303 	mul.w	r3, r1, r3
 80049ea:	4413      	add	r3, r2
 80049ec:	3339      	adds	r3, #57	; 0x39
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	212c      	movs	r1, #44	; 0x2c
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	4413      	add	r3, r2
 80049fe:	333f      	adds	r3, #63	; 0x3f
 8004a00:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004a04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	78ba      	ldrb	r2, [r7, #2]
 8004a0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a0e:	b2d0      	uxtb	r0, r2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	212c      	movs	r1, #44	; 0x2c
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	4413      	add	r3, r2
 8004a1a:	333a      	adds	r3, #58	; 0x3a
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004a20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	da09      	bge.n	8004a3c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	212c      	movs	r1, #44	; 0x2c
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	333b      	adds	r3, #59	; 0x3b
 8004a36:	2201      	movs	r2, #1
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	e008      	b.n	8004a4e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	212c      	movs	r1, #44	; 0x2c
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	4413      	add	r3, r2
 8004a48:	333b      	adds	r3, #59	; 0x3b
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	212c      	movs	r1, #44	; 0x2c
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	333c      	adds	r3, #60	; 0x3c
 8004a5c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004a60:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	787c      	ldrb	r4, [r7, #1]
 8004a68:	78ba      	ldrb	r2, [r7, #2]
 8004a6a:	78f9      	ldrb	r1, [r7, #3]
 8004a6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a6e:	9302      	str	r3, [sp, #8]
 8004a70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a74:	9301      	str	r3, [sp, #4]
 8004a76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	4623      	mov	r3, r4
 8004a7e:	f005 f9f3 	bl	8009e68 <USB_HC_Init>
 8004a82:	4603      	mov	r3, r0
 8004a84:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd90      	pop	{r4, r7, pc}

08004a98 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_HCD_HC_Halt+0x1e>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e00f      	b.n	8004ad6 <HAL_HCD_HC_Halt+0x3e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	78fa      	ldrb	r2, [r7, #3]
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f005 fc43 	bl	800a352 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	4608      	mov	r0, r1
 8004aea:	4611      	mov	r1, r2
 8004aec:	461a      	mov	r2, r3
 8004aee:	4603      	mov	r3, r0
 8004af0:	70fb      	strb	r3, [r7, #3]
 8004af2:	460b      	mov	r3, r1
 8004af4:	70bb      	strb	r3, [r7, #2]
 8004af6:	4613      	mov	r3, r2
 8004af8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	212c      	movs	r1, #44	; 0x2c
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	4413      	add	r3, r2
 8004b06:	333b      	adds	r3, #59	; 0x3b
 8004b08:	78ba      	ldrb	r2, [r7, #2]
 8004b0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	212c      	movs	r1, #44	; 0x2c
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	4413      	add	r3, r2
 8004b18:	333f      	adds	r3, #63	; 0x3f
 8004b1a:	787a      	ldrb	r2, [r7, #1]
 8004b1c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004b1e:	7c3b      	ldrb	r3, [r7, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d112      	bne.n	8004b4a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	212c      	movs	r1, #44	; 0x2c
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	4413      	add	r3, r2
 8004b30:	3342      	adds	r3, #66	; 0x42
 8004b32:	2203      	movs	r2, #3
 8004b34:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	212c      	movs	r1, #44	; 0x2c
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	4413      	add	r3, r2
 8004b42:	333d      	adds	r3, #61	; 0x3d
 8004b44:	7f3a      	ldrb	r2, [r7, #28]
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	e008      	b.n	8004b5c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	212c      	movs	r1, #44	; 0x2c
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	4413      	add	r3, r2
 8004b56:	3342      	adds	r3, #66	; 0x42
 8004b58:	2202      	movs	r2, #2
 8004b5a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004b5c:	787b      	ldrb	r3, [r7, #1]
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	f200 80c6 	bhi.w	8004cf0 <HAL_HCD_HC_SubmitRequest+0x210>
 8004b64:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004b7d 	.word	0x08004b7d
 8004b70:	08004cdd 	.word	0x08004cdd
 8004b74:	08004be1 	.word	0x08004be1
 8004b78:	08004c5f 	.word	0x08004c5f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004b7c:	7c3b      	ldrb	r3, [r7, #16]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	f040 80b8 	bne.w	8004cf4 <HAL_HCD_HC_SubmitRequest+0x214>
 8004b84:	78bb      	ldrb	r3, [r7, #2]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f040 80b4 	bne.w	8004cf4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004b8c:	8b3b      	ldrh	r3, [r7, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d108      	bne.n	8004ba4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004b92:	78fb      	ldrb	r3, [r7, #3]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	212c      	movs	r1, #44	; 0x2c
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3355      	adds	r3, #85	; 0x55
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	212c      	movs	r1, #44	; 0x2c
 8004baa:	fb01 f303 	mul.w	r3, r1, r3
 8004bae:	4413      	add	r3, r2
 8004bb0:	3355      	adds	r3, #85	; 0x55
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d109      	bne.n	8004bcc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	212c      	movs	r1, #44	; 0x2c
 8004bbe:	fb01 f303 	mul.w	r3, r1, r3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3342      	adds	r3, #66	; 0x42
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004bca:	e093      	b.n	8004cf4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	212c      	movs	r1, #44	; 0x2c
 8004bd2:	fb01 f303 	mul.w	r3, r1, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3342      	adds	r3, #66	; 0x42
 8004bda:	2202      	movs	r2, #2
 8004bdc:	701a      	strb	r2, [r3, #0]
      break;
 8004bde:	e089      	b.n	8004cf4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004be0:	78bb      	ldrb	r3, [r7, #2]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d11d      	bne.n	8004c22 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	212c      	movs	r1, #44	; 0x2c
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	3355      	adds	r3, #85	; 0x55
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	212c      	movs	r1, #44	; 0x2c
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	3342      	adds	r3, #66	; 0x42
 8004c08:	2200      	movs	r2, #0
 8004c0a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004c0c:	e073      	b.n	8004cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	212c      	movs	r1, #44	; 0x2c
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	3342      	adds	r3, #66	; 0x42
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	701a      	strb	r2, [r3, #0]
      break;
 8004c20:	e069      	b.n	8004cf6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	212c      	movs	r1, #44	; 0x2c
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3354      	adds	r3, #84	; 0x54
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d109      	bne.n	8004c4a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	212c      	movs	r1, #44	; 0x2c
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	4413      	add	r3, r2
 8004c42:	3342      	adds	r3, #66	; 0x42
 8004c44:	2200      	movs	r2, #0
 8004c46:	701a      	strb	r2, [r3, #0]
      break;
 8004c48:	e055      	b.n	8004cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	212c      	movs	r1, #44	; 0x2c
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	4413      	add	r3, r2
 8004c56:	3342      	adds	r3, #66	; 0x42
 8004c58:	2202      	movs	r2, #2
 8004c5a:	701a      	strb	r2, [r3, #0]
      break;
 8004c5c:	e04b      	b.n	8004cf6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004c5e:	78bb      	ldrb	r3, [r7, #2]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d11d      	bne.n	8004ca0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	212c      	movs	r1, #44	; 0x2c
 8004c6a:	fb01 f303 	mul.w	r3, r1, r3
 8004c6e:	4413      	add	r3, r2
 8004c70:	3355      	adds	r3, #85	; 0x55
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d109      	bne.n	8004c8c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	212c      	movs	r1, #44	; 0x2c
 8004c7e:	fb01 f303 	mul.w	r3, r1, r3
 8004c82:	4413      	add	r3, r2
 8004c84:	3342      	adds	r3, #66	; 0x42
 8004c86:	2200      	movs	r2, #0
 8004c88:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004c8a:	e034      	b.n	8004cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	212c      	movs	r1, #44	; 0x2c
 8004c92:	fb01 f303 	mul.w	r3, r1, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	3342      	adds	r3, #66	; 0x42
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	701a      	strb	r2, [r3, #0]
      break;
 8004c9e:	e02a      	b.n	8004cf6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	212c      	movs	r1, #44	; 0x2c
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	4413      	add	r3, r2
 8004cac:	3354      	adds	r3, #84	; 0x54
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d109      	bne.n	8004cc8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	212c      	movs	r1, #44	; 0x2c
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3342      	adds	r3, #66	; 0x42
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	701a      	strb	r2, [r3, #0]
      break;
 8004cc6:	e016      	b.n	8004cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	212c      	movs	r1, #44	; 0x2c
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3342      	adds	r3, #66	; 0x42
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	701a      	strb	r2, [r3, #0]
      break;
 8004cda:	e00c      	b.n	8004cf6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	212c      	movs	r1, #44	; 0x2c
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3342      	adds	r3, #66	; 0x42
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
      break;
 8004cee:	e002      	b.n	8004cf6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004cf0:	bf00      	nop
 8004cf2:	e000      	b.n	8004cf6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004cf4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004cf6:	78fb      	ldrb	r3, [r7, #3]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	212c      	movs	r1, #44	; 0x2c
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	4413      	add	r3, r2
 8004d02:	3344      	adds	r3, #68	; 0x44
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	8b3a      	ldrh	r2, [r7, #24]
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	202c      	movs	r0, #44	; 0x2c
 8004d10:	fb00 f303 	mul.w	r3, r0, r3
 8004d14:	440b      	add	r3, r1
 8004d16:	334c      	adds	r3, #76	; 0x4c
 8004d18:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	212c      	movs	r1, #44	; 0x2c
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	4413      	add	r3, r2
 8004d26:	3360      	adds	r3, #96	; 0x60
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	212c      	movs	r1, #44	; 0x2c
 8004d32:	fb01 f303 	mul.w	r3, r1, r3
 8004d36:	4413      	add	r3, r2
 8004d38:	3350      	adds	r3, #80	; 0x50
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	212c      	movs	r1, #44	; 0x2c
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	4413      	add	r3, r2
 8004d4a:	3339      	adds	r3, #57	; 0x39
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	212c      	movs	r1, #44	; 0x2c
 8004d56:	fb01 f303 	mul.w	r3, r1, r3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3361      	adds	r3, #97	; 0x61
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	222c      	movs	r2, #44	; 0x2c
 8004d6a:	fb02 f303 	mul.w	r3, r2, r3
 8004d6e:	3338      	adds	r3, #56	; 0x38
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	18d1      	adds	r1, r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f005 f996 	bl	800a0ac <USB_HC_StartXfer>
 8004d80:	4603      	mov	r3, r0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop

08004d8c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f004 fe97 	bl	8009ad6 <USB_GetMode>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	f040 80f6 	bne.w	8004f9c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f004 fe7b 	bl	8009ab0 <USB_ReadInterrupts>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 80ec 	beq.w	8004f9a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f004 fe72 	bl	8009ab0 <USB_ReadInterrupts>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dd6:	d104      	bne.n	8004de2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004de0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f004 fe62 	bl	8009ab0 <USB_ReadInterrupts>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004df6:	d104      	bne.n	8004e02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f004 fe52 	bl	8009ab0 <USB_ReadInterrupts>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e16:	d104      	bne.n	8004e22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004e20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f004 fe42 	bl	8009ab0 <USB_ReadInterrupts>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d103      	bne.n	8004e3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f004 fe34 	bl	8009ab0 <USB_ReadInterrupts>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e52:	d11c      	bne.n	8004e8e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e5c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10f      	bne.n	8004e8e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004e6e:	2110      	movs	r1, #16
 8004e70:	6938      	ldr	r0, [r7, #16]
 8004e72:	f004 fd23 	bl	80098bc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004e76:	6938      	ldr	r0, [r7, #16]
 8004e78:	f004 fd54 	bl	8009924 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2101      	movs	r1, #1
 8004e82:	4618      	mov	r0, r3
 8004e84:	f004 ff2a 	bl	8009cdc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f00a fa41 	bl	800f310 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f004 fe0c 	bl	8009ab0 <USB_ReadInterrupts>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ea2:	d102      	bne.n	8004eaa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f001 f89e 	bl	8005fe6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f004 fdfe 	bl	8009ab0 <USB_ReadInterrupts>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d106      	bne.n	8004ecc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f00a fa0a 	bl	800f2d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2208      	movs	r2, #8
 8004eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f004 fded 	bl	8009ab0 <USB_ReadInterrupts>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	d101      	bne.n	8004ee4 <HAL_HCD_IRQHandler+0x158>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <HAL_HCD_IRQHandler+0x15a>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d012      	beq.n	8004f10 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	699a      	ldr	r2, [r3, #24]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0210 	bic.w	r2, r2, #16
 8004ef8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 ffa1 	bl	8005e42 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0210 	orr.w	r2, r2, #16
 8004f0e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f004 fdcb 	bl	8009ab0 <USB_ReadInterrupts>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f24:	d13a      	bne.n	8004f9c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f005 fa00 	bl	800a330 <USB_HC_ReadInterrupt>
 8004f30:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	e025      	b.n	8004f84 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d018      	beq.n	8004f7e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f62:	d106      	bne.n	8004f72 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f8ab 	bl	80050c6 <HCD_HC_IN_IRQHandler>
 8004f70:	e005      	b.n	8004f7e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	4619      	mov	r1, r3
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fbf9 	bl	8005770 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	3301      	adds	r3, #1
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d3d4      	bcc.n	8004f38 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f96:	615a      	str	r2, [r3, #20]
 8004f98:	e000      	b.n	8004f9c <HAL_HCD_IRQHandler+0x210>
      return;
 8004f9a:	bf00      	nop
    }
  }
}
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_HCD_Start+0x16>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e013      	b.n	8004fe0 <HAL_HCD_Start+0x3e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f004 feec 	bl	8009da4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f004 fc04 	bl	80097de <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_HCD_Stop+0x16>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e00d      	b.n	800501a <HAL_HCD_Stop+0x32>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f005 fada 	bl	800a5c4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f004 fe8e 	bl	8009d50 <USB_ResetPort>
 8005034:	4603      	mov	r3, r0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	460b      	mov	r3, r1
 8005048:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	212c      	movs	r1, #44	; 0x2c
 8005050:	fb01 f303 	mul.w	r3, r1, r3
 8005054:	4413      	add	r3, r2
 8005056:	3360      	adds	r3, #96	; 0x60
 8005058:	781b      	ldrb	r3, [r3, #0]
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	460b      	mov	r3, r1
 8005070:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005072:	78fb      	ldrb	r3, [r7, #3]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	212c      	movs	r1, #44	; 0x2c
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	4413      	add	r3, r2
 800507e:	3350      	adds	r3, #80	; 0x50
 8005080:	681b      	ldr	r3, [r3, #0]
}
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b082      	sub	sp, #8
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f004 fed2 	bl	8009e44 <USB_GetCurrentFrame>
 80050a0:	4603      	mov	r3, r0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f004 fead 	bl	8009e16 <USB_GetHostSpeed>
 80050bc:	4603      	mov	r3, r0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b086      	sub	sp, #24
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	460b      	mov	r3, r1
 80050d0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d11a      	bne.n	800512c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005102:	461a      	mov	r2, r3
 8005104:	2304      	movs	r3, #4
 8005106:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	212c      	movs	r1, #44	; 0x2c
 800510e:	fb01 f303 	mul.w	r3, r1, r3
 8005112:	4413      	add	r3, r2
 8005114:	3361      	adds	r3, #97	; 0x61
 8005116:	2206      	movs	r2, #6
 8005118:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f005 f914 	bl	800a352 <USB_HC_Halt>
 800512a:	e0af      	b.n	800528c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4413      	add	r3, r2
 8005134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005142:	d11b      	bne.n	800517c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4413      	add	r3, r2
 800514c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005150:	461a      	mov	r2, r3
 8005152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005156:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	212c      	movs	r1, #44	; 0x2c
 800515e:	fb01 f303 	mul.w	r3, r1, r3
 8005162:	4413      	add	r3, r2
 8005164:	3361      	adds	r3, #97	; 0x61
 8005166:	2207      	movs	r2, #7
 8005168:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	4611      	mov	r1, r2
 8005174:	4618      	mov	r0, r3
 8005176:	f005 f8ec 	bl	800a352 <USB_HC_Halt>
 800517a:	e087      	b.n	800528c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4413      	add	r3, r2
 8005184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b20      	cmp	r3, #32
 8005190:	d109      	bne.n	80051a6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4413      	add	r3, r2
 800519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519e:	461a      	mov	r2, r3
 80051a0:	2320      	movs	r3, #32
 80051a2:	6093      	str	r3, [r2, #8]
 80051a4:	e072      	b.n	800528c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d11a      	bne.n	80051f2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c8:	461a      	mov	r2, r3
 80051ca:	2308      	movs	r3, #8
 80051cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	212c      	movs	r1, #44	; 0x2c
 80051d4:	fb01 f303 	mul.w	r3, r1, r3
 80051d8:	4413      	add	r3, r2
 80051da:	3361      	adds	r3, #97	; 0x61
 80051dc:	2205      	movs	r2, #5
 80051de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	4611      	mov	r1, r2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f005 f8b1 	bl	800a352 <USB_HC_Halt>
 80051f0:	e04c      	b.n	800528c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005208:	d11b      	bne.n	8005242 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4413      	add	r3, r2
 8005212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005216:	461a      	mov	r2, r3
 8005218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800521c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	212c      	movs	r1, #44	; 0x2c
 8005224:	fb01 f303 	mul.w	r3, r1, r3
 8005228:	4413      	add	r3, r2
 800522a:	3361      	adds	r3, #97	; 0x61
 800522c:	2208      	movs	r2, #8
 800522e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	4611      	mov	r1, r2
 800523a:	4618      	mov	r0, r3
 800523c:	f005 f889 	bl	800a352 <USB_HC_Halt>
 8005240:	e024      	b.n	800528c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4413      	add	r3, r2
 800524a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005254:	2b80      	cmp	r3, #128	; 0x80
 8005256:	d119      	bne.n	800528c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4413      	add	r3, r2
 8005260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005264:	461a      	mov	r2, r3
 8005266:	2380      	movs	r3, #128	; 0x80
 8005268:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	212c      	movs	r1, #44	; 0x2c
 8005270:	fb01 f303 	mul.w	r3, r1, r3
 8005274:	4413      	add	r3, r2
 8005276:	3361      	adds	r3, #97	; 0x61
 8005278:	2206      	movs	r2, #6
 800527a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	4611      	mov	r1, r2
 8005286:	4618      	mov	r0, r3
 8005288:	f005 f863 	bl	800a352 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4413      	add	r3, r2
 8005294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800529e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a2:	d112      	bne.n	80052ca <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	4611      	mov	r1, r2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f005 f84f 	bl	800a352 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c0:	461a      	mov	r2, r3
 80052c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052c6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80052c8:	e24e      	b.n	8005768 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b01      	cmp	r3, #1
 80052de:	f040 80df 	bne.w	80054a0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d019      	beq.n	800531e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	212c      	movs	r1, #44	; 0x2c
 80052f0:	fb01 f303 	mul.w	r3, r1, r3
 80052f4:	4413      	add	r3, r2
 80052f6:	3348      	adds	r3, #72	; 0x48
 80052f8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	0159      	lsls	r1, r3, #5
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	440b      	add	r3, r1
 8005302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800530c:	1ad2      	subs	r2, r2, r3
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	202c      	movs	r0, #44	; 0x2c
 8005314:	fb00 f303 	mul.w	r3, r0, r3
 8005318:	440b      	add	r3, r1
 800531a:	3350      	adds	r3, #80	; 0x50
 800531c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	212c      	movs	r1, #44	; 0x2c
 8005324:	fb01 f303 	mul.w	r3, r1, r3
 8005328:	4413      	add	r3, r2
 800532a:	3361      	adds	r3, #97	; 0x61
 800532c:	2201      	movs	r2, #1
 800532e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	212c      	movs	r1, #44	; 0x2c
 8005336:	fb01 f303 	mul.w	r3, r1, r3
 800533a:	4413      	add	r3, r2
 800533c:	335c      	adds	r3, #92	; 0x5c
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	4413      	add	r3, r2
 800534a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534e:	461a      	mov	r2, r3
 8005350:	2301      	movs	r3, #1
 8005352:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	212c      	movs	r1, #44	; 0x2c
 800535a:	fb01 f303 	mul.w	r3, r1, r3
 800535e:	4413      	add	r3, r2
 8005360:	333f      	adds	r3, #63	; 0x3f
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d009      	beq.n	800537c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	212c      	movs	r1, #44	; 0x2c
 800536e:	fb01 f303 	mul.w	r3, r1, r3
 8005372:	4413      	add	r3, r2
 8005374:	333f      	adds	r3, #63	; 0x3f
 8005376:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005378:	2b02      	cmp	r3, #2
 800537a:	d111      	bne.n	80053a0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	4611      	mov	r1, r2
 8005386:	4618      	mov	r0, r3
 8005388:	f004 ffe3 	bl	800a352 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	4413      	add	r3, r2
 8005394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005398:	461a      	mov	r2, r3
 800539a:	2310      	movs	r3, #16
 800539c:	6093      	str	r3, [r2, #8]
 800539e:	e03a      	b.n	8005416 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	212c      	movs	r1, #44	; 0x2c
 80053a6:	fb01 f303 	mul.w	r3, r1, r3
 80053aa:	4413      	add	r3, r2
 80053ac:	333f      	adds	r3, #63	; 0x3f
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d009      	beq.n	80053c8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	212c      	movs	r1, #44	; 0x2c
 80053ba:	fb01 f303 	mul.w	r3, r1, r3
 80053be:	4413      	add	r3, r2
 80053c0:	333f      	adds	r3, #63	; 0x3f
 80053c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d126      	bne.n	8005416 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	0151      	lsls	r1, r2, #5
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	440a      	add	r2, r1
 80053de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053e6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	212c      	movs	r1, #44	; 0x2c
 80053ee:	fb01 f303 	mul.w	r3, r1, r3
 80053f2:	4413      	add	r3, r2
 80053f4:	3360      	adds	r3, #96	; 0x60
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	b2d9      	uxtb	r1, r3
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	202c      	movs	r0, #44	; 0x2c
 8005404:	fb00 f303 	mul.w	r3, r0, r3
 8005408:	4413      	add	r3, r2
 800540a:	3360      	adds	r3, #96	; 0x60
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f009 ff8b 	bl	800f32c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d12b      	bne.n	8005476 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	212c      	movs	r1, #44	; 0x2c
 8005424:	fb01 f303 	mul.w	r3, r1, r3
 8005428:	4413      	add	r3, r2
 800542a:	3348      	adds	r3, #72	; 0x48
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	202c      	movs	r0, #44	; 0x2c
 8005434:	fb00 f202 	mul.w	r2, r0, r2
 8005438:	440a      	add	r2, r1
 800543a:	3240      	adds	r2, #64	; 0x40
 800543c:	8812      	ldrh	r2, [r2, #0]
 800543e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 818e 	beq.w	8005768 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	212c      	movs	r1, #44	; 0x2c
 8005452:	fb01 f303 	mul.w	r3, r1, r3
 8005456:	4413      	add	r3, r2
 8005458:	3354      	adds	r3, #84	; 0x54
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	f083 0301 	eor.w	r3, r3, #1
 8005460:	b2d8      	uxtb	r0, r3
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	212c      	movs	r1, #44	; 0x2c
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	4413      	add	r3, r2
 800546e:	3354      	adds	r3, #84	; 0x54
 8005470:	4602      	mov	r2, r0
 8005472:	701a      	strb	r2, [r3, #0]
}
 8005474:	e178      	b.n	8005768 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	212c      	movs	r1, #44	; 0x2c
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	4413      	add	r3, r2
 8005482:	3354      	adds	r3, #84	; 0x54
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	f083 0301 	eor.w	r3, r3, #1
 800548a:	b2d8      	uxtb	r0, r3
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	212c      	movs	r1, #44	; 0x2c
 8005492:	fb01 f303 	mul.w	r3, r1, r3
 8005496:	4413      	add	r3, r2
 8005498:	3354      	adds	r3, #84	; 0x54
 800549a:	4602      	mov	r2, r0
 800549c:	701a      	strb	r2, [r3, #0]
}
 800549e:	e163      	b.n	8005768 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	f040 80f6 	bne.w	80056a4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	212c      	movs	r1, #44	; 0x2c
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	4413      	add	r3, r2
 80054c4:	3361      	adds	r3, #97	; 0x61
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d109      	bne.n	80054e0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	212c      	movs	r1, #44	; 0x2c
 80054d2:	fb01 f303 	mul.w	r3, r1, r3
 80054d6:	4413      	add	r3, r2
 80054d8:	3360      	adds	r3, #96	; 0x60
 80054da:	2201      	movs	r2, #1
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e0c9      	b.n	8005674 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	212c      	movs	r1, #44	; 0x2c
 80054e6:	fb01 f303 	mul.w	r3, r1, r3
 80054ea:	4413      	add	r3, r2
 80054ec:	3361      	adds	r3, #97	; 0x61
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b05      	cmp	r3, #5
 80054f2:	d109      	bne.n	8005508 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	212c      	movs	r1, #44	; 0x2c
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	4413      	add	r3, r2
 8005500:	3360      	adds	r3, #96	; 0x60
 8005502:	2205      	movs	r2, #5
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	e0b5      	b.n	8005674 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	212c      	movs	r1, #44	; 0x2c
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	4413      	add	r3, r2
 8005514:	3361      	adds	r3, #97	; 0x61
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b06      	cmp	r3, #6
 800551a:	d009      	beq.n	8005530 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	212c      	movs	r1, #44	; 0x2c
 8005522:	fb01 f303 	mul.w	r3, r1, r3
 8005526:	4413      	add	r3, r2
 8005528:	3361      	adds	r3, #97	; 0x61
 800552a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800552c:	2b08      	cmp	r3, #8
 800552e:	d150      	bne.n	80055d2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	212c      	movs	r1, #44	; 0x2c
 8005536:	fb01 f303 	mul.w	r3, r1, r3
 800553a:	4413      	add	r3, r2
 800553c:	335c      	adds	r3, #92	; 0x5c
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	202c      	movs	r0, #44	; 0x2c
 8005548:	fb00 f303 	mul.w	r3, r0, r3
 800554c:	440b      	add	r3, r1
 800554e:	335c      	adds	r3, #92	; 0x5c
 8005550:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	212c      	movs	r1, #44	; 0x2c
 8005558:	fb01 f303 	mul.w	r3, r1, r3
 800555c:	4413      	add	r3, r2
 800555e:	335c      	adds	r3, #92	; 0x5c
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b02      	cmp	r3, #2
 8005564:	d912      	bls.n	800558c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	212c      	movs	r1, #44	; 0x2c
 800556c:	fb01 f303 	mul.w	r3, r1, r3
 8005570:	4413      	add	r3, r2
 8005572:	335c      	adds	r3, #92	; 0x5c
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	212c      	movs	r1, #44	; 0x2c
 800557e:	fb01 f303 	mul.w	r3, r1, r3
 8005582:	4413      	add	r3, r2
 8005584:	3360      	adds	r3, #96	; 0x60
 8005586:	2204      	movs	r2, #4
 8005588:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800558a:	e073      	b.n	8005674 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	212c      	movs	r1, #44	; 0x2c
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	4413      	add	r3, r2
 8005598:	3360      	adds	r3, #96	; 0x60
 800559a:	2202      	movs	r2, #2
 800559c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055b4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055bc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ca:	461a      	mov	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80055d0:	e050      	b.n	8005674 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	212c      	movs	r1, #44	; 0x2c
 80055d8:	fb01 f303 	mul.w	r3, r1, r3
 80055dc:	4413      	add	r3, r2
 80055de:	3361      	adds	r3, #97	; 0x61
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d122      	bne.n	800562c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	212c      	movs	r1, #44	; 0x2c
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	4413      	add	r3, r2
 80055f2:	3360      	adds	r3, #96	; 0x60
 80055f4:	2202      	movs	r2, #2
 80055f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800560e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005616:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4413      	add	r3, r2
 8005620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005624:	461a      	mov	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	e023      	b.n	8005674 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	212c      	movs	r1, #44	; 0x2c
 8005632:	fb01 f303 	mul.w	r3, r1, r3
 8005636:	4413      	add	r3, r2
 8005638:	3361      	adds	r3, #97	; 0x61
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b07      	cmp	r3, #7
 800563e:	d119      	bne.n	8005674 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	212c      	movs	r1, #44	; 0x2c
 8005646:	fb01 f303 	mul.w	r3, r1, r3
 800564a:	4413      	add	r3, r2
 800564c:	335c      	adds	r3, #92	; 0x5c
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	202c      	movs	r0, #44	; 0x2c
 8005658:	fb00 f303 	mul.w	r3, r0, r3
 800565c:	440b      	add	r3, r1
 800565e:	335c      	adds	r3, #92	; 0x5c
 8005660:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	212c      	movs	r1, #44	; 0x2c
 8005668:	fb01 f303 	mul.w	r3, r1, r3
 800566c:	4413      	add	r3, r2
 800566e:	3360      	adds	r3, #96	; 0x60
 8005670:	2204      	movs	r2, #4
 8005672:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	4413      	add	r3, r2
 800567c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005680:	461a      	mov	r2, r3
 8005682:	2302      	movs	r3, #2
 8005684:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	b2d9      	uxtb	r1, r3
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	202c      	movs	r0, #44	; 0x2c
 8005690:	fb00 f303 	mul.w	r3, r0, r3
 8005694:	4413      	add	r3, r2
 8005696:	3360      	adds	r3, #96	; 0x60
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f009 fe45 	bl	800f32c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80056a2:	e061      	b.n	8005768 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b10      	cmp	r3, #16
 80056b8:	d156      	bne.n	8005768 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	212c      	movs	r1, #44	; 0x2c
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	4413      	add	r3, r2
 80056c6:	333f      	adds	r3, #63	; 0x3f
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d111      	bne.n	80056f2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	212c      	movs	r1, #44	; 0x2c
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	4413      	add	r3, r2
 80056da:	335c      	adds	r3, #92	; 0x5c
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	4611      	mov	r1, r2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f004 fe31 	bl	800a352 <USB_HC_Halt>
 80056f0:	e031      	b.n	8005756 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	212c      	movs	r1, #44	; 0x2c
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	4413      	add	r3, r2
 80056fe:	333f      	adds	r3, #63	; 0x3f
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	212c      	movs	r1, #44	; 0x2c
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	4413      	add	r3, r2
 8005712:	333f      	adds	r3, #63	; 0x3f
 8005714:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005716:	2b02      	cmp	r3, #2
 8005718:	d11d      	bne.n	8005756 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	212c      	movs	r1, #44	; 0x2c
 8005720:	fb01 f303 	mul.w	r3, r1, r3
 8005724:	4413      	add	r3, r2
 8005726:	335c      	adds	r3, #92	; 0x5c
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d110      	bne.n	8005756 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	212c      	movs	r1, #44	; 0x2c
 800573a:	fb01 f303 	mul.w	r3, r1, r3
 800573e:	4413      	add	r3, r2
 8005740:	3361      	adds	r3, #97	; 0x61
 8005742:	2203      	movs	r2, #3
 8005744:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f004 fdfe 	bl	800a352 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4413      	add	r3, r2
 800575e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005762:	461a      	mov	r2, r3
 8005764:	2310      	movs	r3, #16
 8005766:	6093      	str	r3, [r2, #8]
}
 8005768:	bf00      	nop
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	4413      	add	r3, r2
 8005792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b04      	cmp	r3, #4
 800579e:	d11a      	bne.n	80057d6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ac:	461a      	mov	r2, r3
 80057ae:	2304      	movs	r3, #4
 80057b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	212c      	movs	r1, #44	; 0x2c
 80057b8:	fb01 f303 	mul.w	r3, r1, r3
 80057bc:	4413      	add	r3, r2
 80057be:	3361      	adds	r3, #97	; 0x61
 80057c0:	2206      	movs	r2, #6
 80057c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	4611      	mov	r1, r2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f004 fdbf 	bl	800a352 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80057d4:	e331      	b.n	8005e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d12e      	bne.n	800584a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f8:	461a      	mov	r2, r3
 80057fa:	2320      	movs	r3, #32
 80057fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	212c      	movs	r1, #44	; 0x2c
 8005804:	fb01 f303 	mul.w	r3, r1, r3
 8005808:	4413      	add	r3, r2
 800580a:	333d      	adds	r3, #61	; 0x3d
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b01      	cmp	r3, #1
 8005810:	f040 8313 	bne.w	8005e3a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	212c      	movs	r1, #44	; 0x2c
 800581a:	fb01 f303 	mul.w	r3, r1, r3
 800581e:	4413      	add	r3, r2
 8005820:	333d      	adds	r3, #61	; 0x3d
 8005822:	2200      	movs	r2, #0
 8005824:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	212c      	movs	r1, #44	; 0x2c
 800582c:	fb01 f303 	mul.w	r3, r1, r3
 8005830:	4413      	add	r3, r2
 8005832:	3360      	adds	r3, #96	; 0x60
 8005834:	2202      	movs	r2, #2
 8005836:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f004 fd85 	bl	800a352 <USB_HC_Halt>
}
 8005848:	e2f7      	b.n	8005e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	4413      	add	r3, r2
 8005852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800585c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005860:	d112      	bne.n	8005888 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	4413      	add	r3, r2
 800586a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586e:	461a      	mov	r2, r3
 8005870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005874:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	4611      	mov	r1, r2
 8005880:	4618      	mov	r0, r3
 8005882:	f004 fd66 	bl	800a352 <USB_HC_Halt>
}
 8005886:	e2d8      	b.n	8005e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b01      	cmp	r3, #1
 800589c:	d140      	bne.n	8005920 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	212c      	movs	r1, #44	; 0x2c
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	4413      	add	r3, r2
 80058aa:	335c      	adds	r3, #92	; 0x5c
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	d111      	bne.n	80058ea <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	212c      	movs	r1, #44	; 0x2c
 80058cc:	fb01 f303 	mul.w	r3, r1, r3
 80058d0:	4413      	add	r3, r2
 80058d2:	333d      	adds	r3, #61	; 0x3d
 80058d4:	2201      	movs	r2, #1
 80058d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e4:	461a      	mov	r2, r3
 80058e6:	2340      	movs	r3, #64	; 0x40
 80058e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f6:	461a      	mov	r2, r3
 80058f8:	2301      	movs	r3, #1
 80058fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	212c      	movs	r1, #44	; 0x2c
 8005902:	fb01 f303 	mul.w	r3, r1, r3
 8005906:	4413      	add	r3, r2
 8005908:	3361      	adds	r3, #97	; 0x61
 800590a:	2201      	movs	r2, #1
 800590c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	4611      	mov	r1, r2
 8005918:	4618      	mov	r0, r3
 800591a:	f004 fd1a 	bl	800a352 <USB_HC_Halt>
}
 800591e:	e28c      	b.n	8005e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	4413      	add	r3, r2
 8005928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005932:	2b40      	cmp	r3, #64	; 0x40
 8005934:	d12c      	bne.n	8005990 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	212c      	movs	r1, #44	; 0x2c
 800593c:	fb01 f303 	mul.w	r3, r1, r3
 8005940:	4413      	add	r3, r2
 8005942:	3361      	adds	r3, #97	; 0x61
 8005944:	2204      	movs	r2, #4
 8005946:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	212c      	movs	r1, #44	; 0x2c
 800594e:	fb01 f303 	mul.w	r3, r1, r3
 8005952:	4413      	add	r3, r2
 8005954:	333d      	adds	r3, #61	; 0x3d
 8005956:	2201      	movs	r2, #1
 8005958:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	212c      	movs	r1, #44	; 0x2c
 8005960:	fb01 f303 	mul.w	r3, r1, r3
 8005964:	4413      	add	r3, r2
 8005966:	335c      	adds	r3, #92	; 0x5c
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	4611      	mov	r1, r2
 8005976:	4618      	mov	r0, r3
 8005978:	f004 fceb 	bl	800a352 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	4413      	add	r3, r2
 8005984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005988:	461a      	mov	r2, r3
 800598a:	2340      	movs	r3, #64	; 0x40
 800598c:	6093      	str	r3, [r2, #8]
}
 800598e:	e254      	b.n	8005e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	4413      	add	r3, r2
 8005998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d11a      	bne.n	80059dc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b2:	461a      	mov	r2, r3
 80059b4:	2308      	movs	r3, #8
 80059b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	212c      	movs	r1, #44	; 0x2c
 80059be:	fb01 f303 	mul.w	r3, r1, r3
 80059c2:	4413      	add	r3, r2
 80059c4:	3361      	adds	r3, #97	; 0x61
 80059c6:	2205      	movs	r2, #5
 80059c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	4611      	mov	r1, r2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f004 fcbc 	bl	800a352 <USB_HC_Halt>
}
 80059da:	e22e      	b.n	8005e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d140      	bne.n	8005a74 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	212c      	movs	r1, #44	; 0x2c
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	4413      	add	r3, r2
 80059fe:	335c      	adds	r3, #92	; 0x5c
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	212c      	movs	r1, #44	; 0x2c
 8005a0a:	fb01 f303 	mul.w	r3, r1, r3
 8005a0e:	4413      	add	r3, r2
 8005a10:	3361      	adds	r3, #97	; 0x61
 8005a12:	2203      	movs	r2, #3
 8005a14:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	212c      	movs	r1, #44	; 0x2c
 8005a1c:	fb01 f303 	mul.w	r3, r1, r3
 8005a20:	4413      	add	r3, r2
 8005a22:	333d      	adds	r3, #61	; 0x3d
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d112      	bne.n	8005a50 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	212c      	movs	r1, #44	; 0x2c
 8005a30:	fb01 f303 	mul.w	r3, r1, r3
 8005a34:	4413      	add	r3, r2
 8005a36:	333c      	adds	r3, #60	; 0x3c
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d108      	bne.n	8005a50 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	212c      	movs	r1, #44	; 0x2c
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	4413      	add	r3, r2
 8005a4a:	333d      	adds	r3, #61	; 0x3d
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	4611      	mov	r1, r2
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f004 fc79 	bl	800a352 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	2310      	movs	r3, #16
 8005a70:	6093      	str	r3, [r2, #8]
}
 8005a72:	e1e2      	b.n	8005e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a86:	2b80      	cmp	r3, #128	; 0x80
 8005a88:	d164      	bne.n	8005b54 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d111      	bne.n	8005ab6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	212c      	movs	r1, #44	; 0x2c
 8005a98:	fb01 f303 	mul.w	r3, r1, r3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	3361      	adds	r3, #97	; 0x61
 8005aa0:	2206      	movs	r2, #6
 8005aa2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	4611      	mov	r1, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f004 fc4f 	bl	800a352 <USB_HC_Halt>
 8005ab4:	e044      	b.n	8005b40 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	212c      	movs	r1, #44	; 0x2c
 8005abc:	fb01 f303 	mul.w	r3, r1, r3
 8005ac0:	4413      	add	r3, r2
 8005ac2:	335c      	adds	r3, #92	; 0x5c
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	202c      	movs	r0, #44	; 0x2c
 8005ace:	fb00 f303 	mul.w	r3, r0, r3
 8005ad2:	440b      	add	r3, r1
 8005ad4:	335c      	adds	r3, #92	; 0x5c
 8005ad6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	212c      	movs	r1, #44	; 0x2c
 8005ade:	fb01 f303 	mul.w	r3, r1, r3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	335c      	adds	r3, #92	; 0x5c
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d920      	bls.n	8005b2e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	212c      	movs	r1, #44	; 0x2c
 8005af2:	fb01 f303 	mul.w	r3, r1, r3
 8005af6:	4413      	add	r3, r2
 8005af8:	335c      	adds	r3, #92	; 0x5c
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	212c      	movs	r1, #44	; 0x2c
 8005b04:	fb01 f303 	mul.w	r3, r1, r3
 8005b08:	4413      	add	r3, r2
 8005b0a:	3360      	adds	r3, #96	; 0x60
 8005b0c:	2204      	movs	r2, #4
 8005b0e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	b2d9      	uxtb	r1, r3
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	202c      	movs	r0, #44	; 0x2c
 8005b1a:	fb00 f303 	mul.w	r3, r0, r3
 8005b1e:	4413      	add	r3, r2
 8005b20:	3360      	adds	r3, #96	; 0x60
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f009 fc00 	bl	800f32c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005b2c:	e008      	b.n	8005b40 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	212c      	movs	r1, #44	; 0x2c
 8005b34:	fb01 f303 	mul.w	r3, r1, r3
 8005b38:	4413      	add	r3, r2
 8005b3a:	3360      	adds	r3, #96	; 0x60
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	2380      	movs	r3, #128	; 0x80
 8005b50:	6093      	str	r3, [r2, #8]
}
 8005b52:	e172      	b.n	8005e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b6a:	d11b      	bne.n	8005ba4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	212c      	movs	r1, #44	; 0x2c
 8005b72:	fb01 f303 	mul.w	r3, r1, r3
 8005b76:	4413      	add	r3, r2
 8005b78:	3361      	adds	r3, #97	; 0x61
 8005b7a:	2208      	movs	r2, #8
 8005b7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	b2d2      	uxtb	r2, r2
 8005b86:	4611      	mov	r1, r2
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f004 fbe2 	bl	800a352 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ba0:	6093      	str	r3, [r2, #8]
}
 8005ba2:	e14a      	b.n	8005e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	f040 813f 	bne.w	8005e3a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	212c      	movs	r1, #44	; 0x2c
 8005bc2:	fb01 f303 	mul.w	r3, r1, r3
 8005bc6:	4413      	add	r3, r2
 8005bc8:	3361      	adds	r3, #97	; 0x61
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d17d      	bne.n	8005ccc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	212c      	movs	r1, #44	; 0x2c
 8005bd6:	fb01 f303 	mul.w	r3, r1, r3
 8005bda:	4413      	add	r3, r2
 8005bdc:	3360      	adds	r3, #96	; 0x60
 8005bde:	2201      	movs	r2, #1
 8005be0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	212c      	movs	r1, #44	; 0x2c
 8005be8:	fb01 f303 	mul.w	r3, r1, r3
 8005bec:	4413      	add	r3, r2
 8005bee:	333f      	adds	r3, #63	; 0x3f
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d00a      	beq.n	8005c0c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	212c      	movs	r1, #44	; 0x2c
 8005bfc:	fb01 f303 	mul.w	r3, r1, r3
 8005c00:	4413      	add	r3, r2
 8005c02:	333f      	adds	r3, #63	; 0x3f
 8005c04:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	f040 8100 	bne.w	8005e0c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d113      	bne.n	8005c3c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	212c      	movs	r1, #44	; 0x2c
 8005c1a:	fb01 f303 	mul.w	r3, r1, r3
 8005c1e:	4413      	add	r3, r2
 8005c20:	3355      	adds	r3, #85	; 0x55
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	f083 0301 	eor.w	r3, r3, #1
 8005c28:	b2d8      	uxtb	r0, r3
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	212c      	movs	r1, #44	; 0x2c
 8005c30:	fb01 f303 	mul.w	r3, r1, r3
 8005c34:	4413      	add	r3, r2
 8005c36:	3355      	adds	r3, #85	; 0x55
 8005c38:	4602      	mov	r2, r0
 8005c3a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	f040 80e3 	bne.w	8005e0c <HCD_HC_OUT_IRQHandler+0x69c>
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	212c      	movs	r1, #44	; 0x2c
 8005c4c:	fb01 f303 	mul.w	r3, r1, r3
 8005c50:	4413      	add	r3, r2
 8005c52:	334c      	adds	r3, #76	; 0x4c
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 80d8 	beq.w	8005e0c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	212c      	movs	r1, #44	; 0x2c
 8005c62:	fb01 f303 	mul.w	r3, r1, r3
 8005c66:	4413      	add	r3, r2
 8005c68:	334c      	adds	r3, #76	; 0x4c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	202c      	movs	r0, #44	; 0x2c
 8005c72:	fb00 f202 	mul.w	r2, r0, r2
 8005c76:	440a      	add	r2, r1
 8005c78:	3240      	adds	r2, #64	; 0x40
 8005c7a:	8812      	ldrh	r2, [r2, #0]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	202c      	movs	r0, #44	; 0x2c
 8005c86:	fb00 f202 	mul.w	r2, r0, r2
 8005c8a:	440a      	add	r2, r1
 8005c8c:	3240      	adds	r2, #64	; 0x40
 8005c8e:	8812      	ldrh	r2, [r2, #0]
 8005c90:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 80b5 	beq.w	8005e0c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	212c      	movs	r1, #44	; 0x2c
 8005ca8:	fb01 f303 	mul.w	r3, r1, r3
 8005cac:	4413      	add	r3, r2
 8005cae:	3355      	adds	r3, #85	; 0x55
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	f083 0301 	eor.w	r3, r3, #1
 8005cb6:	b2d8      	uxtb	r0, r3
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	212c      	movs	r1, #44	; 0x2c
 8005cbe:	fb01 f303 	mul.w	r3, r1, r3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	3355      	adds	r3, #85	; 0x55
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	e09f      	b.n	8005e0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	212c      	movs	r1, #44	; 0x2c
 8005cd2:	fb01 f303 	mul.w	r3, r1, r3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3361      	adds	r3, #97	; 0x61
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d109      	bne.n	8005cf4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	212c      	movs	r1, #44	; 0x2c
 8005ce6:	fb01 f303 	mul.w	r3, r1, r3
 8005cea:	4413      	add	r3, r2
 8005cec:	3360      	adds	r3, #96	; 0x60
 8005cee:	2202      	movs	r2, #2
 8005cf0:	701a      	strb	r2, [r3, #0]
 8005cf2:	e08b      	b.n	8005e0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	212c      	movs	r1, #44	; 0x2c
 8005cfa:	fb01 f303 	mul.w	r3, r1, r3
 8005cfe:	4413      	add	r3, r2
 8005d00:	3361      	adds	r3, #97	; 0x61
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d109      	bne.n	8005d1c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	212c      	movs	r1, #44	; 0x2c
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	4413      	add	r3, r2
 8005d14:	3360      	adds	r3, #96	; 0x60
 8005d16:	2202      	movs	r2, #2
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	e077      	b.n	8005e0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	212c      	movs	r1, #44	; 0x2c
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	4413      	add	r3, r2
 8005d28:	3361      	adds	r3, #97	; 0x61
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b05      	cmp	r3, #5
 8005d2e:	d109      	bne.n	8005d44 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	212c      	movs	r1, #44	; 0x2c
 8005d36:	fb01 f303 	mul.w	r3, r1, r3
 8005d3a:	4413      	add	r3, r2
 8005d3c:	3360      	adds	r3, #96	; 0x60
 8005d3e:	2205      	movs	r2, #5
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	e063      	b.n	8005e0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	212c      	movs	r1, #44	; 0x2c
 8005d4a:	fb01 f303 	mul.w	r3, r1, r3
 8005d4e:	4413      	add	r3, r2
 8005d50:	3361      	adds	r3, #97	; 0x61
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b06      	cmp	r3, #6
 8005d56:	d009      	beq.n	8005d6c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	212c      	movs	r1, #44	; 0x2c
 8005d5e:	fb01 f303 	mul.w	r3, r1, r3
 8005d62:	4413      	add	r3, r2
 8005d64:	3361      	adds	r3, #97	; 0x61
 8005d66:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d14f      	bne.n	8005e0c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	212c      	movs	r1, #44	; 0x2c
 8005d72:	fb01 f303 	mul.w	r3, r1, r3
 8005d76:	4413      	add	r3, r2
 8005d78:	335c      	adds	r3, #92	; 0x5c
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	202c      	movs	r0, #44	; 0x2c
 8005d84:	fb00 f303 	mul.w	r3, r0, r3
 8005d88:	440b      	add	r3, r1
 8005d8a:	335c      	adds	r3, #92	; 0x5c
 8005d8c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	212c      	movs	r1, #44	; 0x2c
 8005d94:	fb01 f303 	mul.w	r3, r1, r3
 8005d98:	4413      	add	r3, r2
 8005d9a:	335c      	adds	r3, #92	; 0x5c
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d912      	bls.n	8005dc8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	212c      	movs	r1, #44	; 0x2c
 8005da8:	fb01 f303 	mul.w	r3, r1, r3
 8005dac:	4413      	add	r3, r2
 8005dae:	335c      	adds	r3, #92	; 0x5c
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	212c      	movs	r1, #44	; 0x2c
 8005dba:	fb01 f303 	mul.w	r3, r1, r3
 8005dbe:	4413      	add	r3, r2
 8005dc0:	3360      	adds	r3, #96	; 0x60
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	e021      	b.n	8005e0c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	212c      	movs	r1, #44	; 0x2c
 8005dce:	fb01 f303 	mul.w	r3, r1, r3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	3360      	adds	r3, #96	; 0x60
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005df0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005df8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e06:	461a      	mov	r2, r3
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e18:	461a      	mov	r2, r3
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	b2d9      	uxtb	r1, r3
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	202c      	movs	r0, #44	; 0x2c
 8005e28:	fb00 f303 	mul.w	r3, r0, r3
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3360      	adds	r3, #96	; 0x60
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f009 fa79 	bl	800f32c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005e3a:	bf00      	nop
 8005e3c:	3720      	adds	r7, #32
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b08a      	sub	sp, #40	; 0x28
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	0c5b      	lsrs	r3, r3, #17
 8005e68:	f003 030f 	and.w	r3, r3, #15
 8005e6c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	091b      	lsrs	r3, r3, #4
 8005e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e76:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d004      	beq.n	8005e88 <HCD_RXQLVL_IRQHandler+0x46>
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b05      	cmp	r3, #5
 8005e82:	f000 80a9 	beq.w	8005fd8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005e86:	e0aa      	b.n	8005fde <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 80a6 	beq.w	8005fdc <HCD_RXQLVL_IRQHandler+0x19a>
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	212c      	movs	r1, #44	; 0x2c
 8005e96:	fb01 f303 	mul.w	r3, r1, r3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	3344      	adds	r3, #68	; 0x44
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 809b 	beq.w	8005fdc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	212c      	movs	r1, #44	; 0x2c
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	3350      	adds	r3, #80	; 0x50
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	441a      	add	r2, r3
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	202c      	movs	r0, #44	; 0x2c
 8005ec0:	fb00 f303 	mul.w	r3, r0, r3
 8005ec4:	440b      	add	r3, r1
 8005ec6:	334c      	adds	r3, #76	; 0x4c
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d87a      	bhi.n	8005fc4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	212c      	movs	r1, #44	; 0x2c
 8005ed8:	fb01 f303 	mul.w	r3, r1, r3
 8005edc:	4413      	add	r3, r2
 8005ede:	3344      	adds	r3, #68	; 0x44
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	f003 fd8a 	bl	8009a00 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	212c      	movs	r1, #44	; 0x2c
 8005ef2:	fb01 f303 	mul.w	r3, r1, r3
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3344      	adds	r3, #68	; 0x44
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	441a      	add	r2, r3
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	202c      	movs	r0, #44	; 0x2c
 8005f06:	fb00 f303 	mul.w	r3, r0, r3
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3344      	adds	r3, #68	; 0x44
 8005f0e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	212c      	movs	r1, #44	; 0x2c
 8005f16:	fb01 f303 	mul.w	r3, r1, r3
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3350      	adds	r3, #80	; 0x50
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	441a      	add	r2, r3
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	202c      	movs	r0, #44	; 0x2c
 8005f2a:	fb00 f303 	mul.w	r3, r0, r3
 8005f2e:	440b      	add	r3, r1
 8005f30:	3350      	adds	r3, #80	; 0x50
 8005f32:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	0cdb      	lsrs	r3, r3, #19
 8005f44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f48:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	212c      	movs	r1, #44	; 0x2c
 8005f50:	fb01 f303 	mul.w	r3, r1, r3
 8005f54:	4413      	add	r3, r2
 8005f56:	3340      	adds	r3, #64	; 0x40
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d13c      	bne.n	8005fdc <HCD_RXQLVL_IRQHandler+0x19a>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d039      	beq.n	8005fdc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f7e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f86:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f94:	461a      	mov	r2, r3
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	212c      	movs	r1, #44	; 0x2c
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3354      	adds	r3, #84	; 0x54
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	f083 0301 	eor.w	r3, r3, #1
 8005fae:	b2d8      	uxtb	r0, r3
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	212c      	movs	r1, #44	; 0x2c
 8005fb6:	fb01 f303 	mul.w	r3, r1, r3
 8005fba:	4413      	add	r3, r2
 8005fbc:	3354      	adds	r3, #84	; 0x54
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	701a      	strb	r2, [r3, #0]
      break;
 8005fc2:	e00b      	b.n	8005fdc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	212c      	movs	r1, #44	; 0x2c
 8005fca:	fb01 f303 	mul.w	r3, r1, r3
 8005fce:	4413      	add	r3, r2
 8005fd0:	3360      	adds	r3, #96	; 0x60
 8005fd2:	2204      	movs	r2, #4
 8005fd4:	701a      	strb	r2, [r3, #0]
      break;
 8005fd6:	e001      	b.n	8005fdc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005fd8:	bf00      	nop
 8005fda:	e000      	b.n	8005fde <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005fdc:	bf00      	nop
  }
}
 8005fde:	bf00      	nop
 8005fe0:	3728      	adds	r7, #40	; 0x28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b086      	sub	sp, #24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006012:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b02      	cmp	r3, #2
 800601c:	d10b      	bne.n	8006036 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b01      	cmp	r3, #1
 8006026:	d102      	bne.n	800602e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f009 f963 	bl	800f2f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f043 0302 	orr.w	r3, r3, #2
 8006034:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	2b08      	cmp	r3, #8
 800603e:	d132      	bne.n	80060a6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f043 0308 	orr.w	r3, r3, #8
 8006046:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b04      	cmp	r3, #4
 8006050:	d126      	bne.n	80060a0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d113      	bne.n	8006082 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006060:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006064:	d106      	bne.n	8006074 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2102      	movs	r1, #2
 800606c:	4618      	mov	r0, r3
 800606e:	f003 fe35 	bl	8009cdc <USB_InitFSLSPClkSel>
 8006072:	e011      	b.n	8006098 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2101      	movs	r1, #1
 800607a:	4618      	mov	r0, r3
 800607c:	f003 fe2e 	bl	8009cdc <USB_InitFSLSPClkSel>
 8006080:	e00a      	b.n	8006098 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d106      	bne.n	8006098 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006090:	461a      	mov	r2, r3
 8006092:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006096:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f009 f959 	bl	800f350 <HAL_HCD_PortEnabled_Callback>
 800609e:	e002      	b.n	80060a6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f009 f963 	bl	800f36c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f003 0320 	and.w	r3, r3, #32
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	d103      	bne.n	80060b8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f043 0320 	orr.w	r3, r3, #32
 80060b6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060be:	461a      	mov	r2, r3
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	6013      	str	r3, [r2, #0]
}
 80060c4:	bf00      	nop
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e12b      	b.n	8006336 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fc fb54 	bl	80027a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2224      	movs	r2, #36	; 0x24
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0201 	bic.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800611e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800612e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006130:	f001 fa0c 	bl	800754c <HAL_RCC_GetPCLK1Freq>
 8006134:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	4a81      	ldr	r2, [pc, #516]	; (8006340 <HAL_I2C_Init+0x274>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d807      	bhi.n	8006150 <HAL_I2C_Init+0x84>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4a80      	ldr	r2, [pc, #512]	; (8006344 <HAL_I2C_Init+0x278>)
 8006144:	4293      	cmp	r3, r2
 8006146:	bf94      	ite	ls
 8006148:	2301      	movls	r3, #1
 800614a:	2300      	movhi	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	e006      	b.n	800615e <HAL_I2C_Init+0x92>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4a7d      	ldr	r2, [pc, #500]	; (8006348 <HAL_I2C_Init+0x27c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	bf94      	ite	ls
 8006158:	2301      	movls	r3, #1
 800615a:	2300      	movhi	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e0e7      	b.n	8006336 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a78      	ldr	r2, [pc, #480]	; (800634c <HAL_I2C_Init+0x280>)
 800616a:	fba2 2303 	umull	r2, r3, r2, r3
 800616e:	0c9b      	lsrs	r3, r3, #18
 8006170:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	4a6a      	ldr	r2, [pc, #424]	; (8006340 <HAL_I2C_Init+0x274>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d802      	bhi.n	80061a0 <HAL_I2C_Init+0xd4>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	3301      	adds	r3, #1
 800619e:	e009      	b.n	80061b4 <HAL_I2C_Init+0xe8>
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80061a6:	fb02 f303 	mul.w	r3, r2, r3
 80061aa:	4a69      	ldr	r2, [pc, #420]	; (8006350 <HAL_I2C_Init+0x284>)
 80061ac:	fba2 2303 	umull	r2, r3, r2, r3
 80061b0:	099b      	lsrs	r3, r3, #6
 80061b2:	3301      	adds	r3, #1
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6812      	ldr	r2, [r2, #0]
 80061b8:	430b      	orrs	r3, r1
 80061ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80061c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	495c      	ldr	r1, [pc, #368]	; (8006340 <HAL_I2C_Init+0x274>)
 80061d0:	428b      	cmp	r3, r1
 80061d2:	d819      	bhi.n	8006208 <HAL_I2C_Init+0x13c>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	1e59      	subs	r1, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	fbb1 f3f3 	udiv	r3, r1, r3
 80061e2:	1c59      	adds	r1, r3, #1
 80061e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80061e8:	400b      	ands	r3, r1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00a      	beq.n	8006204 <HAL_I2C_Init+0x138>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	1e59      	subs	r1, r3, #1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80061fc:	3301      	adds	r3, #1
 80061fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006202:	e051      	b.n	80062a8 <HAL_I2C_Init+0x1dc>
 8006204:	2304      	movs	r3, #4
 8006206:	e04f      	b.n	80062a8 <HAL_I2C_Init+0x1dc>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d111      	bne.n	8006234 <HAL_I2C_Init+0x168>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	1e58      	subs	r0, r3, #1
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6859      	ldr	r1, [r3, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	440b      	add	r3, r1
 800621e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006222:	3301      	adds	r3, #1
 8006224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006228:	2b00      	cmp	r3, #0
 800622a:	bf0c      	ite	eq
 800622c:	2301      	moveq	r3, #1
 800622e:	2300      	movne	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	e012      	b.n	800625a <HAL_I2C_Init+0x18e>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	1e58      	subs	r0, r3, #1
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6859      	ldr	r1, [r3, #4]
 800623c:	460b      	mov	r3, r1
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	440b      	add	r3, r1
 8006242:	0099      	lsls	r1, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	fbb0 f3f3 	udiv	r3, r0, r3
 800624a:	3301      	adds	r3, #1
 800624c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006250:	2b00      	cmp	r3, #0
 8006252:	bf0c      	ite	eq
 8006254:	2301      	moveq	r3, #1
 8006256:	2300      	movne	r3, #0
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <HAL_I2C_Init+0x196>
 800625e:	2301      	movs	r3, #1
 8006260:	e022      	b.n	80062a8 <HAL_I2C_Init+0x1dc>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10e      	bne.n	8006288 <HAL_I2C_Init+0x1bc>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	1e58      	subs	r0, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6859      	ldr	r1, [r3, #4]
 8006272:	460b      	mov	r3, r1
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	440b      	add	r3, r1
 8006278:	fbb0 f3f3 	udiv	r3, r0, r3
 800627c:	3301      	adds	r3, #1
 800627e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006286:	e00f      	b.n	80062a8 <HAL_I2C_Init+0x1dc>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	1e58      	subs	r0, r3, #1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6859      	ldr	r1, [r3, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	440b      	add	r3, r1
 8006296:	0099      	lsls	r1, r3, #2
 8006298:	440b      	add	r3, r1
 800629a:	fbb0 f3f3 	udiv	r3, r0, r3
 800629e:	3301      	adds	r3, #1
 80062a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	6809      	ldr	r1, [r1, #0]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69da      	ldr	r2, [r3, #28]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80062d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6911      	ldr	r1, [r2, #16]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68d2      	ldr	r2, [r2, #12]
 80062e2:	4311      	orrs	r1, r2
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6812      	ldr	r2, [r2, #0]
 80062e8:	430b      	orrs	r3, r1
 80062ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0201 	orr.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	000186a0 	.word	0x000186a0
 8006344:	001e847f 	.word	0x001e847f
 8006348:	003d08ff 	.word	0x003d08ff
 800634c:	431bde83 	.word	0x431bde83
 8006350:	10624dd3 	.word	0x10624dd3

08006354 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b20      	cmp	r3, #32
 8006368:	d129      	bne.n	80063be <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2224      	movs	r2, #36	; 0x24
 800636e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0201 	bic.w	r2, r2, #1
 8006380:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0210 	bic.w	r2, r2, #16
 8006390:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0201 	orr.w	r2, r2, #1
 80063b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	e000      	b.n	80063c0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80063be:	2302      	movs	r3, #2
  }
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d12a      	bne.n	800643c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2224      	movs	r2, #36	; 0x24
 80063ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0201 	bic.w	r2, r2, #1
 80063fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006406:	89fb      	ldrh	r3, [r7, #14]
 8006408:	f023 030f 	bic.w	r3, r3, #15
 800640c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	b29a      	uxth	r2, r3
 8006412:	89fb      	ldrh	r3, [r7, #14]
 8006414:	4313      	orrs	r3, r2
 8006416:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	89fa      	ldrh	r2, [r7, #14]
 800641e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2220      	movs	r2, #32
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	e000      	b.n	800643e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800643c:	2302      	movs	r3, #2
  }
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
	...

0800644c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e0bf      	b.n	80065de <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fc f9fe 	bl	8002874 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800648e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6999      	ldr	r1, [r3, #24]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80064a4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6899      	ldr	r1, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4b4a      	ldr	r3, [pc, #296]	; (80065e8 <HAL_LTDC_Init+0x19c>)
 80064c0:	400b      	ands	r3, r1
 80064c2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	041b      	lsls	r3, r3, #16
 80064ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6899      	ldr	r1, [r3, #8]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699a      	ldr	r2, [r3, #24]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	431a      	orrs	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68d9      	ldr	r1, [r3, #12]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	4b3e      	ldr	r3, [pc, #248]	; (80065e8 <HAL_LTDC_Init+0x19c>)
 80064ee:	400b      	ands	r3, r1
 80064f0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	041b      	lsls	r3, r3, #16
 80064f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68d9      	ldr	r1, [r3, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a1a      	ldr	r2, [r3, #32]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6919      	ldr	r1, [r3, #16]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	4b33      	ldr	r3, [pc, #204]	; (80065e8 <HAL_LTDC_Init+0x19c>)
 800651c:	400b      	ands	r3, r1
 800651e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	041b      	lsls	r3, r3, #16
 8006526:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6919      	ldr	r1, [r3, #16]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6959      	ldr	r1, [r3, #20]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4b27      	ldr	r3, [pc, #156]	; (80065e8 <HAL_LTDC_Init+0x19c>)
 800654a:	400b      	ands	r3, r1
 800654c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	041b      	lsls	r3, r3, #16
 8006554:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6959      	ldr	r1, [r3, #20]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006572:	021b      	lsls	r3, r3, #8
 8006574:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800657c:	041b      	lsls	r3, r3, #16
 800657e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800658e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80065a2:	431a      	orrs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0206 	orr.w	r2, r2, #6
 80065ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	f000f800 	.word	0xf000f800

080065ec <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006602:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d023      	beq.n	8006656 <HAL_LTDC_IRQHandler+0x6a>
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b00      	cmp	r3, #0
 8006616:	d01e      	beq.n	8006656 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0204 	bic.w	r2, r2, #4
 8006626:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2204      	movs	r2, #4
 800662e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006636:	f043 0201 	orr.w	r2, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2204      	movs	r2, #4
 8006644:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f86f 	bl	8006734 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d023      	beq.n	80066a8 <HAL_LTDC_IRQHandler+0xbc>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d01e      	beq.n	80066a8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0202 	bic.w	r2, r2, #2
 8006678:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2202      	movs	r2, #2
 8006680:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006688:	f043 0202 	orr.w	r2, r3, #2
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2204      	movs	r2, #4
 8006696:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f846 	bl	8006734 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d01b      	beq.n	80066ea <HAL_LTDC_IRQHandler+0xfe>
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d016      	beq.n	80066ea <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 0201 	bic.w	r2, r2, #1
 80066ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2201      	movs	r2, #1
 80066d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f82f 	bl	8006748 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f003 0308 	and.w	r3, r3, #8
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01b      	beq.n	800672c <HAL_LTDC_IRQHandler+0x140>
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f003 0308 	and.w	r3, r3, #8
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d016      	beq.n	800672c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0208 	bic.w	r2, r2, #8
 800670c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2208      	movs	r2, #8
 8006714:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f818 	bl	800675c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800672c:	bf00      	nop
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006770:	b5b0      	push	{r4, r5, r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_LTDC_ConfigLayer+0x1a>
 8006786:	2302      	movs	r3, #2
 8006788:	e02c      	b.n	80067e4 <HAL_LTDC_ConfigLayer+0x74>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2202      	movs	r2, #2
 8006796:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2134      	movs	r1, #52	; 0x34
 80067a0:	fb01 f303 	mul.w	r3, r1, r3
 80067a4:	4413      	add	r3, r2
 80067a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	4614      	mov	r4, r2
 80067ae:	461d      	mov	r5, r3
 80067b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	68b9      	ldr	r1, [r7, #8]
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f8b9 	bl	800693c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2201      	movs	r2, #1
 80067d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bdb0      	pop	{r4, r5, r7, pc}

080067ec <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <HAL_LTDC_ConfigColorKeying+0x1a>
 8006802:	2302      	movs	r3, #2
 8006804:	e030      	b.n	8006868 <HAL_LTDC_ConfigColorKeying+0x7c>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2202      	movs	r2, #2
 8006812:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	01db      	lsls	r3, r3, #7
 8006820:	4413      	add	r3, r2
 8006822:	3384      	adds	r3, #132	; 0x84
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	6812      	ldr	r2, [r2, #0]
 800682a:	4611      	mov	r1, r2
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	01d2      	lsls	r2, r2, #7
 8006830:	440a      	add	r2, r1
 8006832:	3284      	adds	r2, #132	; 0x84
 8006834:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006838:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	01db      	lsls	r3, r3, #7
 8006844:	4413      	add	r3, r2
 8006846:	3384      	adds	r3, #132	; 0x84
 8006848:	461a      	mov	r2, r3
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2201      	movs	r2, #1
 8006854:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_LTDC_EnableColorKeying+0x18>
 8006888:	2302      	movs	r3, #2
 800688a:	e026      	b.n	80068da <HAL_LTDC_EnableColorKeying+0x66>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	01db      	lsls	r3, r3, #7
 80068a6:	4413      	add	r3, r2
 80068a8:	3384      	adds	r3, #132	; 0x84
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	4611      	mov	r1, r2
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	01d2      	lsls	r2, r2, #7
 80068b6:	440a      	add	r2, r1
 80068b8:	3284      	adds	r2, #132	; 0x84
 80068ba:	f043 0302 	orr.w	r3, r3, #2
 80068be:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2201      	movs	r2, #1
 80068c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
	...

080068e8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d101      	bne.n	80068fe <HAL_LTDC_EnableDither+0x16>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e016      	b.n	800692c <HAL_LTDC_EnableDither+0x44>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2202      	movs	r2, #2
 800690a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800690e:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <HAL_LTDC_EnableDither+0x50>)
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	4a09      	ldr	r2, [pc, #36]	; (8006938 <HAL_LTDC_EnableDither+0x50>)
 8006914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006918:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	40016800 	.word	0x40016800

0800693c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800693c:	b480      	push	{r7}
 800693e:	b089      	sub	sp, #36	; 0x24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	0c1b      	lsrs	r3, r3, #16
 8006954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006958:	4413      	add	r3, r2
 800695a:	041b      	lsls	r3, r3, #16
 800695c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	01db      	lsls	r3, r3, #7
 8006968:	4413      	add	r3, r2
 800696a:	3384      	adds	r3, #132	; 0x84
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	6812      	ldr	r2, [r2, #0]
 8006972:	4611      	mov	r1, r2
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	01d2      	lsls	r2, r2, #7
 8006978:	440a      	add	r2, r1
 800697a:	3284      	adds	r2, #132	; 0x84
 800697c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006980:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	0c1b      	lsrs	r3, r3, #16
 800698e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006992:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006994:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4619      	mov	r1, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	01db      	lsls	r3, r3, #7
 80069a0:	440b      	add	r3, r1
 80069a2:	3384      	adds	r3, #132	; 0x84
 80069a4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80069aa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069ba:	4413      	add	r3, r2
 80069bc:	041b      	lsls	r3, r3, #16
 80069be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	01db      	lsls	r3, r3, #7
 80069ca:	4413      	add	r3, r2
 80069cc:	3384      	adds	r3, #132	; 0x84
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	6812      	ldr	r2, [r2, #0]
 80069d4:	4611      	mov	r1, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	01d2      	lsls	r2, r2, #7
 80069da:	440a      	add	r2, r1
 80069dc:	3284      	adds	r2, #132	; 0x84
 80069de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80069e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069f2:	4413      	add	r3, r2
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4619      	mov	r1, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	01db      	lsls	r3, r3, #7
 8006a00:	440b      	add	r3, r1
 8006a02:	3384      	adds	r3, #132	; 0x84
 8006a04:	4619      	mov	r1, r3
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	01db      	lsls	r3, r3, #7
 8006a16:	4413      	add	r3, r2
 8006a18:	3384      	adds	r3, #132	; 0x84
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	4611      	mov	r1, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	01d2      	lsls	r2, r2, #7
 8006a26:	440a      	add	r2, r1
 8006a28:	3284      	adds	r2, #132	; 0x84
 8006a2a:	f023 0307 	bic.w	r3, r3, #7
 8006a2e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	461a      	mov	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	01db      	lsls	r3, r3, #7
 8006a3a:	4413      	add	r3, r2
 8006a3c:	3384      	adds	r3, #132	; 0x84
 8006a3e:	461a      	mov	r2, r3
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006a56:	041b      	lsls	r3, r3, #16
 8006a58:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	061b      	lsls	r3, r3, #24
 8006a60:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	01db      	lsls	r3, r3, #7
 8006a6c:	4413      	add	r3, r2
 8006a6e:	3384      	adds	r3, #132	; 0x84
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	01db      	lsls	r3, r3, #7
 8006a7c:	4413      	add	r3, r2
 8006a7e:	3384      	adds	r3, #132	; 0x84
 8006a80:	461a      	mov	r2, r3
 8006a82:	2300      	movs	r3, #0
 8006a84:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	431a      	orrs	r2, r3
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	431a      	orrs	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	01db      	lsls	r3, r3, #7
 8006aa0:	440b      	add	r3, r1
 8006aa2:	3384      	adds	r3, #132	; 0x84
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	01db      	lsls	r3, r3, #7
 8006ab6:	4413      	add	r3, r2
 8006ab8:	3384      	adds	r3, #132	; 0x84
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	6812      	ldr	r2, [r2, #0]
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	01d2      	lsls	r2, r2, #7
 8006ac6:	440a      	add	r2, r1
 8006ac8:	3284      	adds	r2, #132	; 0x84
 8006aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ace:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	01db      	lsls	r3, r3, #7
 8006ada:	4413      	add	r3, r2
 8006adc:	3384      	adds	r3, #132	; 0x84
 8006ade:	461a      	mov	r2, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	01db      	lsls	r3, r3, #7
 8006af0:	4413      	add	r3, r2
 8006af2:	3384      	adds	r3, #132	; 0x84
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	6812      	ldr	r2, [r2, #0]
 8006afa:	4611      	mov	r1, r2
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	01d2      	lsls	r2, r2, #7
 8006b00:	440a      	add	r2, r1
 8006b02:	3284      	adds	r2, #132	; 0x84
 8006b04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006b08:	f023 0307 	bic.w	r3, r3, #7
 8006b0c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	69da      	ldr	r2, [r3, #28]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	68f9      	ldr	r1, [r7, #12]
 8006b18:	6809      	ldr	r1, [r1, #0]
 8006b1a:	4608      	mov	r0, r1
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	01c9      	lsls	r1, r1, #7
 8006b20:	4401      	add	r1, r0
 8006b22:	3184      	adds	r1, #132	; 0x84
 8006b24:	4313      	orrs	r3, r2
 8006b26:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	01db      	lsls	r3, r3, #7
 8006b32:	4413      	add	r3, r2
 8006b34:	3384      	adds	r3, #132	; 0x84
 8006b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	01db      	lsls	r3, r3, #7
 8006b42:	4413      	add	r3, r2
 8006b44:	3384      	adds	r3, #132	; 0x84
 8006b46:	461a      	mov	r2, r3
 8006b48:	2300      	movs	r3, #0
 8006b4a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	01db      	lsls	r3, r3, #7
 8006b56:	4413      	add	r3, r2
 8006b58:	3384      	adds	r3, #132	; 0x84
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d102      	bne.n	8006b70 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006b6a:	2304      	movs	r3, #4
 8006b6c:	61fb      	str	r3, [r7, #28]
 8006b6e:	e01b      	b.n	8006ba8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d102      	bne.n	8006b7e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	e014      	b.n	8006ba8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d00b      	beq.n	8006b9e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d007      	beq.n	8006b9e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d003      	beq.n	8006b9e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006b9a:	2b07      	cmp	r3, #7
 8006b9c:	d102      	bne.n	8006ba4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	61fb      	str	r3, [r7, #28]
 8006ba2:	e001      	b.n	8006ba8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	461a      	mov	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	01db      	lsls	r3, r3, #7
 8006bb2:	4413      	add	r3, r2
 8006bb4:	3384      	adds	r3, #132	; 0x84
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	01d2      	lsls	r2, r2, #7
 8006bc2:	440a      	add	r2, r1
 8006bc4:	3284      	adds	r2, #132	; 0x84
 8006bc6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006bca:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd0:	69fa      	ldr	r2, [r7, #28]
 8006bd2:	fb02 f303 	mul.w	r3, r2, r3
 8006bd6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	6859      	ldr	r1, [r3, #4]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	1acb      	subs	r3, r1, r3
 8006be2:	69f9      	ldr	r1, [r7, #28]
 8006be4:	fb01 f303 	mul.w	r3, r1, r3
 8006be8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006bea:	68f9      	ldr	r1, [r7, #12]
 8006bec:	6809      	ldr	r1, [r1, #0]
 8006bee:	4608      	mov	r0, r1
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	01c9      	lsls	r1, r1, #7
 8006bf4:	4401      	add	r1, r0
 8006bf6:	3184      	adds	r1, #132	; 0x84
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	461a      	mov	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	01db      	lsls	r3, r3, #7
 8006c06:	4413      	add	r3, r2
 8006c08:	3384      	adds	r3, #132	; 0x84
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	6812      	ldr	r2, [r2, #0]
 8006c10:	4611      	mov	r1, r2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	01d2      	lsls	r2, r2, #7
 8006c16:	440a      	add	r2, r1
 8006c18:	3284      	adds	r2, #132	; 0x84
 8006c1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c1e:	f023 0307 	bic.w	r3, r3, #7
 8006c22:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	01db      	lsls	r3, r3, #7
 8006c2e:	4413      	add	r3, r2
 8006c30:	3384      	adds	r3, #132	; 0x84
 8006c32:	461a      	mov	r2, r3
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c38:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	01db      	lsls	r3, r3, #7
 8006c44:	4413      	add	r3, r2
 8006c46:	3384      	adds	r3, #132	; 0x84
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	6812      	ldr	r2, [r2, #0]
 8006c4e:	4611      	mov	r1, r2
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	01d2      	lsls	r2, r2, #7
 8006c54:	440a      	add	r2, r1
 8006c56:	3284      	adds	r2, #132	; 0x84
 8006c58:	f043 0301 	orr.w	r3, r3, #1
 8006c5c:	6013      	str	r3, [r2, #0]
}
 8006c5e:	bf00      	nop
 8006c60:	3724      	adds	r7, #36	; 0x24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
	...

08006c6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e267      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d075      	beq.n	8006d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c8a:	4b88      	ldr	r3, [pc, #544]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 030c 	and.w	r3, r3, #12
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d00c      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c96:	4b85      	ldr	r3, [pc, #532]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c9e:	2b08      	cmp	r3, #8
 8006ca0:	d112      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ca2:	4b82      	ldr	r3, [pc, #520]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006caa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cae:	d10b      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cb0:	4b7e      	ldr	r3, [pc, #504]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d05b      	beq.n	8006d74 <HAL_RCC_OscConfig+0x108>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d157      	bne.n	8006d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e242      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cd0:	d106      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x74>
 8006cd2:	4b76      	ldr	r3, [pc, #472]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a75      	ldr	r2, [pc, #468]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	e01d      	b.n	8006d1c <HAL_RCC_OscConfig+0xb0>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ce8:	d10c      	bne.n	8006d04 <HAL_RCC_OscConfig+0x98>
 8006cea:	4b70      	ldr	r3, [pc, #448]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a6f      	ldr	r2, [pc, #444]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	4b6d      	ldr	r3, [pc, #436]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a6c      	ldr	r2, [pc, #432]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	e00b      	b.n	8006d1c <HAL_RCC_OscConfig+0xb0>
 8006d04:	4b69      	ldr	r3, [pc, #420]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a68      	ldr	r2, [pc, #416]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	4b66      	ldr	r3, [pc, #408]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a65      	ldr	r2, [pc, #404]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d013      	beq.n	8006d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d24:	f7fc f9fc 	bl	8003120 <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d2c:	f7fc f9f8 	bl	8003120 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b64      	cmp	r3, #100	; 0x64
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e207      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d3e:	4b5b      	ldr	r3, [pc, #364]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0f0      	beq.n	8006d2c <HAL_RCC_OscConfig+0xc0>
 8006d4a:	e014      	b.n	8006d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d4c:	f7fc f9e8 	bl	8003120 <HAL_GetTick>
 8006d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d52:	e008      	b.n	8006d66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d54:	f7fc f9e4 	bl	8003120 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b64      	cmp	r3, #100	; 0x64
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e1f3      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d66:	4b51      	ldr	r3, [pc, #324]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1f0      	bne.n	8006d54 <HAL_RCC_OscConfig+0xe8>
 8006d72:	e000      	b.n	8006d76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d063      	beq.n	8006e4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d82:	4b4a      	ldr	r3, [pc, #296]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 030c 	and.w	r3, r3, #12
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00b      	beq.n	8006da6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d8e:	4b47      	ldr	r3, [pc, #284]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	d11c      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d9a:	4b44      	ldr	r3, [pc, #272]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d116      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006da6:	4b41      	ldr	r3, [pc, #260]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d005      	beq.n	8006dbe <HAL_RCC_OscConfig+0x152>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d001      	beq.n	8006dbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e1c7      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dbe:	4b3b      	ldr	r3, [pc, #236]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	4937      	ldr	r1, [pc, #220]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dd2:	e03a      	b.n	8006e4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d020      	beq.n	8006e1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ddc:	4b34      	ldr	r3, [pc, #208]	; (8006eb0 <HAL_RCC_OscConfig+0x244>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de2:	f7fc f99d 	bl	8003120 <HAL_GetTick>
 8006de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006de8:	e008      	b.n	8006dfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dea:	f7fc f999 	bl	8003120 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d901      	bls.n	8006dfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e1a8      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dfc:	4b2b      	ldr	r3, [pc, #172]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0f0      	beq.n	8006dea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e08:	4b28      	ldr	r3, [pc, #160]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	00db      	lsls	r3, r3, #3
 8006e16:	4925      	ldr	r1, [pc, #148]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	600b      	str	r3, [r1, #0]
 8006e1c:	e015      	b.n	8006e4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e1e:	4b24      	ldr	r3, [pc, #144]	; (8006eb0 <HAL_RCC_OscConfig+0x244>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e24:	f7fc f97c 	bl	8003120 <HAL_GetTick>
 8006e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e2c:	f7fc f978 	bl	8003120 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e187      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e3e:	4b1b      	ldr	r3, [pc, #108]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1f0      	bne.n	8006e2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0308 	and.w	r3, r3, #8
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d036      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d016      	beq.n	8006e8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e5e:	4b15      	ldr	r3, [pc, #84]	; (8006eb4 <HAL_RCC_OscConfig+0x248>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e64:	f7fc f95c 	bl	8003120 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e6c:	f7fc f958 	bl	8003120 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e167      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e7e:	4b0b      	ldr	r3, [pc, #44]	; (8006eac <HAL_RCC_OscConfig+0x240>)
 8006e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0f0      	beq.n	8006e6c <HAL_RCC_OscConfig+0x200>
 8006e8a:	e01b      	b.n	8006ec4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e8c:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <HAL_RCC_OscConfig+0x248>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e92:	f7fc f945 	bl	8003120 <HAL_GetTick>
 8006e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e98:	e00e      	b.n	8006eb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e9a:	f7fc f941 	bl	8003120 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d907      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e150      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
 8006eac:	40023800 	.word	0x40023800
 8006eb0:	42470000 	.word	0x42470000
 8006eb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006eb8:	4b88      	ldr	r3, [pc, #544]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1ea      	bne.n	8006e9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 8097 	beq.w	8007000 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ed6:	4b81      	ldr	r3, [pc, #516]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10f      	bne.n	8006f02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60bb      	str	r3, [r7, #8]
 8006ee6:	4b7d      	ldr	r3, [pc, #500]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	4a7c      	ldr	r2, [pc, #496]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ef2:	4b7a      	ldr	r3, [pc, #488]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006efa:	60bb      	str	r3, [r7, #8]
 8006efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006efe:	2301      	movs	r3, #1
 8006f00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f02:	4b77      	ldr	r3, [pc, #476]	; (80070e0 <HAL_RCC_OscConfig+0x474>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d118      	bne.n	8006f40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f0e:	4b74      	ldr	r3, [pc, #464]	; (80070e0 <HAL_RCC_OscConfig+0x474>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a73      	ldr	r2, [pc, #460]	; (80070e0 <HAL_RCC_OscConfig+0x474>)
 8006f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f1a:	f7fc f901 	bl	8003120 <HAL_GetTick>
 8006f1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f20:	e008      	b.n	8006f34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f22:	f7fc f8fd 	bl	8003120 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e10c      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f34:	4b6a      	ldr	r3, [pc, #424]	; (80070e0 <HAL_RCC_OscConfig+0x474>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d0f0      	beq.n	8006f22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d106      	bne.n	8006f56 <HAL_RCC_OscConfig+0x2ea>
 8006f48:	4b64      	ldr	r3, [pc, #400]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4c:	4a63      	ldr	r2, [pc, #396]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006f4e:	f043 0301 	orr.w	r3, r3, #1
 8006f52:	6713      	str	r3, [r2, #112]	; 0x70
 8006f54:	e01c      	b.n	8006f90 <HAL_RCC_OscConfig+0x324>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	2b05      	cmp	r3, #5
 8006f5c:	d10c      	bne.n	8006f78 <HAL_RCC_OscConfig+0x30c>
 8006f5e:	4b5f      	ldr	r3, [pc, #380]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f62:	4a5e      	ldr	r2, [pc, #376]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006f64:	f043 0304 	orr.w	r3, r3, #4
 8006f68:	6713      	str	r3, [r2, #112]	; 0x70
 8006f6a:	4b5c      	ldr	r3, [pc, #368]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6e:	4a5b      	ldr	r2, [pc, #364]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006f70:	f043 0301 	orr.w	r3, r3, #1
 8006f74:	6713      	str	r3, [r2, #112]	; 0x70
 8006f76:	e00b      	b.n	8006f90 <HAL_RCC_OscConfig+0x324>
 8006f78:	4b58      	ldr	r3, [pc, #352]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7c:	4a57      	ldr	r2, [pc, #348]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006f7e:	f023 0301 	bic.w	r3, r3, #1
 8006f82:	6713      	str	r3, [r2, #112]	; 0x70
 8006f84:	4b55      	ldr	r3, [pc, #340]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f88:	4a54      	ldr	r2, [pc, #336]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006f8a:	f023 0304 	bic.w	r3, r3, #4
 8006f8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d015      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f98:	f7fc f8c2 	bl	8003120 <HAL_GetTick>
 8006f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f9e:	e00a      	b.n	8006fb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fa0:	f7fc f8be 	bl	8003120 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e0cb      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fb6:	4b49      	ldr	r3, [pc, #292]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0ee      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x334>
 8006fc2:	e014      	b.n	8006fee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fc4:	f7fc f8ac 	bl	8003120 <HAL_GetTick>
 8006fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fca:	e00a      	b.n	8006fe2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fcc:	f7fc f8a8 	bl	8003120 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e0b5      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fe2:	4b3e      	ldr	r3, [pc, #248]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1ee      	bne.n	8006fcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d105      	bne.n	8007000 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ff4:	4b39      	ldr	r3, [pc, #228]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	4a38      	ldr	r2, [pc, #224]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8006ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ffe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 80a1 	beq.w	800714c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800700a:	4b34      	ldr	r3, [pc, #208]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f003 030c 	and.w	r3, r3, #12
 8007012:	2b08      	cmp	r3, #8
 8007014:	d05c      	beq.n	80070d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d141      	bne.n	80070a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800701e:	4b31      	ldr	r3, [pc, #196]	; (80070e4 <HAL_RCC_OscConfig+0x478>)
 8007020:	2200      	movs	r2, #0
 8007022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007024:	f7fc f87c 	bl	8003120 <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800702c:	f7fc f878 	bl	8003120 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e087      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800703e:	4b27      	ldr	r3, [pc, #156]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1f0      	bne.n	800702c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	69da      	ldr	r2, [r3, #28]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	431a      	orrs	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	019b      	lsls	r3, r3, #6
 800705a:	431a      	orrs	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007060:	085b      	lsrs	r3, r3, #1
 8007062:	3b01      	subs	r3, #1
 8007064:	041b      	lsls	r3, r3, #16
 8007066:	431a      	orrs	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	061b      	lsls	r3, r3, #24
 800706e:	491b      	ldr	r1, [pc, #108]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8007070:	4313      	orrs	r3, r2
 8007072:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007074:	4b1b      	ldr	r3, [pc, #108]	; (80070e4 <HAL_RCC_OscConfig+0x478>)
 8007076:	2201      	movs	r2, #1
 8007078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800707a:	f7fc f851 	bl	8003120 <HAL_GetTick>
 800707e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007080:	e008      	b.n	8007094 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007082:	f7fc f84d 	bl	8003120 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	d901      	bls.n	8007094 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e05c      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007094:	4b11      	ldr	r3, [pc, #68]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0f0      	beq.n	8007082 <HAL_RCC_OscConfig+0x416>
 80070a0:	e054      	b.n	800714c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070a2:	4b10      	ldr	r3, [pc, #64]	; (80070e4 <HAL_RCC_OscConfig+0x478>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a8:	f7fc f83a 	bl	8003120 <HAL_GetTick>
 80070ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ae:	e008      	b.n	80070c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070b0:	f7fc f836 	bl	8003120 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e045      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070c2:	4b06      	ldr	r3, [pc, #24]	; (80070dc <HAL_RCC_OscConfig+0x470>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1f0      	bne.n	80070b0 <HAL_RCC_OscConfig+0x444>
 80070ce:	e03d      	b.n	800714c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d107      	bne.n	80070e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e038      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
 80070dc:	40023800 	.word	0x40023800
 80070e0:	40007000 	.word	0x40007000
 80070e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070e8:	4b1b      	ldr	r3, [pc, #108]	; (8007158 <HAL_RCC_OscConfig+0x4ec>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d028      	beq.n	8007148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007100:	429a      	cmp	r2, r3
 8007102:	d121      	bne.n	8007148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800710e:	429a      	cmp	r2, r3
 8007110:	d11a      	bne.n	8007148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007118:	4013      	ands	r3, r2
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800711e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007120:	4293      	cmp	r3, r2
 8007122:	d111      	bne.n	8007148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712e:	085b      	lsrs	r3, r3, #1
 8007130:	3b01      	subs	r3, #1
 8007132:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007134:	429a      	cmp	r2, r3
 8007136:	d107      	bne.n	8007148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007142:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007144:	429a      	cmp	r2, r3
 8007146:	d001      	beq.n	800714c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e000      	b.n	800714e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	40023800 	.word	0x40023800

0800715c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e0cc      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007170:	4b68      	ldr	r3, [pc, #416]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d90c      	bls.n	8007198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800717e:	4b65      	ldr	r3, [pc, #404]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007186:	4b63      	ldr	r3, [pc, #396]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d001      	beq.n	8007198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e0b8      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d020      	beq.n	80071e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d005      	beq.n	80071bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071b0:	4b59      	ldr	r3, [pc, #356]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	4a58      	ldr	r2, [pc, #352]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80071ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0308 	and.w	r3, r3, #8
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071c8:	4b53      	ldr	r3, [pc, #332]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	4a52      	ldr	r2, [pc, #328]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80071d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071d4:	4b50      	ldr	r3, [pc, #320]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	494d      	ldr	r1, [pc, #308]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d044      	beq.n	800727c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d107      	bne.n	800720a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071fa:	4b47      	ldr	r3, [pc, #284]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d119      	bne.n	800723a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e07f      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d003      	beq.n	800721a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007216:	2b03      	cmp	r3, #3
 8007218:	d107      	bne.n	800722a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800721a:	4b3f      	ldr	r3, [pc, #252]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d109      	bne.n	800723a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e06f      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800722a:	4b3b      	ldr	r3, [pc, #236]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e067      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800723a:	4b37      	ldr	r3, [pc, #220]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f023 0203 	bic.w	r2, r3, #3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	4934      	ldr	r1, [pc, #208]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 8007248:	4313      	orrs	r3, r2
 800724a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800724c:	f7fb ff68 	bl	8003120 <HAL_GetTick>
 8007250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007252:	e00a      	b.n	800726a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007254:	f7fb ff64 	bl	8003120 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007262:	4293      	cmp	r3, r2
 8007264:	d901      	bls.n	800726a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e04f      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800726a:	4b2b      	ldr	r3, [pc, #172]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 020c 	and.w	r2, r3, #12
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	429a      	cmp	r2, r3
 800727a:	d1eb      	bne.n	8007254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800727c:	4b25      	ldr	r3, [pc, #148]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 030f 	and.w	r3, r3, #15
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	429a      	cmp	r2, r3
 8007288:	d20c      	bcs.n	80072a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800728a:	4b22      	ldr	r3, [pc, #136]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007292:	4b20      	ldr	r3, [pc, #128]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 030f 	and.w	r3, r3, #15
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	429a      	cmp	r2, r3
 800729e:	d001      	beq.n	80072a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e032      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d008      	beq.n	80072c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072b0:	4b19      	ldr	r3, [pc, #100]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	4916      	ldr	r1, [pc, #88]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0308 	and.w	r3, r3, #8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072ce:	4b12      	ldr	r3, [pc, #72]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	490e      	ldr	r1, [pc, #56]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80072e2:	f000 f821 	bl	8007328 <HAL_RCC_GetSysClockFreq>
 80072e6:	4602      	mov	r2, r0
 80072e8:	4b0b      	ldr	r3, [pc, #44]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	091b      	lsrs	r3, r3, #4
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	490a      	ldr	r1, [pc, #40]	; (800731c <HAL_RCC_ClockConfig+0x1c0>)
 80072f4:	5ccb      	ldrb	r3, [r1, r3]
 80072f6:	fa22 f303 	lsr.w	r3, r2, r3
 80072fa:	4a09      	ldr	r2, [pc, #36]	; (8007320 <HAL_RCC_ClockConfig+0x1c4>)
 80072fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80072fe:	4b09      	ldr	r3, [pc, #36]	; (8007324 <HAL_RCC_ClockConfig+0x1c8>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	f7fb fdaa 	bl	8002e5c <HAL_InitTick>

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	40023c00 	.word	0x40023c00
 8007318:	40023800 	.word	0x40023800
 800731c:	08012468 	.word	0x08012468
 8007320:	2000005c 	.word	0x2000005c
 8007324:	20000060 	.word	0x20000060

08007328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800732c:	b094      	sub	sp, #80	; 0x50
 800732e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	647b      	str	r3, [r7, #68]	; 0x44
 8007334:	2300      	movs	r3, #0
 8007336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007338:	2300      	movs	r3, #0
 800733a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007340:	4b79      	ldr	r3, [pc, #484]	; (8007528 <HAL_RCC_GetSysClockFreq+0x200>)
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f003 030c 	and.w	r3, r3, #12
 8007348:	2b08      	cmp	r3, #8
 800734a:	d00d      	beq.n	8007368 <HAL_RCC_GetSysClockFreq+0x40>
 800734c:	2b08      	cmp	r3, #8
 800734e:	f200 80e1 	bhi.w	8007514 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <HAL_RCC_GetSysClockFreq+0x34>
 8007356:	2b04      	cmp	r3, #4
 8007358:	d003      	beq.n	8007362 <HAL_RCC_GetSysClockFreq+0x3a>
 800735a:	e0db      	b.n	8007514 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800735c:	4b73      	ldr	r3, [pc, #460]	; (800752c <HAL_RCC_GetSysClockFreq+0x204>)
 800735e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007360:	e0db      	b.n	800751a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007362:	4b73      	ldr	r3, [pc, #460]	; (8007530 <HAL_RCC_GetSysClockFreq+0x208>)
 8007364:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007366:	e0d8      	b.n	800751a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007368:	4b6f      	ldr	r3, [pc, #444]	; (8007528 <HAL_RCC_GetSysClockFreq+0x200>)
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007370:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007372:	4b6d      	ldr	r3, [pc, #436]	; (8007528 <HAL_RCC_GetSysClockFreq+0x200>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d063      	beq.n	8007446 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800737e:	4b6a      	ldr	r3, [pc, #424]	; (8007528 <HAL_RCC_GetSysClockFreq+0x200>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	099b      	lsrs	r3, r3, #6
 8007384:	2200      	movs	r2, #0
 8007386:	63bb      	str	r3, [r7, #56]	; 0x38
 8007388:	63fa      	str	r2, [r7, #60]	; 0x3c
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007390:	633b      	str	r3, [r7, #48]	; 0x30
 8007392:	2300      	movs	r3, #0
 8007394:	637b      	str	r3, [r7, #52]	; 0x34
 8007396:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800739a:	4622      	mov	r2, r4
 800739c:	462b      	mov	r3, r5
 800739e:	f04f 0000 	mov.w	r0, #0
 80073a2:	f04f 0100 	mov.w	r1, #0
 80073a6:	0159      	lsls	r1, r3, #5
 80073a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073ac:	0150      	lsls	r0, r2, #5
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4621      	mov	r1, r4
 80073b4:	1a51      	subs	r1, r2, r1
 80073b6:	6139      	str	r1, [r7, #16]
 80073b8:	4629      	mov	r1, r5
 80073ba:	eb63 0301 	sbc.w	r3, r3, r1
 80073be:	617b      	str	r3, [r7, #20]
 80073c0:	f04f 0200 	mov.w	r2, #0
 80073c4:	f04f 0300 	mov.w	r3, #0
 80073c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073cc:	4659      	mov	r1, fp
 80073ce:	018b      	lsls	r3, r1, #6
 80073d0:	4651      	mov	r1, sl
 80073d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80073d6:	4651      	mov	r1, sl
 80073d8:	018a      	lsls	r2, r1, #6
 80073da:	4651      	mov	r1, sl
 80073dc:	ebb2 0801 	subs.w	r8, r2, r1
 80073e0:	4659      	mov	r1, fp
 80073e2:	eb63 0901 	sbc.w	r9, r3, r1
 80073e6:	f04f 0200 	mov.w	r2, #0
 80073ea:	f04f 0300 	mov.w	r3, #0
 80073ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073fa:	4690      	mov	r8, r2
 80073fc:	4699      	mov	r9, r3
 80073fe:	4623      	mov	r3, r4
 8007400:	eb18 0303 	adds.w	r3, r8, r3
 8007404:	60bb      	str	r3, [r7, #8]
 8007406:	462b      	mov	r3, r5
 8007408:	eb49 0303 	adc.w	r3, r9, r3
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	f04f 0200 	mov.w	r2, #0
 8007412:	f04f 0300 	mov.w	r3, #0
 8007416:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800741a:	4629      	mov	r1, r5
 800741c:	024b      	lsls	r3, r1, #9
 800741e:	4621      	mov	r1, r4
 8007420:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007424:	4621      	mov	r1, r4
 8007426:	024a      	lsls	r2, r1, #9
 8007428:	4610      	mov	r0, r2
 800742a:	4619      	mov	r1, r3
 800742c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800742e:	2200      	movs	r2, #0
 8007430:	62bb      	str	r3, [r7, #40]	; 0x28
 8007432:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007434:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007438:	f7f8 feda 	bl	80001f0 <__aeabi_uldivmod>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4613      	mov	r3, r2
 8007442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007444:	e058      	b.n	80074f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007446:	4b38      	ldr	r3, [pc, #224]	; (8007528 <HAL_RCC_GetSysClockFreq+0x200>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	099b      	lsrs	r3, r3, #6
 800744c:	2200      	movs	r2, #0
 800744e:	4618      	mov	r0, r3
 8007450:	4611      	mov	r1, r2
 8007452:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007456:	623b      	str	r3, [r7, #32]
 8007458:	2300      	movs	r3, #0
 800745a:	627b      	str	r3, [r7, #36]	; 0x24
 800745c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007460:	4642      	mov	r2, r8
 8007462:	464b      	mov	r3, r9
 8007464:	f04f 0000 	mov.w	r0, #0
 8007468:	f04f 0100 	mov.w	r1, #0
 800746c:	0159      	lsls	r1, r3, #5
 800746e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007472:	0150      	lsls	r0, r2, #5
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4641      	mov	r1, r8
 800747a:	ebb2 0a01 	subs.w	sl, r2, r1
 800747e:	4649      	mov	r1, r9
 8007480:	eb63 0b01 	sbc.w	fp, r3, r1
 8007484:	f04f 0200 	mov.w	r2, #0
 8007488:	f04f 0300 	mov.w	r3, #0
 800748c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007490:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007494:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007498:	ebb2 040a 	subs.w	r4, r2, sl
 800749c:	eb63 050b 	sbc.w	r5, r3, fp
 80074a0:	f04f 0200 	mov.w	r2, #0
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	00eb      	lsls	r3, r5, #3
 80074aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074ae:	00e2      	lsls	r2, r4, #3
 80074b0:	4614      	mov	r4, r2
 80074b2:	461d      	mov	r5, r3
 80074b4:	4643      	mov	r3, r8
 80074b6:	18e3      	adds	r3, r4, r3
 80074b8:	603b      	str	r3, [r7, #0]
 80074ba:	464b      	mov	r3, r9
 80074bc:	eb45 0303 	adc.w	r3, r5, r3
 80074c0:	607b      	str	r3, [r7, #4]
 80074c2:	f04f 0200 	mov.w	r2, #0
 80074c6:	f04f 0300 	mov.w	r3, #0
 80074ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80074ce:	4629      	mov	r1, r5
 80074d0:	028b      	lsls	r3, r1, #10
 80074d2:	4621      	mov	r1, r4
 80074d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074d8:	4621      	mov	r1, r4
 80074da:	028a      	lsls	r2, r1, #10
 80074dc:	4610      	mov	r0, r2
 80074de:	4619      	mov	r1, r3
 80074e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074e2:	2200      	movs	r2, #0
 80074e4:	61bb      	str	r3, [r7, #24]
 80074e6:	61fa      	str	r2, [r7, #28]
 80074e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074ec:	f7f8 fe80 	bl	80001f0 <__aeabi_uldivmod>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4613      	mov	r3, r2
 80074f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80074f8:	4b0b      	ldr	r3, [pc, #44]	; (8007528 <HAL_RCC_GetSysClockFreq+0x200>)
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	0c1b      	lsrs	r3, r3, #16
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	3301      	adds	r3, #1
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007508:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800750a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800750c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007510:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007512:	e002      	b.n	800751a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007514:	4b05      	ldr	r3, [pc, #20]	; (800752c <HAL_RCC_GetSysClockFreq+0x204>)
 8007516:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800751a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800751c:	4618      	mov	r0, r3
 800751e:	3750      	adds	r7, #80	; 0x50
 8007520:	46bd      	mov	sp, r7
 8007522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007526:	bf00      	nop
 8007528:	40023800 	.word	0x40023800
 800752c:	00f42400 	.word	0x00f42400
 8007530:	007a1200 	.word	0x007a1200

08007534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007538:	4b03      	ldr	r3, [pc, #12]	; (8007548 <HAL_RCC_GetHCLKFreq+0x14>)
 800753a:	681b      	ldr	r3, [r3, #0]
}
 800753c:	4618      	mov	r0, r3
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	2000005c 	.word	0x2000005c

0800754c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007550:	f7ff fff0 	bl	8007534 <HAL_RCC_GetHCLKFreq>
 8007554:	4602      	mov	r2, r0
 8007556:	4b05      	ldr	r3, [pc, #20]	; (800756c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	0a9b      	lsrs	r3, r3, #10
 800755c:	f003 0307 	and.w	r3, r3, #7
 8007560:	4903      	ldr	r1, [pc, #12]	; (8007570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007562:	5ccb      	ldrb	r3, [r1, r3]
 8007564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007568:	4618      	mov	r0, r3
 800756a:	bd80      	pop	{r7, pc}
 800756c:	40023800 	.word	0x40023800
 8007570:	08012478 	.word	0x08012478

08007574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007578:	f7ff ffdc 	bl	8007534 <HAL_RCC_GetHCLKFreq>
 800757c:	4602      	mov	r2, r0
 800757e:	4b05      	ldr	r3, [pc, #20]	; (8007594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	0b5b      	lsrs	r3, r3, #13
 8007584:	f003 0307 	and.w	r3, r3, #7
 8007588:	4903      	ldr	r1, [pc, #12]	; (8007598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800758a:	5ccb      	ldrb	r3, [r1, r3]
 800758c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007590:	4618      	mov	r0, r3
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40023800 	.word	0x40023800
 8007598:	08012478 	.word	0x08012478

0800759c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	220f      	movs	r2, #15
 80075aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80075ac:	4b12      	ldr	r3, [pc, #72]	; (80075f8 <HAL_RCC_GetClockConfig+0x5c>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f003 0203 	and.w	r2, r3, #3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80075b8:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <HAL_RCC_GetClockConfig+0x5c>)
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80075c4:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <HAL_RCC_GetClockConfig+0x5c>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80075d0:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <HAL_RCC_GetClockConfig+0x5c>)
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	08db      	lsrs	r3, r3, #3
 80075d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80075de:	4b07      	ldr	r3, [pc, #28]	; (80075fc <HAL_RCC_GetClockConfig+0x60>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 020f 	and.w	r2, r3, #15
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	601a      	str	r2, [r3, #0]
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	40023800 	.word	0x40023800
 80075fc:	40023c00 	.word	0x40023c00

08007600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800760c:	2300      	movs	r3, #0
 800760e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10b      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007624:	2b00      	cmp	r3, #0
 8007626:	d105      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007630:	2b00      	cmp	r3, #0
 8007632:	d075      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007634:	4b91      	ldr	r3, [pc, #580]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007636:	2200      	movs	r2, #0
 8007638:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800763a:	f7fb fd71 	bl	8003120 <HAL_GetTick>
 800763e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007640:	e008      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007642:	f7fb fd6d 	bl	8003120 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d901      	bls.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e189      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007654:	4b8a      	ldr	r3, [pc, #552]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1f0      	bne.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d009      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	019a      	lsls	r2, r3, #6
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	071b      	lsls	r3, r3, #28
 8007678:	4981      	ldr	r1, [pc, #516]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01f      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800768c:	4b7c      	ldr	r3, [pc, #496]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800768e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007692:	0f1b      	lsrs	r3, r3, #28
 8007694:	f003 0307 	and.w	r3, r3, #7
 8007698:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	019a      	lsls	r2, r3, #6
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	061b      	lsls	r3, r3, #24
 80076a6:	431a      	orrs	r2, r3
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	071b      	lsls	r3, r3, #28
 80076ac:	4974      	ldr	r1, [pc, #464]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80076b4:	4b72      	ldr	r3, [pc, #456]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ba:	f023 021f 	bic.w	r2, r3, #31
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	496e      	ldr	r1, [pc, #440]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00d      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	019a      	lsls	r2, r3, #6
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	061b      	lsls	r3, r3, #24
 80076e4:	431a      	orrs	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	071b      	lsls	r3, r3, #28
 80076ec:	4964      	ldr	r1, [pc, #400]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80076f4:	4b61      	ldr	r3, [pc, #388]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80076f6:	2201      	movs	r2, #1
 80076f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076fa:	f7fb fd11 	bl	8003120 <HAL_GetTick>
 80076fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007700:	e008      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007702:	f7fb fd0d 	bl	8003120 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	d901      	bls.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e129      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007714:	4b5a      	ldr	r3, [pc, #360]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d0f0      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b00      	cmp	r3, #0
 800772a:	d105      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007734:	2b00      	cmp	r3, #0
 8007736:	d079      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007738:	4b52      	ldr	r3, [pc, #328]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800773a:	2200      	movs	r2, #0
 800773c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800773e:	f7fb fcef 	bl	8003120 <HAL_GetTick>
 8007742:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007744:	e008      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007746:	f7fb fceb 	bl	8003120 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d901      	bls.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e107      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007758:	4b49      	ldr	r3, [pc, #292]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007764:	d0ef      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0304 	and.w	r3, r3, #4
 800776e:	2b00      	cmp	r3, #0
 8007770:	d020      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007772:	4b43      	ldr	r3, [pc, #268]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007778:	0f1b      	lsrs	r3, r3, #28
 800777a:	f003 0307 	and.w	r3, r3, #7
 800777e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	019a      	lsls	r2, r3, #6
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	061b      	lsls	r3, r3, #24
 800778c:	431a      	orrs	r2, r3
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	071b      	lsls	r3, r3, #28
 8007792:	493b      	ldr	r1, [pc, #236]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007794:	4313      	orrs	r3, r2
 8007796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800779a:	4b39      	ldr	r3, [pc, #228]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800779c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a1b      	ldr	r3, [r3, #32]
 80077a8:	3b01      	subs	r3, #1
 80077aa:	021b      	lsls	r3, r3, #8
 80077ac:	4934      	ldr	r1, [pc, #208]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0308 	and.w	r3, r3, #8
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d01e      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80077c0:	4b2f      	ldr	r3, [pc, #188]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c6:	0e1b      	lsrs	r3, r3, #24
 80077c8:	f003 030f 	and.w	r3, r3, #15
 80077cc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	019a      	lsls	r2, r3, #6
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	061b      	lsls	r3, r3, #24
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	071b      	lsls	r3, r3, #28
 80077e0:	4927      	ldr	r1, [pc, #156]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80077e8:	4b25      	ldr	r3, [pc, #148]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f6:	4922      	ldr	r1, [pc, #136]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80077fe:	4b21      	ldr	r3, [pc, #132]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007800:	2201      	movs	r2, #1
 8007802:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007804:	f7fb fc8c 	bl	8003120 <HAL_GetTick>
 8007808:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800780a:	e008      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800780c:	f7fb fc88 	bl	8003120 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	2b02      	cmp	r3, #2
 8007818:	d901      	bls.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e0a4      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800781e:	4b18      	ldr	r3, [pc, #96]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800782a:	d1ef      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0320 	and.w	r3, r3, #32
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 808b 	beq.w	8007950 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800783a:	2300      	movs	r3, #0
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	4b10      	ldr	r3, [pc, #64]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	4a0f      	ldr	r2, [pc, #60]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007848:	6413      	str	r3, [r2, #64]	; 0x40
 800784a:	4b0d      	ldr	r3, [pc, #52]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007856:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a0b      	ldr	r2, [pc, #44]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800785c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007860:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007862:	f7fb fc5d 	bl	8003120 <HAL_GetTick>
 8007866:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007868:	e010      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800786a:	f7fb fc59 	bl	8003120 <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	2b02      	cmp	r3, #2
 8007876:	d909      	bls.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e075      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800787c:	42470068 	.word	0x42470068
 8007880:	40023800 	.word	0x40023800
 8007884:	42470070 	.word	0x42470070
 8007888:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800788c:	4b38      	ldr	r3, [pc, #224]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0e8      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007898:	4b36      	ldr	r3, [pc, #216]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800789a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d02f      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d028      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078b6:	4b2f      	ldr	r3, [pc, #188]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80078b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80078c0:	4b2d      	ldr	r3, [pc, #180]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80078c2:	2201      	movs	r2, #1
 80078c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80078c6:	4b2c      	ldr	r3, [pc, #176]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80078cc:	4a29      	ldr	r2, [pc, #164]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80078d2:	4b28      	ldr	r3, [pc, #160]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80078d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d114      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80078de:	f7fb fc1f 	bl	8003120 <HAL_GetTick>
 80078e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078e4:	e00a      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078e6:	f7fb fc1b 	bl	8003120 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d901      	bls.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e035      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078fc:	4b1d      	ldr	r3, [pc, #116]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80078fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d0ee      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007914:	d10d      	bne.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007916:	4b17      	ldr	r3, [pc, #92]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007922:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800792a:	4912      	ldr	r1, [pc, #72]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800792c:	4313      	orrs	r3, r2
 800792e:	608b      	str	r3, [r1, #8]
 8007930:	e005      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007932:	4b10      	ldr	r3, [pc, #64]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	4a0f      	ldr	r2, [pc, #60]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007938:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800793c:	6093      	str	r3, [r2, #8]
 800793e:	4b0d      	ldr	r3, [pc, #52]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007940:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800794a:	490a      	ldr	r1, [pc, #40]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800794c:	4313      	orrs	r3, r2
 800794e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0310 	and.w	r3, r3, #16
 8007958:	2b00      	cmp	r3, #0
 800795a:	d004      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007962:	4b06      	ldr	r3, [pc, #24]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007964:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	40007000 	.word	0x40007000
 8007974:	40023800 	.word	0x40023800
 8007978:	42470e40 	.word	0x42470e40
 800797c:	424711e0 	.word	0x424711e0

08007980 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e025      	b.n	80079e0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b00      	cmp	r3, #0
 800799e:	d106      	bne.n	80079ae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7fb fa4d 	bl	8002e48 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2202      	movs	r2, #2
 80079b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3304      	adds	r3, #4
 80079be:	4619      	mov	r1, r3
 80079c0:	4610      	mov	r0, r2
 80079c2:	f001 fd91 	bl	80094e8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	461a      	mov	r2, r3
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	f001 fde6 	bl	80095a2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80079fa:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80079fc:	7dfb      	ldrb	r3, [r7, #23]
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d101      	bne.n	8007a06 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007a02:	2302      	movs	r3, #2
 8007a04:	e021      	b.n	8007a4a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d002      	beq.n	8007a12 <HAL_SDRAM_SendCommand+0x2a>
 8007a0c:	7dfb      	ldrb	r3, [r7, #23]
 8007a0e:	2b05      	cmp	r3, #5
 8007a10:	d118      	bne.n	8007a44 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2202      	movs	r2, #2
 8007a16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	68b9      	ldr	r1, [r7, #8]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f001 fe26 	bl	8009674 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d104      	bne.n	8007a3a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2205      	movs	r2, #5
 8007a34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007a38:	e006      	b.n	8007a48 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007a42:	e001      	b.n	8007a48 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e000      	b.n	8007a4a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d101      	bne.n	8007a6c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e016      	b.n	8007a9a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d10f      	bne.n	8007a98 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 fe31 	bl	80096ee <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	e000      	b.n	8007a9a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e07b      	b.n	8007bac <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d108      	bne.n	8007ace <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ac4:	d009      	beq.n	8007ada <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	61da      	str	r2, [r3, #28]
 8007acc:	e005      	b.n	8007ada <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d106      	bne.n	8007afa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7fa ffed 	bl	8002ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2202      	movs	r2, #2
 8007afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b10:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b22:	431a      	orrs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	431a      	orrs	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	431a      	orrs	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5e:	ea42 0103 	orr.w	r1, r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	0c1b      	lsrs	r3, r3, #16
 8007b78:	f003 0104 	and.w	r1, r3, #4
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	f003 0210 	and.w	r2, r3, #16
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	69da      	ldr	r2, [r3, #28]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e01a      	b.n	8007bfc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bdc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7fa ffc0 	bl	8002b64 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	603b      	str	r3, [r7, #0]
 8007c10:	4613      	mov	r3, r2
 8007c12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d101      	bne.n	8007c26 <HAL_SPI_Transmit+0x22>
 8007c22:	2302      	movs	r3, #2
 8007c24:	e126      	b.n	8007e74 <HAL_SPI_Transmit+0x270>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c2e:	f7fb fa77 	bl	8003120 <HAL_GetTick>
 8007c32:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007c34:	88fb      	ldrh	r3, [r7, #6]
 8007c36:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d002      	beq.n	8007c4a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c44:	2302      	movs	r3, #2
 8007c46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c48:	e10b      	b.n	8007e62 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <HAL_SPI_Transmit+0x52>
 8007c50:	88fb      	ldrh	r3, [r7, #6]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d102      	bne.n	8007c5c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c5a:	e102      	b.n	8007e62 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2203      	movs	r2, #3
 8007c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	88fa      	ldrh	r2, [r7, #6]
 8007c74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	88fa      	ldrh	r2, [r7, #6]
 8007c7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ca2:	d10f      	bne.n	8007cc4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cce:	2b40      	cmp	r3, #64	; 0x40
 8007cd0:	d007      	beq.n	8007ce2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cea:	d14b      	bne.n	8007d84 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <HAL_SPI_Transmit+0xf6>
 8007cf4:	8afb      	ldrh	r3, [r7, #22]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d13e      	bne.n	8007d78 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfe:	881a      	ldrh	r2, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0a:	1c9a      	adds	r2, r3, #2
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d1e:	e02b      	b.n	8007d78 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d112      	bne.n	8007d54 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d32:	881a      	ldrh	r2, [r3, #0]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3e:	1c9a      	adds	r2, r3, #2
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8007d52:	e011      	b.n	8007d78 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d54:	f7fb f9e4 	bl	8003120 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d803      	bhi.n	8007d6c <HAL_SPI_Transmit+0x168>
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6a:	d102      	bne.n	8007d72 <HAL_SPI_Transmit+0x16e>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d102      	bne.n	8007d78 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d76:	e074      	b.n	8007e62 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1ce      	bne.n	8007d20 <HAL_SPI_Transmit+0x11c>
 8007d82:	e04c      	b.n	8007e1e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <HAL_SPI_Transmit+0x18e>
 8007d8c:	8afb      	ldrh	r3, [r7, #22]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d140      	bne.n	8007e14 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	330c      	adds	r3, #12
 8007d9c:	7812      	ldrb	r2, [r2, #0]
 8007d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	3b01      	subs	r3, #1
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007db8:	e02c      	b.n	8007e14 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 0302 	and.w	r3, r3, #2
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d113      	bne.n	8007df0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	330c      	adds	r3, #12
 8007dd2:	7812      	ldrb	r2, [r2, #0]
 8007dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	3b01      	subs	r3, #1
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8007dee:	e011      	b.n	8007e14 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007df0:	f7fb f996 	bl	8003120 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d803      	bhi.n	8007e08 <HAL_SPI_Transmit+0x204>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e06:	d102      	bne.n	8007e0e <HAL_SPI_Transmit+0x20a>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d102      	bne.n	8007e14 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e12:	e026      	b.n	8007e62 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1cd      	bne.n	8007dba <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 fbda 	bl	80085dc <SPI_EndRxTxTransaction>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2220      	movs	r2, #32
 8007e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10a      	bne.n	8007e52 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	613b      	str	r3, [r7, #16]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	77fb      	strb	r3, [r7, #31]
 8007e5e:	e000      	b.n	8007e62 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3720      	adds	r7, #32
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af02      	add	r7, sp, #8
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	603b      	str	r3, [r7, #0]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e98:	d112      	bne.n	8007ec0 <HAL_SPI_Receive+0x44>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10e      	bne.n	8007ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2204      	movs	r2, #4
 8007ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007eaa:	88fa      	ldrh	r2, [r7, #6]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 f8f1 	bl	800809e <HAL_SPI_TransmitReceive>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	e0ea      	b.n	8008096 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d101      	bne.n	8007ece <HAL_SPI_Receive+0x52>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e0e3      	b.n	8008096 <HAL_SPI_Receive+0x21a>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ed6:	f7fb f923 	bl	8003120 <HAL_GetTick>
 8007eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d002      	beq.n	8007eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007ee8:	2302      	movs	r3, #2
 8007eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007eec:	e0ca      	b.n	8008084 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <HAL_SPI_Receive+0x7e>
 8007ef4:	88fb      	ldrh	r3, [r7, #6]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d102      	bne.n	8007f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007efe:	e0c1      	b.n	8008084 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2204      	movs	r2, #4
 8007f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	88fa      	ldrh	r2, [r7, #6]
 8007f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	88fa      	ldrh	r2, [r7, #6]
 8007f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f46:	d10f      	bne.n	8007f68 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f66:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f72:	2b40      	cmp	r3, #64	; 0x40
 8007f74:	d007      	beq.n	8007f86 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f84:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d162      	bne.n	8008054 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007f8e:	e02e      	b.n	8007fee <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d115      	bne.n	8007fca <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f103 020c 	add.w	r2, r3, #12
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007faa:	7812      	ldrb	r2, [r2, #0]
 8007fac:	b2d2      	uxtb	r2, r2
 8007fae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007fc8:	e011      	b.n	8007fee <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fca:	f7fb f8a9 	bl	8003120 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d803      	bhi.n	8007fe2 <HAL_SPI_Receive+0x166>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe0:	d102      	bne.n	8007fe8 <HAL_SPI_Receive+0x16c>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d102      	bne.n	8007fee <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007fec:	e04a      	b.n	8008084 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1cb      	bne.n	8007f90 <HAL_SPI_Receive+0x114>
 8007ff8:	e031      	b.n	800805e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b01      	cmp	r3, #1
 8008006:	d113      	bne.n	8008030 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68da      	ldr	r2, [r3, #12]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008012:	b292      	uxth	r2, r2
 8008014:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	1c9a      	adds	r2, r3, #2
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008024:	b29b      	uxth	r3, r3
 8008026:	3b01      	subs	r3, #1
 8008028:	b29a      	uxth	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800802e:	e011      	b.n	8008054 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008030:	f7fb f876 	bl	8003120 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	429a      	cmp	r2, r3
 800803e:	d803      	bhi.n	8008048 <HAL_SPI_Receive+0x1cc>
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008046:	d102      	bne.n	800804e <HAL_SPI_Receive+0x1d2>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d102      	bne.n	8008054 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008052:	e017      	b.n	8008084 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008058:	b29b      	uxth	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1cd      	bne.n	8007ffa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 fa54 	bl	8008510 <SPI_EndRxTransaction>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2220      	movs	r2, #32
 8008072:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	75fb      	strb	r3, [r7, #23]
 8008080:	e000      	b.n	8008084 <HAL_SPI_Receive+0x208>
  }

error :
 8008082:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008094:	7dfb      	ldrb	r3, [r7, #23]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b08c      	sub	sp, #48	; 0x30
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	607a      	str	r2, [r7, #4]
 80080aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80080ac:	2301      	movs	r3, #1
 80080ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d101      	bne.n	80080c4 <HAL_SPI_TransmitReceive+0x26>
 80080c0:	2302      	movs	r3, #2
 80080c2:	e18a      	b.n	80083da <HAL_SPI_TransmitReceive+0x33c>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080cc:	f7fb f828 	bl	8003120 <HAL_GetTick>
 80080d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80080e2:	887b      	ldrh	r3, [r7, #2]
 80080e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80080e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d00f      	beq.n	800810e <HAL_SPI_TransmitReceive+0x70>
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080f4:	d107      	bne.n	8008106 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d103      	bne.n	8008106 <HAL_SPI_TransmitReceive+0x68>
 80080fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008102:	2b04      	cmp	r3, #4
 8008104:	d003      	beq.n	800810e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008106:	2302      	movs	r3, #2
 8008108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800810c:	e15b      	b.n	80083c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d005      	beq.n	8008120 <HAL_SPI_TransmitReceive+0x82>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <HAL_SPI_TransmitReceive+0x82>
 800811a:	887b      	ldrh	r3, [r7, #2]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d103      	bne.n	8008128 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008126:	e14e      	b.n	80083c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b04      	cmp	r3, #4
 8008132:	d003      	beq.n	800813c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2205      	movs	r2, #5
 8008138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	887a      	ldrh	r2, [r7, #2]
 800814c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	887a      	ldrh	r2, [r7, #2]
 8008152:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	887a      	ldrh	r2, [r7, #2]
 800815e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	887a      	ldrh	r2, [r7, #2]
 8008164:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817c:	2b40      	cmp	r3, #64	; 0x40
 800817e:	d007      	beq.n	8008190 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800818e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008198:	d178      	bne.n	800828c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <HAL_SPI_TransmitReceive+0x10a>
 80081a2:	8b7b      	ldrh	r3, [r7, #26]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d166      	bne.n	8008276 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ac:	881a      	ldrh	r2, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b8:	1c9a      	adds	r2, r3, #2
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	3b01      	subs	r3, #1
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081cc:	e053      	b.n	8008276 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f003 0302 	and.w	r3, r3, #2
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d11b      	bne.n	8008214 <HAL_SPI_TransmitReceive+0x176>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d016      	beq.n	8008214 <HAL_SPI_TransmitReceive+0x176>
 80081e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d113      	bne.n	8008214 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f0:	881a      	ldrh	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fc:	1c9a      	adds	r2, r3, #2
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008206:	b29b      	uxth	r3, r3
 8008208:	3b01      	subs	r3, #1
 800820a:	b29a      	uxth	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b01      	cmp	r3, #1
 8008220:	d119      	bne.n	8008256 <HAL_SPI_TransmitReceive+0x1b8>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008226:	b29b      	uxth	r3, r3
 8008228:	2b00      	cmp	r3, #0
 800822a:	d014      	beq.n	8008256 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008236:	b292      	uxth	r2, r2
 8008238:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	1c9a      	adds	r2, r3, #2
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008248:	b29b      	uxth	r3, r3
 800824a:	3b01      	subs	r3, #1
 800824c:	b29a      	uxth	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008252:	2301      	movs	r3, #1
 8008254:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008256:	f7fa ff63 	bl	8003120 <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008262:	429a      	cmp	r2, r3
 8008264:	d807      	bhi.n	8008276 <HAL_SPI_TransmitReceive+0x1d8>
 8008266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826c:	d003      	beq.n	8008276 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008274:	e0a7      	b.n	80083c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800827a:	b29b      	uxth	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1a6      	bne.n	80081ce <HAL_SPI_TransmitReceive+0x130>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008284:	b29b      	uxth	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1a1      	bne.n	80081ce <HAL_SPI_TransmitReceive+0x130>
 800828a:	e07c      	b.n	8008386 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d002      	beq.n	800829a <HAL_SPI_TransmitReceive+0x1fc>
 8008294:	8b7b      	ldrh	r3, [r7, #26]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d16b      	bne.n	8008372 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	330c      	adds	r3, #12
 80082a4:	7812      	ldrb	r2, [r2, #0]
 80082a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	3b01      	subs	r3, #1
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082c0:	e057      	b.n	8008372 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d11c      	bne.n	800830a <HAL_SPI_TransmitReceive+0x26c>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d017      	beq.n	800830a <HAL_SPI_TransmitReceive+0x26c>
 80082da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d114      	bne.n	800830a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	330c      	adds	r3, #12
 80082ea:	7812      	ldrb	r2, [r2, #0]
 80082ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	3b01      	subs	r3, #1
 8008300:	b29a      	uxth	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b01      	cmp	r3, #1
 8008316:	d119      	bne.n	800834c <HAL_SPI_TransmitReceive+0x2ae>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800831c:	b29b      	uxth	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d014      	beq.n	800834c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68da      	ldr	r2, [r3, #12]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	b2d2      	uxtb	r2, r2
 800832e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800833e:	b29b      	uxth	r3, r3
 8008340:	3b01      	subs	r3, #1
 8008342:	b29a      	uxth	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008348:	2301      	movs	r3, #1
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800834c:	f7fa fee8 	bl	8003120 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008358:	429a      	cmp	r2, r3
 800835a:	d803      	bhi.n	8008364 <HAL_SPI_TransmitReceive+0x2c6>
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008362:	d102      	bne.n	800836a <HAL_SPI_TransmitReceive+0x2cc>
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	2b00      	cmp	r3, #0
 8008368:	d103      	bne.n	8008372 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008370:	e029      	b.n	80083c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008376:	b29b      	uxth	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1a2      	bne.n	80082c2 <HAL_SPI_TransmitReceive+0x224>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008380:	b29b      	uxth	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d19d      	bne.n	80082c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008388:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 f926 	bl	80085dc <SPI_EndRxTxTransaction>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d006      	beq.n	80083a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2220      	movs	r2, #32
 80083a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80083a2:	e010      	b.n	80083c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10b      	bne.n	80083c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083ac:	2300      	movs	r3, #0
 80083ae:	617b      	str	r3, [r7, #20]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	617b      	str	r3, [r7, #20]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	617b      	str	r3, [r7, #20]
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	e000      	b.n	80083c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80083c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3730      	adds	r7, #48	; 0x30
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083f0:	b2db      	uxtb	r3, r3
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
	...

08008400 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	603b      	str	r3, [r7, #0]
 800840c:	4613      	mov	r3, r2
 800840e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008410:	f7fa fe86 	bl	8003120 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008418:	1a9b      	subs	r3, r3, r2
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	4413      	add	r3, r2
 800841e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008420:	f7fa fe7e 	bl	8003120 <HAL_GetTick>
 8008424:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008426:	4b39      	ldr	r3, [pc, #228]	; (800850c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	015b      	lsls	r3, r3, #5
 800842c:	0d1b      	lsrs	r3, r3, #20
 800842e:	69fa      	ldr	r2, [r7, #28]
 8008430:	fb02 f303 	mul.w	r3, r2, r3
 8008434:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008436:	e054      	b.n	80084e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843e:	d050      	beq.n	80084e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008440:	f7fa fe6e 	bl	8003120 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	69fa      	ldr	r2, [r7, #28]
 800844c:	429a      	cmp	r2, r3
 800844e:	d902      	bls.n	8008456 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d13d      	bne.n	80084d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008464:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800846e:	d111      	bne.n	8008494 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008478:	d004      	beq.n	8008484 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008482:	d107      	bne.n	8008494 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008492:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800849c:	d10f      	bne.n	80084be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e017      	b.n	8008502 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80084d8:	2300      	movs	r3, #0
 80084da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	3b01      	subs	r3, #1
 80084e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	4013      	ands	r3, r2
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	bf0c      	ite	eq
 80084f2:	2301      	moveq	r3, #1
 80084f4:	2300      	movne	r3, #0
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d19b      	bne.n	8008438 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3720      	adds	r7, #32
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	2000005c 	.word	0x2000005c

08008510 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af02      	add	r7, sp, #8
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008524:	d111      	bne.n	800854a <SPI_EndRxTransaction+0x3a>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800852e:	d004      	beq.n	800853a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008538:	d107      	bne.n	800854a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008548:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008552:	d12a      	bne.n	80085aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800855c:	d012      	beq.n	8008584 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	2200      	movs	r2, #0
 8008566:	2180      	movs	r1, #128	; 0x80
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f7ff ff49 	bl	8008400 <SPI_WaitFlagStateUntilTimeout>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d02d      	beq.n	80085d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008578:	f043 0220 	orr.w	r2, r3, #32
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e026      	b.n	80085d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2200      	movs	r2, #0
 800858c:	2101      	movs	r1, #1
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f7ff ff36 	bl	8008400 <SPI_WaitFlagStateUntilTimeout>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d01a      	beq.n	80085d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800859e:	f043 0220 	orr.w	r2, r3, #32
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e013      	b.n	80085d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2200      	movs	r2, #0
 80085b2:	2101      	movs	r1, #1
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f7ff ff23 	bl	8008400 <SPI_WaitFlagStateUntilTimeout>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d007      	beq.n	80085d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c4:	f043 0220 	orr.w	r2, r3, #32
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80085cc:	2303      	movs	r3, #3
 80085ce:	e000      	b.n	80085d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b088      	sub	sp, #32
 80085e0:	af02      	add	r7, sp, #8
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80085e8:	4b1b      	ldr	r3, [pc, #108]	; (8008658 <SPI_EndRxTxTransaction+0x7c>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a1b      	ldr	r2, [pc, #108]	; (800865c <SPI_EndRxTxTransaction+0x80>)
 80085ee:	fba2 2303 	umull	r2, r3, r2, r3
 80085f2:	0d5b      	lsrs	r3, r3, #21
 80085f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085f8:	fb02 f303 	mul.w	r3, r2, r3
 80085fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008606:	d112      	bne.n	800862e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2200      	movs	r2, #0
 8008610:	2180      	movs	r1, #128	; 0x80
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f7ff fef4 	bl	8008400 <SPI_WaitFlagStateUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d016      	beq.n	800864c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008622:	f043 0220 	orr.w	r2, r3, #32
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e00f      	b.n	800864e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00a      	beq.n	800864a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	3b01      	subs	r3, #1
 8008638:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008644:	2b80      	cmp	r3, #128	; 0x80
 8008646:	d0f2      	beq.n	800862e <SPI_EndRxTxTransaction+0x52>
 8008648:	e000      	b.n	800864c <SPI_EndRxTxTransaction+0x70>
        break;
 800864a:	bf00      	nop
  }

  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	2000005c 	.word	0x2000005c
 800865c:	165e9f81 	.word	0x165e9f81

08008660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e041      	b.n	80086f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d106      	bne.n	800868c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7fa fa8a 	bl	8002ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2202      	movs	r2, #2
 8008690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	3304      	adds	r3, #4
 800869c:	4619      	mov	r1, r3
 800869e:	4610      	mov	r0, r2
 80086a0:	f000 fa96 	bl	8008bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
	...

08008700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b01      	cmp	r3, #1
 8008712:	d001      	beq.n	8008718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e04e      	b.n	80087b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2202      	movs	r2, #2
 800871c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f042 0201 	orr.w	r2, r2, #1
 800872e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a23      	ldr	r2, [pc, #140]	; (80087c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d022      	beq.n	8008780 <HAL_TIM_Base_Start_IT+0x80>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008742:	d01d      	beq.n	8008780 <HAL_TIM_Base_Start_IT+0x80>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a1f      	ldr	r2, [pc, #124]	; (80087c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d018      	beq.n	8008780 <HAL_TIM_Base_Start_IT+0x80>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a1e      	ldr	r2, [pc, #120]	; (80087cc <HAL_TIM_Base_Start_IT+0xcc>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d013      	beq.n	8008780 <HAL_TIM_Base_Start_IT+0x80>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a1c      	ldr	r2, [pc, #112]	; (80087d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d00e      	beq.n	8008780 <HAL_TIM_Base_Start_IT+0x80>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a1b      	ldr	r2, [pc, #108]	; (80087d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d009      	beq.n	8008780 <HAL_TIM_Base_Start_IT+0x80>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a19      	ldr	r2, [pc, #100]	; (80087d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d004      	beq.n	8008780 <HAL_TIM_Base_Start_IT+0x80>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a18      	ldr	r2, [pc, #96]	; (80087dc <HAL_TIM_Base_Start_IT+0xdc>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d111      	bne.n	80087a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f003 0307 	and.w	r3, r3, #7
 800878a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b06      	cmp	r3, #6
 8008790:	d010      	beq.n	80087b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f042 0201 	orr.w	r2, r2, #1
 80087a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087a2:	e007      	b.n	80087b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0201 	orr.w	r2, r2, #1
 80087b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	40010000 	.word	0x40010000
 80087c8:	40000400 	.word	0x40000400
 80087cc:	40000800 	.word	0x40000800
 80087d0:	40000c00 	.word	0x40000c00
 80087d4:	40010400 	.word	0x40010400
 80087d8:	40014000 	.word	0x40014000
 80087dc:	40001800 	.word	0x40001800

080087e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d122      	bne.n	800883c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f003 0302 	and.w	r3, r3, #2
 8008800:	2b02      	cmp	r3, #2
 8008802:	d11b      	bne.n	800883c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f06f 0202 	mvn.w	r2, #2
 800880c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f9b5 	bl	8008b92 <HAL_TIM_IC_CaptureCallback>
 8008828:	e005      	b.n	8008836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f9a7 	bl	8008b7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f9b8 	bl	8008ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	f003 0304 	and.w	r3, r3, #4
 8008846:	2b04      	cmp	r3, #4
 8008848:	d122      	bne.n	8008890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b04      	cmp	r3, #4
 8008856:	d11b      	bne.n	8008890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f06f 0204 	mvn.w	r2, #4
 8008860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2202      	movs	r2, #2
 8008866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f98b 	bl	8008b92 <HAL_TIM_IC_CaptureCallback>
 800887c:	e005      	b.n	800888a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f97d 	bl	8008b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f98e 	bl	8008ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	f003 0308 	and.w	r3, r3, #8
 800889a:	2b08      	cmp	r3, #8
 800889c:	d122      	bne.n	80088e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	f003 0308 	and.w	r3, r3, #8
 80088a8:	2b08      	cmp	r3, #8
 80088aa:	d11b      	bne.n	80088e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f06f 0208 	mvn.w	r2, #8
 80088b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2204      	movs	r2, #4
 80088ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	f003 0303 	and.w	r3, r3, #3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f961 	bl	8008b92 <HAL_TIM_IC_CaptureCallback>
 80088d0:	e005      	b.n	80088de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f953 	bl	8008b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f964 	bl	8008ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f003 0310 	and.w	r3, r3, #16
 80088ee:	2b10      	cmp	r3, #16
 80088f0:	d122      	bne.n	8008938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f003 0310 	and.w	r3, r3, #16
 80088fc:	2b10      	cmp	r3, #16
 80088fe:	d11b      	bne.n	8008938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f06f 0210 	mvn.w	r2, #16
 8008908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2208      	movs	r2, #8
 800890e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f937 	bl	8008b92 <HAL_TIM_IC_CaptureCallback>
 8008924:	e005      	b.n	8008932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f929 	bl	8008b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f93a 	bl	8008ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b01      	cmp	r3, #1
 8008944:	d10e      	bne.n	8008964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	2b01      	cmp	r3, #1
 8008952:	d107      	bne.n	8008964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f06f 0201 	mvn.w	r2, #1
 800895c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7f8 fe0e 	bl	8001580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800896e:	2b80      	cmp	r3, #128	; 0x80
 8008970:	d10e      	bne.n	8008990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800897c:	2b80      	cmp	r3, #128	; 0x80
 800897e:	d107      	bne.n	8008990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fae0 	bl	8008f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899a:	2b40      	cmp	r3, #64	; 0x40
 800899c:	d10e      	bne.n	80089bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a8:	2b40      	cmp	r3, #64	; 0x40
 80089aa:	d107      	bne.n	80089bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f8ff 	bl	8008bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	f003 0320 	and.w	r3, r3, #32
 80089c6:	2b20      	cmp	r3, #32
 80089c8:	d10e      	bne.n	80089e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	f003 0320 	and.w	r3, r3, #32
 80089d4:	2b20      	cmp	r3, #32
 80089d6:	d107      	bne.n	80089e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f06f 0220 	mvn.w	r2, #32
 80089e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 faaa 	bl	8008f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d101      	bne.n	8008a0c <HAL_TIM_ConfigClockSource+0x1c>
 8008a08:	2302      	movs	r3, #2
 8008a0a:	e0b4      	b.n	8008b76 <HAL_TIM_ConfigClockSource+0x186>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2202      	movs	r2, #2
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a44:	d03e      	beq.n	8008ac4 <HAL_TIM_ConfigClockSource+0xd4>
 8008a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a4a:	f200 8087 	bhi.w	8008b5c <HAL_TIM_ConfigClockSource+0x16c>
 8008a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a52:	f000 8086 	beq.w	8008b62 <HAL_TIM_ConfigClockSource+0x172>
 8008a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a5a:	d87f      	bhi.n	8008b5c <HAL_TIM_ConfigClockSource+0x16c>
 8008a5c:	2b70      	cmp	r3, #112	; 0x70
 8008a5e:	d01a      	beq.n	8008a96 <HAL_TIM_ConfigClockSource+0xa6>
 8008a60:	2b70      	cmp	r3, #112	; 0x70
 8008a62:	d87b      	bhi.n	8008b5c <HAL_TIM_ConfigClockSource+0x16c>
 8008a64:	2b60      	cmp	r3, #96	; 0x60
 8008a66:	d050      	beq.n	8008b0a <HAL_TIM_ConfigClockSource+0x11a>
 8008a68:	2b60      	cmp	r3, #96	; 0x60
 8008a6a:	d877      	bhi.n	8008b5c <HAL_TIM_ConfigClockSource+0x16c>
 8008a6c:	2b50      	cmp	r3, #80	; 0x50
 8008a6e:	d03c      	beq.n	8008aea <HAL_TIM_ConfigClockSource+0xfa>
 8008a70:	2b50      	cmp	r3, #80	; 0x50
 8008a72:	d873      	bhi.n	8008b5c <HAL_TIM_ConfigClockSource+0x16c>
 8008a74:	2b40      	cmp	r3, #64	; 0x40
 8008a76:	d058      	beq.n	8008b2a <HAL_TIM_ConfigClockSource+0x13a>
 8008a78:	2b40      	cmp	r3, #64	; 0x40
 8008a7a:	d86f      	bhi.n	8008b5c <HAL_TIM_ConfigClockSource+0x16c>
 8008a7c:	2b30      	cmp	r3, #48	; 0x30
 8008a7e:	d064      	beq.n	8008b4a <HAL_TIM_ConfigClockSource+0x15a>
 8008a80:	2b30      	cmp	r3, #48	; 0x30
 8008a82:	d86b      	bhi.n	8008b5c <HAL_TIM_ConfigClockSource+0x16c>
 8008a84:	2b20      	cmp	r3, #32
 8008a86:	d060      	beq.n	8008b4a <HAL_TIM_ConfigClockSource+0x15a>
 8008a88:	2b20      	cmp	r3, #32
 8008a8a:	d867      	bhi.n	8008b5c <HAL_TIM_ConfigClockSource+0x16c>
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d05c      	beq.n	8008b4a <HAL_TIM_ConfigClockSource+0x15a>
 8008a90:	2b10      	cmp	r3, #16
 8008a92:	d05a      	beq.n	8008b4a <HAL_TIM_ConfigClockSource+0x15a>
 8008a94:	e062      	b.n	8008b5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6818      	ldr	r0, [r3, #0]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	6899      	ldr	r1, [r3, #8]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	f000 f9ad 	bl	8008e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ab8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	609a      	str	r2, [r3, #8]
      break;
 8008ac2:	e04f      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6818      	ldr	r0, [r3, #0]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	6899      	ldr	r1, [r3, #8]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	685a      	ldr	r2, [r3, #4]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	f000 f996 	bl	8008e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689a      	ldr	r2, [r3, #8]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ae6:	609a      	str	r2, [r3, #8]
      break;
 8008ae8:	e03c      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6818      	ldr	r0, [r3, #0]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	6859      	ldr	r1, [r3, #4]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	461a      	mov	r2, r3
 8008af8:	f000 f90a 	bl	8008d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2150      	movs	r1, #80	; 0x50
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 f963 	bl	8008dce <TIM_ITRx_SetConfig>
      break;
 8008b08:	e02c      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6818      	ldr	r0, [r3, #0]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	6859      	ldr	r1, [r3, #4]
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	461a      	mov	r2, r3
 8008b18:	f000 f929 	bl	8008d6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2160      	movs	r1, #96	; 0x60
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 f953 	bl	8008dce <TIM_ITRx_SetConfig>
      break;
 8008b28:	e01c      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6818      	ldr	r0, [r3, #0]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	6859      	ldr	r1, [r3, #4]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	461a      	mov	r2, r3
 8008b38:	f000 f8ea 	bl	8008d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2140      	movs	r1, #64	; 0x40
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 f943 	bl	8008dce <TIM_ITRx_SetConfig>
      break;
 8008b48:	e00c      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4619      	mov	r1, r3
 8008b54:	4610      	mov	r0, r2
 8008b56:	f000 f93a 	bl	8008dce <TIM_ITRx_SetConfig>
      break;
 8008b5a:	e003      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b60:	e000      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b9a:	bf00      	nop
 8008b9c:	370c      	adds	r7, #12
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bae:	bf00      	nop
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
	...

08008bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a40      	ldr	r2, [pc, #256]	; (8008ce4 <TIM_Base_SetConfig+0x114>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d013      	beq.n	8008c10 <TIM_Base_SetConfig+0x40>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bee:	d00f      	beq.n	8008c10 <TIM_Base_SetConfig+0x40>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a3d      	ldr	r2, [pc, #244]	; (8008ce8 <TIM_Base_SetConfig+0x118>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d00b      	beq.n	8008c10 <TIM_Base_SetConfig+0x40>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a3c      	ldr	r2, [pc, #240]	; (8008cec <TIM_Base_SetConfig+0x11c>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d007      	beq.n	8008c10 <TIM_Base_SetConfig+0x40>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a3b      	ldr	r2, [pc, #236]	; (8008cf0 <TIM_Base_SetConfig+0x120>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d003      	beq.n	8008c10 <TIM_Base_SetConfig+0x40>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a3a      	ldr	r2, [pc, #232]	; (8008cf4 <TIM_Base_SetConfig+0x124>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d108      	bne.n	8008c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a2f      	ldr	r2, [pc, #188]	; (8008ce4 <TIM_Base_SetConfig+0x114>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d02b      	beq.n	8008c82 <TIM_Base_SetConfig+0xb2>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c30:	d027      	beq.n	8008c82 <TIM_Base_SetConfig+0xb2>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a2c      	ldr	r2, [pc, #176]	; (8008ce8 <TIM_Base_SetConfig+0x118>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d023      	beq.n	8008c82 <TIM_Base_SetConfig+0xb2>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a2b      	ldr	r2, [pc, #172]	; (8008cec <TIM_Base_SetConfig+0x11c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d01f      	beq.n	8008c82 <TIM_Base_SetConfig+0xb2>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a2a      	ldr	r2, [pc, #168]	; (8008cf0 <TIM_Base_SetConfig+0x120>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d01b      	beq.n	8008c82 <TIM_Base_SetConfig+0xb2>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a29      	ldr	r2, [pc, #164]	; (8008cf4 <TIM_Base_SetConfig+0x124>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d017      	beq.n	8008c82 <TIM_Base_SetConfig+0xb2>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a28      	ldr	r2, [pc, #160]	; (8008cf8 <TIM_Base_SetConfig+0x128>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d013      	beq.n	8008c82 <TIM_Base_SetConfig+0xb2>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a27      	ldr	r2, [pc, #156]	; (8008cfc <TIM_Base_SetConfig+0x12c>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d00f      	beq.n	8008c82 <TIM_Base_SetConfig+0xb2>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a26      	ldr	r2, [pc, #152]	; (8008d00 <TIM_Base_SetConfig+0x130>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d00b      	beq.n	8008c82 <TIM_Base_SetConfig+0xb2>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a25      	ldr	r2, [pc, #148]	; (8008d04 <TIM_Base_SetConfig+0x134>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d007      	beq.n	8008c82 <TIM_Base_SetConfig+0xb2>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a24      	ldr	r2, [pc, #144]	; (8008d08 <TIM_Base_SetConfig+0x138>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d003      	beq.n	8008c82 <TIM_Base_SetConfig+0xb2>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a23      	ldr	r2, [pc, #140]	; (8008d0c <TIM_Base_SetConfig+0x13c>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d108      	bne.n	8008c94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a0a      	ldr	r2, [pc, #40]	; (8008ce4 <TIM_Base_SetConfig+0x114>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d003      	beq.n	8008cc8 <TIM_Base_SetConfig+0xf8>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a0c      	ldr	r2, [pc, #48]	; (8008cf4 <TIM_Base_SetConfig+0x124>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d103      	bne.n	8008cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	691a      	ldr	r2, [r3, #16]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	615a      	str	r2, [r3, #20]
}
 8008cd6:	bf00      	nop
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	40010000 	.word	0x40010000
 8008ce8:	40000400 	.word	0x40000400
 8008cec:	40000800 	.word	0x40000800
 8008cf0:	40000c00 	.word	0x40000c00
 8008cf4:	40010400 	.word	0x40010400
 8008cf8:	40014000 	.word	0x40014000
 8008cfc:	40014400 	.word	0x40014400
 8008d00:	40014800 	.word	0x40014800
 8008d04:	40001800 	.word	0x40001800
 8008d08:	40001c00 	.word	0x40001c00
 8008d0c:	40002000 	.word	0x40002000

08008d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6a1b      	ldr	r3, [r3, #32]
 8008d26:	f023 0201 	bic.w	r2, r3, #1
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	011b      	lsls	r3, r3, #4
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f023 030a 	bic.w	r3, r3, #10
 8008d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	621a      	str	r2, [r3, #32]
}
 8008d62:	bf00      	nop
 8008d64:	371c      	adds	r7, #28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b087      	sub	sp, #28
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	60f8      	str	r0, [r7, #12]
 8008d76:	60b9      	str	r1, [r7, #8]
 8008d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	f023 0210 	bic.w	r2, r3, #16
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	031b      	lsls	r3, r3, #12
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008daa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	011b      	lsls	r3, r3, #4
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	621a      	str	r2, [r3, #32]
}
 8008dc2:	bf00      	nop
 8008dc4:	371c      	adds	r7, #28
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b085      	sub	sp, #20
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	f043 0307 	orr.w	r3, r3, #7
 8008df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	609a      	str	r2, [r3, #8]
}
 8008df8:	bf00      	nop
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	021a      	lsls	r2, r3, #8
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	431a      	orrs	r2, r3
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	609a      	str	r2, [r3, #8]
}
 8008e38:	bf00      	nop
 8008e3a:	371c      	adds	r7, #28
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d101      	bne.n	8008e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e58:	2302      	movs	r3, #2
 8008e5a:	e05a      	b.n	8008f12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2202      	movs	r2, #2
 8008e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a21      	ldr	r2, [pc, #132]	; (8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d022      	beq.n	8008ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea8:	d01d      	beq.n	8008ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a1d      	ldr	r2, [pc, #116]	; (8008f24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d018      	beq.n	8008ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a1b      	ldr	r2, [pc, #108]	; (8008f28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d013      	beq.n	8008ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a1a      	ldr	r2, [pc, #104]	; (8008f2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d00e      	beq.n	8008ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a18      	ldr	r2, [pc, #96]	; (8008f30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d009      	beq.n	8008ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a17      	ldr	r2, [pc, #92]	; (8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d004      	beq.n	8008ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a15      	ldr	r2, [pc, #84]	; (8008f38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d10c      	bne.n	8008f00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	40010000 	.word	0x40010000
 8008f24:	40000400 	.word	0x40000400
 8008f28:	40000800 	.word	0x40000800
 8008f2c:	40000c00 	.word	0x40000c00
 8008f30:	40010400 	.word	0x40010400
 8008f34:	40014000 	.word	0x40014000
 8008f38:	40001800 	.word	0x40001800

08008f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d101      	bne.n	8008f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e03f      	b.n	8008ff6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d106      	bne.n	8008f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7f9 fe2a 	bl	8002be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2224      	movs	r2, #36	; 0x24
 8008f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68da      	ldr	r2, [r3, #12]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f829 	bl	8009000 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	691a      	ldr	r2, [r3, #16]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	695a      	ldr	r2, [r3, #20]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68da      	ldr	r2, [r3, #12]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2220      	movs	r2, #32
 8008ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
	...

08009000 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009004:	b0c0      	sub	sp, #256	; 0x100
 8009006:	af00      	add	r7, sp, #0
 8009008:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800900c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800901c:	68d9      	ldr	r1, [r3, #12]
 800901e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	ea40 0301 	orr.w	r3, r0, r1
 8009028:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800902a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800902e:	689a      	ldr	r2, [r3, #8]
 8009030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	431a      	orrs	r2, r3
 8009038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	431a      	orrs	r2, r3
 8009040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	4313      	orrs	r3, r2
 8009048:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800904c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009058:	f021 010c 	bic.w	r1, r1, #12
 800905c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009066:	430b      	orrs	r3, r1
 8009068:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800906a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800907a:	6999      	ldr	r1, [r3, #24]
 800907c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	ea40 0301 	orr.w	r3, r0, r1
 8009086:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	4b8f      	ldr	r3, [pc, #572]	; (80092cc <UART_SetConfig+0x2cc>)
 8009090:	429a      	cmp	r2, r3
 8009092:	d005      	beq.n	80090a0 <UART_SetConfig+0xa0>
 8009094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	4b8d      	ldr	r3, [pc, #564]	; (80092d0 <UART_SetConfig+0x2d0>)
 800909c:	429a      	cmp	r2, r3
 800909e:	d104      	bne.n	80090aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090a0:	f7fe fa68 	bl	8007574 <HAL_RCC_GetPCLK2Freq>
 80090a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80090a8:	e003      	b.n	80090b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090aa:	f7fe fa4f 	bl	800754c <HAL_RCC_GetPCLK1Freq>
 80090ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090bc:	f040 810c 	bne.w	80092d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090c4:	2200      	movs	r2, #0
 80090c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80090ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80090d2:	4622      	mov	r2, r4
 80090d4:	462b      	mov	r3, r5
 80090d6:	1891      	adds	r1, r2, r2
 80090d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80090da:	415b      	adcs	r3, r3
 80090dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80090e2:	4621      	mov	r1, r4
 80090e4:	eb12 0801 	adds.w	r8, r2, r1
 80090e8:	4629      	mov	r1, r5
 80090ea:	eb43 0901 	adc.w	r9, r3, r1
 80090ee:	f04f 0200 	mov.w	r2, #0
 80090f2:	f04f 0300 	mov.w	r3, #0
 80090f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009102:	4690      	mov	r8, r2
 8009104:	4699      	mov	r9, r3
 8009106:	4623      	mov	r3, r4
 8009108:	eb18 0303 	adds.w	r3, r8, r3
 800910c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009110:	462b      	mov	r3, r5
 8009112:	eb49 0303 	adc.w	r3, r9, r3
 8009116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800911a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009126:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800912a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800912e:	460b      	mov	r3, r1
 8009130:	18db      	adds	r3, r3, r3
 8009132:	653b      	str	r3, [r7, #80]	; 0x50
 8009134:	4613      	mov	r3, r2
 8009136:	eb42 0303 	adc.w	r3, r2, r3
 800913a:	657b      	str	r3, [r7, #84]	; 0x54
 800913c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009140:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009144:	f7f7 f854 	bl	80001f0 <__aeabi_uldivmod>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4b61      	ldr	r3, [pc, #388]	; (80092d4 <UART_SetConfig+0x2d4>)
 800914e:	fba3 2302 	umull	r2, r3, r3, r2
 8009152:	095b      	lsrs	r3, r3, #5
 8009154:	011c      	lsls	r4, r3, #4
 8009156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800915a:	2200      	movs	r2, #0
 800915c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009160:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009164:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009168:	4642      	mov	r2, r8
 800916a:	464b      	mov	r3, r9
 800916c:	1891      	adds	r1, r2, r2
 800916e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009170:	415b      	adcs	r3, r3
 8009172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009174:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009178:	4641      	mov	r1, r8
 800917a:	eb12 0a01 	adds.w	sl, r2, r1
 800917e:	4649      	mov	r1, r9
 8009180:	eb43 0b01 	adc.w	fp, r3, r1
 8009184:	f04f 0200 	mov.w	r2, #0
 8009188:	f04f 0300 	mov.w	r3, #0
 800918c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009190:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009194:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009198:	4692      	mov	sl, r2
 800919a:	469b      	mov	fp, r3
 800919c:	4643      	mov	r3, r8
 800919e:	eb1a 0303 	adds.w	r3, sl, r3
 80091a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091a6:	464b      	mov	r3, r9
 80091a8:	eb4b 0303 	adc.w	r3, fp, r3
 80091ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80091b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80091c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80091c4:	460b      	mov	r3, r1
 80091c6:	18db      	adds	r3, r3, r3
 80091c8:	643b      	str	r3, [r7, #64]	; 0x40
 80091ca:	4613      	mov	r3, r2
 80091cc:	eb42 0303 	adc.w	r3, r2, r3
 80091d0:	647b      	str	r3, [r7, #68]	; 0x44
 80091d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80091d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80091da:	f7f7 f809 	bl	80001f0 <__aeabi_uldivmod>
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	4611      	mov	r1, r2
 80091e4:	4b3b      	ldr	r3, [pc, #236]	; (80092d4 <UART_SetConfig+0x2d4>)
 80091e6:	fba3 2301 	umull	r2, r3, r3, r1
 80091ea:	095b      	lsrs	r3, r3, #5
 80091ec:	2264      	movs	r2, #100	; 0x64
 80091ee:	fb02 f303 	mul.w	r3, r2, r3
 80091f2:	1acb      	subs	r3, r1, r3
 80091f4:	00db      	lsls	r3, r3, #3
 80091f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80091fa:	4b36      	ldr	r3, [pc, #216]	; (80092d4 <UART_SetConfig+0x2d4>)
 80091fc:	fba3 2302 	umull	r2, r3, r3, r2
 8009200:	095b      	lsrs	r3, r3, #5
 8009202:	005b      	lsls	r3, r3, #1
 8009204:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009208:	441c      	add	r4, r3
 800920a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800920e:	2200      	movs	r2, #0
 8009210:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009214:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009218:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800921c:	4642      	mov	r2, r8
 800921e:	464b      	mov	r3, r9
 8009220:	1891      	adds	r1, r2, r2
 8009222:	63b9      	str	r1, [r7, #56]	; 0x38
 8009224:	415b      	adcs	r3, r3
 8009226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009228:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800922c:	4641      	mov	r1, r8
 800922e:	1851      	adds	r1, r2, r1
 8009230:	6339      	str	r1, [r7, #48]	; 0x30
 8009232:	4649      	mov	r1, r9
 8009234:	414b      	adcs	r3, r1
 8009236:	637b      	str	r3, [r7, #52]	; 0x34
 8009238:	f04f 0200 	mov.w	r2, #0
 800923c:	f04f 0300 	mov.w	r3, #0
 8009240:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009244:	4659      	mov	r1, fp
 8009246:	00cb      	lsls	r3, r1, #3
 8009248:	4651      	mov	r1, sl
 800924a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800924e:	4651      	mov	r1, sl
 8009250:	00ca      	lsls	r2, r1, #3
 8009252:	4610      	mov	r0, r2
 8009254:	4619      	mov	r1, r3
 8009256:	4603      	mov	r3, r0
 8009258:	4642      	mov	r2, r8
 800925a:	189b      	adds	r3, r3, r2
 800925c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009260:	464b      	mov	r3, r9
 8009262:	460a      	mov	r2, r1
 8009264:	eb42 0303 	adc.w	r3, r2, r3
 8009268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800926c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009278:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800927c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009280:	460b      	mov	r3, r1
 8009282:	18db      	adds	r3, r3, r3
 8009284:	62bb      	str	r3, [r7, #40]	; 0x28
 8009286:	4613      	mov	r3, r2
 8009288:	eb42 0303 	adc.w	r3, r2, r3
 800928c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800928e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009292:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009296:	f7f6 ffab 	bl	80001f0 <__aeabi_uldivmod>
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	4b0d      	ldr	r3, [pc, #52]	; (80092d4 <UART_SetConfig+0x2d4>)
 80092a0:	fba3 1302 	umull	r1, r3, r3, r2
 80092a4:	095b      	lsrs	r3, r3, #5
 80092a6:	2164      	movs	r1, #100	; 0x64
 80092a8:	fb01 f303 	mul.w	r3, r1, r3
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	00db      	lsls	r3, r3, #3
 80092b0:	3332      	adds	r3, #50	; 0x32
 80092b2:	4a08      	ldr	r2, [pc, #32]	; (80092d4 <UART_SetConfig+0x2d4>)
 80092b4:	fba2 2303 	umull	r2, r3, r2, r3
 80092b8:	095b      	lsrs	r3, r3, #5
 80092ba:	f003 0207 	and.w	r2, r3, #7
 80092be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4422      	add	r2, r4
 80092c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80092c8:	e105      	b.n	80094d6 <UART_SetConfig+0x4d6>
 80092ca:	bf00      	nop
 80092cc:	40011000 	.word	0x40011000
 80092d0:	40011400 	.word	0x40011400
 80092d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092dc:	2200      	movs	r2, #0
 80092de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80092e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80092e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80092ea:	4642      	mov	r2, r8
 80092ec:	464b      	mov	r3, r9
 80092ee:	1891      	adds	r1, r2, r2
 80092f0:	6239      	str	r1, [r7, #32]
 80092f2:	415b      	adcs	r3, r3
 80092f4:	627b      	str	r3, [r7, #36]	; 0x24
 80092f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092fa:	4641      	mov	r1, r8
 80092fc:	1854      	adds	r4, r2, r1
 80092fe:	4649      	mov	r1, r9
 8009300:	eb43 0501 	adc.w	r5, r3, r1
 8009304:	f04f 0200 	mov.w	r2, #0
 8009308:	f04f 0300 	mov.w	r3, #0
 800930c:	00eb      	lsls	r3, r5, #3
 800930e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009312:	00e2      	lsls	r2, r4, #3
 8009314:	4614      	mov	r4, r2
 8009316:	461d      	mov	r5, r3
 8009318:	4643      	mov	r3, r8
 800931a:	18e3      	adds	r3, r4, r3
 800931c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009320:	464b      	mov	r3, r9
 8009322:	eb45 0303 	adc.w	r3, r5, r3
 8009326:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800932a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009336:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800933a:	f04f 0200 	mov.w	r2, #0
 800933e:	f04f 0300 	mov.w	r3, #0
 8009342:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009346:	4629      	mov	r1, r5
 8009348:	008b      	lsls	r3, r1, #2
 800934a:	4621      	mov	r1, r4
 800934c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009350:	4621      	mov	r1, r4
 8009352:	008a      	lsls	r2, r1, #2
 8009354:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009358:	f7f6 ff4a 	bl	80001f0 <__aeabi_uldivmod>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	4b60      	ldr	r3, [pc, #384]	; (80094e4 <UART_SetConfig+0x4e4>)
 8009362:	fba3 2302 	umull	r2, r3, r3, r2
 8009366:	095b      	lsrs	r3, r3, #5
 8009368:	011c      	lsls	r4, r3, #4
 800936a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800936e:	2200      	movs	r2, #0
 8009370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009374:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009378:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800937c:	4642      	mov	r2, r8
 800937e:	464b      	mov	r3, r9
 8009380:	1891      	adds	r1, r2, r2
 8009382:	61b9      	str	r1, [r7, #24]
 8009384:	415b      	adcs	r3, r3
 8009386:	61fb      	str	r3, [r7, #28]
 8009388:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800938c:	4641      	mov	r1, r8
 800938e:	1851      	adds	r1, r2, r1
 8009390:	6139      	str	r1, [r7, #16]
 8009392:	4649      	mov	r1, r9
 8009394:	414b      	adcs	r3, r1
 8009396:	617b      	str	r3, [r7, #20]
 8009398:	f04f 0200 	mov.w	r2, #0
 800939c:	f04f 0300 	mov.w	r3, #0
 80093a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093a4:	4659      	mov	r1, fp
 80093a6:	00cb      	lsls	r3, r1, #3
 80093a8:	4651      	mov	r1, sl
 80093aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093ae:	4651      	mov	r1, sl
 80093b0:	00ca      	lsls	r2, r1, #3
 80093b2:	4610      	mov	r0, r2
 80093b4:	4619      	mov	r1, r3
 80093b6:	4603      	mov	r3, r0
 80093b8:	4642      	mov	r2, r8
 80093ba:	189b      	adds	r3, r3, r2
 80093bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093c0:	464b      	mov	r3, r9
 80093c2:	460a      	mov	r2, r1
 80093c4:	eb42 0303 	adc.w	r3, r2, r3
 80093c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80093d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80093d8:	f04f 0200 	mov.w	r2, #0
 80093dc:	f04f 0300 	mov.w	r3, #0
 80093e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80093e4:	4649      	mov	r1, r9
 80093e6:	008b      	lsls	r3, r1, #2
 80093e8:	4641      	mov	r1, r8
 80093ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093ee:	4641      	mov	r1, r8
 80093f0:	008a      	lsls	r2, r1, #2
 80093f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80093f6:	f7f6 fefb 	bl	80001f0 <__aeabi_uldivmod>
 80093fa:	4602      	mov	r2, r0
 80093fc:	460b      	mov	r3, r1
 80093fe:	4b39      	ldr	r3, [pc, #228]	; (80094e4 <UART_SetConfig+0x4e4>)
 8009400:	fba3 1302 	umull	r1, r3, r3, r2
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	2164      	movs	r1, #100	; 0x64
 8009408:	fb01 f303 	mul.w	r3, r1, r3
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	011b      	lsls	r3, r3, #4
 8009410:	3332      	adds	r3, #50	; 0x32
 8009412:	4a34      	ldr	r2, [pc, #208]	; (80094e4 <UART_SetConfig+0x4e4>)
 8009414:	fba2 2303 	umull	r2, r3, r2, r3
 8009418:	095b      	lsrs	r3, r3, #5
 800941a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800941e:	441c      	add	r4, r3
 8009420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009424:	2200      	movs	r2, #0
 8009426:	673b      	str	r3, [r7, #112]	; 0x70
 8009428:	677a      	str	r2, [r7, #116]	; 0x74
 800942a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800942e:	4642      	mov	r2, r8
 8009430:	464b      	mov	r3, r9
 8009432:	1891      	adds	r1, r2, r2
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	415b      	adcs	r3, r3
 8009438:	60fb      	str	r3, [r7, #12]
 800943a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800943e:	4641      	mov	r1, r8
 8009440:	1851      	adds	r1, r2, r1
 8009442:	6039      	str	r1, [r7, #0]
 8009444:	4649      	mov	r1, r9
 8009446:	414b      	adcs	r3, r1
 8009448:	607b      	str	r3, [r7, #4]
 800944a:	f04f 0200 	mov.w	r2, #0
 800944e:	f04f 0300 	mov.w	r3, #0
 8009452:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009456:	4659      	mov	r1, fp
 8009458:	00cb      	lsls	r3, r1, #3
 800945a:	4651      	mov	r1, sl
 800945c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009460:	4651      	mov	r1, sl
 8009462:	00ca      	lsls	r2, r1, #3
 8009464:	4610      	mov	r0, r2
 8009466:	4619      	mov	r1, r3
 8009468:	4603      	mov	r3, r0
 800946a:	4642      	mov	r2, r8
 800946c:	189b      	adds	r3, r3, r2
 800946e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009470:	464b      	mov	r3, r9
 8009472:	460a      	mov	r2, r1
 8009474:	eb42 0303 	adc.w	r3, r2, r3
 8009478:	66fb      	str	r3, [r7, #108]	; 0x6c
 800947a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	663b      	str	r3, [r7, #96]	; 0x60
 8009484:	667a      	str	r2, [r7, #100]	; 0x64
 8009486:	f04f 0200 	mov.w	r2, #0
 800948a:	f04f 0300 	mov.w	r3, #0
 800948e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009492:	4649      	mov	r1, r9
 8009494:	008b      	lsls	r3, r1, #2
 8009496:	4641      	mov	r1, r8
 8009498:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800949c:	4641      	mov	r1, r8
 800949e:	008a      	lsls	r2, r1, #2
 80094a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80094a4:	f7f6 fea4 	bl	80001f0 <__aeabi_uldivmod>
 80094a8:	4602      	mov	r2, r0
 80094aa:	460b      	mov	r3, r1
 80094ac:	4b0d      	ldr	r3, [pc, #52]	; (80094e4 <UART_SetConfig+0x4e4>)
 80094ae:	fba3 1302 	umull	r1, r3, r3, r2
 80094b2:	095b      	lsrs	r3, r3, #5
 80094b4:	2164      	movs	r1, #100	; 0x64
 80094b6:	fb01 f303 	mul.w	r3, r1, r3
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	011b      	lsls	r3, r3, #4
 80094be:	3332      	adds	r3, #50	; 0x32
 80094c0:	4a08      	ldr	r2, [pc, #32]	; (80094e4 <UART_SetConfig+0x4e4>)
 80094c2:	fba2 2303 	umull	r2, r3, r2, r3
 80094c6:	095b      	lsrs	r3, r3, #5
 80094c8:	f003 020f 	and.w	r2, r3, #15
 80094cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4422      	add	r2, r4
 80094d4:	609a      	str	r2, [r3, #8]
}
 80094d6:	bf00      	nop
 80094d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80094dc:	46bd      	mov	sp, r7
 80094de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094e2:	bf00      	nop
 80094e4:	51eb851f 	.word	0x51eb851f

080094e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d123      	bne.n	8009542 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009502:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	6851      	ldr	r1, [r2, #4]
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	6892      	ldr	r2, [r2, #8]
 800950e:	4311      	orrs	r1, r2
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	68d2      	ldr	r2, [r2, #12]
 8009514:	4311      	orrs	r1, r2
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	6912      	ldr	r2, [r2, #16]
 800951a:	4311      	orrs	r1, r2
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	6952      	ldr	r2, [r2, #20]
 8009520:	4311      	orrs	r1, r2
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	6992      	ldr	r2, [r2, #24]
 8009526:	4311      	orrs	r1, r2
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	69d2      	ldr	r2, [r2, #28]
 800952c:	4311      	orrs	r1, r2
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	6a12      	ldr	r2, [r2, #32]
 8009532:	4311      	orrs	r1, r2
 8009534:	683a      	ldr	r2, [r7, #0]
 8009536:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009538:	430a      	orrs	r2, r1
 800953a:	431a      	orrs	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	e028      	b.n	8009594 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	69d9      	ldr	r1, [r3, #28]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	4319      	orrs	r1, r3
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009558:	430b      	orrs	r3, r1
 800955a:	431a      	orrs	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009568:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	6851      	ldr	r1, [r2, #4]
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	6892      	ldr	r2, [r2, #8]
 8009574:	4311      	orrs	r1, r2
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	68d2      	ldr	r2, [r2, #12]
 800957a:	4311      	orrs	r1, r2
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	6912      	ldr	r2, [r2, #16]
 8009580:	4311      	orrs	r1, r2
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	6952      	ldr	r2, [r2, #20]
 8009586:	4311      	orrs	r1, r2
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	6992      	ldr	r2, [r2, #24]
 800958c:	430a      	orrs	r2, r1
 800958e:	431a      	orrs	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b085      	sub	sp, #20
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	60f8      	str	r0, [r7, #12]
 80095aa:	60b9      	str	r1, [r7, #8]
 80095ac:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d128      	bne.n	8009606 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	1e59      	subs	r1, r3, #1
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	011b      	lsls	r3, r3, #4
 80095ca:	4319      	orrs	r1, r3
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	021b      	lsls	r3, r3, #8
 80095d4:	4319      	orrs	r1, r3
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	3b01      	subs	r3, #1
 80095dc:	031b      	lsls	r3, r3, #12
 80095de:	4319      	orrs	r1, r3
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	041b      	lsls	r3, r3, #16
 80095e8:	4319      	orrs	r1, r3
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	3b01      	subs	r3, #1
 80095f0:	051b      	lsls	r3, r3, #20
 80095f2:	4319      	orrs	r1, r3
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	061b      	lsls	r3, r3, #24
 80095fc:	430b      	orrs	r3, r1
 80095fe:	431a      	orrs	r2, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	609a      	str	r2, [r3, #8]
 8009604:	e02f      	b.n	8009666 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800960e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	68d2      	ldr	r2, [r2, #12]
 8009616:	3a01      	subs	r2, #1
 8009618:	0311      	lsls	r1, r2, #12
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	6952      	ldr	r2, [r2, #20]
 800961e:	3a01      	subs	r2, #1
 8009620:	0512      	lsls	r2, r2, #20
 8009622:	430a      	orrs	r2, r1
 8009624:	431a      	orrs	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	1e59      	subs	r1, r3, #1
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	3b01      	subs	r3, #1
 800963e:	011b      	lsls	r3, r3, #4
 8009640:	4319      	orrs	r1, r3
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	3b01      	subs	r3, #1
 8009648:	021b      	lsls	r3, r3, #8
 800964a:	4319      	orrs	r1, r3
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	3b01      	subs	r3, #1
 8009652:	041b      	lsls	r3, r3, #16
 8009654:	4319      	orrs	r1, r3
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	3b01      	subs	r3, #1
 800965c:	061b      	lsls	r3, r3, #24
 800965e:	430b      	orrs	r3, r1
 8009660:	431a      	orrs	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009680:	2300      	movs	r3, #0
 8009682:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	0d9b      	lsrs	r3, r3, #22
 800968a:	059b      	lsls	r3, r3, #22
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	6811      	ldr	r1, [r2, #0]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	6852      	ldr	r2, [r2, #4]
 8009694:	4311      	orrs	r1, r2
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	6892      	ldr	r2, [r2, #8]
 800969a:	3a01      	subs	r2, #1
 800969c:	0152      	lsls	r2, r2, #5
 800969e:	4311      	orrs	r1, r2
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	68d2      	ldr	r2, [r2, #12]
 80096a4:	0252      	lsls	r2, r2, #9
 80096a6:	430a      	orrs	r2, r1
 80096a8:	431a      	orrs	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80096ae:	f7f9 fd37 	bl	8003120 <HAL_GetTick>
 80096b2:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80096b4:	e010      	b.n	80096d8 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096bc:	d00c      	beq.n	80096d8 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d007      	beq.n	80096d4 <FMC_SDRAM_SendCommand+0x60>
 80096c4:	f7f9 fd2c 	bl	8003120 <HAL_GetTick>
 80096c8:	4602      	mov	r2, r0
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d201      	bcs.n	80096d8 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e006      	b.n	80096e6 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	f003 0320 	and.w	r3, r3, #32
 80096e0:	2b20      	cmp	r3, #32
 80096e2:	d0e8      	beq.n	80096b6 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b083      	sub	sp, #12
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009700:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	0052      	lsls	r2, r2, #1
 8009708:	431a      	orrs	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800971c:	b084      	sub	sp, #16
 800971e:	b580      	push	{r7, lr}
 8009720:	b084      	sub	sp, #16
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	f107 001c 	add.w	r0, r7, #28
 800972a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	2b01      	cmp	r3, #1
 8009732:	d122      	bne.n	800977a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009738:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800975c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800975e:	2b01      	cmp	r3, #1
 8009760:	d105      	bne.n	800976e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f9c0 	bl	8009af4 <USB_CoreReset>
 8009774:	4603      	mov	r3, r0
 8009776:	73fb      	strb	r3, [r7, #15]
 8009778:	e01a      	b.n	80097b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f9b4 	bl	8009af4 <USB_CoreReset>
 800978c:	4603      	mov	r3, r0
 800978e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009792:	2b00      	cmp	r3, #0
 8009794:	d106      	bne.n	80097a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	639a      	str	r2, [r3, #56]	; 0x38
 80097a2:	e005      	b.n	80097b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80097b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d10b      	bne.n	80097ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f043 0206 	orr.w	r2, r3, #6
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f043 0220 	orr.w	r2, r3, #32
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80097ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097da:	b004      	add	sp, #16
 80097dc:	4770      	bx	lr

080097de <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097de:	b480      	push	{r7}
 80097e0:	b083      	sub	sp, #12
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f043 0201 	orr.w	r2, r3, #1
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f023 0201 	bic.w	r2, r3, #1
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	460b      	mov	r3, r1
 800982c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800982e:	2300      	movs	r3, #0
 8009830:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800983e:	78fb      	ldrb	r3, [r7, #3]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d115      	bne.n	8009870 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009850:	2001      	movs	r0, #1
 8009852:	f7f9 fc71 	bl	8003138 <HAL_Delay>
      ms++;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3301      	adds	r3, #1
 800985a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f93a 	bl	8009ad6 <USB_GetMode>
 8009862:	4603      	mov	r3, r0
 8009864:	2b01      	cmp	r3, #1
 8009866:	d01e      	beq.n	80098a6 <USB_SetCurrentMode+0x84>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b31      	cmp	r3, #49	; 0x31
 800986c:	d9f0      	bls.n	8009850 <USB_SetCurrentMode+0x2e>
 800986e:	e01a      	b.n	80098a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009870:	78fb      	ldrb	r3, [r7, #3]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d115      	bne.n	80098a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009882:	2001      	movs	r0, #1
 8009884:	f7f9 fc58 	bl	8003138 <HAL_Delay>
      ms++;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	3301      	adds	r3, #1
 800988c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f921 	bl	8009ad6 <USB_GetMode>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d005      	beq.n	80098a6 <USB_SetCurrentMode+0x84>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b31      	cmp	r3, #49	; 0x31
 800989e:	d9f0      	bls.n	8009882 <USB_SetCurrentMode+0x60>
 80098a0:	e001      	b.n	80098a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e005      	b.n	80098b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2b32      	cmp	r3, #50	; 0x32
 80098aa:	d101      	bne.n	80098b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e000      	b.n	80098b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
	...

080098bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3301      	adds	r3, #1
 80098ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4a13      	ldr	r2, [pc, #76]	; (8009920 <USB_FlushTxFifo+0x64>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d901      	bls.n	80098dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e01b      	b.n	8009914 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	daf2      	bge.n	80098ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80098e4:	2300      	movs	r3, #0
 80098e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	019b      	lsls	r3, r3, #6
 80098ec:	f043 0220 	orr.w	r2, r3, #32
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3301      	adds	r3, #1
 80098f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	4a08      	ldr	r2, [pc, #32]	; (8009920 <USB_FlushTxFifo+0x64>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d901      	bls.n	8009906 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009902:	2303      	movs	r3, #3
 8009904:	e006      	b.n	8009914 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	f003 0320 	and.w	r3, r3, #32
 800990e:	2b20      	cmp	r3, #32
 8009910:	d0f0      	beq.n	80098f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	00030d40 	.word	0x00030d40

08009924 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800992c:	2300      	movs	r3, #0
 800992e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	3301      	adds	r3, #1
 8009934:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	4a11      	ldr	r2, [pc, #68]	; (8009980 <USB_FlushRxFifo+0x5c>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d901      	bls.n	8009942 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800993e:	2303      	movs	r3, #3
 8009940:	e018      	b.n	8009974 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	2b00      	cmp	r3, #0
 8009948:	daf2      	bge.n	8009930 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2210      	movs	r2, #16
 8009952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	3301      	adds	r3, #1
 8009958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	4a08      	ldr	r2, [pc, #32]	; (8009980 <USB_FlushRxFifo+0x5c>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d901      	bls.n	8009966 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e006      	b.n	8009974 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	f003 0310 	and.w	r3, r3, #16
 800996e:	2b10      	cmp	r3, #16
 8009970:	d0f0      	beq.n	8009954 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	00030d40 	.word	0x00030d40

08009984 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009984:	b480      	push	{r7}
 8009986:	b089      	sub	sp, #36	; 0x24
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	4611      	mov	r1, r2
 8009990:	461a      	mov	r2, r3
 8009992:	460b      	mov	r3, r1
 8009994:	71fb      	strb	r3, [r7, #7]
 8009996:	4613      	mov	r3, r2
 8009998:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80099a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d123      	bne.n	80099f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80099aa:	88bb      	ldrh	r3, [r7, #4]
 80099ac:	3303      	adds	r3, #3
 80099ae:	089b      	lsrs	r3, r3, #2
 80099b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80099b2:	2300      	movs	r3, #0
 80099b4:	61bb      	str	r3, [r7, #24]
 80099b6:	e018      	b.n	80099ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80099b8:	79fb      	ldrb	r3, [r7, #7]
 80099ba:	031a      	lsls	r2, r3, #12
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c4:	461a      	mov	r2, r3
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	3301      	adds	r3, #1
 80099d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	3301      	adds	r3, #1
 80099d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	3301      	adds	r3, #1
 80099dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	3301      	adds	r3, #1
 80099e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	3301      	adds	r3, #1
 80099e8:	61bb      	str	r3, [r7, #24]
 80099ea:	69ba      	ldr	r2, [r7, #24]
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d3e2      	bcc.n	80099b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3724      	adds	r7, #36	; 0x24
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b08b      	sub	sp, #44	; 0x2c
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	089b      	lsrs	r3, r3, #2
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009a1e:	88fb      	ldrh	r3, [r7, #6]
 8009a20:	f003 0303 	and.w	r3, r3, #3
 8009a24:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009a26:	2300      	movs	r3, #0
 8009a28:	623b      	str	r3, [r7, #32]
 8009a2a:	e014      	b.n	8009a56 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	601a      	str	r2, [r3, #0]
    pDest++;
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	3301      	adds	r3, #1
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	3301      	adds	r3, #1
 8009a48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	3301      	adds	r3, #1
 8009a54:	623b      	str	r3, [r7, #32]
 8009a56:	6a3a      	ldr	r2, [r7, #32]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d3e6      	bcc.n	8009a2c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009a5e:	8bfb      	ldrh	r3, [r7, #30]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d01e      	beq.n	8009aa2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009a64:	2300      	movs	r3, #0
 8009a66:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a6e:	461a      	mov	r2, r3
 8009a70:	f107 0310 	add.w	r3, r7, #16
 8009a74:	6812      	ldr	r2, [r2, #0]
 8009a76:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	00db      	lsls	r3, r3, #3
 8009a80:	fa22 f303 	lsr.w	r3, r2, r3
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a88:	701a      	strb	r2, [r3, #0]
      i++;
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	3301      	adds	r3, #1
 8009a94:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009a96:	8bfb      	ldrh	r3, [r7, #30]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009a9c:	8bfb      	ldrh	r3, [r7, #30]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1ea      	bne.n	8009a78 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	372c      	adds	r7, #44	; 0x2c
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	699b      	ldr	r3, [r3, #24]
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b083      	sub	sp, #12
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	695b      	ldr	r3, [r3, #20]
 8009ae2:	f003 0301 	and.w	r3, r3, #1
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
	...

08009af4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009afc:	2300      	movs	r3, #0
 8009afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	3301      	adds	r3, #1
 8009b04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	4a13      	ldr	r2, [pc, #76]	; (8009b58 <USB_CoreReset+0x64>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d901      	bls.n	8009b12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e01b      	b.n	8009b4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	daf2      	bge.n	8009b00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	f043 0201 	orr.w	r2, r3, #1
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	4a09      	ldr	r2, [pc, #36]	; (8009b58 <USB_CoreReset+0x64>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d901      	bls.n	8009b3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e006      	b.n	8009b4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	f003 0301 	and.w	r3, r3, #1
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d0f0      	beq.n	8009b2a <USB_CoreReset+0x36>

  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	00030d40 	.word	0x00030d40

08009b5c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b086      	sub	sp, #24
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	2300      	movs	r3, #0
 8009b80:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b92:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d018      	beq.n	8009be4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d10a      	bne.n	8009bce <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009bc6:	f043 0304 	orr.w	r3, r3, #4
 8009bca:	6013      	str	r3, [r2, #0]
 8009bcc:	e014      	b.n	8009bf8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009bdc:	f023 0304 	bic.w	r3, r3, #4
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	e009      	b.n	8009bf8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009bf2:	f023 0304 	bic.w	r3, r3, #4
 8009bf6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009bf8:	2110      	movs	r1, #16
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7ff fe5e 	bl	80098bc <USB_FlushTxFifo>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7ff fe8a 	bl	8009924 <USB_FlushRxFifo>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d001      	beq.n	8009c1a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	613b      	str	r3, [r7, #16]
 8009c1e:	e015      	b.n	8009c4c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c32:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	015a      	lsls	r2, r3, #5
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c40:	461a      	mov	r2, r3
 8009c42:	2300      	movs	r3, #0
 8009c44:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	613b      	str	r3, [r7, #16]
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d3e5      	bcc.n	8009c20 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c60:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00b      	beq.n	8009c86 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c74:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a13      	ldr	r2, [pc, #76]	; (8009cc8 <USB_HostInit+0x16c>)
 8009c7a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a13      	ldr	r2, [pc, #76]	; (8009ccc <USB_HostInit+0x170>)
 8009c80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009c84:	e009      	b.n	8009c9a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2280      	movs	r2, #128	; 0x80
 8009c8a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a10      	ldr	r2, [pc, #64]	; (8009cd0 <USB_HostInit+0x174>)
 8009c90:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a0f      	ldr	r2, [pc, #60]	; (8009cd4 <USB_HostInit+0x178>)
 8009c96:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d105      	bne.n	8009cac <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	f043 0210 	orr.w	r2, r3, #16
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	699a      	ldr	r2, [r3, #24]
 8009cb0:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <USB_HostInit+0x17c>)
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009cc4:	b004      	add	sp, #16
 8009cc6:	4770      	bx	lr
 8009cc8:	01000200 	.word	0x01000200
 8009ccc:	00e00300 	.word	0x00e00300
 8009cd0:	00600080 	.word	0x00600080
 8009cd4:	004000e0 	.word	0x004000e0
 8009cd8:	a3200008 	.word	0xa3200008

08009cdc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cfa:	f023 0303 	bic.w	r3, r3, #3
 8009cfe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	78fb      	ldrb	r3, [r7, #3]
 8009d0a:	f003 0303 	and.w	r3, r3, #3
 8009d0e:	68f9      	ldr	r1, [r7, #12]
 8009d10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009d14:	4313      	orrs	r3, r2
 8009d16:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009d18:	78fb      	ldrb	r3, [r7, #3]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d107      	bne.n	8009d2e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d24:	461a      	mov	r2, r3
 8009d26:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009d2a:	6053      	str	r3, [r2, #4]
 8009d2c:	e009      	b.n	8009d42 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009d2e:	78fb      	ldrb	r3, [r7, #3]
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d106      	bne.n	8009d42 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f241 7370 	movw	r3, #6000	; 0x1770
 8009d40:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009d70:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d7e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009d80:	2064      	movs	r0, #100	; 0x64
 8009d82:	f7f9 f9d9 	bl	8003138 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009d8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d92:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009d94:	200a      	movs	r0, #10
 8009d96:	f7f9 f9cf 	bl	8003138 <HAL_Delay>

  return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009dc8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d109      	bne.n	8009de8 <USB_DriveVbus+0x44>
 8009dd4:	78fb      	ldrb	r3, [r7, #3]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d106      	bne.n	8009de8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009de2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009de6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df2:	d109      	bne.n	8009e08 <USB_DriveVbus+0x64>
 8009df4:	78fb      	ldrb	r3, [r7, #3]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d106      	bne.n	8009e08 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e06:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b085      	sub	sp, #20
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009e22:	2300      	movs	r3, #0
 8009e24:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	0c5b      	lsrs	r3, r3, #17
 8009e34:	f003 0303 	and.w	r3, r3, #3
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	b29b      	uxth	r3, r3
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
	...

08009e68 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b088      	sub	sp, #32
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	4608      	mov	r0, r1
 8009e72:	4611      	mov	r1, r2
 8009e74:	461a      	mov	r2, r3
 8009e76:	4603      	mov	r3, r0
 8009e78:	70fb      	strb	r3, [r7, #3]
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	70bb      	strb	r3, [r7, #2]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009e8a:	78fb      	ldrb	r3, [r7, #3]
 8009e8c:	015a      	lsls	r2, r3, #5
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	4413      	add	r3, r2
 8009e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e96:	461a      	mov	r2, r3
 8009e98:	f04f 33ff 	mov.w	r3, #4294967295
 8009e9c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009e9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	d87e      	bhi.n	8009fa4 <USB_HC_Init+0x13c>
 8009ea6:	a201      	add	r2, pc, #4	; (adr r2, 8009eac <USB_HC_Init+0x44>)
 8009ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eac:	08009ebd 	.word	0x08009ebd
 8009eb0:	08009f67 	.word	0x08009f67
 8009eb4:	08009ebd 	.word	0x08009ebd
 8009eb8:	08009f29 	.word	0x08009f29
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009ebc:	78fb      	ldrb	r3, [r7, #3]
 8009ebe:	015a      	lsls	r2, r3, #5
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ec8:	461a      	mov	r2, r3
 8009eca:	f240 439d 	movw	r3, #1181	; 0x49d
 8009ece:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009ed0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	da10      	bge.n	8009efa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009ed8:	78fb      	ldrb	r3, [r7, #3]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	78fa      	ldrb	r2, [r7, #3]
 8009ee8:	0151      	lsls	r1, r2, #5
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	440a      	add	r2, r1
 8009eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ef6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009ef8:	e057      	b.n	8009faa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d051      	beq.n	8009faa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009f06:	78fb      	ldrb	r3, [r7, #3]
 8009f08:	015a      	lsls	r2, r3, #5
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	78fa      	ldrb	r2, [r7, #3]
 8009f16:	0151      	lsls	r1, r2, #5
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	440a      	add	r2, r1
 8009f1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009f24:	60d3      	str	r3, [r2, #12]
      break;
 8009f26:	e040      	b.n	8009faa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009f28:	78fb      	ldrb	r3, [r7, #3]
 8009f2a:	015a      	lsls	r2, r3, #5
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f34:	461a      	mov	r2, r3
 8009f36:	f240 639d 	movw	r3, #1693	; 0x69d
 8009f3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009f3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	da34      	bge.n	8009fae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	015a      	lsls	r2, r3, #5
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	78fa      	ldrb	r2, [r7, #3]
 8009f54:	0151      	lsls	r1, r2, #5
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	440a      	add	r2, r1
 8009f5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f62:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009f64:	e023      	b.n	8009fae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009f66:	78fb      	ldrb	r3, [r7, #3]
 8009f68:	015a      	lsls	r2, r3, #5
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f72:	461a      	mov	r2, r3
 8009f74:	f240 2325 	movw	r3, #549	; 0x225
 8009f78:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009f7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	da17      	bge.n	8009fb2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009f82:	78fb      	ldrb	r3, [r7, #3]
 8009f84:	015a      	lsls	r2, r3, #5
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	4413      	add	r3, r2
 8009f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	78fa      	ldrb	r2, [r7, #3]
 8009f92:	0151      	lsls	r1, r2, #5
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	440a      	add	r2, r1
 8009f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f9c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009fa0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009fa2:	e006      	b.n	8009fb2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	77fb      	strb	r3, [r7, #31]
      break;
 8009fa8:	e004      	b.n	8009fb4 <USB_HC_Init+0x14c>
      break;
 8009faa:	bf00      	nop
 8009fac:	e002      	b.n	8009fb4 <USB_HC_Init+0x14c>
      break;
 8009fae:	bf00      	nop
 8009fb0:	e000      	b.n	8009fb4 <USB_HC_Init+0x14c>
      break;
 8009fb2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	015a      	lsls	r2, r3, #5
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	78fa      	ldrb	r2, [r7, #3]
 8009fc4:	0151      	lsls	r1, r2, #5
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	440a      	add	r2, r1
 8009fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fce:	f043 0302 	orr.w	r3, r3, #2
 8009fd2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fda:	699a      	ldr	r2, [r3, #24]
 8009fdc:	78fb      	ldrb	r3, [r7, #3]
 8009fde:	f003 030f 	and.w	r3, r3, #15
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8009fe8:	6939      	ldr	r1, [r7, #16]
 8009fea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009ffe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a002:	2b00      	cmp	r3, #0
 800a004:	da03      	bge.n	800a00e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a00a:	61bb      	str	r3, [r7, #24]
 800a00c:	e001      	b.n	800a012 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a00e:	2300      	movs	r3, #0
 800a010:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7ff feff 	bl	8009e16 <USB_GetHostSpeed>
 800a018:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a01a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d106      	bne.n	800a030 <USB_HC_Init+0x1c8>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d003      	beq.n	800a030 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a028:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a02c:	617b      	str	r3, [r7, #20]
 800a02e:	e001      	b.n	800a034 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a030:	2300      	movs	r3, #0
 800a032:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a034:	787b      	ldrb	r3, [r7, #1]
 800a036:	059b      	lsls	r3, r3, #22
 800a038:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a03c:	78bb      	ldrb	r3, [r7, #2]
 800a03e:	02db      	lsls	r3, r3, #11
 800a040:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a044:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a046:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a04a:	049b      	lsls	r3, r3, #18
 800a04c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a050:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a052:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a054:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a058:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a05e:	78fb      	ldrb	r3, [r7, #3]
 800a060:	0159      	lsls	r1, r3, #5
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	440b      	add	r3, r1
 800a066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a06a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a070:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a072:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a076:	2b03      	cmp	r3, #3
 800a078:	d003      	beq.n	800a082 <USB_HC_Init+0x21a>
 800a07a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d10f      	bne.n	800a0a2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a082:	78fb      	ldrb	r3, [r7, #3]
 800a084:	015a      	lsls	r2, r3, #5
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	4413      	add	r3, r2
 800a08a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	78fa      	ldrb	r2, [r7, #3]
 800a092:	0151      	lsls	r1, r2, #5
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	440a      	add	r2, r1
 800a098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a09c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0a0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a0a2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3720      	adds	r7, #32
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b08c      	sub	sp, #48	; 0x30
 800a0b0:	af02      	add	r7, sp, #8
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	785b      	ldrb	r3, [r3, #1]
 800a0c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a0c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0c8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d02d      	beq.n	800a132 <USB_HC_StartXfer+0x86>
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	791b      	ldrb	r3, [r3, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d129      	bne.n	800a132 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a0de:	79fb      	ldrb	r3, [r7, #7]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d117      	bne.n	800a114 <USB_HC_StartXfer+0x68>
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	79db      	ldrb	r3, [r3, #7]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d003      	beq.n	800a0f4 <USB_HC_StartXfer+0x48>
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	79db      	ldrb	r3, [r3, #7]
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d10f      	bne.n	800a114 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	015a      	lsls	r2, r3, #5
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	69fa      	ldr	r2, [r7, #28]
 800a104:	0151      	lsls	r1, r2, #5
 800a106:	6a3a      	ldr	r2, [r7, #32]
 800a108:	440a      	add	r2, r1
 800a10a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a112:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a114:	79fb      	ldrb	r3, [r7, #7]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10b      	bne.n	800a132 <USB_HC_StartXfer+0x86>
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	795b      	ldrb	r3, [r3, #5]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d107      	bne.n	800a132 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	785b      	ldrb	r3, [r3, #1]
 800a126:	4619      	mov	r1, r3
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f000 fa0f 	bl	800a54c <USB_DoPing>
      return HAL_OK;
 800a12e:	2300      	movs	r3, #0
 800a130:	e0f8      	b.n	800a324 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	695b      	ldr	r3, [r3, #20]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d018      	beq.n	800a16c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	8912      	ldrh	r2, [r2, #8]
 800a142:	4413      	add	r3, r2
 800a144:	3b01      	subs	r3, #1
 800a146:	68ba      	ldr	r2, [r7, #8]
 800a148:	8912      	ldrh	r2, [r2, #8]
 800a14a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a14e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a150:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a152:	8b7b      	ldrh	r3, [r7, #26]
 800a154:	429a      	cmp	r2, r3
 800a156:	d90b      	bls.n	800a170 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a158:	8b7b      	ldrh	r3, [r7, #26]
 800a15a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a15c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	8912      	ldrh	r2, [r2, #8]
 800a162:	fb03 f202 	mul.w	r2, r3, r2
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	611a      	str	r2, [r3, #16]
 800a16a:	e001      	b.n	800a170 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a16c:	2301      	movs	r3, #1
 800a16e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	78db      	ldrb	r3, [r3, #3]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d007      	beq.n	800a188 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a178:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	8912      	ldrh	r2, [r2, #8]
 800a17e:	fb03 f202 	mul.w	r2, r3, r2
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	611a      	str	r2, [r3, #16]
 800a186:	e003      	b.n	800a190 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	695a      	ldr	r2, [r3, #20]
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a198:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a19a:	04d9      	lsls	r1, r3, #19
 800a19c:	4b63      	ldr	r3, [pc, #396]	; (800a32c <USB_HC_StartXfer+0x280>)
 800a19e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a1a0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	7a9b      	ldrb	r3, [r3, #10]
 800a1a6:	075b      	lsls	r3, r3, #29
 800a1a8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a1ac:	69f9      	ldr	r1, [r7, #28]
 800a1ae:	0148      	lsls	r0, r1, #5
 800a1b0:	6a39      	ldr	r1, [r7, #32]
 800a1b2:	4401      	add	r1, r0
 800a1b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a1b8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a1ba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a1bc:	79fb      	ldrb	r3, [r7, #7]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d009      	beq.n	800a1d6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	68d9      	ldr	r1, [r3, #12]
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	015a      	lsls	r2, r3, #5
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1d2:	460a      	mov	r2, r1
 800a1d4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	bf0c      	ite	eq
 800a1e6:	2301      	moveq	r3, #1
 800a1e8:	2300      	movne	r3, #0
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	015a      	lsls	r2, r3, #5
 800a1f2:	6a3b      	ldr	r3, [r7, #32]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	69fa      	ldr	r2, [r7, #28]
 800a1fe:	0151      	lsls	r1, r2, #5
 800a200:	6a3a      	ldr	r2, [r7, #32]
 800a202:	440a      	add	r2, r1
 800a204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a208:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a20c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	015a      	lsls	r2, r3, #5
 800a212:	6a3b      	ldr	r3, [r7, #32]
 800a214:	4413      	add	r3, r2
 800a216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	7e7b      	ldrb	r3, [r7, #25]
 800a21e:	075b      	lsls	r3, r3, #29
 800a220:	69f9      	ldr	r1, [r7, #28]
 800a222:	0148      	lsls	r0, r1, #5
 800a224:	6a39      	ldr	r1, [r7, #32]
 800a226:	4401      	add	r1, r0
 800a228:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a22c:	4313      	orrs	r3, r2
 800a22e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	4413      	add	r3, r2
 800a238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a246:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	78db      	ldrb	r3, [r3, #3]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d004      	beq.n	800a25a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a256:	613b      	str	r3, [r7, #16]
 800a258:	e003      	b.n	800a262 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a260:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a268:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	4413      	add	r3, r2
 800a272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a276:	461a      	mov	r2, r3
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a27c:	79fb      	ldrb	r3, [r7, #7]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	e04e      	b.n	800a324 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	78db      	ldrb	r3, [r3, #3]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d149      	bne.n	800a322 <USB_HC_StartXfer+0x276>
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	695b      	ldr	r3, [r3, #20]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d045      	beq.n	800a322 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	79db      	ldrb	r3, [r3, #7]
 800a29a:	2b03      	cmp	r3, #3
 800a29c:	d830      	bhi.n	800a300 <USB_HC_StartXfer+0x254>
 800a29e:	a201      	add	r2, pc, #4	; (adr r2, 800a2a4 <USB_HC_StartXfer+0x1f8>)
 800a2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a4:	0800a2b5 	.word	0x0800a2b5
 800a2a8:	0800a2d9 	.word	0x0800a2d9
 800a2ac:	0800a2b5 	.word	0x0800a2b5
 800a2b0:	0800a2d9 	.word	0x0800a2d9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	3303      	adds	r3, #3
 800a2ba:	089b      	lsrs	r3, r3, #2
 800a2bc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a2be:	8afa      	ldrh	r2, [r7, #22]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d91c      	bls.n	800a304 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	f043 0220 	orr.w	r2, r3, #32
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	619a      	str	r2, [r3, #24]
        }
        break;
 800a2d6:	e015      	b.n	800a304 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	695b      	ldr	r3, [r3, #20]
 800a2dc:	3303      	adds	r3, #3
 800a2de:	089b      	lsrs	r3, r3, #2
 800a2e0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a2e2:	8afa      	ldrh	r2, [r7, #22]
 800a2e4:	6a3b      	ldr	r3, [r7, #32]
 800a2e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d90a      	bls.n	800a308 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	699b      	ldr	r3, [r3, #24]
 800a2f6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	619a      	str	r2, [r3, #24]
        }
        break;
 800a2fe:	e003      	b.n	800a308 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a300:	bf00      	nop
 800a302:	e002      	b.n	800a30a <USB_HC_StartXfer+0x25e>
        break;
 800a304:	bf00      	nop
 800a306:	e000      	b.n	800a30a <USB_HC_StartXfer+0x25e>
        break;
 800a308:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	68d9      	ldr	r1, [r3, #12]
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	785a      	ldrb	r2, [r3, #1]
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	b29b      	uxth	r3, r3
 800a318:	2000      	movs	r0, #0
 800a31a:	9000      	str	r0, [sp, #0]
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f7ff fb31 	bl	8009984 <USB_WritePacket>
  }

  return HAL_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3728      	adds	r7, #40	; 0x28
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	1ff80000 	.word	0x1ff80000

0800a330 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	b29b      	uxth	r3, r3
}
 800a346:	4618      	mov	r0, r3
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a352:	b480      	push	{r7}
 800a354:	b089      	sub	sp, #36	; 0x24
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	460b      	mov	r3, r1
 800a35c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a362:	78fb      	ldrb	r3, [r7, #3]
 800a364:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a366:	2300      	movs	r3, #0
 800a368:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	015a      	lsls	r2, r3, #5
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	4413      	add	r3, r2
 800a372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	0c9b      	lsrs	r3, r3, #18
 800a37a:	f003 0303 	and.w	r3, r3, #3
 800a37e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	4413      	add	r3, r2
 800a388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	0fdb      	lsrs	r3, r3, #31
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	f003 0320 	and.w	r3, r3, #32
 800a39e:	2b20      	cmp	r3, #32
 800a3a0:	d104      	bne.n	800a3ac <USB_HC_Halt+0x5a>
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	e0c8      	b.n	800a53e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <USB_HC_Halt+0x66>
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d163      	bne.n	800a480 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	015a      	lsls	r2, r3, #5
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	4413      	add	r3, r2
 800a3c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	0151      	lsls	r1, r2, #5
 800a3ca:	69fa      	ldr	r2, [r7, #28]
 800a3cc:	440a      	add	r2, r1
 800a3ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3d6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	f003 0320 	and.w	r3, r3, #32
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f040 80ab 	bne.w	800a53c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d133      	bne.n	800a45a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	015a      	lsls	r2, r3, #5
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	69ba      	ldr	r2, [r7, #24]
 800a402:	0151      	lsls	r1, r2, #5
 800a404:	69fa      	ldr	r2, [r7, #28]
 800a406:	440a      	add	r2, r1
 800a408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a40c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a410:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	015a      	lsls	r2, r3, #5
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	4413      	add	r3, r2
 800a41a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	69ba      	ldr	r2, [r7, #24]
 800a422:	0151      	lsls	r1, r2, #5
 800a424:	69fa      	ldr	r2, [r7, #28]
 800a426:	440a      	add	r2, r1
 800a428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a42c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a430:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	3301      	adds	r3, #1
 800a436:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a43e:	d81d      	bhi.n	800a47c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	015a      	lsls	r2, r3, #5
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	4413      	add	r3, r2
 800a448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a456:	d0ec      	beq.n	800a432 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a458:	e070      	b.n	800a53c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	015a      	lsls	r2, r3, #5
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	4413      	add	r3, r2
 800a462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	69ba      	ldr	r2, [r7, #24]
 800a46a:	0151      	lsls	r1, r2, #5
 800a46c:	69fa      	ldr	r2, [r7, #28]
 800a46e:	440a      	add	r2, r1
 800a470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a474:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a478:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a47a:	e05f      	b.n	800a53c <USB_HC_Halt+0x1ea>
            break;
 800a47c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a47e:	e05d      	b.n	800a53c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	015a      	lsls	r2, r3, #5
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	4413      	add	r3, r2
 800a488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	69ba      	ldr	r2, [r7, #24]
 800a490:	0151      	lsls	r1, r2, #5
 800a492:	69fa      	ldr	r2, [r7, #28]
 800a494:	440a      	add	r2, r1
 800a496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a49a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a49e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d133      	bne.n	800a518 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	015a      	lsls	r2, r3, #5
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	69ba      	ldr	r2, [r7, #24]
 800a4c0:	0151      	lsls	r1, r2, #5
 800a4c2:	69fa      	ldr	r2, [r7, #28]
 800a4c4:	440a      	add	r2, r1
 800a4c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4ce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	69ba      	ldr	r2, [r7, #24]
 800a4e0:	0151      	lsls	r1, r2, #5
 800a4e2:	69fa      	ldr	r2, [r7, #28]
 800a4e4:	440a      	add	r2, r1
 800a4e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4ee:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4fc:	d81d      	bhi.n	800a53a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	015a      	lsls	r2, r3, #5
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	4413      	add	r3, r2
 800a506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a514:	d0ec      	beq.n	800a4f0 <USB_HC_Halt+0x19e>
 800a516:	e011      	b.n	800a53c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	69ba      	ldr	r2, [r7, #24]
 800a528:	0151      	lsls	r1, r2, #5
 800a52a:	69fa      	ldr	r2, [r7, #28]
 800a52c:	440a      	add	r2, r1
 800a52e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a536:	6013      	str	r3, [r2, #0]
 800a538:	e000      	b.n	800a53c <USB_HC_Halt+0x1ea>
          break;
 800a53a:	bf00      	nop
    }
  }

  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3724      	adds	r7, #36	; 0x24
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
	...

0800a54c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b087      	sub	sp, #28
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	460b      	mov	r3, r1
 800a556:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a55c:	78fb      	ldrb	r3, [r7, #3]
 800a55e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a560:	2301      	movs	r3, #1
 800a562:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	04da      	lsls	r2, r3, #19
 800a568:	4b15      	ldr	r3, [pc, #84]	; (800a5c0 <USB_DoPing+0x74>)
 800a56a:	4013      	ands	r3, r2
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	0151      	lsls	r1, r2, #5
 800a570:	697a      	ldr	r2, [r7, #20]
 800a572:	440a      	add	r2, r1
 800a574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a57c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	015a      	lsls	r2, r3, #5
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	4413      	add	r3, r2
 800a586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a594:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a59c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	015a      	lsls	r2, r3, #5
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	371c      	adds	r7, #28
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	1ff80000 	.word	0x1ff80000

0800a5c4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b088      	sub	sp, #32
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff f911 	bl	8009800 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a5de:	2110      	movs	r1, #16
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f7ff f96b 	bl	80098bc <USB_FlushTxFifo>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d001      	beq.n	800a5f0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7ff f997 	bl	8009924 <USB_FlushRxFifo>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d001      	beq.n	800a600 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a600:	2300      	movs	r3, #0
 800a602:	61bb      	str	r3, [r7, #24]
 800a604:	e01f      	b.n	800a646 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	015a      	lsls	r2, r3, #5
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	4413      	add	r3, r2
 800a60e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a61c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a624:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a62c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	4413      	add	r3, r2
 800a636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a63a:	461a      	mov	r2, r3
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	3301      	adds	r3, #1
 800a644:	61bb      	str	r3, [r7, #24]
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	2b0f      	cmp	r3, #15
 800a64a:	d9dc      	bls.n	800a606 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a64c:	2300      	movs	r3, #0
 800a64e:	61bb      	str	r3, [r7, #24]
 800a650:	e034      	b.n	800a6bc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	015a      	lsls	r2, r3, #5
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	4413      	add	r3, r2
 800a65a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a668:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a670:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a678:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	015a      	lsls	r2, r3, #5
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	4413      	add	r3, r2
 800a682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a686:	461a      	mov	r2, r3
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	3301      	adds	r3, #1
 800a690:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a698:	d80c      	bhi.n	800a6b4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	015a      	lsls	r2, r3, #5
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6b0:	d0ec      	beq.n	800a68c <USB_StopHost+0xc8>
 800a6b2:	e000      	b.n	800a6b6 <USB_StopHost+0xf2>
        break;
 800a6b4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	61bb      	str	r3, [r7, #24]
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	2b0f      	cmp	r3, #15
 800a6c0:	d9c7      	bls.n	800a652 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7ff f880 	bl	80097de <USB_EnableGlobalInt>

  return ret;
 800a6de:	7ffb      	ldrb	r3, [r7, #31]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3720      	adds	r7, #32
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a6f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a6fa:	2b84      	cmp	r3, #132	; 0x84
 800a6fc:	d005      	beq.n	800a70a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a6fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	4413      	add	r3, r2
 800a706:	3303      	adds	r3, #3
 800a708:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a70a:	68fb      	ldr	r3, [r7, #12]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a71e:	f3ef 8305 	mrs	r3, IPSR
 800a722:	607b      	str	r3, [r7, #4]
  return(result);
 800a724:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a726:	2b00      	cmp	r3, #0
 800a728:	bf14      	ite	ne
 800a72a:	2301      	movne	r3, #1
 800a72c:	2300      	moveq	r3, #0
 800a72e:	b2db      	uxtb	r3, r3
}
 800a730:	4618      	mov	r0, r3
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a740:	f001 fdc6 	bl	800c2d0 <vTaskStartScheduler>
  
  return osOK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	bd80      	pop	{r7, pc}

0800a74a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a74a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a74c:	b089      	sub	sp, #36	; 0x24
 800a74e:	af04      	add	r7, sp, #16
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	695b      	ldr	r3, [r3, #20]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d020      	beq.n	800a79e <osThreadCreate+0x54>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	699b      	ldr	r3, [r3, #24]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d01c      	beq.n	800a79e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685c      	ldr	r4, [r3, #4]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681d      	ldr	r5, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	691e      	ldr	r6, [r3, #16]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a776:	4618      	mov	r0, r3
 800a778:	f7ff ffb6 	bl	800a6e8 <makeFreeRtosPriority>
 800a77c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a786:	9202      	str	r2, [sp, #8]
 800a788:	9301      	str	r3, [sp, #4]
 800a78a:	9100      	str	r1, [sp, #0]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	4632      	mov	r2, r6
 800a790:	4629      	mov	r1, r5
 800a792:	4620      	mov	r0, r4
 800a794:	f001 fb44 	bl	800be20 <xTaskCreateStatic>
 800a798:	4603      	mov	r3, r0
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	e01c      	b.n	800a7d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	685c      	ldr	r4, [r3, #4]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7aa:	b29e      	uxth	r6, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7ff ff98 	bl	800a6e8 <makeFreeRtosPriority>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	f107 030c 	add.w	r3, r7, #12
 800a7be:	9301      	str	r3, [sp, #4]
 800a7c0:	9200      	str	r2, [sp, #0]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f001 fb86 	bl	800beda <xTaskCreate>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d001      	beq.n	800a7d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	e000      	b.n	800a7da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3714      	adds	r7, #20
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b084      	sub	sp, #16
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d001      	beq.n	800a7f8 <osDelay+0x16>
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	e000      	b.n	800a7fa <osDelay+0x18>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f001 fd34 	bl	800c268 <vTaskDelay>
  
  return osOK;
 800a800:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a802:	4618      	mov	r0, r3
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a80a:	b590      	push	{r4, r7, lr}
 800a80c:	b085      	sub	sp, #20
 800a80e:	af02      	add	r7, sp, #8
 800a810:	6078      	str	r0, [r7, #4]
 800a812:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d011      	beq.n	800a840 <osMessageCreate+0x36>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00d      	beq.n	800a840 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6818      	ldr	r0, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6859      	ldr	r1, [r3, #4]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	689a      	ldr	r2, [r3, #8]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	2400      	movs	r4, #0
 800a836:	9400      	str	r4, [sp, #0]
 800a838:	f000 fe16 	bl	800b468 <xQueueGenericCreateStatic>
 800a83c:	4603      	mov	r3, r0
 800a83e:	e008      	b.n	800a852 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6818      	ldr	r0, [r3, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	4619      	mov	r1, r3
 800a84c:	f000 fe84 	bl	800b558 <xQueueGenericCreate>
 800a850:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a852:	4618      	mov	r0, r3
 800a854:	370c      	adds	r7, #12
 800a856:	46bd      	mov	sp, r7
 800a858:	bd90      	pop	{r4, r7, pc}
	...

0800a85c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b086      	sub	sp, #24
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a868:	2300      	movs	r3, #0
 800a86a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d101      	bne.n	800a87a <osMessagePut+0x1e>
    ticks = 1;
 800a876:	2301      	movs	r3, #1
 800a878:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a87a:	f7ff ff4d 	bl	800a718 <inHandlerMode>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d018      	beq.n	800a8b6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a884:	f107 0210 	add.w	r2, r7, #16
 800a888:	f107 0108 	add.w	r1, r7, #8
 800a88c:	2300      	movs	r3, #0
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f000 ffba 	bl	800b808 <xQueueGenericSendFromISR>
 800a894:	4603      	mov	r3, r0
 800a896:	2b01      	cmp	r3, #1
 800a898:	d001      	beq.n	800a89e <osMessagePut+0x42>
      return osErrorOS;
 800a89a:	23ff      	movs	r3, #255	; 0xff
 800a89c:	e018      	b.n	800a8d0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d014      	beq.n	800a8ce <osMessagePut+0x72>
 800a8a4:	4b0c      	ldr	r3, [pc, #48]	; (800a8d8 <osMessagePut+0x7c>)
 800a8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	e00b      	b.n	800a8ce <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a8b6:	f107 0108 	add.w	r1, r7, #8
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	697a      	ldr	r2, [r7, #20]
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f000 fea4 	bl	800b60c <xQueueGenericSend>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d001      	beq.n	800a8ce <osMessagePut+0x72>
      return osErrorOS;
 800a8ca:	23ff      	movs	r3, #255	; 0xff
 800a8cc:	e000      	b.n	800a8d0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3718      	adds	r7, #24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	e000ed04 	.word	0xe000ed04

0800a8dc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a8dc:	b590      	push	{r4, r7, lr}
 800a8de:	b08b      	sub	sp, #44	; 0x2c
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10a      	bne.n	800a90c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a8f6:	2380      	movs	r3, #128	; 0x80
 800a8f8:	617b      	str	r3, [r7, #20]
    return event;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	461c      	mov	r4, r3
 800a8fe:	f107 0314 	add.w	r3, r7, #20
 800a902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a90a:	e054      	b.n	800a9b6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a90c:	2300      	movs	r3, #0
 800a90e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91a:	d103      	bne.n	800a924 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a91c:	f04f 33ff 	mov.w	r3, #4294967295
 800a920:	627b      	str	r3, [r7, #36]	; 0x24
 800a922:	e009      	b.n	800a938 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d006      	beq.n	800a938 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a930:	2b00      	cmp	r3, #0
 800a932:	d101      	bne.n	800a938 <osMessageGet+0x5c>
      ticks = 1;
 800a934:	2301      	movs	r3, #1
 800a936:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a938:	f7ff feee 	bl	800a718 <inHandlerMode>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d01c      	beq.n	800a97c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a942:	f107 0220 	add.w	r2, r7, #32
 800a946:	f107 0314 	add.w	r3, r7, #20
 800a94a:	3304      	adds	r3, #4
 800a94c:	4619      	mov	r1, r3
 800a94e:	68b8      	ldr	r0, [r7, #8]
 800a950:	f001 f8d6 	bl	800bb00 <xQueueReceiveFromISR>
 800a954:	4603      	mov	r3, r0
 800a956:	2b01      	cmp	r3, #1
 800a958:	d102      	bne.n	800a960 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a95a:	2310      	movs	r3, #16
 800a95c:	617b      	str	r3, [r7, #20]
 800a95e:	e001      	b.n	800a964 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a960:	2300      	movs	r3, #0
 800a962:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d01d      	beq.n	800a9a6 <osMessageGet+0xca>
 800a96a:	4b15      	ldr	r3, [pc, #84]	; (800a9c0 <osMessageGet+0xe4>)
 800a96c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a970:	601a      	str	r2, [r3, #0]
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	e014      	b.n	800a9a6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a97c:	f107 0314 	add.w	r3, r7, #20
 800a980:	3304      	adds	r3, #4
 800a982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a984:	4619      	mov	r1, r3
 800a986:	68b8      	ldr	r0, [r7, #8]
 800a988:	f000 ffda 	bl	800b940 <xQueueReceive>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d102      	bne.n	800a998 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a992:	2310      	movs	r3, #16
 800a994:	617b      	str	r3, [r7, #20]
 800a996:	e006      	b.n	800a9a6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d101      	bne.n	800a9a2 <osMessageGet+0xc6>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	e000      	b.n	800a9a4 <osMessageGet+0xc8>
 800a9a2:	2340      	movs	r3, #64	; 0x40
 800a9a4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	461c      	mov	r4, r3
 800a9aa:	f107 0314 	add.w	r3, r7, #20
 800a9ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a9b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	372c      	adds	r7, #44	; 0x2c
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd90      	pop	{r4, r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	e000ed04 	.word	0xe000ed04

0800a9c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b08a      	sub	sp, #40	; 0x28
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a9d0:	f001 fcde 	bl	800c390 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a9d4:	4b5b      	ldr	r3, [pc, #364]	; (800ab44 <pvPortMalloc+0x180>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d101      	bne.n	800a9e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a9dc:	f000 f920 	bl	800ac20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9e0:	4b59      	ldr	r3, [pc, #356]	; (800ab48 <pvPortMalloc+0x184>)
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f040 8093 	bne.w	800ab14 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d01d      	beq.n	800aa30 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a9f4:	2208      	movs	r2, #8
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f003 0307 	and.w	r3, r3, #7
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d014      	beq.n	800aa30 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f023 0307 	bic.w	r3, r3, #7
 800aa0c:	3308      	adds	r3, #8
 800aa0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f003 0307 	and.w	r3, r3, #7
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00a      	beq.n	800aa30 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aa2c:	bf00      	nop
 800aa2e:	e7fe      	b.n	800aa2e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d06e      	beq.n	800ab14 <pvPortMalloc+0x150>
 800aa36:	4b45      	ldr	r3, [pc, #276]	; (800ab4c <pvPortMalloc+0x188>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d869      	bhi.n	800ab14 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa40:	4b43      	ldr	r3, [pc, #268]	; (800ab50 <pvPortMalloc+0x18c>)
 800aa42:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa44:	4b42      	ldr	r3, [pc, #264]	; (800ab50 <pvPortMalloc+0x18c>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa4a:	e004      	b.n	800aa56 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d903      	bls.n	800aa68 <pvPortMalloc+0xa4>
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1f1      	bne.n	800aa4c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa68:	4b36      	ldr	r3, [pc, #216]	; (800ab44 <pvPortMalloc+0x180>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d050      	beq.n	800ab14 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa72:	6a3b      	ldr	r3, [r7, #32]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2208      	movs	r2, #8
 800aa78:	4413      	add	r3, r2
 800aa7a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	6a3b      	ldr	r3, [r7, #32]
 800aa82:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa86:	685a      	ldr	r2, [r3, #4]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	1ad2      	subs	r2, r2, r3
 800aa8c:	2308      	movs	r3, #8
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d91f      	bls.n	800aad4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4413      	add	r3, r2
 800aa9a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	f003 0307 	and.w	r3, r3, #7
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00a      	beq.n	800aabc <pvPortMalloc+0xf8>
	__asm volatile
 800aaa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaaa:	f383 8811 	msr	BASEPRI, r3
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	613b      	str	r3, [r7, #16]
}
 800aab8:	bf00      	nop
 800aaba:	e7fe      	b.n	800aaba <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabe:	685a      	ldr	r2, [r3, #4]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	1ad2      	subs	r2, r2, r3
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aace:	69b8      	ldr	r0, [r7, #24]
 800aad0:	f000 f908 	bl	800ace4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aad4:	4b1d      	ldr	r3, [pc, #116]	; (800ab4c <pvPortMalloc+0x188>)
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	4a1b      	ldr	r2, [pc, #108]	; (800ab4c <pvPortMalloc+0x188>)
 800aae0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aae2:	4b1a      	ldr	r3, [pc, #104]	; (800ab4c <pvPortMalloc+0x188>)
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	4b1b      	ldr	r3, [pc, #108]	; (800ab54 <pvPortMalloc+0x190>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d203      	bcs.n	800aaf6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aaee:	4b17      	ldr	r3, [pc, #92]	; (800ab4c <pvPortMalloc+0x188>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a18      	ldr	r2, [pc, #96]	; (800ab54 <pvPortMalloc+0x190>)
 800aaf4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	4b13      	ldr	r3, [pc, #76]	; (800ab48 <pvPortMalloc+0x184>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	431a      	orrs	r2, r3
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab06:	2200      	movs	r2, #0
 800ab08:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab0a:	4b13      	ldr	r3, [pc, #76]	; (800ab58 <pvPortMalloc+0x194>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	4a11      	ldr	r2, [pc, #68]	; (800ab58 <pvPortMalloc+0x194>)
 800ab12:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab14:	f001 fc4a 	bl	800c3ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	f003 0307 	and.w	r3, r3, #7
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00a      	beq.n	800ab38 <pvPortMalloc+0x174>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	60fb      	str	r3, [r7, #12]
}
 800ab34:	bf00      	nop
 800ab36:	e7fe      	b.n	800ab36 <pvPortMalloc+0x172>
	return pvReturn;
 800ab38:	69fb      	ldr	r3, [r7, #28]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3728      	adds	r7, #40	; 0x28
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	20004508 	.word	0x20004508
 800ab48:	2000451c 	.word	0x2000451c
 800ab4c:	2000450c 	.word	0x2000450c
 800ab50:	20004500 	.word	0x20004500
 800ab54:	20004510 	.word	0x20004510
 800ab58:	20004514 	.word	0x20004514

0800ab5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b086      	sub	sp, #24
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d04d      	beq.n	800ac0a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab6e:	2308      	movs	r3, #8
 800ab70:	425b      	negs	r3, r3
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	4413      	add	r3, r2
 800ab76:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	685a      	ldr	r2, [r3, #4]
 800ab80:	4b24      	ldr	r3, [pc, #144]	; (800ac14 <vPortFree+0xb8>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4013      	ands	r3, r2
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d10a      	bne.n	800aba0 <vPortFree+0x44>
	__asm volatile
 800ab8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8e:	f383 8811 	msr	BASEPRI, r3
 800ab92:	f3bf 8f6f 	isb	sy
 800ab96:	f3bf 8f4f 	dsb	sy
 800ab9a:	60fb      	str	r3, [r7, #12]
}
 800ab9c:	bf00      	nop
 800ab9e:	e7fe      	b.n	800ab9e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00a      	beq.n	800abbe <vPortFree+0x62>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	60bb      	str	r3, [r7, #8]
}
 800abba:	bf00      	nop
 800abbc:	e7fe      	b.n	800abbc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	685a      	ldr	r2, [r3, #4]
 800abc2:	4b14      	ldr	r3, [pc, #80]	; (800ac14 <vPortFree+0xb8>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4013      	ands	r3, r2
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d01e      	beq.n	800ac0a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d11a      	bne.n	800ac0a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	4b0e      	ldr	r3, [pc, #56]	; (800ac14 <vPortFree+0xb8>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	43db      	mvns	r3, r3
 800abde:	401a      	ands	r2, r3
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800abe4:	f001 fbd4 	bl	800c390 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	685a      	ldr	r2, [r3, #4]
 800abec:	4b0a      	ldr	r3, [pc, #40]	; (800ac18 <vPortFree+0xbc>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4413      	add	r3, r2
 800abf2:	4a09      	ldr	r2, [pc, #36]	; (800ac18 <vPortFree+0xbc>)
 800abf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abf6:	6938      	ldr	r0, [r7, #16]
 800abf8:	f000 f874 	bl	800ace4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800abfc:	4b07      	ldr	r3, [pc, #28]	; (800ac1c <vPortFree+0xc0>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3301      	adds	r3, #1
 800ac02:	4a06      	ldr	r2, [pc, #24]	; (800ac1c <vPortFree+0xc0>)
 800ac04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac06:	f001 fbd1 	bl	800c3ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac0a:	bf00      	nop
 800ac0c:	3718      	adds	r7, #24
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	2000451c 	.word	0x2000451c
 800ac18:	2000450c 	.word	0x2000450c
 800ac1c:	20004518 	.word	0x20004518

0800ac20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac26:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ac2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac2c:	4b27      	ldr	r3, [pc, #156]	; (800accc <prvHeapInit+0xac>)
 800ac2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f003 0307 	and.w	r3, r3, #7
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00c      	beq.n	800ac54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3307      	adds	r3, #7
 800ac3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f023 0307 	bic.w	r3, r3, #7
 800ac46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	4a1f      	ldr	r2, [pc, #124]	; (800accc <prvHeapInit+0xac>)
 800ac50:	4413      	add	r3, r2
 800ac52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac58:	4a1d      	ldr	r2, [pc, #116]	; (800acd0 <prvHeapInit+0xb0>)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac5e:	4b1c      	ldr	r3, [pc, #112]	; (800acd0 <prvHeapInit+0xb0>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	4413      	add	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac6c:	2208      	movs	r2, #8
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	1a9b      	subs	r3, r3, r2
 800ac72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f023 0307 	bic.w	r3, r3, #7
 800ac7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4a15      	ldr	r2, [pc, #84]	; (800acd4 <prvHeapInit+0xb4>)
 800ac80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac82:	4b14      	ldr	r3, [pc, #80]	; (800acd4 <prvHeapInit+0xb4>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2200      	movs	r2, #0
 800ac88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac8a:	4b12      	ldr	r3, [pc, #72]	; (800acd4 <prvHeapInit+0xb4>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	1ad2      	subs	r2, r2, r3
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aca0:	4b0c      	ldr	r3, [pc, #48]	; (800acd4 <prvHeapInit+0xb4>)
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	4a0a      	ldr	r2, [pc, #40]	; (800acd8 <prvHeapInit+0xb8>)
 800acae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	4a09      	ldr	r2, [pc, #36]	; (800acdc <prvHeapInit+0xbc>)
 800acb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800acb8:	4b09      	ldr	r3, [pc, #36]	; (800ace0 <prvHeapInit+0xc0>)
 800acba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800acbe:	601a      	str	r2, [r3, #0]
}
 800acc0:	bf00      	nop
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	20000900 	.word	0x20000900
 800acd0:	20004500 	.word	0x20004500
 800acd4:	20004508 	.word	0x20004508
 800acd8:	20004510 	.word	0x20004510
 800acdc:	2000450c 	.word	0x2000450c
 800ace0:	2000451c 	.word	0x2000451c

0800ace4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800acec:	4b28      	ldr	r3, [pc, #160]	; (800ad90 <prvInsertBlockIntoFreeList+0xac>)
 800acee:	60fb      	str	r3, [r7, #12]
 800acf0:	e002      	b.n	800acf8 <prvInsertBlockIntoFreeList+0x14>
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	60fb      	str	r3, [r7, #12]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d8f7      	bhi.n	800acf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d108      	bne.n	800ad26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	685a      	ldr	r2, [r3, #4]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	441a      	add	r2, r3
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	441a      	add	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d118      	bne.n	800ad6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	4b15      	ldr	r3, [pc, #84]	; (800ad94 <prvInsertBlockIntoFreeList+0xb0>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d00d      	beq.n	800ad62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	685a      	ldr	r2, [r3, #4]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	441a      	add	r2, r3
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	601a      	str	r2, [r3, #0]
 800ad60:	e008      	b.n	800ad74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad62:	4b0c      	ldr	r3, [pc, #48]	; (800ad94 <prvInsertBlockIntoFreeList+0xb0>)
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	e003      	b.n	800ad74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d002      	beq.n	800ad82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad82:	bf00      	nop
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	20004500 	.word	0x20004500
 800ad94:	20004508 	.word	0x20004508

0800ad98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f103 0208 	add.w	r2, r3, #8
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f04f 32ff 	mov.w	r2, #4294967295
 800adb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f103 0208 	add.w	r2, r3, #8
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f103 0208 	add.w	r2, r3, #8
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ade6:	bf00      	nop
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr

0800adf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adf2:	b480      	push	{r7}
 800adf4:	b085      	sub	sp, #20
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	689a      	ldr	r2, [r3, #8]
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	683a      	ldr	r2, [r7, #0]
 800ae16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	1c5a      	adds	r2, r3, #1
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	601a      	str	r2, [r3, #0]
}
 800ae2e:	bf00      	nop
 800ae30:	3714      	adds	r7, #20
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	b085      	sub	sp, #20
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
 800ae42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae50:	d103      	bne.n	800ae5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	60fb      	str	r3, [r7, #12]
 800ae58:	e00c      	b.n	800ae74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	3308      	adds	r3, #8
 800ae5e:	60fb      	str	r3, [r7, #12]
 800ae60:	e002      	b.n	800ae68 <vListInsert+0x2e>
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	60fb      	str	r3, [r7, #12]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68ba      	ldr	r2, [r7, #8]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d2f6      	bcs.n	800ae62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	685a      	ldr	r2, [r3, #4]
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	683a      	ldr	r2, [r7, #0]
 800ae82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	1c5a      	adds	r2, r3, #1
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	601a      	str	r2, [r3, #0]
}
 800aea0:	bf00      	nop
 800aea2:	3714      	adds	r7, #20
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	6892      	ldr	r2, [r2, #8]
 800aec2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	6852      	ldr	r2, [r2, #4]
 800aecc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d103      	bne.n	800aee0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	689a      	ldr	r2, [r3, #8]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	1e5a      	subs	r2, r3, #1
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3714      	adds	r7, #20
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	3b04      	subs	r3, #4
 800af10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800af18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	3b04      	subs	r3, #4
 800af1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	f023 0201 	bic.w	r2, r3, #1
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	3b04      	subs	r3, #4
 800af2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af30:	4a0c      	ldr	r2, [pc, #48]	; (800af64 <pxPortInitialiseStack+0x64>)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	3b14      	subs	r3, #20
 800af3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	3b04      	subs	r3, #4
 800af46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f06f 0202 	mvn.w	r2, #2
 800af4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	3b20      	subs	r3, #32
 800af54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af56:	68fb      	ldr	r3, [r7, #12]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr
 800af64:	0800af69 	.word	0x0800af69

0800af68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af6e:	2300      	movs	r3, #0
 800af70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af72:	4b12      	ldr	r3, [pc, #72]	; (800afbc <prvTaskExitError+0x54>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7a:	d00a      	beq.n	800af92 <prvTaskExitError+0x2a>
	__asm volatile
 800af7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af80:	f383 8811 	msr	BASEPRI, r3
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	60fb      	str	r3, [r7, #12]
}
 800af8e:	bf00      	nop
 800af90:	e7fe      	b.n	800af90 <prvTaskExitError+0x28>
	__asm volatile
 800af92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	60bb      	str	r3, [r7, #8]
}
 800afa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800afa6:	bf00      	nop
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d0fc      	beq.n	800afa8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800afae:	bf00      	nop
 800afb0:	bf00      	nop
 800afb2:	3714      	adds	r7, #20
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr
 800afbc:	20000068 	.word	0x20000068

0800afc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800afc0:	4b07      	ldr	r3, [pc, #28]	; (800afe0 <pxCurrentTCBConst2>)
 800afc2:	6819      	ldr	r1, [r3, #0]
 800afc4:	6808      	ldr	r0, [r1, #0]
 800afc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afca:	f380 8809 	msr	PSP, r0
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f04f 0000 	mov.w	r0, #0
 800afd6:	f380 8811 	msr	BASEPRI, r0
 800afda:	4770      	bx	lr
 800afdc:	f3af 8000 	nop.w

0800afe0 <pxCurrentTCBConst2>:
 800afe0:	20004528 	.word	0x20004528
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800afe4:	bf00      	nop
 800afe6:	bf00      	nop

0800afe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800afe8:	4808      	ldr	r0, [pc, #32]	; (800b00c <prvPortStartFirstTask+0x24>)
 800afea:	6800      	ldr	r0, [r0, #0]
 800afec:	6800      	ldr	r0, [r0, #0]
 800afee:	f380 8808 	msr	MSP, r0
 800aff2:	f04f 0000 	mov.w	r0, #0
 800aff6:	f380 8814 	msr	CONTROL, r0
 800affa:	b662      	cpsie	i
 800affc:	b661      	cpsie	f
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	df00      	svc	0
 800b008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b00a:	bf00      	nop
 800b00c:	e000ed08 	.word	0xe000ed08

0800b010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b016:	4b46      	ldr	r3, [pc, #280]	; (800b130 <xPortStartScheduler+0x120>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a46      	ldr	r2, [pc, #280]	; (800b134 <xPortStartScheduler+0x124>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d10a      	bne.n	800b036 <xPortStartScheduler+0x26>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	613b      	str	r3, [r7, #16]
}
 800b032:	bf00      	nop
 800b034:	e7fe      	b.n	800b034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b036:	4b3e      	ldr	r3, [pc, #248]	; (800b130 <xPortStartScheduler+0x120>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a3f      	ldr	r2, [pc, #252]	; (800b138 <xPortStartScheduler+0x128>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d10a      	bne.n	800b056 <xPortStartScheduler+0x46>
	__asm volatile
 800b040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	60fb      	str	r3, [r7, #12]
}
 800b052:	bf00      	nop
 800b054:	e7fe      	b.n	800b054 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b056:	4b39      	ldr	r3, [pc, #228]	; (800b13c <xPortStartScheduler+0x12c>)
 800b058:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	22ff      	movs	r2, #255	; 0xff
 800b066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b070:	78fb      	ldrb	r3, [r7, #3]
 800b072:	b2db      	uxtb	r3, r3
 800b074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	4b31      	ldr	r3, [pc, #196]	; (800b140 <xPortStartScheduler+0x130>)
 800b07c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b07e:	4b31      	ldr	r3, [pc, #196]	; (800b144 <xPortStartScheduler+0x134>)
 800b080:	2207      	movs	r2, #7
 800b082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b084:	e009      	b.n	800b09a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b086:	4b2f      	ldr	r3, [pc, #188]	; (800b144 <xPortStartScheduler+0x134>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3b01      	subs	r3, #1
 800b08c:	4a2d      	ldr	r2, [pc, #180]	; (800b144 <xPortStartScheduler+0x134>)
 800b08e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b090:	78fb      	ldrb	r3, [r7, #3]
 800b092:	b2db      	uxtb	r3, r3
 800b094:	005b      	lsls	r3, r3, #1
 800b096:	b2db      	uxtb	r3, r3
 800b098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b09a:	78fb      	ldrb	r3, [r7, #3]
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0a2:	2b80      	cmp	r3, #128	; 0x80
 800b0a4:	d0ef      	beq.n	800b086 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b0a6:	4b27      	ldr	r3, [pc, #156]	; (800b144 <xPortStartScheduler+0x134>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f1c3 0307 	rsb	r3, r3, #7
 800b0ae:	2b04      	cmp	r3, #4
 800b0b0:	d00a      	beq.n	800b0c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	60bb      	str	r3, [r7, #8]
}
 800b0c4:	bf00      	nop
 800b0c6:	e7fe      	b.n	800b0c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b0c8:	4b1e      	ldr	r3, [pc, #120]	; (800b144 <xPortStartScheduler+0x134>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	021b      	lsls	r3, r3, #8
 800b0ce:	4a1d      	ldr	r2, [pc, #116]	; (800b144 <xPortStartScheduler+0x134>)
 800b0d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b0d2:	4b1c      	ldr	r3, [pc, #112]	; (800b144 <xPortStartScheduler+0x134>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0da:	4a1a      	ldr	r2, [pc, #104]	; (800b144 <xPortStartScheduler+0x134>)
 800b0dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	b2da      	uxtb	r2, r3
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b0e6:	4b18      	ldr	r3, [pc, #96]	; (800b148 <xPortStartScheduler+0x138>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a17      	ldr	r2, [pc, #92]	; (800b148 <xPortStartScheduler+0x138>)
 800b0ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b0f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b0f2:	4b15      	ldr	r3, [pc, #84]	; (800b148 <xPortStartScheduler+0x138>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a14      	ldr	r2, [pc, #80]	; (800b148 <xPortStartScheduler+0x138>)
 800b0f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b0fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b0fe:	f000 f8dd 	bl	800b2bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b102:	4b12      	ldr	r3, [pc, #72]	; (800b14c <xPortStartScheduler+0x13c>)
 800b104:	2200      	movs	r2, #0
 800b106:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b108:	f000 f8fc 	bl	800b304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b10c:	4b10      	ldr	r3, [pc, #64]	; (800b150 <xPortStartScheduler+0x140>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a0f      	ldr	r2, [pc, #60]	; (800b150 <xPortStartScheduler+0x140>)
 800b112:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b116:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b118:	f7ff ff66 	bl	800afe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b11c:	f001 fa9a 	bl	800c654 <vTaskSwitchContext>
	prvTaskExitError();
 800b120:	f7ff ff22 	bl	800af68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	e000ed00 	.word	0xe000ed00
 800b134:	410fc271 	.word	0x410fc271
 800b138:	410fc270 	.word	0x410fc270
 800b13c:	e000e400 	.word	0xe000e400
 800b140:	20004520 	.word	0x20004520
 800b144:	20004524 	.word	0x20004524
 800b148:	e000ed20 	.word	0xe000ed20
 800b14c:	20000068 	.word	0x20000068
 800b150:	e000ef34 	.word	0xe000ef34

0800b154 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	607b      	str	r3, [r7, #4]
}
 800b16c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b16e:	4b0f      	ldr	r3, [pc, #60]	; (800b1ac <vPortEnterCritical+0x58>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	3301      	adds	r3, #1
 800b174:	4a0d      	ldr	r2, [pc, #52]	; (800b1ac <vPortEnterCritical+0x58>)
 800b176:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b178:	4b0c      	ldr	r3, [pc, #48]	; (800b1ac <vPortEnterCritical+0x58>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d10f      	bne.n	800b1a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b180:	4b0b      	ldr	r3, [pc, #44]	; (800b1b0 <vPortEnterCritical+0x5c>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	b2db      	uxtb	r3, r3
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00a      	beq.n	800b1a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	603b      	str	r3, [r7, #0]
}
 800b19c:	bf00      	nop
 800b19e:	e7fe      	b.n	800b19e <vPortEnterCritical+0x4a>
	}
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	20000068 	.word	0x20000068
 800b1b0:	e000ed04 	.word	0xe000ed04

0800b1b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b1ba:	4b12      	ldr	r3, [pc, #72]	; (800b204 <vPortExitCritical+0x50>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10a      	bne.n	800b1d8 <vPortExitCritical+0x24>
	__asm volatile
 800b1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	607b      	str	r3, [r7, #4]
}
 800b1d4:	bf00      	nop
 800b1d6:	e7fe      	b.n	800b1d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b1d8:	4b0a      	ldr	r3, [pc, #40]	; (800b204 <vPortExitCritical+0x50>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	4a09      	ldr	r2, [pc, #36]	; (800b204 <vPortExitCritical+0x50>)
 800b1e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b1e2:	4b08      	ldr	r3, [pc, #32]	; (800b204 <vPortExitCritical+0x50>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d105      	bne.n	800b1f6 <vPortExitCritical+0x42>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b1f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b1f6:	bf00      	nop
 800b1f8:	370c      	adds	r7, #12
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	20000068 	.word	0x20000068
	...

0800b210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b210:	f3ef 8009 	mrs	r0, PSP
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	4b15      	ldr	r3, [pc, #84]	; (800b270 <pxCurrentTCBConst>)
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	f01e 0f10 	tst.w	lr, #16
 800b220:	bf08      	it	eq
 800b222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22a:	6010      	str	r0, [r2, #0]
 800b22c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b230:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b234:	f380 8811 	msr	BASEPRI, r0
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f001 fa08 	bl	800c654 <vTaskSwitchContext>
 800b244:	f04f 0000 	mov.w	r0, #0
 800b248:	f380 8811 	msr	BASEPRI, r0
 800b24c:	bc09      	pop	{r0, r3}
 800b24e:	6819      	ldr	r1, [r3, #0]
 800b250:	6808      	ldr	r0, [r1, #0]
 800b252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b256:	f01e 0f10 	tst.w	lr, #16
 800b25a:	bf08      	it	eq
 800b25c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b260:	f380 8809 	msr	PSP, r0
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	f3af 8000 	nop.w

0800b270 <pxCurrentTCBConst>:
 800b270:	20004528 	.word	0x20004528
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b274:	bf00      	nop
 800b276:	bf00      	nop

0800b278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	607b      	str	r3, [r7, #4]
}
 800b290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b292:	f001 f927 	bl	800c4e4 <xTaskIncrementTick>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d003      	beq.n	800b2a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b29c:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <SysTick_Handler+0x40>)
 800b29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2a2:	601a      	str	r2, [r3, #0]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	f383 8811 	msr	BASEPRI, r3
}
 800b2ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b2b0:	bf00      	nop
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	e000ed04 	.word	0xe000ed04

0800b2bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b2bc:	b480      	push	{r7}
 800b2be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b2c0:	4b0b      	ldr	r3, [pc, #44]	; (800b2f0 <vPortSetupTimerInterrupt+0x34>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b2c6:	4b0b      	ldr	r3, [pc, #44]	; (800b2f4 <vPortSetupTimerInterrupt+0x38>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b2cc:	4b0a      	ldr	r3, [pc, #40]	; (800b2f8 <vPortSetupTimerInterrupt+0x3c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a0a      	ldr	r2, [pc, #40]	; (800b2fc <vPortSetupTimerInterrupt+0x40>)
 800b2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d6:	099b      	lsrs	r3, r3, #6
 800b2d8:	4a09      	ldr	r2, [pc, #36]	; (800b300 <vPortSetupTimerInterrupt+0x44>)
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2de:	4b04      	ldr	r3, [pc, #16]	; (800b2f0 <vPortSetupTimerInterrupt+0x34>)
 800b2e0:	2207      	movs	r2, #7
 800b2e2:	601a      	str	r2, [r3, #0]
}
 800b2e4:	bf00      	nop
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	e000e010 	.word	0xe000e010
 800b2f4:	e000e018 	.word	0xe000e018
 800b2f8:	2000005c 	.word	0x2000005c
 800b2fc:	10624dd3 	.word	0x10624dd3
 800b300:	e000e014 	.word	0xe000e014

0800b304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b314 <vPortEnableVFP+0x10>
 800b308:	6801      	ldr	r1, [r0, #0]
 800b30a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b30e:	6001      	str	r1, [r0, #0]
 800b310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b312:	bf00      	nop
 800b314:	e000ed88 	.word	0xe000ed88

0800b318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b31e:	f3ef 8305 	mrs	r3, IPSR
 800b322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2b0f      	cmp	r3, #15
 800b328:	d914      	bls.n	800b354 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b32a:	4a17      	ldr	r2, [pc, #92]	; (800b388 <vPortValidateInterruptPriority+0x70>)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	4413      	add	r3, r2
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b334:	4b15      	ldr	r3, [pc, #84]	; (800b38c <vPortValidateInterruptPriority+0x74>)
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	7afa      	ldrb	r2, [r7, #11]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d20a      	bcs.n	800b354 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	607b      	str	r3, [r7, #4]
}
 800b350:	bf00      	nop
 800b352:	e7fe      	b.n	800b352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b354:	4b0e      	ldr	r3, [pc, #56]	; (800b390 <vPortValidateInterruptPriority+0x78>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b35c:	4b0d      	ldr	r3, [pc, #52]	; (800b394 <vPortValidateInterruptPriority+0x7c>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	429a      	cmp	r2, r3
 800b362:	d90a      	bls.n	800b37a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	603b      	str	r3, [r7, #0]
}
 800b376:	bf00      	nop
 800b378:	e7fe      	b.n	800b378 <vPortValidateInterruptPriority+0x60>
	}
 800b37a:	bf00      	nop
 800b37c:	3714      	adds	r7, #20
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	e000e3f0 	.word	0xe000e3f0
 800b38c:	20004520 	.word	0x20004520
 800b390:	e000ed0c 	.word	0xe000ed0c
 800b394:	20004524 	.word	0x20004524

0800b398 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d10a      	bne.n	800b3c2 <xQueueGenericReset+0x2a>
	__asm volatile
 800b3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b0:	f383 8811 	msr	BASEPRI, r3
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	60bb      	str	r3, [r7, #8]
}
 800b3be:	bf00      	nop
 800b3c0:	e7fe      	b.n	800b3c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b3c2:	f7ff fec7 	bl	800b154 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ce:	68f9      	ldr	r1, [r7, #12]
 800b3d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3d2:	fb01 f303 	mul.w	r3, r1, r3
 800b3d6:	441a      	add	r2, r3
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	68f9      	ldr	r1, [r7, #12]
 800b3f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3f8:	fb01 f303 	mul.w	r3, r1, r3
 800b3fc:	441a      	add	r2, r3
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	22ff      	movs	r2, #255	; 0xff
 800b406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	22ff      	movs	r2, #255	; 0xff
 800b40e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d114      	bne.n	800b442 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d01a      	beq.n	800b456 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	3310      	adds	r3, #16
 800b424:	4618      	mov	r0, r3
 800b426:	f001 f995 	bl	800c754 <xTaskRemoveFromEventList>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d012      	beq.n	800b456 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b430:	4b0c      	ldr	r3, [pc, #48]	; (800b464 <xQueueGenericReset+0xcc>)
 800b432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b436:	601a      	str	r2, [r3, #0]
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	e009      	b.n	800b456 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	3310      	adds	r3, #16
 800b446:	4618      	mov	r0, r3
 800b448:	f7ff fca6 	bl	800ad98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	3324      	adds	r3, #36	; 0x24
 800b450:	4618      	mov	r0, r3
 800b452:	f7ff fca1 	bl	800ad98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b456:	f7ff fead 	bl	800b1b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b45a:	2301      	movs	r3, #1
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	e000ed04 	.word	0xe000ed04

0800b468 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08e      	sub	sp, #56	; 0x38
 800b46c:	af02      	add	r7, sp, #8
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10a      	bne.n	800b492 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b48e:	bf00      	nop
 800b490:	e7fe      	b.n	800b490 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10a      	bne.n	800b4ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49c:	f383 8811 	msr	BASEPRI, r3
 800b4a0:	f3bf 8f6f 	isb	sy
 800b4a4:	f3bf 8f4f 	dsb	sy
 800b4a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4aa:	bf00      	nop
 800b4ac:	e7fe      	b.n	800b4ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d002      	beq.n	800b4ba <xQueueGenericCreateStatic+0x52>
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d001      	beq.n	800b4be <xQueueGenericCreateStatic+0x56>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e000      	b.n	800b4c0 <xQueueGenericCreateStatic+0x58>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	623b      	str	r3, [r7, #32]
}
 800b4d6:	bf00      	nop
 800b4d8:	e7fe      	b.n	800b4d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d102      	bne.n	800b4e6 <xQueueGenericCreateStatic+0x7e>
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d101      	bne.n	800b4ea <xQueueGenericCreateStatic+0x82>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e000      	b.n	800b4ec <xQueueGenericCreateStatic+0x84>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10a      	bne.n	800b506 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f4:	f383 8811 	msr	BASEPRI, r3
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	61fb      	str	r3, [r7, #28]
}
 800b502:	bf00      	nop
 800b504:	e7fe      	b.n	800b504 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b506:	2348      	movs	r3, #72	; 0x48
 800b508:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	2b48      	cmp	r3, #72	; 0x48
 800b50e:	d00a      	beq.n	800b526 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	61bb      	str	r3, [r7, #24]
}
 800b522:	bf00      	nop
 800b524:	e7fe      	b.n	800b524 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b526:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00d      	beq.n	800b54e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b534:	2201      	movs	r2, #1
 800b536:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b53a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	4613      	mov	r3, r2
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	68b9      	ldr	r1, [r7, #8]
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f000 f83f 	bl	800b5cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b550:	4618      	mov	r0, r3
 800b552:	3730      	adds	r7, #48	; 0x30
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b08a      	sub	sp, #40	; 0x28
 800b55c:	af02      	add	r7, sp, #8
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	4613      	mov	r3, r2
 800b564:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10a      	bne.n	800b582 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b570:	f383 8811 	msr	BASEPRI, r3
 800b574:	f3bf 8f6f 	isb	sy
 800b578:	f3bf 8f4f 	dsb	sy
 800b57c:	613b      	str	r3, [r7, #16]
}
 800b57e:	bf00      	nop
 800b580:	e7fe      	b.n	800b580 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	68ba      	ldr	r2, [r7, #8]
 800b586:	fb02 f303 	mul.w	r3, r2, r3
 800b58a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	3348      	adds	r3, #72	; 0x48
 800b590:	4618      	mov	r0, r3
 800b592:	f7ff fa17 	bl	800a9c4 <pvPortMalloc>
 800b596:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d011      	beq.n	800b5c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	3348      	adds	r3, #72	; 0x48
 800b5a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b5b0:	79fa      	ldrb	r2, [r7, #7]
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	697a      	ldr	r2, [r7, #20]
 800b5ba:	68b9      	ldr	r1, [r7, #8]
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f000 f805 	bl	800b5cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b5c2:	69bb      	ldr	r3, [r7, #24]
	}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3720      	adds	r7, #32
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
 800b5d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d103      	bne.n	800b5e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	69ba      	ldr	r2, [r7, #24]
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	e002      	b.n	800b5ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	69b8      	ldr	r0, [r7, #24]
 800b5fe:	f7ff fecb 	bl	800b398 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b602:	bf00      	nop
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
	...

0800b60c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b08e      	sub	sp, #56	; 0x38
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
 800b618:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b61a:	2300      	movs	r3, #0
 800b61c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b624:	2b00      	cmp	r3, #0
 800b626:	d10a      	bne.n	800b63e <xQueueGenericSend+0x32>
	__asm volatile
 800b628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62c:	f383 8811 	msr	BASEPRI, r3
 800b630:	f3bf 8f6f 	isb	sy
 800b634:	f3bf 8f4f 	dsb	sy
 800b638:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b63a:	bf00      	nop
 800b63c:	e7fe      	b.n	800b63c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d103      	bne.n	800b64c <xQueueGenericSend+0x40>
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d101      	bne.n	800b650 <xQueueGenericSend+0x44>
 800b64c:	2301      	movs	r3, #1
 800b64e:	e000      	b.n	800b652 <xQueueGenericSend+0x46>
 800b650:	2300      	movs	r3, #0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d10a      	bne.n	800b66c <xQueueGenericSend+0x60>
	__asm volatile
 800b656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65a:	f383 8811 	msr	BASEPRI, r3
 800b65e:	f3bf 8f6f 	isb	sy
 800b662:	f3bf 8f4f 	dsb	sy
 800b666:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b668:	bf00      	nop
 800b66a:	e7fe      	b.n	800b66a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	2b02      	cmp	r3, #2
 800b670:	d103      	bne.n	800b67a <xQueueGenericSend+0x6e>
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b676:	2b01      	cmp	r3, #1
 800b678:	d101      	bne.n	800b67e <xQueueGenericSend+0x72>
 800b67a:	2301      	movs	r3, #1
 800b67c:	e000      	b.n	800b680 <xQueueGenericSend+0x74>
 800b67e:	2300      	movs	r3, #0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d10a      	bne.n	800b69a <xQueueGenericSend+0x8e>
	__asm volatile
 800b684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b688:	f383 8811 	msr	BASEPRI, r3
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	623b      	str	r3, [r7, #32]
}
 800b696:	bf00      	nop
 800b698:	e7fe      	b.n	800b698 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b69a:	f001 fa17 	bl	800cacc <xTaskGetSchedulerState>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d102      	bne.n	800b6aa <xQueueGenericSend+0x9e>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d101      	bne.n	800b6ae <xQueueGenericSend+0xa2>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e000      	b.n	800b6b0 <xQueueGenericSend+0xa4>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d10a      	bne.n	800b6ca <xQueueGenericSend+0xbe>
	__asm volatile
 800b6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b8:	f383 8811 	msr	BASEPRI, r3
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	61fb      	str	r3, [r7, #28]
}
 800b6c6:	bf00      	nop
 800b6c8:	e7fe      	b.n	800b6c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6ca:	f7ff fd43 	bl	800b154 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d302      	bcc.n	800b6e0 <xQueueGenericSend+0xd4>
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	d129      	bne.n	800b734 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	68b9      	ldr	r1, [r7, #8]
 800b6e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6e6:	f000 fa8b 	bl	800bc00 <prvCopyDataToQueue>
 800b6ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d010      	beq.n	800b716 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f6:	3324      	adds	r3, #36	; 0x24
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f001 f82b 	bl	800c754 <xTaskRemoveFromEventList>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d013      	beq.n	800b72c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b704:	4b3f      	ldr	r3, [pc, #252]	; (800b804 <xQueueGenericSend+0x1f8>)
 800b706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	f3bf 8f6f 	isb	sy
 800b714:	e00a      	b.n	800b72c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d007      	beq.n	800b72c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b71c:	4b39      	ldr	r3, [pc, #228]	; (800b804 <xQueueGenericSend+0x1f8>)
 800b71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b72c:	f7ff fd42 	bl	800b1b4 <vPortExitCritical>
				return pdPASS;
 800b730:	2301      	movs	r3, #1
 800b732:	e063      	b.n	800b7fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d103      	bne.n	800b742 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b73a:	f7ff fd3b 	bl	800b1b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b73e:	2300      	movs	r3, #0
 800b740:	e05c      	b.n	800b7fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b744:	2b00      	cmp	r3, #0
 800b746:	d106      	bne.n	800b756 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b748:	f107 0314 	add.w	r3, r7, #20
 800b74c:	4618      	mov	r0, r3
 800b74e:	f001 f863 	bl	800c818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b752:	2301      	movs	r3, #1
 800b754:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b756:	f7ff fd2d 	bl	800b1b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b75a:	f000 fe19 	bl	800c390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b75e:	f7ff fcf9 	bl	800b154 <vPortEnterCritical>
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b768:	b25b      	sxtb	r3, r3
 800b76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76e:	d103      	bne.n	800b778 <xQueueGenericSend+0x16c>
 800b770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b772:	2200      	movs	r2, #0
 800b774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b77e:	b25b      	sxtb	r3, r3
 800b780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b784:	d103      	bne.n	800b78e <xQueueGenericSend+0x182>
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b78e:	f7ff fd11 	bl	800b1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b792:	1d3a      	adds	r2, r7, #4
 800b794:	f107 0314 	add.w	r3, r7, #20
 800b798:	4611      	mov	r1, r2
 800b79a:	4618      	mov	r0, r3
 800b79c:	f001 f852 	bl	800c844 <xTaskCheckForTimeOut>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d124      	bne.n	800b7f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b7a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7a8:	f000 fb22 	bl	800bdf0 <prvIsQueueFull>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d018      	beq.n	800b7e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b4:	3310      	adds	r3, #16
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 ffa6 	bl	800c70c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b7c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7c2:	f000 faad 	bl	800bd20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b7c6:	f000 fdf1 	bl	800c3ac <xTaskResumeAll>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f47f af7c 	bne.w	800b6ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b7d2:	4b0c      	ldr	r3, [pc, #48]	; (800b804 <xQueueGenericSend+0x1f8>)
 800b7d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7d8:	601a      	str	r2, [r3, #0]
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	e772      	b.n	800b6ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b7e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7e6:	f000 fa9b 	bl	800bd20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7ea:	f000 fddf 	bl	800c3ac <xTaskResumeAll>
 800b7ee:	e76c      	b.n	800b6ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b7f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7f2:	f000 fa95 	bl	800bd20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7f6:	f000 fdd9 	bl	800c3ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b7fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3738      	adds	r7, #56	; 0x38
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	e000ed04 	.word	0xe000ed04

0800b808 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b090      	sub	sp, #64	; 0x40
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
 800b814:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10a      	bne.n	800b836 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b824:	f383 8811 	msr	BASEPRI, r3
 800b828:	f3bf 8f6f 	isb	sy
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b832:	bf00      	nop
 800b834:	e7fe      	b.n	800b834 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d103      	bne.n	800b844 <xQueueGenericSendFromISR+0x3c>
 800b83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b840:	2b00      	cmp	r3, #0
 800b842:	d101      	bne.n	800b848 <xQueueGenericSendFromISR+0x40>
 800b844:	2301      	movs	r3, #1
 800b846:	e000      	b.n	800b84a <xQueueGenericSendFromISR+0x42>
 800b848:	2300      	movs	r3, #0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10a      	bne.n	800b864 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b860:	bf00      	nop
 800b862:	e7fe      	b.n	800b862 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	2b02      	cmp	r3, #2
 800b868:	d103      	bne.n	800b872 <xQueueGenericSendFromISR+0x6a>
 800b86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d101      	bne.n	800b876 <xQueueGenericSendFromISR+0x6e>
 800b872:	2301      	movs	r3, #1
 800b874:	e000      	b.n	800b878 <xQueueGenericSendFromISR+0x70>
 800b876:	2300      	movs	r3, #0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d10a      	bne.n	800b892 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	623b      	str	r3, [r7, #32]
}
 800b88e:	bf00      	nop
 800b890:	e7fe      	b.n	800b890 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b892:	f7ff fd41 	bl	800b318 <vPortValidateInterruptPriority>
	__asm volatile
 800b896:	f3ef 8211 	mrs	r2, BASEPRI
 800b89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	61fa      	str	r2, [r7, #28]
 800b8ac:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b8ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b8b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d302      	bcc.n	800b8c4 <xQueueGenericSendFromISR+0xbc>
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	2b02      	cmp	r3, #2
 800b8c2:	d12f      	bne.n	800b924 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b8d4:	683a      	ldr	r2, [r7, #0]
 800b8d6:	68b9      	ldr	r1, [r7, #8]
 800b8d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b8da:	f000 f991 	bl	800bc00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b8de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e6:	d112      	bne.n	800b90e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d016      	beq.n	800b91e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f2:	3324      	adds	r3, #36	; 0x24
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 ff2d 	bl	800c754 <xTaskRemoveFromEventList>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00e      	beq.n	800b91e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00b      	beq.n	800b91e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2201      	movs	r2, #1
 800b90a:	601a      	str	r2, [r3, #0]
 800b90c:	e007      	b.n	800b91e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b90e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b912:	3301      	adds	r3, #1
 800b914:	b2db      	uxtb	r3, r3
 800b916:	b25a      	sxtb	r2, r3
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b91e:	2301      	movs	r3, #1
 800b920:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b922:	e001      	b.n	800b928 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b924:	2300      	movs	r3, #0
 800b926:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b92a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	f383 8811 	msr	BASEPRI, r3
}
 800b932:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b936:	4618      	mov	r0, r3
 800b938:	3740      	adds	r7, #64	; 0x40
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
	...

0800b940 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b08c      	sub	sp, #48	; 0x30
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b94c:	2300      	movs	r3, #0
 800b94e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10a      	bne.n	800b970 <xQueueReceive+0x30>
	__asm volatile
 800b95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	623b      	str	r3, [r7, #32]
}
 800b96c:	bf00      	nop
 800b96e:	e7fe      	b.n	800b96e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d103      	bne.n	800b97e <xQueueReceive+0x3e>
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d101      	bne.n	800b982 <xQueueReceive+0x42>
 800b97e:	2301      	movs	r3, #1
 800b980:	e000      	b.n	800b984 <xQueueReceive+0x44>
 800b982:	2300      	movs	r3, #0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10a      	bne.n	800b99e <xQueueReceive+0x5e>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	61fb      	str	r3, [r7, #28]
}
 800b99a:	bf00      	nop
 800b99c:	e7fe      	b.n	800b99c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b99e:	f001 f895 	bl	800cacc <xTaskGetSchedulerState>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d102      	bne.n	800b9ae <xQueueReceive+0x6e>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d101      	bne.n	800b9b2 <xQueueReceive+0x72>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e000      	b.n	800b9b4 <xQueueReceive+0x74>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10a      	bne.n	800b9ce <xQueueReceive+0x8e>
	__asm volatile
 800b9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9bc:	f383 8811 	msr	BASEPRI, r3
 800b9c0:	f3bf 8f6f 	isb	sy
 800b9c4:	f3bf 8f4f 	dsb	sy
 800b9c8:	61bb      	str	r3, [r7, #24]
}
 800b9ca:	bf00      	nop
 800b9cc:	e7fe      	b.n	800b9cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9ce:	f7ff fbc1 	bl	800b154 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d01f      	beq.n	800ba1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9de:	68b9      	ldr	r1, [r7, #8]
 800b9e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9e2:	f000 f977 	bl	800bcd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e8:	1e5a      	subs	r2, r3, #1
 800b9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f0:	691b      	ldr	r3, [r3, #16]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00f      	beq.n	800ba16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f8:	3310      	adds	r3, #16
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 feaa 	bl	800c754 <xTaskRemoveFromEventList>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d007      	beq.n	800ba16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba06:	4b3d      	ldr	r3, [pc, #244]	; (800bafc <xQueueReceive+0x1bc>)
 800ba08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba0c:	601a      	str	r2, [r3, #0]
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba16:	f7ff fbcd 	bl	800b1b4 <vPortExitCritical>
				return pdPASS;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e069      	b.n	800baf2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d103      	bne.n	800ba2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba24:	f7ff fbc6 	bl	800b1b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	e062      	b.n	800baf2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d106      	bne.n	800ba40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba32:	f107 0310 	add.w	r3, r7, #16
 800ba36:	4618      	mov	r0, r3
 800ba38:	f000 feee 	bl	800c818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba40:	f7ff fbb8 	bl	800b1b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba44:	f000 fca4 	bl	800c390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba48:	f7ff fb84 	bl	800b154 <vPortEnterCritical>
 800ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba52:	b25b      	sxtb	r3, r3
 800ba54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba58:	d103      	bne.n	800ba62 <xQueueReceive+0x122>
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba68:	b25b      	sxtb	r3, r3
 800ba6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6e:	d103      	bne.n	800ba78 <xQueueReceive+0x138>
 800ba70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba72:	2200      	movs	r2, #0
 800ba74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba78:	f7ff fb9c 	bl	800b1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba7c:	1d3a      	adds	r2, r7, #4
 800ba7e:	f107 0310 	add.w	r3, r7, #16
 800ba82:	4611      	mov	r1, r2
 800ba84:	4618      	mov	r0, r3
 800ba86:	f000 fedd 	bl	800c844 <xTaskCheckForTimeOut>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d123      	bne.n	800bad8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba92:	f000 f997 	bl	800bdc4 <prvIsQueueEmpty>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d017      	beq.n	800bacc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9e:	3324      	adds	r3, #36	; 0x24
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	4611      	mov	r1, r2
 800baa4:	4618      	mov	r0, r3
 800baa6:	f000 fe31 	bl	800c70c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800baaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baac:	f000 f938 	bl	800bd20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bab0:	f000 fc7c 	bl	800c3ac <xTaskResumeAll>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d189      	bne.n	800b9ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800baba:	4b10      	ldr	r3, [pc, #64]	; (800bafc <xQueueReceive+0x1bc>)
 800babc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	e780      	b.n	800b9ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bacc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bace:	f000 f927 	bl	800bd20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bad2:	f000 fc6b 	bl	800c3ac <xTaskResumeAll>
 800bad6:	e77a      	b.n	800b9ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bada:	f000 f921 	bl	800bd20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bade:	f000 fc65 	bl	800c3ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bae4:	f000 f96e 	bl	800bdc4 <prvIsQueueEmpty>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	f43f af6f 	beq.w	800b9ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800baf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3730      	adds	r7, #48	; 0x30
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	e000ed04 	.word	0xe000ed04

0800bb00 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b08e      	sub	sp, #56	; 0x38
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d10a      	bne.n	800bb2c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	623b      	str	r3, [r7, #32]
}
 800bb28:	bf00      	nop
 800bb2a:	e7fe      	b.n	800bb2a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d103      	bne.n	800bb3a <xQueueReceiveFromISR+0x3a>
 800bb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d101      	bne.n	800bb3e <xQueueReceiveFromISR+0x3e>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e000      	b.n	800bb40 <xQueueReceiveFromISR+0x40>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10a      	bne.n	800bb5a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb48:	f383 8811 	msr	BASEPRI, r3
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	61fb      	str	r3, [r7, #28]
}
 800bb56:	bf00      	nop
 800bb58:	e7fe      	b.n	800bb58 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb5a:	f7ff fbdd 	bl	800b318 <vPortValidateInterruptPriority>
	__asm volatile
 800bb5e:	f3ef 8211 	mrs	r2, BASEPRI
 800bb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb66:	f383 8811 	msr	BASEPRI, r3
 800bb6a:	f3bf 8f6f 	isb	sy
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	61ba      	str	r2, [r7, #24]
 800bb74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bb76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d02f      	beq.n	800bbe6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb90:	68b9      	ldr	r1, [r7, #8]
 800bb92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb94:	f000 f89e 	bl	800bcd4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9a:	1e5a      	subs	r2, r3, #1
 800bb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bba0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba8:	d112      	bne.n	800bbd0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d016      	beq.n	800bbe0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	3310      	adds	r3, #16
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f000 fdcc 	bl	800c754 <xTaskRemoveFromEventList>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00e      	beq.n	800bbe0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00b      	beq.n	800bbe0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	601a      	str	r2, [r3, #0]
 800bbce:	e007      	b.n	800bbe0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bbd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	b25a      	sxtb	r2, r3
 800bbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	637b      	str	r3, [r7, #52]	; 0x34
 800bbe4:	e001      	b.n	800bbea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	f383 8811 	msr	BASEPRI, r3
}
 800bbf4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bbf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3738      	adds	r7, #56	; 0x38
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10d      	bne.n	800bc3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d14d      	bne.n	800bcc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f000 ff6c 	bl	800cb08 <xTaskPriorityDisinherit>
 800bc30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2200      	movs	r2, #0
 800bc36:	609a      	str	r2, [r3, #8]
 800bc38:	e043      	b.n	800bcc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d119      	bne.n	800bc74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6858      	ldr	r0, [r3, #4]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc48:	461a      	mov	r2, r3
 800bc4a:	68b9      	ldr	r1, [r7, #8]
 800bc4c:	f003 fdd4 	bl	800f7f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	685a      	ldr	r2, [r3, #4]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc58:	441a      	add	r2, r3
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	685a      	ldr	r2, [r3, #4]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d32b      	bcc.n	800bcc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	605a      	str	r2, [r3, #4]
 800bc72:	e026      	b.n	800bcc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	68d8      	ldr	r0, [r3, #12]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	68b9      	ldr	r1, [r7, #8]
 800bc80:	f003 fdba 	bl	800f7f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	68da      	ldr	r2, [r3, #12]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc8c:	425b      	negs	r3, r3
 800bc8e:	441a      	add	r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	68da      	ldr	r2, [r3, #12]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d207      	bcs.n	800bcb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	689a      	ldr	r2, [r3, #8]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca8:	425b      	negs	r3, r3
 800bcaa:	441a      	add	r2, r3
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b02      	cmp	r3, #2
 800bcb4:	d105      	bne.n	800bcc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d002      	beq.n	800bcc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	1c5a      	adds	r2, r3, #1
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bcca:	697b      	ldr	r3, [r7, #20]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3718      	adds	r7, #24
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d018      	beq.n	800bd18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	68da      	ldr	r2, [r3, #12]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcee:	441a      	add	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	68da      	ldr	r2, [r3, #12]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d303      	bcc.n	800bd08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	68d9      	ldr	r1, [r3, #12]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd10:	461a      	mov	r2, r3
 800bd12:	6838      	ldr	r0, [r7, #0]
 800bd14:	f003 fd70 	bl	800f7f8 <memcpy>
	}
}
 800bd18:	bf00      	nop
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bd28:	f7ff fa14 	bl	800b154 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd34:	e011      	b.n	800bd5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d012      	beq.n	800bd64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	3324      	adds	r3, #36	; 0x24
 800bd42:	4618      	mov	r0, r3
 800bd44:	f000 fd06 	bl	800c754 <xTaskRemoveFromEventList>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bd4e:	f000 fddb 	bl	800c908 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bd52:	7bfb      	ldrb	r3, [r7, #15]
 800bd54:	3b01      	subs	r3, #1
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	dce9      	bgt.n	800bd36 <prvUnlockQueue+0x16>
 800bd62:	e000      	b.n	800bd66 <prvUnlockQueue+0x46>
					break;
 800bd64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	22ff      	movs	r2, #255	; 0xff
 800bd6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bd6e:	f7ff fa21 	bl	800b1b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bd72:	f7ff f9ef 	bl	800b154 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd7e:	e011      	b.n	800bda4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	691b      	ldr	r3, [r3, #16]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d012      	beq.n	800bdae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	3310      	adds	r3, #16
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f000 fce1 	bl	800c754 <xTaskRemoveFromEventList>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d001      	beq.n	800bd9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bd98:	f000 fdb6 	bl	800c908 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bd9c:	7bbb      	ldrb	r3, [r7, #14]
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bda4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	dce9      	bgt.n	800bd80 <prvUnlockQueue+0x60>
 800bdac:	e000      	b.n	800bdb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bdae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	22ff      	movs	r2, #255	; 0xff
 800bdb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bdb8:	f7ff f9fc 	bl	800b1b4 <vPortExitCritical>
}
 800bdbc:	bf00      	nop
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bdcc:	f7ff f9c2 	bl	800b154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d102      	bne.n	800bdde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	60fb      	str	r3, [r7, #12]
 800bddc:	e001      	b.n	800bde2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bdde:	2300      	movs	r3, #0
 800bde0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bde2:	f7ff f9e7 	bl	800b1b4 <vPortExitCritical>

	return xReturn;
 800bde6:	68fb      	ldr	r3, [r7, #12]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bdf8:	f7ff f9ac 	bl	800b154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be04:	429a      	cmp	r2, r3
 800be06:	d102      	bne.n	800be0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be08:	2301      	movs	r3, #1
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	e001      	b.n	800be12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be0e:	2300      	movs	r3, #0
 800be10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be12:	f7ff f9cf 	bl	800b1b4 <vPortExitCritical>

	return xReturn;
 800be16:	68fb      	ldr	r3, [r7, #12]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08e      	sub	sp, #56	; 0x38
 800be24:	af04      	add	r7, sp, #16
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
 800be2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10a      	bne.n	800be4a <xTaskCreateStatic+0x2a>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	623b      	str	r3, [r7, #32]
}
 800be46:	bf00      	nop
 800be48:	e7fe      	b.n	800be48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800be4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d10a      	bne.n	800be66 <xTaskCreateStatic+0x46>
	__asm volatile
 800be50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	61fb      	str	r3, [r7, #28]
}
 800be62:	bf00      	nop
 800be64:	e7fe      	b.n	800be64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be66:	2354      	movs	r3, #84	; 0x54
 800be68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	2b54      	cmp	r3, #84	; 0x54
 800be6e:	d00a      	beq.n	800be86 <xTaskCreateStatic+0x66>
	__asm volatile
 800be70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be74:	f383 8811 	msr	BASEPRI, r3
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	61bb      	str	r3, [r7, #24]
}
 800be82:	bf00      	nop
 800be84:	e7fe      	b.n	800be84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d01e      	beq.n	800becc <xTaskCreateStatic+0xac>
 800be8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be90:	2b00      	cmp	r3, #0
 800be92:	d01b      	beq.n	800becc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea0:	2202      	movs	r2, #2
 800bea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bea6:	2300      	movs	r3, #0
 800bea8:	9303      	str	r3, [sp, #12]
 800beaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beac:	9302      	str	r3, [sp, #8]
 800beae:	f107 0314 	add.w	r3, r7, #20
 800beb2:	9301      	str	r3, [sp, #4]
 800beb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	68b9      	ldr	r1, [r7, #8]
 800bebe:	68f8      	ldr	r0, [r7, #12]
 800bec0:	f000 f850 	bl	800bf64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bec6:	f000 f8d5 	bl	800c074 <prvAddNewTaskToReadyList>
 800beca:	e001      	b.n	800bed0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800becc:	2300      	movs	r3, #0
 800bece:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bed0:	697b      	ldr	r3, [r7, #20]
	}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3728      	adds	r7, #40	; 0x28
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b08c      	sub	sp, #48	; 0x30
 800bede:	af04      	add	r7, sp, #16
 800bee0:	60f8      	str	r0, [r7, #12]
 800bee2:	60b9      	str	r1, [r7, #8]
 800bee4:	603b      	str	r3, [r7, #0]
 800bee6:	4613      	mov	r3, r2
 800bee8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800beea:	88fb      	ldrh	r3, [r7, #6]
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fe fd68 	bl	800a9c4 <pvPortMalloc>
 800bef4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00e      	beq.n	800bf1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800befc:	2054      	movs	r0, #84	; 0x54
 800befe:	f7fe fd61 	bl	800a9c4 <pvPortMalloc>
 800bf02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	697a      	ldr	r2, [r7, #20]
 800bf0e:	631a      	str	r2, [r3, #48]	; 0x30
 800bf10:	e005      	b.n	800bf1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf12:	6978      	ldr	r0, [r7, #20]
 800bf14:	f7fe fe22 	bl	800ab5c <vPortFree>
 800bf18:	e001      	b.n	800bf1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d017      	beq.n	800bf54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf2c:	88fa      	ldrh	r2, [r7, #6]
 800bf2e:	2300      	movs	r3, #0
 800bf30:	9303      	str	r3, [sp, #12]
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	9302      	str	r3, [sp, #8]
 800bf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf38:	9301      	str	r3, [sp, #4]
 800bf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	68b9      	ldr	r1, [r7, #8]
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	f000 f80e 	bl	800bf64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf48:	69f8      	ldr	r0, [r7, #28]
 800bf4a:	f000 f893 	bl	800c074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	61bb      	str	r3, [r7, #24]
 800bf52:	e002      	b.n	800bf5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf54:	f04f 33ff 	mov.w	r3, #4294967295
 800bf58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf5a:	69bb      	ldr	r3, [r7, #24]
	}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3720      	adds	r7, #32
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b088      	sub	sp, #32
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
 800bf70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4413      	add	r3, r2
 800bf82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	f023 0307 	bic.w	r3, r3, #7
 800bf8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	f003 0307 	and.w	r3, r3, #7
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00a      	beq.n	800bfac <prvInitialiseNewTask+0x48>
	__asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9a:	f383 8811 	msr	BASEPRI, r3
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	617b      	str	r3, [r7, #20]
}
 800bfa8:	bf00      	nop
 800bfaa:	e7fe      	b.n	800bfaa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d01f      	beq.n	800bff2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	61fb      	str	r3, [r7, #28]
 800bfb6:	e012      	b.n	800bfde <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	7819      	ldrb	r1, [r3, #0]
 800bfc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	3334      	adds	r3, #52	; 0x34
 800bfc8:	460a      	mov	r2, r1
 800bfca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d006      	beq.n	800bfe6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	61fb      	str	r3, [r7, #28]
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	2b0f      	cmp	r3, #15
 800bfe2:	d9e9      	bls.n	800bfb8 <prvInitialiseNewTask+0x54>
 800bfe4:	e000      	b.n	800bfe8 <prvInitialiseNewTask+0x84>
			{
				break;
 800bfe6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bff0:	e003      	b.n	800bffa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff4:	2200      	movs	r2, #0
 800bff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffc:	2b06      	cmp	r3, #6
 800bffe:	d901      	bls.n	800c004 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c000:	2306      	movs	r3, #6
 800c002:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c008:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c00e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c012:	2200      	movs	r2, #0
 800c014:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	3304      	adds	r3, #4
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fe fedc 	bl	800add8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c022:	3318      	adds	r3, #24
 800c024:	4618      	mov	r0, r3
 800c026:	f7fe fed7 	bl	800add8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c02e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c032:	f1c3 0207 	rsb	r2, r3, #7
 800c036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c038:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c03e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c042:	2200      	movs	r2, #0
 800c044:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c048:	2200      	movs	r2, #0
 800c04a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c04e:	683a      	ldr	r2, [r7, #0]
 800c050:	68f9      	ldr	r1, [r7, #12]
 800c052:	69b8      	ldr	r0, [r7, #24]
 800c054:	f7fe ff54 	bl	800af00 <pxPortInitialiseStack>
 800c058:	4602      	mov	r2, r0
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c060:	2b00      	cmp	r3, #0
 800c062:	d002      	beq.n	800c06a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c06a:	bf00      	nop
 800c06c:	3720      	adds	r7, #32
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
	...

0800c074 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c07c:	f7ff f86a 	bl	800b154 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c080:	4b2a      	ldr	r3, [pc, #168]	; (800c12c <prvAddNewTaskToReadyList+0xb8>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	3301      	adds	r3, #1
 800c086:	4a29      	ldr	r2, [pc, #164]	; (800c12c <prvAddNewTaskToReadyList+0xb8>)
 800c088:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c08a:	4b29      	ldr	r3, [pc, #164]	; (800c130 <prvAddNewTaskToReadyList+0xbc>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d109      	bne.n	800c0a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c092:	4a27      	ldr	r2, [pc, #156]	; (800c130 <prvAddNewTaskToReadyList+0xbc>)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c098:	4b24      	ldr	r3, [pc, #144]	; (800c12c <prvAddNewTaskToReadyList+0xb8>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d110      	bne.n	800c0c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c0a0:	f000 fc56 	bl	800c950 <prvInitialiseTaskLists>
 800c0a4:	e00d      	b.n	800c0c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c0a6:	4b23      	ldr	r3, [pc, #140]	; (800c134 <prvAddNewTaskToReadyList+0xc0>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d109      	bne.n	800c0c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c0ae:	4b20      	ldr	r3, [pc, #128]	; (800c130 <prvAddNewTaskToReadyList+0xbc>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d802      	bhi.n	800c0c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c0bc:	4a1c      	ldr	r2, [pc, #112]	; (800c130 <prvAddNewTaskToReadyList+0xbc>)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c0c2:	4b1d      	ldr	r3, [pc, #116]	; (800c138 <prvAddNewTaskToReadyList+0xc4>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	4a1b      	ldr	r2, [pc, #108]	; (800c138 <prvAddNewTaskToReadyList+0xc4>)
 800c0ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	409a      	lsls	r2, r3
 800c0d4:	4b19      	ldr	r3, [pc, #100]	; (800c13c <prvAddNewTaskToReadyList+0xc8>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	4a18      	ldr	r2, [pc, #96]	; (800c13c <prvAddNewTaskToReadyList+0xc8>)
 800c0dc:	6013      	str	r3, [r2, #0]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	4413      	add	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	4a15      	ldr	r2, [pc, #84]	; (800c140 <prvAddNewTaskToReadyList+0xcc>)
 800c0ec:	441a      	add	r2, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	3304      	adds	r3, #4
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	4610      	mov	r0, r2
 800c0f6:	f7fe fe7c 	bl	800adf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c0fa:	f7ff f85b 	bl	800b1b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c0fe:	4b0d      	ldr	r3, [pc, #52]	; (800c134 <prvAddNewTaskToReadyList+0xc0>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00e      	beq.n	800c124 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c106:	4b0a      	ldr	r3, [pc, #40]	; (800c130 <prvAddNewTaskToReadyList+0xbc>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c110:	429a      	cmp	r2, r3
 800c112:	d207      	bcs.n	800c124 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c114:	4b0b      	ldr	r3, [pc, #44]	; (800c144 <prvAddNewTaskToReadyList+0xd0>)
 800c116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c11a:	601a      	str	r2, [r3, #0]
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c124:	bf00      	nop
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	20004628 	.word	0x20004628
 800c130:	20004528 	.word	0x20004528
 800c134:	20004634 	.word	0x20004634
 800c138:	20004644 	.word	0x20004644
 800c13c:	20004630 	.word	0x20004630
 800c140:	2000452c 	.word	0x2000452c
 800c144:	e000ed04 	.word	0xe000ed04

0800c148 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c150:	f7ff f800 	bl	800b154 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d102      	bne.n	800c160 <vTaskDelete+0x18>
 800c15a:	4b39      	ldr	r3, [pc, #228]	; (800c240 <vTaskDelete+0xf8>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	e000      	b.n	800c162 <vTaskDelete+0x1a>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	3304      	adds	r3, #4
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fe fe9f 	bl	800aeac <uxListRemove>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d115      	bne.n	800c1a0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c178:	4932      	ldr	r1, [pc, #200]	; (800c244 <vTaskDelete+0xfc>)
 800c17a:	4613      	mov	r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	4413      	add	r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	440b      	add	r3, r1
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10a      	bne.n	800c1a0 <vTaskDelete+0x58>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18e:	2201      	movs	r2, #1
 800c190:	fa02 f303 	lsl.w	r3, r2, r3
 800c194:	43da      	mvns	r2, r3
 800c196:	4b2c      	ldr	r3, [pc, #176]	; (800c248 <vTaskDelete+0x100>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4013      	ands	r3, r2
 800c19c:	4a2a      	ldr	r2, [pc, #168]	; (800c248 <vTaskDelete+0x100>)
 800c19e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d004      	beq.n	800c1b2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	3318      	adds	r3, #24
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fe fe7d 	bl	800aeac <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c1b2:	4b26      	ldr	r3, [pc, #152]	; (800c24c <vTaskDelete+0x104>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	4a24      	ldr	r2, [pc, #144]	; (800c24c <vTaskDelete+0x104>)
 800c1ba:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c1bc:	4b20      	ldr	r3, [pc, #128]	; (800c240 <vTaskDelete+0xf8>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d10b      	bne.n	800c1de <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	4820      	ldr	r0, [pc, #128]	; (800c250 <vTaskDelete+0x108>)
 800c1ce:	f7fe fe10 	bl	800adf2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c1d2:	4b20      	ldr	r3, [pc, #128]	; (800c254 <vTaskDelete+0x10c>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	4a1e      	ldr	r2, [pc, #120]	; (800c254 <vTaskDelete+0x10c>)
 800c1da:	6013      	str	r3, [r2, #0]
 800c1dc:	e009      	b.n	800c1f2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c1de:	4b1e      	ldr	r3, [pc, #120]	; (800c258 <vTaskDelete+0x110>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	4a1c      	ldr	r2, [pc, #112]	; (800c258 <vTaskDelete+0x110>)
 800c1e6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f000 fc1f 	bl	800ca2c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c1ee:	f000 fc4d 	bl	800ca8c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800c1f2:	f7fe ffdf 	bl	800b1b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c1f6:	4b19      	ldr	r3, [pc, #100]	; (800c25c <vTaskDelete+0x114>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d01b      	beq.n	800c236 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800c1fe:	4b10      	ldr	r3, [pc, #64]	; (800c240 <vTaskDelete+0xf8>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	429a      	cmp	r2, r3
 800c206:	d116      	bne.n	800c236 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c208:	4b15      	ldr	r3, [pc, #84]	; (800c260 <vTaskDelete+0x118>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00a      	beq.n	800c226 <vTaskDelete+0xde>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	60bb      	str	r3, [r7, #8]
}
 800c222:	bf00      	nop
 800c224:	e7fe      	b.n	800c224 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800c226:	4b0f      	ldr	r3, [pc, #60]	; (800c264 <vTaskDelete+0x11c>)
 800c228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c22c:	601a      	str	r2, [r3, #0]
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c236:	bf00      	nop
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	20004528 	.word	0x20004528
 800c244:	2000452c 	.word	0x2000452c
 800c248:	20004630 	.word	0x20004630
 800c24c:	20004644 	.word	0x20004644
 800c250:	200045fc 	.word	0x200045fc
 800c254:	20004610 	.word	0x20004610
 800c258:	20004628 	.word	0x20004628
 800c25c:	20004634 	.word	0x20004634
 800c260:	20004650 	.word	0x20004650
 800c264:	e000ed04 	.word	0xe000ed04

0800c268 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c270:	2300      	movs	r3, #0
 800c272:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d017      	beq.n	800c2aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c27a:	4b13      	ldr	r3, [pc, #76]	; (800c2c8 <vTaskDelay+0x60>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00a      	beq.n	800c298 <vTaskDelay+0x30>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	60bb      	str	r3, [r7, #8]
}
 800c294:	bf00      	nop
 800c296:	e7fe      	b.n	800c296 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c298:	f000 f87a 	bl	800c390 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c29c:	2100      	movs	r1, #0
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 fcb8 	bl	800cc14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c2a4:	f000 f882 	bl	800c3ac <xTaskResumeAll>
 800c2a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d107      	bne.n	800c2c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c2b0:	4b06      	ldr	r3, [pc, #24]	; (800c2cc <vTaskDelay+0x64>)
 800c2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2b6:	601a      	str	r2, [r3, #0]
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2c0:	bf00      	nop
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	20004650 	.word	0x20004650
 800c2cc:	e000ed04 	.word	0xe000ed04

0800c2d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b08a      	sub	sp, #40	; 0x28
 800c2d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c2de:	463a      	mov	r2, r7
 800c2e0:	1d39      	adds	r1, r7, #4
 800c2e2:	f107 0308 	add.w	r3, r7, #8
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7f4 f904 	bl	80004f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	9202      	str	r2, [sp, #8]
 800c2f4:	9301      	str	r3, [sp, #4]
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	460a      	mov	r2, r1
 800c2fe:	491e      	ldr	r1, [pc, #120]	; (800c378 <vTaskStartScheduler+0xa8>)
 800c300:	481e      	ldr	r0, [pc, #120]	; (800c37c <vTaskStartScheduler+0xac>)
 800c302:	f7ff fd8d 	bl	800be20 <xTaskCreateStatic>
 800c306:	4603      	mov	r3, r0
 800c308:	4a1d      	ldr	r2, [pc, #116]	; (800c380 <vTaskStartScheduler+0xb0>)
 800c30a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c30c:	4b1c      	ldr	r3, [pc, #112]	; (800c380 <vTaskStartScheduler+0xb0>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d002      	beq.n	800c31a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c314:	2301      	movs	r3, #1
 800c316:	617b      	str	r3, [r7, #20]
 800c318:	e001      	b.n	800c31e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c31a:	2300      	movs	r3, #0
 800c31c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d116      	bne.n	800c352 <vTaskStartScheduler+0x82>
	__asm volatile
 800c324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c328:	f383 8811 	msr	BASEPRI, r3
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	613b      	str	r3, [r7, #16]
}
 800c336:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c338:	4b12      	ldr	r3, [pc, #72]	; (800c384 <vTaskStartScheduler+0xb4>)
 800c33a:	f04f 32ff 	mov.w	r2, #4294967295
 800c33e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c340:	4b11      	ldr	r3, [pc, #68]	; (800c388 <vTaskStartScheduler+0xb8>)
 800c342:	2201      	movs	r2, #1
 800c344:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c346:	4b11      	ldr	r3, [pc, #68]	; (800c38c <vTaskStartScheduler+0xbc>)
 800c348:	2200      	movs	r2, #0
 800c34a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c34c:	f7fe fe60 	bl	800b010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c350:	e00e      	b.n	800c370 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c358:	d10a      	bne.n	800c370 <vTaskStartScheduler+0xa0>
	__asm volatile
 800c35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35e:	f383 8811 	msr	BASEPRI, r3
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	f3bf 8f4f 	dsb	sy
 800c36a:	60fb      	str	r3, [r7, #12]
}
 800c36c:	bf00      	nop
 800c36e:	e7fe      	b.n	800c36e <vTaskStartScheduler+0x9e>
}
 800c370:	bf00      	nop
 800c372:	3718      	adds	r7, #24
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	0800fa94 	.word	0x0800fa94
 800c37c:	0800c921 	.word	0x0800c921
 800c380:	2000464c 	.word	0x2000464c
 800c384:	20004648 	.word	0x20004648
 800c388:	20004634 	.word	0x20004634
 800c38c:	2000462c 	.word	0x2000462c

0800c390 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c390:	b480      	push	{r7}
 800c392:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c394:	4b04      	ldr	r3, [pc, #16]	; (800c3a8 <vTaskSuspendAll+0x18>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	3301      	adds	r3, #1
 800c39a:	4a03      	ldr	r2, [pc, #12]	; (800c3a8 <vTaskSuspendAll+0x18>)
 800c39c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c39e:	bf00      	nop
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr
 800c3a8:	20004650 	.word	0x20004650

0800c3ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c3ba:	4b41      	ldr	r3, [pc, #260]	; (800c4c0 <xTaskResumeAll+0x114>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10a      	bne.n	800c3d8 <xTaskResumeAll+0x2c>
	__asm volatile
 800c3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c6:	f383 8811 	msr	BASEPRI, r3
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	603b      	str	r3, [r7, #0]
}
 800c3d4:	bf00      	nop
 800c3d6:	e7fe      	b.n	800c3d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c3d8:	f7fe febc 	bl	800b154 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c3dc:	4b38      	ldr	r3, [pc, #224]	; (800c4c0 <xTaskResumeAll+0x114>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	4a37      	ldr	r2, [pc, #220]	; (800c4c0 <xTaskResumeAll+0x114>)
 800c3e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3e6:	4b36      	ldr	r3, [pc, #216]	; (800c4c0 <xTaskResumeAll+0x114>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d161      	bne.n	800c4b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c3ee:	4b35      	ldr	r3, [pc, #212]	; (800c4c4 <xTaskResumeAll+0x118>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d05d      	beq.n	800c4b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3f6:	e02e      	b.n	800c456 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3f8:	4b33      	ldr	r3, [pc, #204]	; (800c4c8 <xTaskResumeAll+0x11c>)
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	3318      	adds	r3, #24
 800c404:	4618      	mov	r0, r3
 800c406:	f7fe fd51 	bl	800aeac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	3304      	adds	r3, #4
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fe fd4c 	bl	800aeac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c418:	2201      	movs	r2, #1
 800c41a:	409a      	lsls	r2, r3
 800c41c:	4b2b      	ldr	r3, [pc, #172]	; (800c4cc <xTaskResumeAll+0x120>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4313      	orrs	r3, r2
 800c422:	4a2a      	ldr	r2, [pc, #168]	; (800c4cc <xTaskResumeAll+0x120>)
 800c424:	6013      	str	r3, [r2, #0]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c42a:	4613      	mov	r3, r2
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	4413      	add	r3, r2
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	4a27      	ldr	r2, [pc, #156]	; (800c4d0 <xTaskResumeAll+0x124>)
 800c434:	441a      	add	r2, r3
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	3304      	adds	r3, #4
 800c43a:	4619      	mov	r1, r3
 800c43c:	4610      	mov	r0, r2
 800c43e:	f7fe fcd8 	bl	800adf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c446:	4b23      	ldr	r3, [pc, #140]	; (800c4d4 <xTaskResumeAll+0x128>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d302      	bcc.n	800c456 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c450:	4b21      	ldr	r3, [pc, #132]	; (800c4d8 <xTaskResumeAll+0x12c>)
 800c452:	2201      	movs	r2, #1
 800c454:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c456:	4b1c      	ldr	r3, [pc, #112]	; (800c4c8 <xTaskResumeAll+0x11c>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1cc      	bne.n	800c3f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d001      	beq.n	800c468 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c464:	f000 fb12 	bl	800ca8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c468:	4b1c      	ldr	r3, [pc, #112]	; (800c4dc <xTaskResumeAll+0x130>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d010      	beq.n	800c496 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c474:	f000 f836 	bl	800c4e4 <xTaskIncrementTick>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d002      	beq.n	800c484 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c47e:	4b16      	ldr	r3, [pc, #88]	; (800c4d8 <xTaskResumeAll+0x12c>)
 800c480:	2201      	movs	r2, #1
 800c482:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	3b01      	subs	r3, #1
 800c488:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1f1      	bne.n	800c474 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c490:	4b12      	ldr	r3, [pc, #72]	; (800c4dc <xTaskResumeAll+0x130>)
 800c492:	2200      	movs	r2, #0
 800c494:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c496:	4b10      	ldr	r3, [pc, #64]	; (800c4d8 <xTaskResumeAll+0x12c>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d009      	beq.n	800c4b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c4a2:	4b0f      	ldr	r3, [pc, #60]	; (800c4e0 <xTaskResumeAll+0x134>)
 800c4a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4a8:	601a      	str	r2, [r3, #0]
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4b2:	f7fe fe7f 	bl	800b1b4 <vPortExitCritical>

	return xAlreadyYielded;
 800c4b6:	68bb      	ldr	r3, [r7, #8]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	20004650 	.word	0x20004650
 800c4c4:	20004628 	.word	0x20004628
 800c4c8:	200045e8 	.word	0x200045e8
 800c4cc:	20004630 	.word	0x20004630
 800c4d0:	2000452c 	.word	0x2000452c
 800c4d4:	20004528 	.word	0x20004528
 800c4d8:	2000463c 	.word	0x2000463c
 800c4dc:	20004638 	.word	0x20004638
 800c4e0:	e000ed04 	.word	0xe000ed04

0800c4e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b086      	sub	sp, #24
 800c4e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4ee:	4b4e      	ldr	r3, [pc, #312]	; (800c628 <xTaskIncrementTick+0x144>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f040 808e 	bne.w	800c614 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c4f8:	4b4c      	ldr	r3, [pc, #304]	; (800c62c <xTaskIncrementTick+0x148>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c500:	4a4a      	ldr	r2, [pc, #296]	; (800c62c <xTaskIncrementTick+0x148>)
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d120      	bne.n	800c54e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c50c:	4b48      	ldr	r3, [pc, #288]	; (800c630 <xTaskIncrementTick+0x14c>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00a      	beq.n	800c52c <xTaskIncrementTick+0x48>
	__asm volatile
 800c516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51a:	f383 8811 	msr	BASEPRI, r3
 800c51e:	f3bf 8f6f 	isb	sy
 800c522:	f3bf 8f4f 	dsb	sy
 800c526:	603b      	str	r3, [r7, #0]
}
 800c528:	bf00      	nop
 800c52a:	e7fe      	b.n	800c52a <xTaskIncrementTick+0x46>
 800c52c:	4b40      	ldr	r3, [pc, #256]	; (800c630 <xTaskIncrementTick+0x14c>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	60fb      	str	r3, [r7, #12]
 800c532:	4b40      	ldr	r3, [pc, #256]	; (800c634 <xTaskIncrementTick+0x150>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a3e      	ldr	r2, [pc, #248]	; (800c630 <xTaskIncrementTick+0x14c>)
 800c538:	6013      	str	r3, [r2, #0]
 800c53a:	4a3e      	ldr	r2, [pc, #248]	; (800c634 <xTaskIncrementTick+0x150>)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6013      	str	r3, [r2, #0]
 800c540:	4b3d      	ldr	r3, [pc, #244]	; (800c638 <xTaskIncrementTick+0x154>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	3301      	adds	r3, #1
 800c546:	4a3c      	ldr	r2, [pc, #240]	; (800c638 <xTaskIncrementTick+0x154>)
 800c548:	6013      	str	r3, [r2, #0]
 800c54a:	f000 fa9f 	bl	800ca8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c54e:	4b3b      	ldr	r3, [pc, #236]	; (800c63c <xTaskIncrementTick+0x158>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	693a      	ldr	r2, [r7, #16]
 800c554:	429a      	cmp	r2, r3
 800c556:	d348      	bcc.n	800c5ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c558:	4b35      	ldr	r3, [pc, #212]	; (800c630 <xTaskIncrementTick+0x14c>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d104      	bne.n	800c56c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c562:	4b36      	ldr	r3, [pc, #216]	; (800c63c <xTaskIncrementTick+0x158>)
 800c564:	f04f 32ff 	mov.w	r2, #4294967295
 800c568:	601a      	str	r2, [r3, #0]
					break;
 800c56a:	e03e      	b.n	800c5ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c56c:	4b30      	ldr	r3, [pc, #192]	; (800c630 <xTaskIncrementTick+0x14c>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c57c:	693a      	ldr	r2, [r7, #16]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	429a      	cmp	r2, r3
 800c582:	d203      	bcs.n	800c58c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c584:	4a2d      	ldr	r2, [pc, #180]	; (800c63c <xTaskIncrementTick+0x158>)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c58a:	e02e      	b.n	800c5ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	3304      	adds	r3, #4
 800c590:	4618      	mov	r0, r3
 800c592:	f7fe fc8b 	bl	800aeac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d004      	beq.n	800c5a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	3318      	adds	r3, #24
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fe fc82 	bl	800aeac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	409a      	lsls	r2, r3
 800c5b0:	4b23      	ldr	r3, [pc, #140]	; (800c640 <xTaskIncrementTick+0x15c>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	4a22      	ldr	r2, [pc, #136]	; (800c640 <xTaskIncrementTick+0x15c>)
 800c5b8:	6013      	str	r3, [r2, #0]
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5be:	4613      	mov	r3, r2
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	4413      	add	r3, r2
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	4a1f      	ldr	r2, [pc, #124]	; (800c644 <xTaskIncrementTick+0x160>)
 800c5c8:	441a      	add	r2, r3
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	3304      	adds	r3, #4
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	4610      	mov	r0, r2
 800c5d2:	f7fe fc0e 	bl	800adf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5da:	4b1b      	ldr	r3, [pc, #108]	; (800c648 <xTaskIncrementTick+0x164>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d3b9      	bcc.n	800c558 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5e8:	e7b6      	b.n	800c558 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c5ea:	4b17      	ldr	r3, [pc, #92]	; (800c648 <xTaskIncrementTick+0x164>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f0:	4914      	ldr	r1, [pc, #80]	; (800c644 <xTaskIncrementTick+0x160>)
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	4413      	add	r3, r2
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	440b      	add	r3, r1
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d901      	bls.n	800c606 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c602:	2301      	movs	r3, #1
 800c604:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c606:	4b11      	ldr	r3, [pc, #68]	; (800c64c <xTaskIncrementTick+0x168>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d007      	beq.n	800c61e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c60e:	2301      	movs	r3, #1
 800c610:	617b      	str	r3, [r7, #20]
 800c612:	e004      	b.n	800c61e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c614:	4b0e      	ldr	r3, [pc, #56]	; (800c650 <xTaskIncrementTick+0x16c>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	3301      	adds	r3, #1
 800c61a:	4a0d      	ldr	r2, [pc, #52]	; (800c650 <xTaskIncrementTick+0x16c>)
 800c61c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c61e:	697b      	ldr	r3, [r7, #20]
}
 800c620:	4618      	mov	r0, r3
 800c622:	3718      	adds	r7, #24
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	20004650 	.word	0x20004650
 800c62c:	2000462c 	.word	0x2000462c
 800c630:	200045e0 	.word	0x200045e0
 800c634:	200045e4 	.word	0x200045e4
 800c638:	20004640 	.word	0x20004640
 800c63c:	20004648 	.word	0x20004648
 800c640:	20004630 	.word	0x20004630
 800c644:	2000452c 	.word	0x2000452c
 800c648:	20004528 	.word	0x20004528
 800c64c:	2000463c 	.word	0x2000463c
 800c650:	20004638 	.word	0x20004638

0800c654 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c654:	b480      	push	{r7}
 800c656:	b087      	sub	sp, #28
 800c658:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c65a:	4b27      	ldr	r3, [pc, #156]	; (800c6f8 <vTaskSwitchContext+0xa4>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d003      	beq.n	800c66a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c662:	4b26      	ldr	r3, [pc, #152]	; (800c6fc <vTaskSwitchContext+0xa8>)
 800c664:	2201      	movs	r2, #1
 800c666:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c668:	e03f      	b.n	800c6ea <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c66a:	4b24      	ldr	r3, [pc, #144]	; (800c6fc <vTaskSwitchContext+0xa8>)
 800c66c:	2200      	movs	r2, #0
 800c66e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c670:	4b23      	ldr	r3, [pc, #140]	; (800c700 <vTaskSwitchContext+0xac>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	fab3 f383 	clz	r3, r3
 800c67c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c67e:	7afb      	ldrb	r3, [r7, #11]
 800c680:	f1c3 031f 	rsb	r3, r3, #31
 800c684:	617b      	str	r3, [r7, #20]
 800c686:	491f      	ldr	r1, [pc, #124]	; (800c704 <vTaskSwitchContext+0xb0>)
 800c688:	697a      	ldr	r2, [r7, #20]
 800c68a:	4613      	mov	r3, r2
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	4413      	add	r3, r2
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	440b      	add	r3, r1
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d10a      	bne.n	800c6b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69e:	f383 8811 	msr	BASEPRI, r3
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	607b      	str	r3, [r7, #4]
}
 800c6ac:	bf00      	nop
 800c6ae:	e7fe      	b.n	800c6ae <vTaskSwitchContext+0x5a>
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	4413      	add	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4a12      	ldr	r2, [pc, #72]	; (800c704 <vTaskSwitchContext+0xb0>)
 800c6bc:	4413      	add	r3, r2
 800c6be:	613b      	str	r3, [r7, #16]
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	685a      	ldr	r2, [r3, #4]
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	605a      	str	r2, [r3, #4]
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	685a      	ldr	r2, [r3, #4]
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	3308      	adds	r3, #8
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d104      	bne.n	800c6e0 <vTaskSwitchContext+0x8c>
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	605a      	str	r2, [r3, #4]
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	4a08      	ldr	r2, [pc, #32]	; (800c708 <vTaskSwitchContext+0xb4>)
 800c6e8:	6013      	str	r3, [r2, #0]
}
 800c6ea:	bf00      	nop
 800c6ec:	371c      	adds	r7, #28
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f4:	4770      	bx	lr
 800c6f6:	bf00      	nop
 800c6f8:	20004650 	.word	0x20004650
 800c6fc:	2000463c 	.word	0x2000463c
 800c700:	20004630 	.word	0x20004630
 800c704:	2000452c 	.word	0x2000452c
 800c708:	20004528 	.word	0x20004528

0800c70c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d10a      	bne.n	800c732 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c720:	f383 8811 	msr	BASEPRI, r3
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	60fb      	str	r3, [r7, #12]
}
 800c72e:	bf00      	nop
 800c730:	e7fe      	b.n	800c730 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c732:	4b07      	ldr	r3, [pc, #28]	; (800c750 <vTaskPlaceOnEventList+0x44>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	3318      	adds	r3, #24
 800c738:	4619      	mov	r1, r3
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f7fe fb7d 	bl	800ae3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c740:	2101      	movs	r1, #1
 800c742:	6838      	ldr	r0, [r7, #0]
 800c744:	f000 fa66 	bl	800cc14 <prvAddCurrentTaskToDelayedList>
}
 800c748:	bf00      	nop
 800c74a:	3710      	adds	r7, #16
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	20004528 	.word	0x20004528

0800c754 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d10a      	bne.n	800c780 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76e:	f383 8811 	msr	BASEPRI, r3
 800c772:	f3bf 8f6f 	isb	sy
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	60fb      	str	r3, [r7, #12]
}
 800c77c:	bf00      	nop
 800c77e:	e7fe      	b.n	800c77e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	3318      	adds	r3, #24
 800c784:	4618      	mov	r0, r3
 800c786:	f7fe fb91 	bl	800aeac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c78a:	4b1d      	ldr	r3, [pc, #116]	; (800c800 <xTaskRemoveFromEventList+0xac>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d11c      	bne.n	800c7cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	3304      	adds	r3, #4
 800c796:	4618      	mov	r0, r3
 800c798:	f7fe fb88 	bl	800aeac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	409a      	lsls	r2, r3
 800c7a4:	4b17      	ldr	r3, [pc, #92]	; (800c804 <xTaskRemoveFromEventList+0xb0>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	4a16      	ldr	r2, [pc, #88]	; (800c804 <xTaskRemoveFromEventList+0xb0>)
 800c7ac:	6013      	str	r3, [r2, #0]
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	4413      	add	r3, r2
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	4a13      	ldr	r2, [pc, #76]	; (800c808 <xTaskRemoveFromEventList+0xb4>)
 800c7bc:	441a      	add	r2, r3
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	3304      	adds	r3, #4
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	4610      	mov	r0, r2
 800c7c6:	f7fe fb14 	bl	800adf2 <vListInsertEnd>
 800c7ca:	e005      	b.n	800c7d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	3318      	adds	r3, #24
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	480e      	ldr	r0, [pc, #56]	; (800c80c <xTaskRemoveFromEventList+0xb8>)
 800c7d4:	f7fe fb0d 	bl	800adf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7dc:	4b0c      	ldr	r3, [pc, #48]	; (800c810 <xTaskRemoveFromEventList+0xbc>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d905      	bls.n	800c7f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c7ea:	4b0a      	ldr	r3, [pc, #40]	; (800c814 <xTaskRemoveFromEventList+0xc0>)
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	601a      	str	r2, [r3, #0]
 800c7f0:	e001      	b.n	800c7f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c7f6:	697b      	ldr	r3, [r7, #20]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3718      	adds	r7, #24
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	20004650 	.word	0x20004650
 800c804:	20004630 	.word	0x20004630
 800c808:	2000452c 	.word	0x2000452c
 800c80c:	200045e8 	.word	0x200045e8
 800c810:	20004528 	.word	0x20004528
 800c814:	2000463c 	.word	0x2000463c

0800c818 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c820:	4b06      	ldr	r3, [pc, #24]	; (800c83c <vTaskInternalSetTimeOutState+0x24>)
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c828:	4b05      	ldr	r3, [pc, #20]	; (800c840 <vTaskInternalSetTimeOutState+0x28>)
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	605a      	str	r2, [r3, #4]
}
 800c830:	bf00      	nop
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr
 800c83c:	20004640 	.word	0x20004640
 800c840:	2000462c 	.word	0x2000462c

0800c844 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b088      	sub	sp, #32
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d10a      	bne.n	800c86a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c858:	f383 8811 	msr	BASEPRI, r3
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	f3bf 8f4f 	dsb	sy
 800c864:	613b      	str	r3, [r7, #16]
}
 800c866:	bf00      	nop
 800c868:	e7fe      	b.n	800c868 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d10a      	bne.n	800c886 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	60fb      	str	r3, [r7, #12]
}
 800c882:	bf00      	nop
 800c884:	e7fe      	b.n	800c884 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c886:	f7fe fc65 	bl	800b154 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c88a:	4b1d      	ldr	r3, [pc, #116]	; (800c900 <xTaskCheckForTimeOut+0xbc>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	69ba      	ldr	r2, [r7, #24]
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a2:	d102      	bne.n	800c8aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	61fb      	str	r3, [r7, #28]
 800c8a8:	e023      	b.n	800c8f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	4b15      	ldr	r3, [pc, #84]	; (800c904 <xTaskCheckForTimeOut+0xc0>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d007      	beq.n	800c8c6 <xTaskCheckForTimeOut+0x82>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	69ba      	ldr	r2, [r7, #24]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d302      	bcc.n	800c8c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	61fb      	str	r3, [r7, #28]
 800c8c4:	e015      	b.n	800c8f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	697a      	ldr	r2, [r7, #20]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d20b      	bcs.n	800c8e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	1ad2      	subs	r2, r2, r3
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f7ff ff9b 	bl	800c818 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	61fb      	str	r3, [r7, #28]
 800c8e6:	e004      	b.n	800c8f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c8f2:	f7fe fc5f 	bl	800b1b4 <vPortExitCritical>

	return xReturn;
 800c8f6:	69fb      	ldr	r3, [r7, #28]
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3720      	adds	r7, #32
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	2000462c 	.word	0x2000462c
 800c904:	20004640 	.word	0x20004640

0800c908 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c908:	b480      	push	{r7}
 800c90a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c90c:	4b03      	ldr	r3, [pc, #12]	; (800c91c <vTaskMissedYield+0x14>)
 800c90e:	2201      	movs	r2, #1
 800c910:	601a      	str	r2, [r3, #0]
}
 800c912:	bf00      	nop
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr
 800c91c:	2000463c 	.word	0x2000463c

0800c920 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c928:	f000 f852 	bl	800c9d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c92c:	4b06      	ldr	r3, [pc, #24]	; (800c948 <prvIdleTask+0x28>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d9f9      	bls.n	800c928 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c934:	4b05      	ldr	r3, [pc, #20]	; (800c94c <prvIdleTask+0x2c>)
 800c936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c93a:	601a      	str	r2, [r3, #0]
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c944:	e7f0      	b.n	800c928 <prvIdleTask+0x8>
 800c946:	bf00      	nop
 800c948:	2000452c 	.word	0x2000452c
 800c94c:	e000ed04 	.word	0xe000ed04

0800c950 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c956:	2300      	movs	r3, #0
 800c958:	607b      	str	r3, [r7, #4]
 800c95a:	e00c      	b.n	800c976 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	4613      	mov	r3, r2
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	4413      	add	r3, r2
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	4a12      	ldr	r2, [pc, #72]	; (800c9b0 <prvInitialiseTaskLists+0x60>)
 800c968:	4413      	add	r3, r2
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fe fa14 	bl	800ad98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	3301      	adds	r3, #1
 800c974:	607b      	str	r3, [r7, #4]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2b06      	cmp	r3, #6
 800c97a:	d9ef      	bls.n	800c95c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c97c:	480d      	ldr	r0, [pc, #52]	; (800c9b4 <prvInitialiseTaskLists+0x64>)
 800c97e:	f7fe fa0b 	bl	800ad98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c982:	480d      	ldr	r0, [pc, #52]	; (800c9b8 <prvInitialiseTaskLists+0x68>)
 800c984:	f7fe fa08 	bl	800ad98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c988:	480c      	ldr	r0, [pc, #48]	; (800c9bc <prvInitialiseTaskLists+0x6c>)
 800c98a:	f7fe fa05 	bl	800ad98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c98e:	480c      	ldr	r0, [pc, #48]	; (800c9c0 <prvInitialiseTaskLists+0x70>)
 800c990:	f7fe fa02 	bl	800ad98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c994:	480b      	ldr	r0, [pc, #44]	; (800c9c4 <prvInitialiseTaskLists+0x74>)
 800c996:	f7fe f9ff 	bl	800ad98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c99a:	4b0b      	ldr	r3, [pc, #44]	; (800c9c8 <prvInitialiseTaskLists+0x78>)
 800c99c:	4a05      	ldr	r2, [pc, #20]	; (800c9b4 <prvInitialiseTaskLists+0x64>)
 800c99e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c9a0:	4b0a      	ldr	r3, [pc, #40]	; (800c9cc <prvInitialiseTaskLists+0x7c>)
 800c9a2:	4a05      	ldr	r2, [pc, #20]	; (800c9b8 <prvInitialiseTaskLists+0x68>)
 800c9a4:	601a      	str	r2, [r3, #0]
}
 800c9a6:	bf00      	nop
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	2000452c 	.word	0x2000452c
 800c9b4:	200045b8 	.word	0x200045b8
 800c9b8:	200045cc 	.word	0x200045cc
 800c9bc:	200045e8 	.word	0x200045e8
 800c9c0:	200045fc 	.word	0x200045fc
 800c9c4:	20004614 	.word	0x20004614
 800c9c8:	200045e0 	.word	0x200045e0
 800c9cc:	200045e4 	.word	0x200045e4

0800c9d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9d6:	e019      	b.n	800ca0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c9d8:	f7fe fbbc 	bl	800b154 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9dc:	4b10      	ldr	r3, [pc, #64]	; (800ca20 <prvCheckTasksWaitingTermination+0x50>)
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	3304      	adds	r3, #4
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7fe fa5f 	bl	800aeac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c9ee:	4b0d      	ldr	r3, [pc, #52]	; (800ca24 <prvCheckTasksWaitingTermination+0x54>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	4a0b      	ldr	r2, [pc, #44]	; (800ca24 <prvCheckTasksWaitingTermination+0x54>)
 800c9f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c9f8:	4b0b      	ldr	r3, [pc, #44]	; (800ca28 <prvCheckTasksWaitingTermination+0x58>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	4a0a      	ldr	r2, [pc, #40]	; (800ca28 <prvCheckTasksWaitingTermination+0x58>)
 800ca00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ca02:	f7fe fbd7 	bl	800b1b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 f810 	bl	800ca2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca0c:	4b06      	ldr	r3, [pc, #24]	; (800ca28 <prvCheckTasksWaitingTermination+0x58>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d1e1      	bne.n	800c9d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ca14:	bf00      	nop
 800ca16:	bf00      	nop
 800ca18:	3708      	adds	r7, #8
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	200045fc 	.word	0x200045fc
 800ca24:	20004628 	.word	0x20004628
 800ca28:	20004610 	.word	0x20004610

0800ca2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d108      	bne.n	800ca50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fe f88a 	bl	800ab5c <vPortFree>
				vPortFree( pxTCB );
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f7fe f887 	bl	800ab5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ca4e:	e018      	b.n	800ca82 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d103      	bne.n	800ca62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7fe f87e 	bl	800ab5c <vPortFree>
	}
 800ca60:	e00f      	b.n	800ca82 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca68:	2b02      	cmp	r3, #2
 800ca6a:	d00a      	beq.n	800ca82 <prvDeleteTCB+0x56>
	__asm volatile
 800ca6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca70:	f383 8811 	msr	BASEPRI, r3
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	60fb      	str	r3, [r7, #12]
}
 800ca7e:	bf00      	nop
 800ca80:	e7fe      	b.n	800ca80 <prvDeleteTCB+0x54>
	}
 800ca82:	bf00      	nop
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
	...

0800ca8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca92:	4b0c      	ldr	r3, [pc, #48]	; (800cac4 <prvResetNextTaskUnblockTime+0x38>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d104      	bne.n	800caa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ca9c:	4b0a      	ldr	r3, [pc, #40]	; (800cac8 <prvResetNextTaskUnblockTime+0x3c>)
 800ca9e:	f04f 32ff 	mov.w	r2, #4294967295
 800caa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800caa4:	e008      	b.n	800cab8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caa6:	4b07      	ldr	r3, [pc, #28]	; (800cac4 <prvResetNextTaskUnblockTime+0x38>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	4a04      	ldr	r2, [pc, #16]	; (800cac8 <prvResetNextTaskUnblockTime+0x3c>)
 800cab6:	6013      	str	r3, [r2, #0]
}
 800cab8:	bf00      	nop
 800caba:	370c      	adds	r7, #12
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr
 800cac4:	200045e0 	.word	0x200045e0
 800cac8:	20004648 	.word	0x20004648

0800cacc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cad2:	4b0b      	ldr	r3, [pc, #44]	; (800cb00 <xTaskGetSchedulerState+0x34>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d102      	bne.n	800cae0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cada:	2301      	movs	r3, #1
 800cadc:	607b      	str	r3, [r7, #4]
 800cade:	e008      	b.n	800caf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cae0:	4b08      	ldr	r3, [pc, #32]	; (800cb04 <xTaskGetSchedulerState+0x38>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d102      	bne.n	800caee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cae8:	2302      	movs	r3, #2
 800caea:	607b      	str	r3, [r7, #4]
 800caec:	e001      	b.n	800caf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800caee:	2300      	movs	r3, #0
 800caf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800caf2:	687b      	ldr	r3, [r7, #4]
	}
 800caf4:	4618      	mov	r0, r3
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr
 800cb00:	20004634 	.word	0x20004634
 800cb04:	20004650 	.word	0x20004650

0800cb08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cb14:	2300      	movs	r3, #0
 800cb16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d06e      	beq.n	800cbfc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cb1e:	4b3a      	ldr	r3, [pc, #232]	; (800cc08 <xTaskPriorityDisinherit+0x100>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	693a      	ldr	r2, [r7, #16]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d00a      	beq.n	800cb3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2c:	f383 8811 	msr	BASEPRI, r3
 800cb30:	f3bf 8f6f 	isb	sy
 800cb34:	f3bf 8f4f 	dsb	sy
 800cb38:	60fb      	str	r3, [r7, #12]
}
 800cb3a:	bf00      	nop
 800cb3c:	e7fe      	b.n	800cb3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10a      	bne.n	800cb5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4a:	f383 8811 	msr	BASEPRI, r3
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	f3bf 8f4f 	dsb	sy
 800cb56:	60bb      	str	r3, [r7, #8]
}
 800cb58:	bf00      	nop
 800cb5a:	e7fe      	b.n	800cb5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb60:	1e5a      	subs	r2, r3, #1
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d044      	beq.n	800cbfc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d140      	bne.n	800cbfc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	3304      	adds	r3, #4
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fe f994 	bl	800aeac <uxListRemove>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d115      	bne.n	800cbb6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb8e:	491f      	ldr	r1, [pc, #124]	; (800cc0c <xTaskPriorityDisinherit+0x104>)
 800cb90:	4613      	mov	r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4413      	add	r3, r2
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	440b      	add	r3, r1
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10a      	bne.n	800cbb6 <xTaskPriorityDisinherit+0xae>
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba4:	2201      	movs	r2, #1
 800cba6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbaa:	43da      	mvns	r2, r3
 800cbac:	4b18      	ldr	r3, [pc, #96]	; (800cc10 <xTaskPriorityDisinherit+0x108>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4013      	ands	r3, r2
 800cbb2:	4a17      	ldr	r2, [pc, #92]	; (800cc10 <xTaskPriorityDisinherit+0x108>)
 800cbb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc2:	f1c3 0207 	rsb	r2, r3, #7
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbce:	2201      	movs	r2, #1
 800cbd0:	409a      	lsls	r2, r3
 800cbd2:	4b0f      	ldr	r3, [pc, #60]	; (800cc10 <xTaskPriorityDisinherit+0x108>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	4a0d      	ldr	r2, [pc, #52]	; (800cc10 <xTaskPriorityDisinherit+0x108>)
 800cbda:	6013      	str	r3, [r2, #0]
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4a08      	ldr	r2, [pc, #32]	; (800cc0c <xTaskPriorityDisinherit+0x104>)
 800cbea:	441a      	add	r2, r3
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	4610      	mov	r0, r2
 800cbf4:	f7fe f8fd 	bl	800adf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cbfc:	697b      	ldr	r3, [r7, #20]
	}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3718      	adds	r7, #24
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	20004528 	.word	0x20004528
 800cc0c:	2000452c 	.word	0x2000452c
 800cc10:	20004630 	.word	0x20004630

0800cc14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc1e:	4b29      	ldr	r3, [pc, #164]	; (800ccc4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc24:	4b28      	ldr	r3, [pc, #160]	; (800ccc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	3304      	adds	r3, #4
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7fe f93e 	bl	800aeac <uxListRemove>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10b      	bne.n	800cc4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cc36:	4b24      	ldr	r3, [pc, #144]	; (800ccc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc42:	43da      	mvns	r2, r3
 800cc44:	4b21      	ldr	r3, [pc, #132]	; (800cccc <prvAddCurrentTaskToDelayedList+0xb8>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4013      	ands	r3, r2
 800cc4a:	4a20      	ldr	r2, [pc, #128]	; (800cccc <prvAddCurrentTaskToDelayedList+0xb8>)
 800cc4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc54:	d10a      	bne.n	800cc6c <prvAddCurrentTaskToDelayedList+0x58>
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d007      	beq.n	800cc6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc5c:	4b1a      	ldr	r3, [pc, #104]	; (800ccc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	3304      	adds	r3, #4
 800cc62:	4619      	mov	r1, r3
 800cc64:	481a      	ldr	r0, [pc, #104]	; (800ccd0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cc66:	f7fe f8c4 	bl	800adf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc6a:	e026      	b.n	800ccba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4413      	add	r3, r2
 800cc72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cc74:	4b14      	ldr	r3, [pc, #80]	; (800ccc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	68ba      	ldr	r2, [r7, #8]
 800cc7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d209      	bcs.n	800cc98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc84:	4b13      	ldr	r3, [pc, #76]	; (800ccd4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	4b0f      	ldr	r3, [pc, #60]	; (800ccc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	3304      	adds	r3, #4
 800cc8e:	4619      	mov	r1, r3
 800cc90:	4610      	mov	r0, r2
 800cc92:	f7fe f8d2 	bl	800ae3a <vListInsert>
}
 800cc96:	e010      	b.n	800ccba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc98:	4b0f      	ldr	r3, [pc, #60]	; (800ccd8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	4b0a      	ldr	r3, [pc, #40]	; (800ccc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	3304      	adds	r3, #4
 800cca2:	4619      	mov	r1, r3
 800cca4:	4610      	mov	r0, r2
 800cca6:	f7fe f8c8 	bl	800ae3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ccaa:	4b0c      	ldr	r3, [pc, #48]	; (800ccdc <prvAddCurrentTaskToDelayedList+0xc8>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	68ba      	ldr	r2, [r7, #8]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d202      	bcs.n	800ccba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ccb4:	4a09      	ldr	r2, [pc, #36]	; (800ccdc <prvAddCurrentTaskToDelayedList+0xc8>)
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	6013      	str	r3, [r2, #0]
}
 800ccba:	bf00      	nop
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	2000462c 	.word	0x2000462c
 800ccc8:	20004528 	.word	0x20004528
 800cccc:	20004630 	.word	0x20004630
 800ccd0:	20004614 	.word	0x20004614
 800ccd4:	200045e4 	.word	0x200045e4
 800ccd8:	200045e0 	.word	0x200045e0
 800ccdc:	20004648 	.word	0x20004648

0800cce0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800cce0:	b590      	push	{r4, r7, lr}
 800cce2:	b089      	sub	sp, #36	; 0x24
 800cce4:	af04      	add	r7, sp, #16
 800cce6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800cce8:	2301      	movs	r3, #1
 800ccea:	2202      	movs	r2, #2
 800ccec:	2102      	movs	r1, #2
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 fcb8 	bl	800d664 <USBH_FindInterface>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ccf8:	7bfb      	ldrb	r3, [r7, #15]
 800ccfa:	2bff      	cmp	r3, #255	; 0xff
 800ccfc:	d002      	beq.n	800cd04 <USBH_CDC_InterfaceInit+0x24>
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d901      	bls.n	800cd08 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cd04:	2302      	movs	r3, #2
 800cd06:	e13d      	b.n	800cf84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800cd08:	7bfb      	ldrb	r3, [r7, #15]
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 fc8d 	bl	800d62c <USBH_SelectInterface>
 800cd12:	4603      	mov	r3, r0
 800cd14:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800cd16:	7bbb      	ldrb	r3, [r7, #14]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d001      	beq.n	800cd20 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	e131      	b.n	800cf84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800cd26:	2050      	movs	r0, #80	; 0x50
 800cd28:	f002 fd56 	bl	800f7d8 <malloc>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd36:	69db      	ldr	r3, [r3, #28]
 800cd38:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d101      	bne.n	800cd44 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800cd40:	2302      	movs	r3, #2
 800cd42:	e11f      	b.n	800cf84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800cd44:	2250      	movs	r2, #80	; 0x50
 800cd46:	2100      	movs	r1, #0
 800cd48:	68b8      	ldr	r0, [r7, #8]
 800cd4a:	f002 fd63 	bl	800f814 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800cd4e:	7bfb      	ldrb	r3, [r7, #15]
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	211a      	movs	r1, #26
 800cd54:	fb01 f303 	mul.w	r3, r1, r3
 800cd58:	4413      	add	r3, r2
 800cd5a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	b25b      	sxtb	r3, r3
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	da15      	bge.n	800cd92 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	211a      	movs	r1, #26
 800cd6c:	fb01 f303 	mul.w	r3, r1, r3
 800cd70:	4413      	add	r3, r2
 800cd72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cd76:	781a      	ldrb	r2, [r3, #0]
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cd7c:	7bfb      	ldrb	r3, [r7, #15]
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	211a      	movs	r1, #26
 800cd82:	fb01 f303 	mul.w	r3, r1, r3
 800cd86:	4413      	add	r3, r2
 800cd88:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cd8c:	881a      	ldrh	r2, [r3, #0]
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	785b      	ldrb	r3, [r3, #1]
 800cd96:	4619      	mov	r1, r3
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f002 f988 	bl	800f0ae <USBH_AllocPipe>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	461a      	mov	r2, r3
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	7819      	ldrb	r1, [r3, #0]
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	7858      	ldrb	r0, [r3, #1]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cdba:	68ba      	ldr	r2, [r7, #8]
 800cdbc:	8952      	ldrh	r2, [r2, #10]
 800cdbe:	9202      	str	r2, [sp, #8]
 800cdc0:	2203      	movs	r2, #3
 800cdc2:	9201      	str	r2, [sp, #4]
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	4623      	mov	r3, r4
 800cdc8:	4602      	mov	r2, r0
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f002 f940 	bl	800f050 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f002 fc4f 	bl	800f67c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800cdde:	2300      	movs	r3, #0
 800cde0:	2200      	movs	r2, #0
 800cde2:	210a      	movs	r1, #10
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 fc3d 	bl	800d664 <USBH_FindInterface>
 800cdea:	4603      	mov	r3, r0
 800cdec:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800cdee:	7bfb      	ldrb	r3, [r7, #15]
 800cdf0:	2bff      	cmp	r3, #255	; 0xff
 800cdf2:	d002      	beq.n	800cdfa <USBH_CDC_InterfaceInit+0x11a>
 800cdf4:	7bfb      	ldrb	r3, [r7, #15]
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d901      	bls.n	800cdfe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cdfa:	2302      	movs	r3, #2
 800cdfc:	e0c2      	b.n	800cf84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800cdfe:	7bfb      	ldrb	r3, [r7, #15]
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	211a      	movs	r1, #26
 800ce04:	fb01 f303 	mul.w	r3, r1, r3
 800ce08:	4413      	add	r3, r2
 800ce0a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	b25b      	sxtb	r3, r3
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	da16      	bge.n	800ce44 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ce16:	7bfb      	ldrb	r3, [r7, #15]
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	211a      	movs	r1, #26
 800ce1c:	fb01 f303 	mul.w	r3, r1, r3
 800ce20:	4413      	add	r3, r2
 800ce22:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ce26:	781a      	ldrb	r2, [r3, #0]
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ce2c:	7bfb      	ldrb	r3, [r7, #15]
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	211a      	movs	r1, #26
 800ce32:	fb01 f303 	mul.w	r3, r1, r3
 800ce36:	4413      	add	r3, r2
 800ce38:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ce3c:	881a      	ldrh	r2, [r3, #0]
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	835a      	strh	r2, [r3, #26]
 800ce42:	e015      	b.n	800ce70 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ce44:	7bfb      	ldrb	r3, [r7, #15]
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	211a      	movs	r1, #26
 800ce4a:	fb01 f303 	mul.w	r3, r1, r3
 800ce4e:	4413      	add	r3, r2
 800ce50:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ce54:	781a      	ldrb	r2, [r3, #0]
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ce5a:	7bfb      	ldrb	r3, [r7, #15]
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	211a      	movs	r1, #26
 800ce60:	fb01 f303 	mul.w	r3, r1, r3
 800ce64:	4413      	add	r3, r2
 800ce66:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ce6a:	881a      	ldrh	r2, [r3, #0]
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800ce70:	7bfb      	ldrb	r3, [r7, #15]
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	211a      	movs	r1, #26
 800ce76:	fb01 f303 	mul.w	r3, r1, r3
 800ce7a:	4413      	add	r3, r2
 800ce7c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	b25b      	sxtb	r3, r3
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	da16      	bge.n	800ceb6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ce88:	7bfb      	ldrb	r3, [r7, #15]
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	211a      	movs	r1, #26
 800ce8e:	fb01 f303 	mul.w	r3, r1, r3
 800ce92:	4413      	add	r3, r2
 800ce94:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ce98:	781a      	ldrb	r2, [r3, #0]
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ce9e:	7bfb      	ldrb	r3, [r7, #15]
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	211a      	movs	r1, #26
 800cea4:	fb01 f303 	mul.w	r3, r1, r3
 800cea8:	4413      	add	r3, r2
 800ceaa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ceae:	881a      	ldrh	r2, [r3, #0]
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	835a      	strh	r2, [r3, #26]
 800ceb4:	e015      	b.n	800cee2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ceb6:	7bfb      	ldrb	r3, [r7, #15]
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	211a      	movs	r1, #26
 800cebc:	fb01 f303 	mul.w	r3, r1, r3
 800cec0:	4413      	add	r3, r2
 800cec2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cec6:	781a      	ldrb	r2, [r3, #0]
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cecc:	7bfb      	ldrb	r3, [r7, #15]
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	211a      	movs	r1, #26
 800ced2:	fb01 f303 	mul.w	r3, r1, r3
 800ced6:	4413      	add	r3, r2
 800ced8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800cedc:	881a      	ldrh	r2, [r3, #0]
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	7b9b      	ldrb	r3, [r3, #14]
 800cee6:	4619      	mov	r1, r3
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f002 f8e0 	bl	800f0ae <USBH_AllocPipe>
 800ceee:	4603      	mov	r3, r0
 800cef0:	461a      	mov	r2, r3
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	7bdb      	ldrb	r3, [r3, #15]
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f002 f8d6 	bl	800f0ae <USBH_AllocPipe>
 800cf02:	4603      	mov	r3, r0
 800cf04:	461a      	mov	r2, r3
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	7b59      	ldrb	r1, [r3, #13]
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	7b98      	ldrb	r0, [r3, #14]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	8b12      	ldrh	r2, [r2, #24]
 800cf22:	9202      	str	r2, [sp, #8]
 800cf24:	2202      	movs	r2, #2
 800cf26:	9201      	str	r2, [sp, #4]
 800cf28:	9300      	str	r3, [sp, #0]
 800cf2a:	4623      	mov	r3, r4
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f002 f88e 	bl	800f050 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	7b19      	ldrb	r1, [r3, #12]
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	7bd8      	ldrb	r0, [r3, #15]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cf48:	68ba      	ldr	r2, [r7, #8]
 800cf4a:	8b52      	ldrh	r2, [r2, #26]
 800cf4c:	9202      	str	r2, [sp, #8]
 800cf4e:	2202      	movs	r2, #2
 800cf50:	9201      	str	r2, [sp, #4]
 800cf52:	9300      	str	r3, [sp, #0]
 800cf54:	4623      	mov	r3, r4
 800cf56:	4602      	mov	r2, r0
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f002 f879 	bl	800f050 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	2200      	movs	r2, #0
 800cf62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	7b5b      	ldrb	r3, [r3, #13]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f002 fb84 	bl	800f67c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	7b1b      	ldrb	r3, [r3, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f002 fb7d 	bl	800f67c <USBH_LL_SetToggle>

  return USBH_OK;
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd90      	pop	{r4, r7, pc}

0800cf8c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf9a:	69db      	ldr	r3, [r3, #28]
 800cf9c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00e      	beq.n	800cfc4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	4619      	mov	r1, r3
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f002 f86e 	bl	800f08e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f002 f899 	bl	800f0f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	7b1b      	ldrb	r3, [r3, #12]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00e      	beq.n	800cfea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	7b1b      	ldrb	r3, [r3, #12]
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f002 f85b 	bl	800f08e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	7b1b      	ldrb	r3, [r3, #12]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f002 f886 	bl	800f0f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	7b5b      	ldrb	r3, [r3, #13]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00e      	beq.n	800d010 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	7b5b      	ldrb	r3, [r3, #13]
 800cff6:	4619      	mov	r1, r3
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f002 f848 	bl	800f08e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	7b5b      	ldrb	r3, [r3, #13]
 800d002:	4619      	mov	r1, r3
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f002 f873 	bl	800f0f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d016:	69db      	ldr	r3, [r3, #28]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d00b      	beq.n	800d034 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d022:	69db      	ldr	r3, [r3, #28]
 800d024:	4618      	mov	r0, r3
 800d026:	f002 fbdf 	bl	800f7e8 <free>
    phost->pActiveClass->pData = 0U;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d030:	2200      	movs	r2, #0
 800d032:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d034:	2300      	movs	r3, #0
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b084      	sub	sp, #16
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d04c:	69db      	ldr	r3, [r3, #28]
 800d04e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	3340      	adds	r3, #64	; 0x40
 800d054:	4619      	mov	r1, r3
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 f8b1 	bl	800d1be <GetLineCoding>
 800d05c:	4603      	mov	r3, r0
 800d05e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800d060:	7afb      	ldrb	r3, [r7, #11]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d105      	bne.n	800d072 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d06c:	2102      	movs	r1, #2
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800d072:	7afb      	ldrb	r3, [r7, #11]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3710      	adds	r7, #16
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d084:	2301      	movs	r3, #1
 800d086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800d088:	2300      	movs	r3, #0
 800d08a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d092:	69db      	ldr	r3, [r3, #28]
 800d094:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d09c:	2b04      	cmp	r3, #4
 800d09e:	d877      	bhi.n	800d190 <USBH_CDC_Process+0x114>
 800d0a0:	a201      	add	r2, pc, #4	; (adr r2, 800d0a8 <USBH_CDC_Process+0x2c>)
 800d0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a6:	bf00      	nop
 800d0a8:	0800d0bd 	.word	0x0800d0bd
 800d0ac:	0800d0c3 	.word	0x0800d0c3
 800d0b0:	0800d0f3 	.word	0x0800d0f3
 800d0b4:	0800d167 	.word	0x0800d167
 800d0b8:	0800d175 	.word	0x0800d175
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	73fb      	strb	r3, [r7, #15]
      break;
 800d0c0:	e06d      	b.n	800d19e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 f897 	bl	800d1fc <SetLineCoding>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d0d2:	7bbb      	ldrb	r3, [r7, #14]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d104      	bne.n	800d0e2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	2202      	movs	r2, #2
 800d0dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d0e0:	e058      	b.n	800d194 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800d0e2:	7bbb      	ldrb	r3, [r7, #14]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d055      	beq.n	800d194 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	2204      	movs	r2, #4
 800d0ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d0f0:	e050      	b.n	800d194 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	3340      	adds	r3, #64	; 0x40
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 f860 	bl	800d1be <GetLineCoding>
 800d0fe:	4603      	mov	r3, r0
 800d100:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d102:	7bbb      	ldrb	r3, [r7, #14]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d126      	bne.n	800d156 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	2200      	movs	r2, #0
 800d10c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d11a:	791b      	ldrb	r3, [r3, #4]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d13b      	bne.n	800d198 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d12a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d133      	bne.n	800d198 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d13a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d12b      	bne.n	800d198 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d148:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d124      	bne.n	800d198 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 f982 	bl	800d458 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d154:	e020      	b.n	800d198 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800d156:	7bbb      	ldrb	r3, [r7, #14]
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d01d      	beq.n	800d198 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	2204      	movs	r2, #4
 800d160:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d164:	e018      	b.n	800d198 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 f867 	bl	800d23a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 f8f6 	bl	800d35e <CDC_ProcessReception>
      break;
 800d172:	e014      	b.n	800d19e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800d174:	2100      	movs	r1, #0
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f001 f95b 	bl	800e432 <USBH_ClrFeature>
 800d17c:	4603      	mov	r3, r0
 800d17e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d180:	7bbb      	ldrb	r3, [r7, #14]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d10a      	bne.n	800d19c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	2200      	movs	r2, #0
 800d18a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800d18e:	e005      	b.n	800d19c <USBH_CDC_Process+0x120>

    default:
      break;
 800d190:	bf00      	nop
 800d192:	e004      	b.n	800d19e <USBH_CDC_Process+0x122>
      break;
 800d194:	bf00      	nop
 800d196:	e002      	b.n	800d19e <USBH_CDC_Process+0x122>
      break;
 800d198:	bf00      	nop
 800d19a:	e000      	b.n	800d19e <USBH_CDC_Process+0x122>
      break;
 800d19c:	bf00      	nop

  }

  return status;
 800d19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	370c      	adds	r7, #12
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr

0800d1be <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b082      	sub	sp, #8
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
 800d1c6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	22a1      	movs	r2, #161	; 0xa1
 800d1cc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2221      	movs	r2, #33	; 0x21
 800d1d2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2207      	movs	r2, #7
 800d1e4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	2207      	movs	r2, #7
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f001 fbed 	bl	800e9cc <USBH_CtlReq>
 800d1f2:	4603      	mov	r3, r0
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3708      	adds	r7, #8
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2221      	movs	r2, #33	; 0x21
 800d20a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2220      	movs	r2, #32
 800d210:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2200      	movs	r2, #0
 800d216:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2207      	movs	r2, #7
 800d222:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	2207      	movs	r2, #7
 800d228:	4619      	mov	r1, r3
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f001 fbce 	bl	800e9cc <USBH_CtlReq>
 800d230:	4603      	mov	r3, r0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b086      	sub	sp, #24
 800d23e:	af02      	add	r7, sp, #8
 800d240:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d248:	69db      	ldr	r3, [r3, #28]
 800d24a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d24c:	2300      	movs	r3, #0
 800d24e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d256:	2b01      	cmp	r3, #1
 800d258:	d002      	beq.n	800d260 <CDC_ProcessTransmission+0x26>
 800d25a:	2b02      	cmp	r3, #2
 800d25c:	d023      	beq.n	800d2a6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800d25e:	e07a      	b.n	800d356 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d264:	68fa      	ldr	r2, [r7, #12]
 800d266:	8b12      	ldrh	r2, [r2, #24]
 800d268:	4293      	cmp	r3, r2
 800d26a:	d90b      	bls.n	800d284 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	69d9      	ldr	r1, [r3, #28]
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	8b1a      	ldrh	r2, [r3, #24]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	7b5b      	ldrb	r3, [r3, #13]
 800d278:	2001      	movs	r0, #1
 800d27a:	9000      	str	r0, [sp, #0]
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f001 fea4 	bl	800efca <USBH_BulkSendData>
 800d282:	e00b      	b.n	800d29c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	7b5b      	ldrb	r3, [r3, #13]
 800d292:	2001      	movs	r0, #1
 800d294:	9000      	str	r0, [sp, #0]
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f001 fe97 	bl	800efca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2202      	movs	r2, #2
 800d2a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d2a4:	e057      	b.n	800d356 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	7b5b      	ldrb	r3, [r3, #13]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f002 f9bb 	bl	800f628 <USBH_LL_GetURBState>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800d2b6:	7afb      	ldrb	r3, [r7, #11]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d136      	bne.n	800d32a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	8b12      	ldrh	r2, [r2, #24]
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d90e      	bls.n	800d2e6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	8b12      	ldrh	r2, [r2, #24]
 800d2d0:	1a9a      	subs	r2, r3, r2
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	69db      	ldr	r3, [r3, #28]
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	8b12      	ldrh	r2, [r2, #24]
 800d2de:	441a      	add	r2, r3
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	61da      	str	r2, [r3, #28]
 800d2e4:	e002      	b.n	800d2ec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d004      	beq.n	800d2fe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800d2fc:	e006      	b.n	800d30c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2200      	movs	r2, #0
 800d302:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 f892 	bl	800d430 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2204      	movs	r2, #4
 800d310:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d320:	2200      	movs	r2, #0
 800d322:	4619      	mov	r1, r3
 800d324:	f7fd fa9a 	bl	800a85c <osMessagePut>
      break;
 800d328:	e014      	b.n	800d354 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800d32a:	7afb      	ldrb	r3, [r7, #11]
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	d111      	bne.n	800d354 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2201      	movs	r2, #1
 800d334:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2204      	movs	r2, #4
 800d33c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d34c:	2200      	movs	r2, #0
 800d34e:	4619      	mov	r1, r3
 800d350:	f7fd fa84 	bl	800a85c <osMessagePut>
      break;
 800d354:	bf00      	nop
  }
}
 800d356:	bf00      	nop
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b086      	sub	sp, #24
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d36c:	69db      	ldr	r3, [r3, #28]
 800d36e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d370:	2300      	movs	r3, #0
 800d372:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d37a:	2b03      	cmp	r3, #3
 800d37c:	d002      	beq.n	800d384 <CDC_ProcessReception+0x26>
 800d37e:	2b04      	cmp	r3, #4
 800d380:	d00e      	beq.n	800d3a0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800d382:	e051      	b.n	800d428 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	6a19      	ldr	r1, [r3, #32]
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	8b5a      	ldrh	r2, [r3, #26]
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	7b1b      	ldrb	r3, [r3, #12]
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f001 fe3f 	bl	800f014 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2204      	movs	r2, #4
 800d39a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d39e:	e043      	b.n	800d428 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	7b1b      	ldrb	r3, [r3, #12]
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f002 f93e 	bl	800f628 <USBH_LL_GetURBState>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800d3b0:	7cfb      	ldrb	r3, [r7, #19]
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d137      	bne.n	800d426 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	7b1b      	ldrb	r3, [r3, #12]
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f002 f8a1 	bl	800f504 <USBH_LL_GetLastXferSize>
 800d3c2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d016      	beq.n	800d3fc <CDC_ProcessReception+0x9e>
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	8b5b      	ldrh	r3, [r3, #26]
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d910      	bls.n	800d3fc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	1ad2      	subs	r2, r2, r3
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	6a1a      	ldr	r2, [r3, #32]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	441a      	add	r2, r3
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	2203      	movs	r2, #3
 800d3f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800d3fa:	e006      	b.n	800d40a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 f81d 	bl	800d444 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2204      	movs	r2, #4
 800d40e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d41e:	2200      	movs	r2, #0
 800d420:	4619      	mov	r1, r3
 800d422:	f7fd fa1b 	bl	800a85c <osMessagePut>
      break;
 800d426:	bf00      	nop
  }
}
 800d428:	bf00      	nop
 800d42a:	3718      	adds	r7, #24
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d438:	bf00      	nop
 800d43a:	370c      	adds	r7, #12
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr

0800d444 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d44c:	bf00      	nop
 800d44e:	370c      	adds	r7, #12
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d460:	bf00      	nop
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800d46c:	b5b0      	push	{r4, r5, r7, lr}
 800d46e:	b090      	sub	sp, #64	; 0x40
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	4613      	mov	r3, r2
 800d478:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d101      	bne.n	800d484 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d480:	2302      	movs	r3, #2
 800d482:	e04d      	b.n	800d520 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	79fa      	ldrb	r2, [r7, #7]
 800d488:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2200      	movs	r2, #0
 800d490:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2200      	movs	r2, #0
 800d498:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f000 f847 	bl	800d530 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d003      	beq.n	800d4d0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	68ba      	ldr	r2, [r7, #8]
 800d4cc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800d4d0:	4b15      	ldr	r3, [pc, #84]	; (800d528 <USBH_Init+0xbc>)
 800d4d2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800d4d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d4d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800d4dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7fd f991 	bl	800a80a <osMessageCreate>
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800d4f0:	4b0e      	ldr	r3, [pc, #56]	; (800d52c <USBH_Init+0xc0>)
 800d4f2:	f107 0414 	add.w	r4, r7, #20
 800d4f6:	461d      	mov	r5, r3
 800d4f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d500:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800d504:	f107 0314 	add.w	r3, r7, #20
 800d508:	68f9      	ldr	r1, [r7, #12]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7fd f91d 	bl	800a74a <osThreadCreate>
 800d510:	4602      	mov	r2, r0
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f001 ff35 	bl	800f388 <USBH_LL_Init>

  return USBH_OK;
 800d51e:	2300      	movs	r3, #0
}
 800d520:	4618      	mov	r0, r3
 800d522:	3740      	adds	r7, #64	; 0x40
 800d524:	46bd      	mov	sp, r7
 800d526:	bdb0      	pop	{r4, r5, r7, pc}
 800d528:	0800faac 	.word	0x0800faac
 800d52c:	0800fabc 	.word	0x0800fabc

0800d530 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d530:	b480      	push	{r7}
 800d532:	b085      	sub	sp, #20
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d538:	2300      	movs	r3, #0
 800d53a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d53c:	2300      	movs	r3, #0
 800d53e:	60fb      	str	r3, [r7, #12]
 800d540:	e009      	b.n	800d556 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	33e0      	adds	r3, #224	; 0xe0
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	4413      	add	r3, r2
 800d54c:	2200      	movs	r2, #0
 800d54e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	3301      	adds	r3, #1
 800d554:	60fb      	str	r3, [r7, #12]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2b0f      	cmp	r3, #15
 800d55a:	d9f2      	bls.n	800d542 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d55c:	2300      	movs	r3, #0
 800d55e:	60fb      	str	r3, [r7, #12]
 800d560:	e009      	b.n	800d576 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d562:	687a      	ldr	r2, [r7, #4]
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	4413      	add	r3, r2
 800d568:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d56c:	2200      	movs	r2, #0
 800d56e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	3301      	adds	r3, #1
 800d574:	60fb      	str	r3, [r7, #12]
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d57c:	d3f1      	bcc.n	800d562 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2201      	movs	r2, #1
 800d58e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2201      	movs	r2, #1
 800d59c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2240      	movs	r2, #64	; 0x40
 800d5a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d5ca:	2300      	movs	r3, #0
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3714      	adds	r7, #20
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr

0800d5d8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b085      	sub	sp, #20
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d016      	beq.n	800d61a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d10e      	bne.n	800d614 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d5fc:	1c59      	adds	r1, r3, #1
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d604:	687a      	ldr	r2, [r7, #4]
 800d606:	33de      	adds	r3, #222	; 0xde
 800d608:	6839      	ldr	r1, [r7, #0]
 800d60a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d60e:	2300      	movs	r3, #0
 800d610:	73fb      	strb	r3, [r7, #15]
 800d612:	e004      	b.n	800d61e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d614:	2302      	movs	r3, #2
 800d616:	73fb      	strb	r3, [r7, #15]
 800d618:	e001      	b.n	800d61e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d61a:	2302      	movs	r3, #2
 800d61c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d620:	4618      	mov	r0, r3
 800d622:	3714      	adds	r7, #20
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b085      	sub	sp, #20
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	460b      	mov	r3, r1
 800d636:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d638:	2300      	movs	r3, #0
 800d63a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d642:	78fa      	ldrb	r2, [r7, #3]
 800d644:	429a      	cmp	r2, r3
 800d646:	d204      	bcs.n	800d652 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	78fa      	ldrb	r2, [r7, #3]
 800d64c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d650:	e001      	b.n	800d656 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d652:	2302      	movs	r3, #2
 800d654:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d656:	7bfb      	ldrb	r3, [r7, #15]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3714      	adds	r7, #20
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d664:	b480      	push	{r7}
 800d666:	b087      	sub	sp, #28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	4608      	mov	r0, r1
 800d66e:	4611      	mov	r1, r2
 800d670:	461a      	mov	r2, r3
 800d672:	4603      	mov	r3, r0
 800d674:	70fb      	strb	r3, [r7, #3]
 800d676:	460b      	mov	r3, r1
 800d678:	70bb      	strb	r3, [r7, #2]
 800d67a:	4613      	mov	r3, r2
 800d67c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d67e:	2300      	movs	r3, #0
 800d680:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d682:	2300      	movs	r3, #0
 800d684:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d68c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d68e:	e025      	b.n	800d6dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d690:	7dfb      	ldrb	r3, [r7, #23]
 800d692:	221a      	movs	r2, #26
 800d694:	fb02 f303 	mul.w	r3, r2, r3
 800d698:	3308      	adds	r3, #8
 800d69a:	68fa      	ldr	r2, [r7, #12]
 800d69c:	4413      	add	r3, r2
 800d69e:	3302      	adds	r3, #2
 800d6a0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	795b      	ldrb	r3, [r3, #5]
 800d6a6:	78fa      	ldrb	r2, [r7, #3]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d002      	beq.n	800d6b2 <USBH_FindInterface+0x4e>
 800d6ac:	78fb      	ldrb	r3, [r7, #3]
 800d6ae:	2bff      	cmp	r3, #255	; 0xff
 800d6b0:	d111      	bne.n	800d6d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d6b6:	78ba      	ldrb	r2, [r7, #2]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d002      	beq.n	800d6c2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d6bc:	78bb      	ldrb	r3, [r7, #2]
 800d6be:	2bff      	cmp	r3, #255	; 0xff
 800d6c0:	d109      	bne.n	800d6d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d6c6:	787a      	ldrb	r2, [r7, #1]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d002      	beq.n	800d6d2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d6cc:	787b      	ldrb	r3, [r7, #1]
 800d6ce:	2bff      	cmp	r3, #255	; 0xff
 800d6d0:	d101      	bne.n	800d6d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d6d2:	7dfb      	ldrb	r3, [r7, #23]
 800d6d4:	e006      	b.n	800d6e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d6d6:	7dfb      	ldrb	r3, [r7, #23]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d6dc:	7dfb      	ldrb	r3, [r7, #23]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d9d6      	bls.n	800d690 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d6e2:	23ff      	movs	r3, #255	; 0xff
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	371c      	adds	r7, #28
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f001 fe8b 	bl	800f414 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800d6fe:	2101      	movs	r1, #1
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f001 ffa4 	bl	800f64e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d706:	2300      	movs	r3, #0
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3708      	adds	r7, #8
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b088      	sub	sp, #32
 800d714:	af04      	add	r7, sp, #16
 800d716:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d718:	2302      	movs	r3, #2
 800d71a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d71c:	2300      	movs	r3, #0
 800d71e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d102      	bne.n	800d732 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2203      	movs	r2, #3
 800d730:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	b2db      	uxtb	r3, r3
 800d738:	2b0b      	cmp	r3, #11
 800d73a:	f200 8247 	bhi.w	800dbcc <USBH_Process+0x4bc>
 800d73e:	a201      	add	r2, pc, #4	; (adr r2, 800d744 <USBH_Process+0x34>)
 800d740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d744:	0800d775 	.word	0x0800d775
 800d748:	0800d7c3 	.word	0x0800d7c3
 800d74c:	0800d847 	.word	0x0800d847
 800d750:	0800db4b 	.word	0x0800db4b
 800d754:	0800dbcd 	.word	0x0800dbcd
 800d758:	0800d907 	.word	0x0800d907
 800d75c:	0800dad5 	.word	0x0800dad5
 800d760:	0800d959 	.word	0x0800d959
 800d764:	0800d995 	.word	0x0800d995
 800d768:	0800d9cf 	.word	0x0800d9cf
 800d76c:	0800da2d 	.word	0x0800da2d
 800d770:	0800db33 	.word	0x0800db33
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f000 8227 	beq.w	800dbd0 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2201      	movs	r2, #1
 800d786:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d788:	20c8      	movs	r0, #200	; 0xc8
 800d78a:	f001 ffa7 	bl	800f6dc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f001 fe9d 	bl	800f4ce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	f7fd f84e 	bl	800a85c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d7c0:	e206      	b.n	800dbd0 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	d107      	bne.n	800d7dc <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2202      	movs	r2, #2
 800d7d8:	701a      	strb	r2, [r3, #0]
 800d7da:	e025      	b.n	800d828 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d7e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7e6:	d914      	bls.n	800d812 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	b2da      	uxtb	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d7fe:	2b03      	cmp	r3, #3
 800d800:	d903      	bls.n	800d80a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	220d      	movs	r2, #13
 800d806:	701a      	strb	r2, [r3, #0]
 800d808:	e00e      	b.n	800d828 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	701a      	strb	r2, [r3, #0]
 800d810:	e00a      	b.n	800d828 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d818:	f103 020a 	add.w	r2, r3, #10
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d822:	200a      	movs	r0, #10
 800d824:	f001 ff5a 	bl	800f6dc <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2201      	movs	r2, #1
 800d82c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d83c:	2200      	movs	r2, #0
 800d83e:	4619      	mov	r1, r3
 800d840:	f7fd f80c 	bl	800a85c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d844:	e1cb      	b.n	800dbde <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d005      	beq.n	800d85c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d856:	2104      	movs	r1, #4
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d85c:	2064      	movs	r0, #100	; 0x64
 800d85e:	f001 ff3d 	bl	800f6dc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f001 fe0c 	bl	800f480 <USBH_LL_GetSpeed>
 800d868:	4603      	mov	r3, r0
 800d86a:	461a      	mov	r2, r3
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2205      	movs	r2, #5
 800d876:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d878:	2100      	movs	r1, #0
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f001 fc17 	bl	800f0ae <USBH_AllocPipe>
 800d880:	4603      	mov	r3, r0
 800d882:	461a      	mov	r2, r3
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d888:	2180      	movs	r1, #128	; 0x80
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f001 fc0f 	bl	800f0ae <USBH_AllocPipe>
 800d890:	4603      	mov	r3, r0
 800d892:	461a      	mov	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	7919      	ldrb	r1, [r3, #4]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d8ac:	b292      	uxth	r2, r2
 800d8ae:	9202      	str	r2, [sp, #8]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	9201      	str	r2, [sp, #4]
 800d8b4:	9300      	str	r3, [sp, #0]
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	2280      	movs	r2, #128	; 0x80
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f001 fbc8 	bl	800f050 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	7959      	ldrb	r1, [r3, #5]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d8d4:	b292      	uxth	r2, r2
 800d8d6:	9202      	str	r2, [sp, #8]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	9201      	str	r2, [sp, #4]
 800d8dc:	9300      	str	r3, [sp, #0]
 800d8de:	4603      	mov	r3, r0
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f001 fbb4 	bl	800f050 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	4619      	mov	r1, r3
 800d900:	f7fc ffac 	bl	800a85c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d904:	e16b      	b.n	800dbde <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 f96e 	bl	800dbe8 <USBH_HandleEnum>
 800d90c:	4603      	mov	r3, r0
 800d90e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d910:	7bbb      	ldrb	r3, [r7, #14]
 800d912:	b2db      	uxtb	r3, r3
 800d914:	2b00      	cmp	r3, #0
 800d916:	f040 815d 	bne.w	800dbd4 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2200      	movs	r2, #0
 800d91e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d103      	bne.n	800d934 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2208      	movs	r2, #8
 800d930:	701a      	strb	r2, [r3, #0]
 800d932:	e002      	b.n	800d93a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2207      	movs	r2, #7
 800d938:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2205      	movs	r2, #5
 800d93e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d94e:	2200      	movs	r2, #0
 800d950:	4619      	mov	r1, r3
 800d952:	f7fc ff83 	bl	800a85c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d956:	e13d      	b.n	800dbd4 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d95e:	2b00      	cmp	r3, #0
 800d960:	f000 813a 	beq.w	800dbd8 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d96a:	2101      	movs	r1, #1
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2208      	movs	r2, #8
 800d974:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2205      	movs	r2, #5
 800d97a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d98a:	2200      	movs	r2, #0
 800d98c:	4619      	mov	r1, r3
 800d98e:	f7fc ff65 	bl	800a85c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800d992:	e121      	b.n	800dbd8 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	4619      	mov	r1, r3
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 fd00 	bl	800e3a4 <USBH_SetCfg>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d102      	bne.n	800d9b0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2209      	movs	r2, #9
 800d9ae:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	f7fc ff48 	bl	800a85c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d9cc:	e107      	b.n	800dbde <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d9d4:	f003 0320 	and.w	r3, r3, #32
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d015      	beq.n	800da08 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d9dc:	2101      	movs	r1, #1
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 fd03 	bl	800e3ea <USBH_SetFeature>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d9e8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d103      	bne.n	800d9f8 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	220a      	movs	r2, #10
 800d9f4:	701a      	strb	r2, [r3, #0]
 800d9f6:	e00a      	b.n	800da0e <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800d9f8:	7bbb      	ldrb	r3, [r7, #14]
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	2b03      	cmp	r3, #3
 800d9fe:	d106      	bne.n	800da0e <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	220a      	movs	r2, #10
 800da04:	701a      	strb	r2, [r3, #0]
 800da06:	e002      	b.n	800da0e <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	220a      	movs	r2, #10
 800da0c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2201      	movs	r2, #1
 800da12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800da22:	2200      	movs	r2, #0
 800da24:	4619      	mov	r1, r3
 800da26:	f7fc ff19 	bl	800a85c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800da2a:	e0d8      	b.n	800dbde <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800da32:	2b00      	cmp	r3, #0
 800da34:	d03f      	beq.n	800dab6 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800da3e:	2300      	movs	r3, #0
 800da40:	73fb      	strb	r3, [r7, #15]
 800da42:	e016      	b.n	800da72 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800da44:	7bfa      	ldrb	r2, [r7, #15]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	32de      	adds	r2, #222	; 0xde
 800da4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da4e:	791a      	ldrb	r2, [r3, #4]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800da56:	429a      	cmp	r2, r3
 800da58:	d108      	bne.n	800da6c <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800da5a:	7bfa      	ldrb	r2, [r7, #15]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	32de      	adds	r2, #222	; 0xde
 800da60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800da6a:	e005      	b.n	800da78 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800da6c:	7bfb      	ldrb	r3, [r7, #15]
 800da6e:	3301      	adds	r3, #1
 800da70:	73fb      	strb	r3, [r7, #15]
 800da72:	7bfb      	ldrb	r3, [r7, #15]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d0e5      	beq.n	800da44 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d016      	beq.n	800dab0 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	4798      	blx	r3
 800da8e:	4603      	mov	r3, r0
 800da90:	2b00      	cmp	r3, #0
 800da92:	d109      	bne.n	800daa8 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2206      	movs	r2, #6
 800da98:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800daa0:	2103      	movs	r1, #3
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	4798      	blx	r3
 800daa6:	e006      	b.n	800dab6 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	220d      	movs	r2, #13
 800daac:	701a      	strb	r2, [r3, #0]
 800daae:	e002      	b.n	800dab6 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	220d      	movs	r2, #13
 800dab4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2205      	movs	r2, #5
 800daba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800daca:	2200      	movs	r2, #0
 800dacc:	4619      	mov	r1, r3
 800dace:	f7fc fec5 	bl	800a85c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800dad2:	e084      	b.n	800dbde <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d017      	beq.n	800db0e <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dae4:	691b      	ldr	r3, [r3, #16]
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	4798      	blx	r3
 800daea:	4603      	mov	r3, r0
 800daec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800daee:	7bbb      	ldrb	r3, [r7, #14]
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d103      	bne.n	800dafe <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	220b      	movs	r2, #11
 800dafa:	701a      	strb	r2, [r3, #0]
 800dafc:	e00a      	b.n	800db14 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800dafe:	7bbb      	ldrb	r3, [r7, #14]
 800db00:	b2db      	uxtb	r3, r3
 800db02:	2b02      	cmp	r3, #2
 800db04:	d106      	bne.n	800db14 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	220d      	movs	r2, #13
 800db0a:	701a      	strb	r2, [r3, #0]
 800db0c:	e002      	b.n	800db14 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	220d      	movs	r2, #13
 800db12:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2205      	movs	r2, #5
 800db18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800db28:	2200      	movs	r2, #0
 800db2a:	4619      	mov	r1, r3
 800db2c:	f7fc fe96 	bl	800a85c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800db30:	e055      	b.n	800dbde <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d04f      	beq.n	800dbdc <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db42:	695b      	ldr	r3, [r3, #20]
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	4798      	blx	r3
      }
      break;
 800db48:	e048      	b.n	800dbdc <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2200      	movs	r2, #0
 800db4e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7ff fcec 	bl	800d530 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d009      	beq.n	800db76 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2200      	movs	r2, #0
 800db72:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d005      	beq.n	800db8c <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db86:	2105      	movs	r1, #5
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800db92:	b2db      	uxtb	r3, r3
 800db94:	2b01      	cmp	r3, #1
 800db96:	d107      	bne.n	800dba8 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7ff fda5 	bl	800d6f0 <USBH_Start>
 800dba6:	e002      	b.n	800dbae <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f001 fc33 	bl	800f414 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	f7fc fe49 	bl	800a85c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800dbca:	e008      	b.n	800dbde <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800dbcc:	bf00      	nop
 800dbce:	e006      	b.n	800dbde <USBH_Process+0x4ce>
      break;
 800dbd0:	bf00      	nop
 800dbd2:	e004      	b.n	800dbde <USBH_Process+0x4ce>
      break;
 800dbd4:	bf00      	nop
 800dbd6:	e002      	b.n	800dbde <USBH_Process+0x4ce>
    break;
 800dbd8:	bf00      	nop
 800dbda:	e000      	b.n	800dbde <USBH_Process+0x4ce>
      break;
 800dbdc:	bf00      	nop
  }
  return USBH_OK;
 800dbde:	2300      	movs	r3, #0
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3710      	adds	r7, #16
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b088      	sub	sp, #32
 800dbec:	af04      	add	r7, sp, #16
 800dbee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	785b      	ldrb	r3, [r3, #1]
 800dbfc:	2b07      	cmp	r3, #7
 800dbfe:	f200 8208 	bhi.w	800e012 <USBH_HandleEnum+0x42a>
 800dc02:	a201      	add	r2, pc, #4	; (adr r2, 800dc08 <USBH_HandleEnum+0x20>)
 800dc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc08:	0800dc29 	.word	0x0800dc29
 800dc0c:	0800dce7 	.word	0x0800dce7
 800dc10:	0800dd51 	.word	0x0800dd51
 800dc14:	0800dddf 	.word	0x0800dddf
 800dc18:	0800de49 	.word	0x0800de49
 800dc1c:	0800deb9 	.word	0x0800deb9
 800dc20:	0800df55 	.word	0x0800df55
 800dc24:	0800dfd3 	.word	0x0800dfd3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800dc28:	2108      	movs	r1, #8
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 faea 	bl	800e204 <USBH_Get_DevDesc>
 800dc30:	4603      	mov	r3, r0
 800dc32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dc34:	7bbb      	ldrb	r3, [r7, #14]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d130      	bne.n	800dc9c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2201      	movs	r2, #1
 800dc48:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	7919      	ldrb	r1, [r3, #4]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800dc5a:	687a      	ldr	r2, [r7, #4]
 800dc5c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800dc5e:	b292      	uxth	r2, r2
 800dc60:	9202      	str	r2, [sp, #8]
 800dc62:	2200      	movs	r2, #0
 800dc64:	9201      	str	r2, [sp, #4]
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2280      	movs	r2, #128	; 0x80
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f001 f9ef 	bl	800f050 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	7959      	ldrb	r1, [r3, #5]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800dc86:	b292      	uxth	r2, r2
 800dc88:	9202      	str	r2, [sp, #8]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	9201      	str	r2, [sp, #4]
 800dc8e:	9300      	str	r3, [sp, #0]
 800dc90:	4603      	mov	r3, r0
 800dc92:	2200      	movs	r2, #0
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f001 f9db 	bl	800f050 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800dc9a:	e1bc      	b.n	800e016 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dc9c:	7bbb      	ldrb	r3, [r7, #14]
 800dc9e:	2b03      	cmp	r3, #3
 800dca0:	f040 81b9 	bne.w	800e016 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dcaa:	3301      	adds	r3, #1
 800dcac:	b2da      	uxtb	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dcba:	2b03      	cmp	r3, #3
 800dcbc:	d903      	bls.n	800dcc6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	220d      	movs	r2, #13
 800dcc2:	701a      	strb	r2, [r3, #0]
      break;
 800dcc4:	e1a7      	b.n	800e016 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	795b      	ldrb	r3, [r3, #5]
 800dcca:	4619      	mov	r1, r3
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f001 fa0f 	bl	800f0f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	791b      	ldrb	r3, [r3, #4]
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f001 fa09 	bl	800f0f0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	701a      	strb	r2, [r3, #0]
      break;
 800dce4:	e197      	b.n	800e016 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800dce6:	2112      	movs	r1, #18
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 fa8b 	bl	800e204 <USBH_Get_DevDesc>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dcf2:	7bbb      	ldrb	r3, [r7, #14]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d103      	bne.n	800dd00 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2202      	movs	r2, #2
 800dcfc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800dcfe:	e18c      	b.n	800e01a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dd00:	7bbb      	ldrb	r3, [r7, #14]
 800dd02:	2b03      	cmp	r3, #3
 800dd04:	f040 8189 	bne.w	800e01a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dd0e:	3301      	adds	r3, #1
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dd1e:	2b03      	cmp	r3, #3
 800dd20:	d903      	bls.n	800dd2a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	220d      	movs	r2, #13
 800dd26:	701a      	strb	r2, [r3, #0]
      break;
 800dd28:	e177      	b.n	800e01a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	795b      	ldrb	r3, [r3, #5]
 800dd2e:	4619      	mov	r1, r3
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f001 f9dd 	bl	800f0f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	791b      	ldrb	r3, [r3, #4]
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f001 f9d7 	bl	800f0f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2200      	movs	r2, #0
 800dd46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	701a      	strb	r2, [r3, #0]
      break;
 800dd4e:	e164      	b.n	800e01a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800dd50:	2101      	movs	r1, #1
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 fb02 	bl	800e35c <USBH_SetAddress>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dd5c:	7bbb      	ldrb	r3, [r7, #14]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d132      	bne.n	800ddc8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800dd62:	2002      	movs	r0, #2
 800dd64:	f001 fcba 	bl	800f6dc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2203      	movs	r2, #3
 800dd74:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	7919      	ldrb	r1, [r3, #4]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800dd8a:	b292      	uxth	r2, r2
 800dd8c:	9202      	str	r2, [sp, #8]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	9201      	str	r2, [sp, #4]
 800dd92:	9300      	str	r3, [sp, #0]
 800dd94:	4603      	mov	r3, r0
 800dd96:	2280      	movs	r2, #128	; 0x80
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f001 f959 	bl	800f050 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	7959      	ldrb	r1, [r3, #5]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ddb2:	b292      	uxth	r2, r2
 800ddb4:	9202      	str	r2, [sp, #8]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	9201      	str	r2, [sp, #4]
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f001 f945 	bl	800f050 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ddc6:	e12a      	b.n	800e01e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ddc8:	7bbb      	ldrb	r3, [r7, #14]
 800ddca:	2b03      	cmp	r3, #3
 800ddcc:	f040 8127 	bne.w	800e01e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	220d      	movs	r2, #13
 800ddd4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	705a      	strb	r2, [r3, #1]
      break;
 800dddc:	e11f      	b.n	800e01e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ddde:	2109      	movs	r1, #9
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 fa37 	bl	800e254 <USBH_Get_CfgDesc>
 800dde6:	4603      	mov	r3, r0
 800dde8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ddea:	7bbb      	ldrb	r3, [r7, #14]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d103      	bne.n	800ddf8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2204      	movs	r2, #4
 800ddf4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ddf6:	e114      	b.n	800e022 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ddf8:	7bbb      	ldrb	r3, [r7, #14]
 800ddfa:	2b03      	cmp	r3, #3
 800ddfc:	f040 8111 	bne.w	800e022 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800de06:	3301      	adds	r3, #1
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800de16:	2b03      	cmp	r3, #3
 800de18:	d903      	bls.n	800de22 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	220d      	movs	r2, #13
 800de1e:	701a      	strb	r2, [r3, #0]
      break;
 800de20:	e0ff      	b.n	800e022 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	795b      	ldrb	r3, [r3, #5]
 800de26:	4619      	mov	r1, r3
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f001 f961 	bl	800f0f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	791b      	ldrb	r3, [r3, #4]
 800de32:	4619      	mov	r1, r3
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f001 f95b 	bl	800f0f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	701a      	strb	r2, [r3, #0]
      break;
 800de46:	e0ec      	b.n	800e022 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800de4e:	4619      	mov	r1, r3
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 f9ff 	bl	800e254 <USBH_Get_CfgDesc>
 800de56:	4603      	mov	r3, r0
 800de58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800de5a:	7bbb      	ldrb	r3, [r7, #14]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d103      	bne.n	800de68 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2205      	movs	r2, #5
 800de64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800de66:	e0de      	b.n	800e026 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800de68:	7bbb      	ldrb	r3, [r7, #14]
 800de6a:	2b03      	cmp	r3, #3
 800de6c:	f040 80db 	bne.w	800e026 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800de76:	3301      	adds	r3, #1
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800de86:	2b03      	cmp	r3, #3
 800de88:	d903      	bls.n	800de92 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	220d      	movs	r2, #13
 800de8e:	701a      	strb	r2, [r3, #0]
      break;
 800de90:	e0c9      	b.n	800e026 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	795b      	ldrb	r3, [r3, #5]
 800de96:	4619      	mov	r1, r3
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f001 f929 	bl	800f0f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	791b      	ldrb	r3, [r3, #4]
 800dea2:	4619      	mov	r1, r3
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f001 f923 	bl	800f0f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2200      	movs	r2, #0
 800deb4:	701a      	strb	r2, [r3, #0]
      break;
 800deb6:	e0b6      	b.n	800e026 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d036      	beq.n	800df30 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800dece:	23ff      	movs	r3, #255	; 0xff
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f000 f9e3 	bl	800e29c <USBH_Get_StringDesc>
 800ded6:	4603      	mov	r3, r0
 800ded8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800deda:	7bbb      	ldrb	r3, [r7, #14]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d111      	bne.n	800df04 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2206      	movs	r2, #6
 800dee4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2205      	movs	r2, #5
 800deea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800defa:	2200      	movs	r2, #0
 800defc:	4619      	mov	r1, r3
 800defe:	f7fc fcad 	bl	800a85c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800df02:	e092      	b.n	800e02a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800df04:	7bbb      	ldrb	r3, [r7, #14]
 800df06:	2b03      	cmp	r3, #3
 800df08:	f040 808f 	bne.w	800e02a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2206      	movs	r2, #6
 800df10:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2205      	movs	r2, #5
 800df16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800df26:	2200      	movs	r2, #0
 800df28:	4619      	mov	r1, r3
 800df2a:	f7fc fc97 	bl	800a85c <osMessagePut>
      break;
 800df2e:	e07c      	b.n	800e02a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2206      	movs	r2, #6
 800df34:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2205      	movs	r2, #5
 800df3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800df4a:	2200      	movs	r2, #0
 800df4c:	4619      	mov	r1, r3
 800df4e:	f7fc fc85 	bl	800a85c <osMessagePut>
      break;
 800df52:	e06a      	b.n	800e02a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d027      	beq.n	800dfae <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800df6a:	23ff      	movs	r3, #255	; 0xff
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 f995 	bl	800e29c <USBH_Get_StringDesc>
 800df72:	4603      	mov	r3, r0
 800df74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800df76:	7bbb      	ldrb	r3, [r7, #14]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d103      	bne.n	800df84 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2207      	movs	r2, #7
 800df80:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800df82:	e054      	b.n	800e02e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800df84:	7bbb      	ldrb	r3, [r7, #14]
 800df86:	2b03      	cmp	r3, #3
 800df88:	d151      	bne.n	800e02e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2207      	movs	r2, #7
 800df8e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2205      	movs	r2, #5
 800df94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	f7fc fc58 	bl	800a85c <osMessagePut>
      break;
 800dfac:	e03f      	b.n	800e02e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2207      	movs	r2, #7
 800dfb2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2205      	movs	r2, #5
 800dfb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dfc8:	2200      	movs	r2, #0
 800dfca:	4619      	mov	r1, r3
 800dfcc:	f7fc fc46 	bl	800a85c <osMessagePut>
      break;
 800dfd0:	e02d      	b.n	800e02e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d017      	beq.n	800e00c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dfe8:	23ff      	movs	r3, #255	; 0xff
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f000 f956 	bl	800e29c <USBH_Get_StringDesc>
 800dff0:	4603      	mov	r3, r0
 800dff2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dff4:	7bbb      	ldrb	r3, [r7, #14]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d102      	bne.n	800e000 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800dffa:	2300      	movs	r3, #0
 800dffc:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800dffe:	e018      	b.n	800e032 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e000:	7bbb      	ldrb	r3, [r7, #14]
 800e002:	2b03      	cmp	r3, #3
 800e004:	d115      	bne.n	800e032 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800e006:	2300      	movs	r3, #0
 800e008:	73fb      	strb	r3, [r7, #15]
      break;
 800e00a:	e012      	b.n	800e032 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800e00c:	2300      	movs	r3, #0
 800e00e:	73fb      	strb	r3, [r7, #15]
      break;
 800e010:	e00f      	b.n	800e032 <USBH_HandleEnum+0x44a>

    default:
      break;
 800e012:	bf00      	nop
 800e014:	e00e      	b.n	800e034 <USBH_HandleEnum+0x44c>
      break;
 800e016:	bf00      	nop
 800e018:	e00c      	b.n	800e034 <USBH_HandleEnum+0x44c>
      break;
 800e01a:	bf00      	nop
 800e01c:	e00a      	b.n	800e034 <USBH_HandleEnum+0x44c>
      break;
 800e01e:	bf00      	nop
 800e020:	e008      	b.n	800e034 <USBH_HandleEnum+0x44c>
      break;
 800e022:	bf00      	nop
 800e024:	e006      	b.n	800e034 <USBH_HandleEnum+0x44c>
      break;
 800e026:	bf00      	nop
 800e028:	e004      	b.n	800e034 <USBH_HandleEnum+0x44c>
      break;
 800e02a:	bf00      	nop
 800e02c:	e002      	b.n	800e034 <USBH_HandleEnum+0x44c>
      break;
 800e02e:	bf00      	nop
 800e030:	e000      	b.n	800e034 <USBH_HandleEnum+0x44c>
      break;
 800e032:	bf00      	nop
  }
  return Status;
 800e034:	7bfb      	ldrb	r3, [r7, #15]
}
 800e036:	4618      	mov	r0, r3
 800e038:	3710      	adds	r7, #16
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop

0800e040 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	683a      	ldr	r2, [r7, #0]
 800e04e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800e052:	bf00      	nop
 800e054:	370c      	adds	r7, #12
 800e056:	46bd      	mov	sp, r7
 800e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05c:	4770      	bx	lr

0800e05e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e05e:	b580      	push	{r7, lr}
 800e060:	b082      	sub	sp, #8
 800e062:	af00      	add	r7, sp, #0
 800e064:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e06c:	1c5a      	adds	r2, r3, #1
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 f804 	bl	800e082 <USBH_HandleSof>
}
 800e07a:	bf00      	nop
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b082      	sub	sp, #8
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	2b0b      	cmp	r3, #11
 800e092:	d10a      	bne.n	800e0aa <USBH_HandleSof+0x28>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d005      	beq.n	800e0aa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e0a4:	699b      	ldr	r3, [r3, #24]
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	4798      	blx	r3
  }
}
 800e0aa:	bf00      	nop
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b082      	sub	sp, #8
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2201      	movs	r2, #1
 800e0be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	4619      	mov	r1, r3
 800e0da:	f7fc fbbf 	bl	800a85c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800e0de:	bf00      	nop
}
 800e0e0:	3708      	adds	r7, #8
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}

0800e0e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e0e6:	b480      	push	{r7}
 800e0e8:	b083      	sub	sp, #12
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e0f6:	bf00      	nop
}
 800e0f8:	370c      	adds	r7, #12
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e100:	4770      	bx	lr

0800e102 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e102:	b580      	push	{r7, lr}
 800e104:	b082      	sub	sp, #8
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2201      	movs	r2, #1
 800e10e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2200      	movs	r2, #0
 800e116:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2201      	movs	r2, #1
 800e126:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e136:	2200      	movs	r2, #0
 800e138:	4619      	mov	r1, r3
 800e13a:	f7fc fb8f 	bl	800a85c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e13e:	2300      	movs	r3, #0
}
 800e140:	4618      	mov	r0, r3
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2201      	movs	r2, #1
 800e154:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f001 f96e 	bl	800f44a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	791b      	ldrb	r3, [r3, #4]
 800e172:	4619      	mov	r1, r3
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 ffbb 	bl	800f0f0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	795b      	ldrb	r3, [r3, #5]
 800e17e:	4619      	mov	r1, r3
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 ffb5 	bl	800f0f0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2201      	movs	r2, #1
 800e18a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e19a:	2200      	movs	r2, #0
 800e19c:	4619      	mov	r1, r3
 800e19e:	f7fc fb5d 	bl	800a85c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e1a2:	2300      	movs	r3, #0
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b086      	sub	sp, #24
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800e1ba:	f107 030c 	add.w	r3, r7, #12
 800e1be:	f04f 32ff 	mov.w	r2, #4294967295
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7fc fb8a 	bl	800a8dc <osMessageGet>
    if (event.status == osEventMessage)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2b10      	cmp	r3, #16
 800e1cc:	d1f2      	bne.n	800e1b4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7ff fa9e 	bl	800d710 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800e1d4:	e7ee      	b.n	800e1b4 <USBH_Process_OS+0x8>

0800e1d6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b082      	sub	sp, #8
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	f7fc fb31 	bl	800a85c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800e1fa:	2300      	movs	r3, #0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b086      	sub	sp, #24
 800e208:	af02      	add	r7, sp, #8
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	460b      	mov	r3, r1
 800e20e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800e216:	78fb      	ldrb	r3, [r7, #3]
 800e218:	b29b      	uxth	r3, r3
 800e21a:	9300      	str	r3, [sp, #0]
 800e21c:	4613      	mov	r3, r2
 800e21e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e222:	2100      	movs	r1, #0
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 f864 	bl	800e2f2 <USBH_GetDescriptor>
 800e22a:	4603      	mov	r3, r0
 800e22c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800e22e:	7bfb      	ldrb	r3, [r7, #15]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d10a      	bne.n	800e24a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f203 3026 	addw	r0, r3, #806	; 0x326
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e240:	78fa      	ldrb	r2, [r7, #3]
 800e242:	b292      	uxth	r2, r2
 800e244:	4619      	mov	r1, r3
 800e246:	f000 f918 	bl	800e47a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800e24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3710      	adds	r7, #16
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af02      	add	r7, sp, #8
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	460b      	mov	r3, r1
 800e25e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	331c      	adds	r3, #28
 800e264:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e266:	887b      	ldrh	r3, [r7, #2]
 800e268:	9300      	str	r3, [sp, #0]
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e270:	2100      	movs	r1, #0
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 f83d 	bl	800e2f2 <USBH_GetDescriptor>
 800e278:	4603      	mov	r3, r0
 800e27a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800e27c:	7bfb      	ldrb	r3, [r7, #15]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d107      	bne.n	800e292 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800e282:	887b      	ldrh	r3, [r7, #2]
 800e284:	461a      	mov	r2, r3
 800e286:	68b9      	ldr	r1, [r7, #8]
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 f987 	bl	800e59c <USBH_ParseCfgDesc>
 800e28e:	4603      	mov	r3, r0
 800e290:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e292:	7bfb      	ldrb	r3, [r7, #15]
}
 800e294:	4618      	mov	r0, r3
 800e296:	3710      	adds	r7, #16
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b088      	sub	sp, #32
 800e2a0:	af02      	add	r7, sp, #8
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	607a      	str	r2, [r7, #4]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	72fb      	strb	r3, [r7, #11]
 800e2ac:	4613      	mov	r3, r2
 800e2ae:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800e2b0:	7afb      	ldrb	r3, [r7, #11]
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e2b8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800e2c0:	893b      	ldrh	r3, [r7, #8]
 800e2c2:	9300      	str	r3, [sp, #0]
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	2100      	movs	r1, #0
 800e2c8:	68f8      	ldr	r0, [r7, #12]
 800e2ca:	f000 f812 	bl	800e2f2 <USBH_GetDescriptor>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800e2d2:	7dfb      	ldrb	r3, [r7, #23]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d107      	bne.n	800e2e8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e2de:	893a      	ldrh	r2, [r7, #8]
 800e2e0:	6879      	ldr	r1, [r7, #4]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f000 fb24 	bl	800e930 <USBH_ParseStringDesc>
  }

  return status;
 800e2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3718      	adds	r7, #24
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}

0800e2f2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800e2f2:	b580      	push	{r7, lr}
 800e2f4:	b084      	sub	sp, #16
 800e2f6:	af00      	add	r7, sp, #0
 800e2f8:	60f8      	str	r0, [r7, #12]
 800e2fa:	607b      	str	r3, [r7, #4]
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	72fb      	strb	r3, [r7, #11]
 800e300:	4613      	mov	r3, r2
 800e302:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	789b      	ldrb	r3, [r3, #2]
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d11c      	bne.n	800e346 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e30c:	7afb      	ldrb	r3, [r7, #11]
 800e30e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e312:	b2da      	uxtb	r2, r3
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2206      	movs	r2, #6
 800e31c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	893a      	ldrh	r2, [r7, #8]
 800e322:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e324:	893b      	ldrh	r3, [r7, #8]
 800e326:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e32a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e32e:	d104      	bne.n	800e33a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f240 4209 	movw	r2, #1033	; 0x409
 800e336:	829a      	strh	r2, [r3, #20]
 800e338:	e002      	b.n	800e340 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2200      	movs	r2, #0
 800e33e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	8b3a      	ldrh	r2, [r7, #24]
 800e344:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e346:	8b3b      	ldrh	r3, [r7, #24]
 800e348:	461a      	mov	r2, r3
 800e34a:	6879      	ldr	r1, [r7, #4]
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f000 fb3d 	bl	800e9cc <USBH_CtlReq>
 800e352:	4603      	mov	r3, r0
}
 800e354:	4618      	mov	r0, r3
 800e356:	3710      	adds	r7, #16
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	460b      	mov	r3, r1
 800e366:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	789b      	ldrb	r3, [r3, #2]
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d10f      	bne.n	800e390 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2200      	movs	r2, #0
 800e374:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2205      	movs	r2, #5
 800e37a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e37c:	78fb      	ldrb	r3, [r7, #3]
 800e37e:	b29a      	uxth	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2200      	movs	r2, #0
 800e38e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e390:	2200      	movs	r2, #0
 800e392:	2100      	movs	r1, #0
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 fb19 	bl	800e9cc <USBH_CtlReq>
 800e39a:	4603      	mov	r3, r0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3708      	adds	r7, #8
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	789b      	ldrb	r3, [r3, #2]
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d10e      	bne.n	800e3d6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2209      	movs	r2, #9
 800e3c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	887a      	ldrh	r2, [r7, #2]
 800e3c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	2100      	movs	r1, #0
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 faf6 	bl	800e9cc <USBH_CtlReq>
 800e3e0:	4603      	mov	r3, r0
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3708      	adds	r7, #8
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b082      	sub	sp, #8
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	789b      	ldrb	r3, [r3, #2]
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d10f      	bne.n	800e41e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2203      	movs	r2, #3
 800e408:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e40a:	78fb      	ldrb	r3, [r7, #3]
 800e40c:	b29a      	uxth	r2, r3
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2200      	movs	r2, #0
 800e416:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2200      	movs	r2, #0
 800e41c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e41e:	2200      	movs	r2, #0
 800e420:	2100      	movs	r1, #0
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 fad2 	bl	800e9cc <USBH_CtlReq>
 800e428:	4603      	mov	r3, r0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3708      	adds	r7, #8
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}

0800e432 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e432:	b580      	push	{r7, lr}
 800e434:	b082      	sub	sp, #8
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
 800e43a:	460b      	mov	r3, r1
 800e43c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	789b      	ldrb	r3, [r3, #2]
 800e442:	2b01      	cmp	r3, #1
 800e444:	d10f      	bne.n	800e466 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2202      	movs	r2, #2
 800e44a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2201      	movs	r2, #1
 800e450:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2200      	movs	r2, #0
 800e456:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e458:	78fb      	ldrb	r3, [r7, #3]
 800e45a:	b29a      	uxth	r2, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800e466:	2200      	movs	r2, #0
 800e468:	2100      	movs	r1, #0
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 faae 	bl	800e9cc <USBH_CtlReq>
 800e470:	4603      	mov	r3, r0
}
 800e472:	4618      	mov	r0, r3
 800e474:	3708      	adds	r7, #8
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800e47a:	b480      	push	{r7}
 800e47c:	b085      	sub	sp, #20
 800e47e:	af00      	add	r7, sp, #0
 800e480:	60f8      	str	r0, [r7, #12]
 800e482:	60b9      	str	r1, [r7, #8]
 800e484:	4613      	mov	r3, r2
 800e486:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	781a      	ldrb	r2, [r3, #0]
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	785a      	ldrb	r2, [r3, #1]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	3302      	adds	r3, #2
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	b29a      	uxth	r2, r3
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	3303      	adds	r3, #3
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	021b      	lsls	r3, r3, #8
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	4313      	orrs	r3, r2
 800e4ae:	b29a      	uxth	r2, r3
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	791a      	ldrb	r2, [r3, #4]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	795a      	ldrb	r2, [r3, #5]
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	799a      	ldrb	r2, [r3, #6]
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	79da      	ldrb	r2, [r3, #7]
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	79db      	ldrb	r3, [r3, #7]
 800e4d8:	2b20      	cmp	r3, #32
 800e4da:	dc11      	bgt.n	800e500 <USBH_ParseDevDesc+0x86>
 800e4dc:	2b08      	cmp	r3, #8
 800e4de:	db16      	blt.n	800e50e <USBH_ParseDevDesc+0x94>
 800e4e0:	3b08      	subs	r3, #8
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e4e8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800e4ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	bf14      	ite	ne
 800e4f4:	2301      	movne	r3, #1
 800e4f6:	2300      	moveq	r3, #0
 800e4f8:	b2db      	uxtb	r3, r3
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d102      	bne.n	800e504 <USBH_ParseDevDesc+0x8a>
 800e4fe:	e006      	b.n	800e50e <USBH_ParseDevDesc+0x94>
 800e500:	2b40      	cmp	r3, #64	; 0x40
 800e502:	d104      	bne.n	800e50e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	79da      	ldrb	r2, [r3, #7]
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	71da      	strb	r2, [r3, #7]
      break;
 800e50c:	e003      	b.n	800e516 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2240      	movs	r2, #64	; 0x40
 800e512:	71da      	strb	r2, [r3, #7]
      break;
 800e514:	bf00      	nop
  }

  if (length > 8U)
 800e516:	88fb      	ldrh	r3, [r7, #6]
 800e518:	2b08      	cmp	r3, #8
 800e51a:	d939      	bls.n	800e590 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	3308      	adds	r3, #8
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	b29a      	uxth	r2, r3
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	3309      	adds	r3, #9
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	021b      	lsls	r3, r3, #8
 800e52e:	b29b      	uxth	r3, r3
 800e530:	4313      	orrs	r3, r2
 800e532:	b29a      	uxth	r2, r3
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	330a      	adds	r3, #10
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	b29a      	uxth	r2, r3
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	330b      	adds	r3, #11
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	b29b      	uxth	r3, r3
 800e548:	021b      	lsls	r3, r3, #8
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	4313      	orrs	r3, r2
 800e54e:	b29a      	uxth	r2, r3
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	330c      	adds	r3, #12
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	b29a      	uxth	r2, r3
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	330d      	adds	r3, #13
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	b29b      	uxth	r3, r3
 800e564:	021b      	lsls	r3, r3, #8
 800e566:	b29b      	uxth	r3, r3
 800e568:	4313      	orrs	r3, r2
 800e56a:	b29a      	uxth	r2, r3
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	7b9a      	ldrb	r2, [r3, #14]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	7bda      	ldrb	r2, [r3, #15]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	7c1a      	ldrb	r2, [r3, #16]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	7c5a      	ldrb	r2, [r3, #17]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	745a      	strb	r2, [r3, #17]
  }
}
 800e590:	bf00      	nop
 800e592:	3714      	adds	r7, #20
 800e594:	46bd      	mov	sp, r7
 800e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59a:	4770      	bx	lr

0800e59c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b08c      	sub	sp, #48	; 0x30
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	60b9      	str	r1, [r7, #8]
 800e5a6:	4613      	mov	r3, r2
 800e5a8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e5b0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	781a      	ldrb	r2, [r3, #0]
 800e5d0:	6a3b      	ldr	r3, [r7, #32]
 800e5d2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	785a      	ldrb	r2, [r3, #1]
 800e5d8:	6a3b      	ldr	r3, [r7, #32]
 800e5da:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	3302      	adds	r3, #2
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	b29a      	uxth	r2, r3
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	3303      	adds	r3, #3
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	021b      	lsls	r3, r3, #8
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5f8:	bf28      	it	cs
 800e5fa:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800e5fe:	b29a      	uxth	r2, r3
 800e600:	6a3b      	ldr	r3, [r7, #32]
 800e602:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	791a      	ldrb	r2, [r3, #4]
 800e608:	6a3b      	ldr	r3, [r7, #32]
 800e60a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	795a      	ldrb	r2, [r3, #5]
 800e610:	6a3b      	ldr	r3, [r7, #32]
 800e612:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	799a      	ldrb	r2, [r3, #6]
 800e618:	6a3b      	ldr	r3, [r7, #32]
 800e61a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	79da      	ldrb	r2, [r3, #7]
 800e620:	6a3b      	ldr	r3, [r7, #32]
 800e622:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	7a1a      	ldrb	r2, [r3, #8]
 800e628:	6a3b      	ldr	r3, [r7, #32]
 800e62a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800e62c:	6a3b      	ldr	r3, [r7, #32]
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	2b09      	cmp	r3, #9
 800e632:	d002      	beq.n	800e63a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800e634:	6a3b      	ldr	r3, [r7, #32]
 800e636:	2209      	movs	r2, #9
 800e638:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e63a:	88fb      	ldrh	r3, [r7, #6]
 800e63c:	2b09      	cmp	r3, #9
 800e63e:	f240 809d 	bls.w	800e77c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800e642:	2309      	movs	r3, #9
 800e644:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e646:	2300      	movs	r3, #0
 800e648:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e64a:	e081      	b.n	800e750 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e64c:	f107 0316 	add.w	r3, r7, #22
 800e650:	4619      	mov	r1, r3
 800e652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e654:	f000 f99f 	bl	800e996 <USBH_GetNextDesc>
 800e658:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800e65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65c:	785b      	ldrb	r3, [r3, #1]
 800e65e:	2b04      	cmp	r3, #4
 800e660:	d176      	bne.n	800e750 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800e662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	2b09      	cmp	r3, #9
 800e668:	d002      	beq.n	800e670 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800e66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66c:	2209      	movs	r2, #9
 800e66e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800e670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e674:	221a      	movs	r2, #26
 800e676:	fb02 f303 	mul.w	r3, r2, r3
 800e67a:	3308      	adds	r3, #8
 800e67c:	6a3a      	ldr	r2, [r7, #32]
 800e67e:	4413      	add	r3, r2
 800e680:	3302      	adds	r3, #2
 800e682:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e686:	69f8      	ldr	r0, [r7, #28]
 800e688:	f000 f87e 	bl	800e788 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e68c:	2300      	movs	r3, #0
 800e68e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800e692:	2300      	movs	r3, #0
 800e694:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e696:	e043      	b.n	800e720 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e698:	f107 0316 	add.w	r3, r7, #22
 800e69c:	4619      	mov	r1, r3
 800e69e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6a0:	f000 f979 	bl	800e996 <USBH_GetNextDesc>
 800e6a4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a8:	785b      	ldrb	r3, [r3, #1]
 800e6aa:	2b05      	cmp	r3, #5
 800e6ac:	d138      	bne.n	800e720 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	795b      	ldrb	r3, [r3, #5]
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d10f      	bne.n	800e6d6 <USBH_ParseCfgDesc+0x13a>
 800e6b6:	69fb      	ldr	r3, [r7, #28]
 800e6b8:	799b      	ldrb	r3, [r3, #6]
 800e6ba:	2b02      	cmp	r3, #2
 800e6bc:	d10b      	bne.n	800e6d6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e6be:	69fb      	ldr	r3, [r7, #28]
 800e6c0:	79db      	ldrb	r3, [r3, #7]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d10f      	bne.n	800e6e6 <USBH_ParseCfgDesc+0x14a>
 800e6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c8:	781b      	ldrb	r3, [r3, #0]
 800e6ca:	2b09      	cmp	r3, #9
 800e6cc:	d00b      	beq.n	800e6e6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800e6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d0:	2209      	movs	r2, #9
 800e6d2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e6d4:	e007      	b.n	800e6e6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800e6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	2b07      	cmp	r3, #7
 800e6dc:	d004      	beq.n	800e6e8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800e6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e0:	2207      	movs	r2, #7
 800e6e2:	701a      	strb	r2, [r3, #0]
 800e6e4:	e000      	b.n	800e6e8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e6e6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e6e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e6f0:	3201      	adds	r2, #1
 800e6f2:	00d2      	lsls	r2, r2, #3
 800e6f4:	211a      	movs	r1, #26
 800e6f6:	fb01 f303 	mul.w	r3, r1, r3
 800e6fa:	4413      	add	r3, r2
 800e6fc:	3308      	adds	r3, #8
 800e6fe:	6a3a      	ldr	r2, [r7, #32]
 800e700:	4413      	add	r3, r2
 800e702:	3304      	adds	r3, #4
 800e704:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800e706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e708:	69b9      	ldr	r1, [r7, #24]
 800e70a:	68f8      	ldr	r0, [r7, #12]
 800e70c:	f000 f86b 	bl	800e7e6 <USBH_ParseEPDesc>
 800e710:	4603      	mov	r3, r0
 800e712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800e716:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e71a:	3301      	adds	r3, #1
 800e71c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e720:	69fb      	ldr	r3, [r7, #28]
 800e722:	791b      	ldrb	r3, [r3, #4]
 800e724:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e728:	429a      	cmp	r2, r3
 800e72a:	d204      	bcs.n	800e736 <USBH_ParseCfgDesc+0x19a>
 800e72c:	6a3b      	ldr	r3, [r7, #32]
 800e72e:	885a      	ldrh	r2, [r3, #2]
 800e730:	8afb      	ldrh	r3, [r7, #22]
 800e732:	429a      	cmp	r2, r3
 800e734:	d8b0      	bhi.n	800e698 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800e736:	69fb      	ldr	r3, [r7, #28]
 800e738:	791b      	ldrb	r3, [r3, #4]
 800e73a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e73e:	429a      	cmp	r2, r3
 800e740:	d201      	bcs.n	800e746 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800e742:	2303      	movs	r3, #3
 800e744:	e01c      	b.n	800e780 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800e746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e74a:	3301      	adds	r3, #1
 800e74c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e754:	2b01      	cmp	r3, #1
 800e756:	d805      	bhi.n	800e764 <USBH_ParseCfgDesc+0x1c8>
 800e758:	6a3b      	ldr	r3, [r7, #32]
 800e75a:	885a      	ldrh	r2, [r3, #2]
 800e75c:	8afb      	ldrh	r3, [r7, #22]
 800e75e:	429a      	cmp	r2, r3
 800e760:	f63f af74 	bhi.w	800e64c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800e764:	6a3b      	ldr	r3, [r7, #32]
 800e766:	791b      	ldrb	r3, [r3, #4]
 800e768:	2b02      	cmp	r3, #2
 800e76a:	bf28      	it	cs
 800e76c:	2302      	movcs	r3, #2
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e774:	429a      	cmp	r2, r3
 800e776:	d201      	bcs.n	800e77c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800e778:	2303      	movs	r3, #3
 800e77a:	e001      	b.n	800e780 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800e77c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e780:	4618      	mov	r0, r3
 800e782:	3730      	adds	r7, #48	; 0x30
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	781a      	ldrb	r2, [r3, #0]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	785a      	ldrb	r2, [r3, #1]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	789a      	ldrb	r2, [r3, #2]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	78da      	ldrb	r2, [r3, #3]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	791a      	ldrb	r2, [r3, #4]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	795a      	ldrb	r2, [r3, #5]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	799a      	ldrb	r2, [r3, #6]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	79da      	ldrb	r2, [r3, #7]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	7a1a      	ldrb	r2, [r3, #8]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	721a      	strb	r2, [r3, #8]
}
 800e7da:	bf00      	nop
 800e7dc:	370c      	adds	r7, #12
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800e7e6:	b480      	push	{r7}
 800e7e8:	b087      	sub	sp, #28
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	60f8      	str	r0, [r7, #12]
 800e7ee:	60b9      	str	r1, [r7, #8]
 800e7f0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	781a      	ldrb	r2, [r3, #0]
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	785a      	ldrb	r2, [r3, #1]
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	789a      	ldrb	r2, [r3, #2]
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	78da      	ldrb	r2, [r3, #3]
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	3304      	adds	r3, #4
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	3305      	adds	r3, #5
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	b29b      	uxth	r3, r3
 800e826:	021b      	lsls	r3, r3, #8
 800e828:	b29b      	uxth	r3, r3
 800e82a:	4313      	orrs	r3, r2
 800e82c:	b29a      	uxth	r2, r3
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	799a      	ldrb	r2, [r3, #6]
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	889b      	ldrh	r3, [r3, #4]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d102      	bne.n	800e848 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800e842:	2303      	movs	r3, #3
 800e844:	75fb      	strb	r3, [r7, #23]
 800e846:	e033      	b.n	800e8b0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	889b      	ldrh	r3, [r3, #4]
 800e84c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e850:	f023 0307 	bic.w	r3, r3, #7
 800e854:	b29a      	uxth	r2, r3
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	889b      	ldrh	r3, [r3, #4]
 800e85e:	b21a      	sxth	r2, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	3304      	adds	r3, #4
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	b299      	uxth	r1, r3
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	3305      	adds	r3, #5
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	b29b      	uxth	r3, r3
 800e870:	021b      	lsls	r3, r3, #8
 800e872:	b29b      	uxth	r3, r3
 800e874:	430b      	orrs	r3, r1
 800e876:	b29b      	uxth	r3, r3
 800e878:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d110      	bne.n	800e8a2 <USBH_ParseEPDesc+0xbc>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	3304      	adds	r3, #4
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	b299      	uxth	r1, r3
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	3305      	adds	r3, #5
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	b29b      	uxth	r3, r3
 800e890:	021b      	lsls	r3, r3, #8
 800e892:	b29b      	uxth	r3, r3
 800e894:	430b      	orrs	r3, r1
 800e896:	b29b      	uxth	r3, r3
 800e898:	b21b      	sxth	r3, r3
 800e89a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e89e:	b21b      	sxth	r3, r3
 800e8a0:	e001      	b.n	800e8a6 <USBH_ParseEPDesc+0xc0>
 800e8a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	b21b      	sxth	r3, r3
 800e8aa:	b29a      	uxth	r2, r3
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d116      	bne.n	800e8e8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	78db      	ldrb	r3, [r3, #3]
 800e8be:	f003 0303 	and.w	r3, r3, #3
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	d005      	beq.n	800e8d2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	78db      	ldrb	r3, [r3, #3]
 800e8ca:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e8ce:	2b03      	cmp	r3, #3
 800e8d0:	d127      	bne.n	800e922 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	799b      	ldrb	r3, [r3, #6]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d003      	beq.n	800e8e2 <USBH_ParseEPDesc+0xfc>
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	799b      	ldrb	r3, [r3, #6]
 800e8de:	2b10      	cmp	r3, #16
 800e8e0:	d91f      	bls.n	800e922 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e8e2:	2303      	movs	r3, #3
 800e8e4:	75fb      	strb	r3, [r7, #23]
 800e8e6:	e01c      	b.n	800e922 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	78db      	ldrb	r3, [r3, #3]
 800e8ec:	f003 0303 	and.w	r3, r3, #3
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d10a      	bne.n	800e90a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	799b      	ldrb	r3, [r3, #6]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d003      	beq.n	800e904 <USBH_ParseEPDesc+0x11e>
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	799b      	ldrb	r3, [r3, #6]
 800e900:	2b10      	cmp	r3, #16
 800e902:	d90e      	bls.n	800e922 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e904:	2303      	movs	r3, #3
 800e906:	75fb      	strb	r3, [r7, #23]
 800e908:	e00b      	b.n	800e922 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	78db      	ldrb	r3, [r3, #3]
 800e90e:	f003 0303 	and.w	r3, r3, #3
 800e912:	2b03      	cmp	r3, #3
 800e914:	d105      	bne.n	800e922 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	799b      	ldrb	r3, [r3, #6]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d101      	bne.n	800e922 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e91e:	2303      	movs	r3, #3
 800e920:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800e922:	7dfb      	ldrb	r3, [r7, #23]
}
 800e924:	4618      	mov	r0, r3
 800e926:	371c      	adds	r7, #28
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e930:	b480      	push	{r7}
 800e932:	b087      	sub	sp, #28
 800e934:	af00      	add	r7, sp, #0
 800e936:	60f8      	str	r0, [r7, #12]
 800e938:	60b9      	str	r1, [r7, #8]
 800e93a:	4613      	mov	r3, r2
 800e93c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	3301      	adds	r3, #1
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	2b03      	cmp	r3, #3
 800e946:	d120      	bne.n	800e98a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	1e9a      	subs	r2, r3, #2
 800e94e:	88fb      	ldrh	r3, [r7, #6]
 800e950:	4293      	cmp	r3, r2
 800e952:	bf28      	it	cs
 800e954:	4613      	movcs	r3, r2
 800e956:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	3302      	adds	r3, #2
 800e95c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e95e:	2300      	movs	r3, #0
 800e960:	82fb      	strh	r3, [r7, #22]
 800e962:	e00b      	b.n	800e97c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e964:	8afb      	ldrh	r3, [r7, #22]
 800e966:	68fa      	ldr	r2, [r7, #12]
 800e968:	4413      	add	r3, r2
 800e96a:	781a      	ldrb	r2, [r3, #0]
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	3301      	adds	r3, #1
 800e974:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e976:	8afb      	ldrh	r3, [r7, #22]
 800e978:	3302      	adds	r3, #2
 800e97a:	82fb      	strh	r3, [r7, #22]
 800e97c:	8afa      	ldrh	r2, [r7, #22]
 800e97e:	8abb      	ldrh	r3, [r7, #20]
 800e980:	429a      	cmp	r2, r3
 800e982:	d3ef      	bcc.n	800e964 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	2200      	movs	r2, #0
 800e988:	701a      	strb	r2, [r3, #0]
  }
}
 800e98a:	bf00      	nop
 800e98c:	371c      	adds	r7, #28
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr

0800e996 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e996:	b480      	push	{r7}
 800e998:	b085      	sub	sp, #20
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	6078      	str	r0, [r7, #4]
 800e99e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	881a      	ldrh	r2, [r3, #0]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	4413      	add	r3, r2
 800e9ac:	b29a      	uxth	r2, r3
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e9be:	68fb      	ldr	r3, [r7, #12]
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3714      	adds	r7, #20
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	60b9      	str	r1, [r7, #8]
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e9da:	2301      	movs	r3, #1
 800e9dc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	789b      	ldrb	r3, [r3, #2]
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	d002      	beq.n	800e9ec <USBH_CtlReq+0x20>
 800e9e6:	2b02      	cmp	r3, #2
 800e9e8:	d01d      	beq.n	800ea26 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800e9ea:	e043      	b.n	800ea74 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	68ba      	ldr	r2, [r7, #8]
 800e9f0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	88fa      	ldrh	r2, [r7, #6]
 800e9f6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2202      	movs	r2, #2
 800ea02:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ea04:	2301      	movs	r3, #1
 800ea06:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2203      	movs	r2, #3
 800ea0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	4619      	mov	r1, r3
 800ea20:	f7fb ff1c 	bl	800a85c <osMessagePut>
      break;
 800ea24:	e026      	b.n	800ea74 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800ea26:	68f8      	ldr	r0, [r7, #12]
 800ea28:	f000 f82a 	bl	800ea80 <USBH_HandleControl>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ea30:	7dfb      	ldrb	r3, [r7, #23]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d002      	beq.n	800ea3c <USBH_CtlReq+0x70>
 800ea36:	7dfb      	ldrb	r3, [r7, #23]
 800ea38:	2b03      	cmp	r3, #3
 800ea3a:	d106      	bne.n	800ea4a <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2201      	movs	r2, #1
 800ea40:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	2200      	movs	r2, #0
 800ea46:	761a      	strb	r2, [r3, #24]
 800ea48:	e005      	b.n	800ea56 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800ea4a:	7dfb      	ldrb	r3, [r7, #23]
 800ea4c:	2b02      	cmp	r3, #2
 800ea4e:	d102      	bne.n	800ea56 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2201      	movs	r2, #1
 800ea54:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2203      	movs	r2, #3
 800ea5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	f7fb fef5 	bl	800a85c <osMessagePut>
      break;
 800ea72:	bf00      	nop
  }
  return status;
 800ea74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3718      	adds	r7, #24
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
	...

0800ea80 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b086      	sub	sp, #24
 800ea84:	af02      	add	r7, sp, #8
 800ea86:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	7e1b      	ldrb	r3, [r3, #24]
 800ea94:	3b01      	subs	r3, #1
 800ea96:	2b0a      	cmp	r3, #10
 800ea98:	f200 8229 	bhi.w	800eeee <USBH_HandleControl+0x46e>
 800ea9c:	a201      	add	r2, pc, #4	; (adr r2, 800eaa4 <USBH_HandleControl+0x24>)
 800ea9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa2:	bf00      	nop
 800eaa4:	0800ead1 	.word	0x0800ead1
 800eaa8:	0800eaeb 	.word	0x0800eaeb
 800eaac:	0800eb8d 	.word	0x0800eb8d
 800eab0:	0800ebb3 	.word	0x0800ebb3
 800eab4:	0800ec3f 	.word	0x0800ec3f
 800eab8:	0800ec69 	.word	0x0800ec69
 800eabc:	0800ed2b 	.word	0x0800ed2b
 800eac0:	0800ed4d 	.word	0x0800ed4d
 800eac4:	0800eddf 	.word	0x0800eddf
 800eac8:	0800ee05 	.word	0x0800ee05
 800eacc:	0800ee97 	.word	0x0800ee97
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f103 0110 	add.w	r1, r3, #16
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	795b      	ldrb	r3, [r3, #5]
 800eada:	461a      	mov	r2, r3
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 fa17 	bl	800ef10 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2202      	movs	r2, #2
 800eae6:	761a      	strb	r2, [r3, #24]
      break;
 800eae8:	e20c      	b.n	800ef04 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	795b      	ldrb	r3, [r3, #5]
 800eaee:	4619      	mov	r1, r3
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 fd99 	bl	800f628 <USBH_LL_GetURBState>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800eafa:	7bbb      	ldrb	r3, [r7, #14]
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d12c      	bne.n	800eb5a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	7c1b      	ldrb	r3, [r3, #16]
 800eb04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eb08:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	8adb      	ldrh	r3, [r3, #22]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d00a      	beq.n	800eb28 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800eb12:	7b7b      	ldrb	r3, [r7, #13]
 800eb14:	2b80      	cmp	r3, #128	; 0x80
 800eb16:	d103      	bne.n	800eb20 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2203      	movs	r2, #3
 800eb1c:	761a      	strb	r2, [r3, #24]
 800eb1e:	e00d      	b.n	800eb3c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2205      	movs	r2, #5
 800eb24:	761a      	strb	r2, [r3, #24]
 800eb26:	e009      	b.n	800eb3c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800eb28:	7b7b      	ldrb	r3, [r7, #13]
 800eb2a:	2b80      	cmp	r3, #128	; 0x80
 800eb2c:	d103      	bne.n	800eb36 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2209      	movs	r2, #9
 800eb32:	761a      	strb	r2, [r3, #24]
 800eb34:	e002      	b.n	800eb3c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2207      	movs	r2, #7
 800eb3a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2203      	movs	r2, #3
 800eb40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eb50:	2200      	movs	r2, #0
 800eb52:	4619      	mov	r1, r3
 800eb54:	f7fb fe82 	bl	800a85c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800eb58:	e1cb      	b.n	800eef2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800eb5a:	7bbb      	ldrb	r3, [r7, #14]
 800eb5c:	2b04      	cmp	r3, #4
 800eb5e:	d003      	beq.n	800eb68 <USBH_HandleControl+0xe8>
 800eb60:	7bbb      	ldrb	r3, [r7, #14]
 800eb62:	2b02      	cmp	r3, #2
 800eb64:	f040 81c5 	bne.w	800eef2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	220b      	movs	r2, #11
 800eb6c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2203      	movs	r2, #3
 800eb72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eb82:	2200      	movs	r2, #0
 800eb84:	4619      	mov	r1, r3
 800eb86:	f7fb fe69 	bl	800a85c <osMessagePut>
      break;
 800eb8a:	e1b2      	b.n	800eef2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6899      	ldr	r1, [r3, #8]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	899a      	ldrh	r2, [r3, #12]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	791b      	ldrb	r3, [r3, #4]
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f000 f9f2 	bl	800ef8e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2204      	movs	r2, #4
 800ebae:	761a      	strb	r2, [r3, #24]
      break;
 800ebb0:	e1a8      	b.n	800ef04 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	791b      	ldrb	r3, [r3, #4]
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f000 fd35 	bl	800f628 <USBH_LL_GetURBState>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ebc2:	7bbb      	ldrb	r3, [r7, #14]
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d110      	bne.n	800ebea <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2209      	movs	r2, #9
 800ebcc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2203      	movs	r2, #3
 800ebd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	f7fb fe39 	bl	800a85c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ebea:	7bbb      	ldrb	r3, [r7, #14]
 800ebec:	2b05      	cmp	r3, #5
 800ebee:	d110      	bne.n	800ec12 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ebf0:	2303      	movs	r3, #3
 800ebf2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2203      	movs	r2, #3
 800ebf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ec08:	2200      	movs	r2, #0
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	f7fb fe26 	bl	800a85c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ec10:	e171      	b.n	800eef6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800ec12:	7bbb      	ldrb	r3, [r7, #14]
 800ec14:	2b04      	cmp	r3, #4
 800ec16:	f040 816e 	bne.w	800eef6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	220b      	movs	r2, #11
 800ec1e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2203      	movs	r2, #3
 800ec24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ec34:	2200      	movs	r2, #0
 800ec36:	4619      	mov	r1, r3
 800ec38:	f7fb fe10 	bl	800a85c <osMessagePut>
      break;
 800ec3c:	e15b      	b.n	800eef6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6899      	ldr	r1, [r3, #8]
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	899a      	ldrh	r2, [r3, #12]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	795b      	ldrb	r3, [r3, #5]
 800ec4a:	2001      	movs	r0, #1
 800ec4c:	9000      	str	r0, [sp, #0]
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f000 f978 	bl	800ef44 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ec5a:	b29a      	uxth	r2, r3
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2206      	movs	r2, #6
 800ec64:	761a      	strb	r2, [r3, #24]
      break;
 800ec66:	e14d      	b.n	800ef04 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	795b      	ldrb	r3, [r3, #5]
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f000 fcda 	bl	800f628 <USBH_LL_GetURBState>
 800ec74:	4603      	mov	r3, r0
 800ec76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ec78:	7bbb      	ldrb	r3, [r7, #14]
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	d111      	bne.n	800eca2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2207      	movs	r2, #7
 800ec82:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2203      	movs	r2, #3
 800ec88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ec98:	2200      	movs	r2, #0
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	f7fb fdde 	bl	800a85c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800eca0:	e12b      	b.n	800eefa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800eca2:	7bbb      	ldrb	r3, [r7, #14]
 800eca4:	2b05      	cmp	r3, #5
 800eca6:	d113      	bne.n	800ecd0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	220c      	movs	r2, #12
 800ecac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ecae:	2303      	movs	r3, #3
 800ecb0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2203      	movs	r2, #3
 800ecb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	4619      	mov	r1, r3
 800ecca:	f7fb fdc7 	bl	800a85c <osMessagePut>
      break;
 800ecce:	e114      	b.n	800eefa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ecd0:	7bbb      	ldrb	r3, [r7, #14]
 800ecd2:	2b02      	cmp	r3, #2
 800ecd4:	d111      	bne.n	800ecfa <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2205      	movs	r2, #5
 800ecda:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2203      	movs	r2, #3
 800ece0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	f7fb fdb2 	bl	800a85c <osMessagePut>
      break;
 800ecf8:	e0ff      	b.n	800eefa <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800ecfa:	7bbb      	ldrb	r3, [r7, #14]
 800ecfc:	2b04      	cmp	r3, #4
 800ecfe:	f040 80fc 	bne.w	800eefa <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	220b      	movs	r2, #11
 800ed06:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ed08:	2302      	movs	r3, #2
 800ed0a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2203      	movs	r2, #3
 800ed10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ed20:	2200      	movs	r2, #0
 800ed22:	4619      	mov	r1, r3
 800ed24:	f7fb fd9a 	bl	800a85c <osMessagePut>
      break;
 800ed28:	e0e7      	b.n	800eefa <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	791b      	ldrb	r3, [r3, #4]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	2100      	movs	r1, #0
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f000 f92b 	bl	800ef8e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ed3e:	b29a      	uxth	r2, r3
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2208      	movs	r2, #8
 800ed48:	761a      	strb	r2, [r3, #24]

      break;
 800ed4a:	e0db      	b.n	800ef04 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	791b      	ldrb	r3, [r3, #4]
 800ed50:	4619      	mov	r1, r3
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f000 fc68 	bl	800f628 <USBH_LL_GetURBState>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ed5c:	7bbb      	ldrb	r3, [r7, #14]
 800ed5e:	2b01      	cmp	r3, #1
 800ed60:	d113      	bne.n	800ed8a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	220d      	movs	r2, #13
 800ed66:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2203      	movs	r2, #3
 800ed70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ed80:	2200      	movs	r2, #0
 800ed82:	4619      	mov	r1, r3
 800ed84:	f7fb fd6a 	bl	800a85c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ed88:	e0b9      	b.n	800eefe <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800ed8a:	7bbb      	ldrb	r3, [r7, #14]
 800ed8c:	2b04      	cmp	r3, #4
 800ed8e:	d111      	bne.n	800edb4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	220b      	movs	r2, #11
 800ed94:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2203      	movs	r2, #3
 800ed9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800edaa:	2200      	movs	r2, #0
 800edac:	4619      	mov	r1, r3
 800edae:	f7fb fd55 	bl	800a85c <osMessagePut>
      break;
 800edb2:	e0a4      	b.n	800eefe <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800edb4:	7bbb      	ldrb	r3, [r7, #14]
 800edb6:	2b05      	cmp	r3, #5
 800edb8:	f040 80a1 	bne.w	800eefe <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800edbc:	2303      	movs	r3, #3
 800edbe:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2203      	movs	r2, #3
 800edc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800edd4:	2200      	movs	r2, #0
 800edd6:	4619      	mov	r1, r3
 800edd8:	f7fb fd40 	bl	800a85c <osMessagePut>
      break;
 800eddc:	e08f      	b.n	800eefe <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	795b      	ldrb	r3, [r3, #5]
 800ede2:	2201      	movs	r2, #1
 800ede4:	9200      	str	r2, [sp, #0]
 800ede6:	2200      	movs	r2, #0
 800ede8:	2100      	movs	r1, #0
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 f8aa 	bl	800ef44 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800edf6:	b29a      	uxth	r2, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	220a      	movs	r2, #10
 800ee00:	761a      	strb	r2, [r3, #24]
      break;
 800ee02:	e07f      	b.n	800ef04 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	795b      	ldrb	r3, [r3, #5]
 800ee08:	4619      	mov	r1, r3
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f000 fc0c 	bl	800f628 <USBH_LL_GetURBState>
 800ee10:	4603      	mov	r3, r0
 800ee12:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ee14:	7bbb      	ldrb	r3, [r7, #14]
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d113      	bne.n	800ee42 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	220d      	movs	r2, #13
 800ee22:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2203      	movs	r2, #3
 800ee28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ee38:	2200      	movs	r2, #0
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	f7fb fd0e 	bl	800a85c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ee40:	e05f      	b.n	800ef02 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ee42:	7bbb      	ldrb	r3, [r7, #14]
 800ee44:	2b02      	cmp	r3, #2
 800ee46:	d111      	bne.n	800ee6c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2209      	movs	r2, #9
 800ee4c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2203      	movs	r2, #3
 800ee52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ee62:	2200      	movs	r2, #0
 800ee64:	4619      	mov	r1, r3
 800ee66:	f7fb fcf9 	bl	800a85c <osMessagePut>
      break;
 800ee6a:	e04a      	b.n	800ef02 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800ee6c:	7bbb      	ldrb	r3, [r7, #14]
 800ee6e:	2b04      	cmp	r3, #4
 800ee70:	d147      	bne.n	800ef02 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	220b      	movs	r2, #11
 800ee76:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2203      	movs	r2, #3
 800ee7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	4619      	mov	r1, r3
 800ee90:	f7fb fce4 	bl	800a85c <osMessagePut>
      break;
 800ee94:	e035      	b.n	800ef02 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	7e5b      	ldrb	r3, [r3, #25]
 800ee9a:	3301      	adds	r3, #1
 800ee9c:	b2da      	uxtb	r2, r3
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	765a      	strb	r2, [r3, #25]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	7e5b      	ldrb	r3, [r3, #25]
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d806      	bhi.n	800eeb8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2201      	movs	r2, #1
 800eeae:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800eeb6:	e025      	b.n	800ef04 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eebe:	2106      	movs	r1, #6
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2200      	movs	r2, #0
 800eec8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	795b      	ldrb	r3, [r3, #5]
 800eece:	4619      	mov	r1, r3
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f000 f90d 	bl	800f0f0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	791b      	ldrb	r3, [r3, #4]
 800eeda:	4619      	mov	r1, r3
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 f907 	bl	800f0f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2200      	movs	r2, #0
 800eee6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800eee8:	2302      	movs	r3, #2
 800eeea:	73fb      	strb	r3, [r7, #15]
      break;
 800eeec:	e00a      	b.n	800ef04 <USBH_HandleControl+0x484>

    default:
      break;
 800eeee:	bf00      	nop
 800eef0:	e008      	b.n	800ef04 <USBH_HandleControl+0x484>
      break;
 800eef2:	bf00      	nop
 800eef4:	e006      	b.n	800ef04 <USBH_HandleControl+0x484>
      break;
 800eef6:	bf00      	nop
 800eef8:	e004      	b.n	800ef04 <USBH_HandleControl+0x484>
      break;
 800eefa:	bf00      	nop
 800eefc:	e002      	b.n	800ef04 <USBH_HandleControl+0x484>
      break;
 800eefe:	bf00      	nop
 800ef00:	e000      	b.n	800ef04 <USBH_HandleControl+0x484>
      break;
 800ef02:	bf00      	nop
  }

  return status;
 800ef04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop

0800ef10 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b088      	sub	sp, #32
 800ef14:	af04      	add	r7, sp, #16
 800ef16:	60f8      	str	r0, [r7, #12]
 800ef18:	60b9      	str	r1, [r7, #8]
 800ef1a:	4613      	mov	r3, r2
 800ef1c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ef1e:	79f9      	ldrb	r1, [r7, #7]
 800ef20:	2300      	movs	r3, #0
 800ef22:	9303      	str	r3, [sp, #12]
 800ef24:	2308      	movs	r3, #8
 800ef26:	9302      	str	r3, [sp, #8]
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	9301      	str	r3, [sp, #4]
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	9300      	str	r3, [sp, #0]
 800ef30:	2300      	movs	r3, #0
 800ef32:	2200      	movs	r2, #0
 800ef34:	68f8      	ldr	r0, [r7, #12]
 800ef36:	f000 fb46 	bl	800f5c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ef3a:	2300      	movs	r3, #0
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3710      	adds	r7, #16
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b088      	sub	sp, #32
 800ef48:	af04      	add	r7, sp, #16
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	60b9      	str	r1, [r7, #8]
 800ef4e:	4611      	mov	r1, r2
 800ef50:	461a      	mov	r2, r3
 800ef52:	460b      	mov	r3, r1
 800ef54:	80fb      	strh	r3, [r7, #6]
 800ef56:	4613      	mov	r3, r2
 800ef58:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d001      	beq.n	800ef68 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ef64:	2300      	movs	r3, #0
 800ef66:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ef68:	7979      	ldrb	r1, [r7, #5]
 800ef6a:	7e3b      	ldrb	r3, [r7, #24]
 800ef6c:	9303      	str	r3, [sp, #12]
 800ef6e:	88fb      	ldrh	r3, [r7, #6]
 800ef70:	9302      	str	r3, [sp, #8]
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	9301      	str	r3, [sp, #4]
 800ef76:	2301      	movs	r3, #1
 800ef78:	9300      	str	r3, [sp, #0]
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	68f8      	ldr	r0, [r7, #12]
 800ef80:	f000 fb21 	bl	800f5c6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ef84:	2300      	movs	r3, #0
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ef8e:	b580      	push	{r7, lr}
 800ef90:	b088      	sub	sp, #32
 800ef92:	af04      	add	r7, sp, #16
 800ef94:	60f8      	str	r0, [r7, #12]
 800ef96:	60b9      	str	r1, [r7, #8]
 800ef98:	4611      	mov	r1, r2
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	80fb      	strh	r3, [r7, #6]
 800efa0:	4613      	mov	r3, r2
 800efa2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800efa4:	7979      	ldrb	r1, [r7, #5]
 800efa6:	2300      	movs	r3, #0
 800efa8:	9303      	str	r3, [sp, #12]
 800efaa:	88fb      	ldrh	r3, [r7, #6]
 800efac:	9302      	str	r3, [sp, #8]
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	9301      	str	r3, [sp, #4]
 800efb2:	2301      	movs	r3, #1
 800efb4:	9300      	str	r3, [sp, #0]
 800efb6:	2300      	movs	r3, #0
 800efb8:	2201      	movs	r2, #1
 800efba:	68f8      	ldr	r0, [r7, #12]
 800efbc:	f000 fb03 	bl	800f5c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800efc0:	2300      	movs	r3, #0

}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3710      	adds	r7, #16
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}

0800efca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800efca:	b580      	push	{r7, lr}
 800efcc:	b088      	sub	sp, #32
 800efce:	af04      	add	r7, sp, #16
 800efd0:	60f8      	str	r0, [r7, #12]
 800efd2:	60b9      	str	r1, [r7, #8]
 800efd4:	4611      	mov	r1, r2
 800efd6:	461a      	mov	r2, r3
 800efd8:	460b      	mov	r3, r1
 800efda:	80fb      	strh	r3, [r7, #6]
 800efdc:	4613      	mov	r3, r2
 800efde:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d001      	beq.n	800efee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800efea:	2300      	movs	r3, #0
 800efec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800efee:	7979      	ldrb	r1, [r7, #5]
 800eff0:	7e3b      	ldrb	r3, [r7, #24]
 800eff2:	9303      	str	r3, [sp, #12]
 800eff4:	88fb      	ldrh	r3, [r7, #6]
 800eff6:	9302      	str	r3, [sp, #8]
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	9301      	str	r3, [sp, #4]
 800effc:	2301      	movs	r3, #1
 800effe:	9300      	str	r3, [sp, #0]
 800f000:	2302      	movs	r3, #2
 800f002:	2200      	movs	r2, #0
 800f004:	68f8      	ldr	r0, [r7, #12]
 800f006:	f000 fade 	bl	800f5c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f00a:	2300      	movs	r3, #0
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3710      	adds	r7, #16
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b088      	sub	sp, #32
 800f018:	af04      	add	r7, sp, #16
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	60b9      	str	r1, [r7, #8]
 800f01e:	4611      	mov	r1, r2
 800f020:	461a      	mov	r2, r3
 800f022:	460b      	mov	r3, r1
 800f024:	80fb      	strh	r3, [r7, #6]
 800f026:	4613      	mov	r3, r2
 800f028:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f02a:	7979      	ldrb	r1, [r7, #5]
 800f02c:	2300      	movs	r3, #0
 800f02e:	9303      	str	r3, [sp, #12]
 800f030:	88fb      	ldrh	r3, [r7, #6]
 800f032:	9302      	str	r3, [sp, #8]
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	9301      	str	r3, [sp, #4]
 800f038:	2301      	movs	r3, #1
 800f03a:	9300      	str	r3, [sp, #0]
 800f03c:	2302      	movs	r3, #2
 800f03e:	2201      	movs	r2, #1
 800f040:	68f8      	ldr	r0, [r7, #12]
 800f042:	f000 fac0 	bl	800f5c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f046:	2300      	movs	r3, #0
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3710      	adds	r7, #16
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b086      	sub	sp, #24
 800f054:	af04      	add	r7, sp, #16
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	4608      	mov	r0, r1
 800f05a:	4611      	mov	r1, r2
 800f05c:	461a      	mov	r2, r3
 800f05e:	4603      	mov	r3, r0
 800f060:	70fb      	strb	r3, [r7, #3]
 800f062:	460b      	mov	r3, r1
 800f064:	70bb      	strb	r3, [r7, #2]
 800f066:	4613      	mov	r3, r2
 800f068:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f06a:	7878      	ldrb	r0, [r7, #1]
 800f06c:	78ba      	ldrb	r2, [r7, #2]
 800f06e:	78f9      	ldrb	r1, [r7, #3]
 800f070:	8b3b      	ldrh	r3, [r7, #24]
 800f072:	9302      	str	r3, [sp, #8]
 800f074:	7d3b      	ldrb	r3, [r7, #20]
 800f076:	9301      	str	r3, [sp, #4]
 800f078:	7c3b      	ldrb	r3, [r7, #16]
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	4603      	mov	r3, r0
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f000 fa53 	bl	800f52a <USBH_LL_OpenPipe>

  return USBH_OK;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	3708      	adds	r7, #8
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b082      	sub	sp, #8
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
 800f096:	460b      	mov	r3, r1
 800f098:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800f09a:	78fb      	ldrb	r3, [r7, #3]
 800f09c:	4619      	mov	r1, r3
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f000 fa72 	bl	800f588 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f0a4:	2300      	movs	r3, #0
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3708      	adds	r7, #8
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}

0800f0ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f0ae:	b580      	push	{r7, lr}
 800f0b0:	b084      	sub	sp, #16
 800f0b2:	af00      	add	r7, sp, #0
 800f0b4:	6078      	str	r0, [r7, #4]
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 f836 	bl	800f12c <USBH_GetFreePipe>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f0c4:	89fb      	ldrh	r3, [r7, #14]
 800f0c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d00a      	beq.n	800f0e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800f0ce:	78fa      	ldrb	r2, [r7, #3]
 800f0d0:	89fb      	ldrh	r3, [r7, #14]
 800f0d2:	f003 030f 	and.w	r3, r3, #15
 800f0d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f0da:	6879      	ldr	r1, [r7, #4]
 800f0dc:	33e0      	adds	r3, #224	; 0xe0
 800f0de:	009b      	lsls	r3, r3, #2
 800f0e0:	440b      	add	r3, r1
 800f0e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f0e4:	89fb      	ldrh	r3, [r7, #14]
 800f0e6:	b2db      	uxtb	r3, r3
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3710      	adds	r7, #16
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b083      	sub	sp, #12
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800f0fc:	78fb      	ldrb	r3, [r7, #3]
 800f0fe:	2b0f      	cmp	r3, #15
 800f100:	d80d      	bhi.n	800f11e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f102:	78fb      	ldrb	r3, [r7, #3]
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	33e0      	adds	r3, #224	; 0xe0
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	4413      	add	r3, r2
 800f10c:	685a      	ldr	r2, [r3, #4]
 800f10e:	78fb      	ldrb	r3, [r7, #3]
 800f110:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f114:	6879      	ldr	r1, [r7, #4]
 800f116:	33e0      	adds	r3, #224	; 0xe0
 800f118:	009b      	lsls	r3, r3, #2
 800f11a:	440b      	add	r3, r1
 800f11c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f11e:	2300      	movs	r3, #0
}
 800f120:	4618      	mov	r0, r3
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b085      	sub	sp, #20
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f134:	2300      	movs	r3, #0
 800f136:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800f138:	2300      	movs	r3, #0
 800f13a:	73fb      	strb	r3, [r7, #15]
 800f13c:	e00f      	b.n	800f15e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f13e:	7bfb      	ldrb	r3, [r7, #15]
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	33e0      	adds	r3, #224	; 0xe0
 800f144:	009b      	lsls	r3, r3, #2
 800f146:	4413      	add	r3, r2
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d102      	bne.n	800f158 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f152:	7bfb      	ldrb	r3, [r7, #15]
 800f154:	b29b      	uxth	r3, r3
 800f156:	e007      	b.n	800f168 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800f158:	7bfb      	ldrb	r3, [r7, #15]
 800f15a:	3301      	adds	r3, #1
 800f15c:	73fb      	strb	r3, [r7, #15]
 800f15e:	7bfb      	ldrb	r3, [r7, #15]
 800f160:	2b0f      	cmp	r3, #15
 800f162:	d9ec      	bls.n	800f13e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f164:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3714      	adds	r7, #20
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800f178:	2200      	movs	r2, #0
 800f17a:	490e      	ldr	r1, [pc, #56]	; (800f1b4 <MX_USB_HOST_Init+0x40>)
 800f17c:	480e      	ldr	r0, [pc, #56]	; (800f1b8 <MX_USB_HOST_Init+0x44>)
 800f17e:	f7fe f975 	bl	800d46c <USBH_Init>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d001      	beq.n	800f18c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f188:	f7f2 fa0c 	bl	80015a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800f18c:	490b      	ldr	r1, [pc, #44]	; (800f1bc <MX_USB_HOST_Init+0x48>)
 800f18e:	480a      	ldr	r0, [pc, #40]	; (800f1b8 <MX_USB_HOST_Init+0x44>)
 800f190:	f7fe fa22 	bl	800d5d8 <USBH_RegisterClass>
 800f194:	4603      	mov	r3, r0
 800f196:	2b00      	cmp	r3, #0
 800f198:	d001      	beq.n	800f19e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f19a:	f7f2 fa03 	bl	80015a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800f19e:	4806      	ldr	r0, [pc, #24]	; (800f1b8 <MX_USB_HOST_Init+0x44>)
 800f1a0:	f7fe faa6 	bl	800d6f0 <USBH_Start>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d001      	beq.n	800f1ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f1aa:	f7f2 f9fb 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f1ae:	bf00      	nop
 800f1b0:	bd80      	pop	{r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	0800f1c1 	.word	0x0800f1c1
 800f1b8:	20004654 	.word	0x20004654
 800f1bc:	2000006c 	.word	0x2000006c

0800f1c0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f1cc:	78fb      	ldrb	r3, [r7, #3]
 800f1ce:	3b01      	subs	r3, #1
 800f1d0:	2b04      	cmp	r3, #4
 800f1d2:	d819      	bhi.n	800f208 <USBH_UserProcess+0x48>
 800f1d4:	a201      	add	r2, pc, #4	; (adr r2, 800f1dc <USBH_UserProcess+0x1c>)
 800f1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1da:	bf00      	nop
 800f1dc:	0800f209 	.word	0x0800f209
 800f1e0:	0800f1f9 	.word	0x0800f1f9
 800f1e4:	0800f209 	.word	0x0800f209
 800f1e8:	0800f201 	.word	0x0800f201
 800f1ec:	0800f1f1 	.word	0x0800f1f1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f1f0:	4b09      	ldr	r3, [pc, #36]	; (800f218 <USBH_UserProcess+0x58>)
 800f1f2:	2203      	movs	r2, #3
 800f1f4:	701a      	strb	r2, [r3, #0]
  break;
 800f1f6:	e008      	b.n	800f20a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f1f8:	4b07      	ldr	r3, [pc, #28]	; (800f218 <USBH_UserProcess+0x58>)
 800f1fa:	2202      	movs	r2, #2
 800f1fc:	701a      	strb	r2, [r3, #0]
  break;
 800f1fe:	e004      	b.n	800f20a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f200:	4b05      	ldr	r3, [pc, #20]	; (800f218 <USBH_UserProcess+0x58>)
 800f202:	2201      	movs	r2, #1
 800f204:	701a      	strb	r2, [r3, #0]
  break;
 800f206:	e000      	b.n	800f20a <USBH_UserProcess+0x4a>

  default:
  break;
 800f208:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f20a:	bf00      	nop
 800f20c:	370c      	adds	r7, #12
 800f20e:	46bd      	mov	sp, r7
 800f210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f214:	4770      	bx	lr
 800f216:	bf00      	nop
 800f218:	20004a38 	.word	0x20004a38

0800f21c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b08a      	sub	sp, #40	; 0x28
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f224:	f107 0314 	add.w	r3, r7, #20
 800f228:	2200      	movs	r2, #0
 800f22a:	601a      	str	r2, [r3, #0]
 800f22c:	605a      	str	r2, [r3, #4]
 800f22e:	609a      	str	r2, [r3, #8]
 800f230:	60da      	str	r2, [r3, #12]
 800f232:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	4a24      	ldr	r2, [pc, #144]	; (800f2cc <HAL_HCD_MspInit+0xb0>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d141      	bne.n	800f2c2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f23e:	2300      	movs	r3, #0
 800f240:	613b      	str	r3, [r7, #16]
 800f242:	4b23      	ldr	r3, [pc, #140]	; (800f2d0 <HAL_HCD_MspInit+0xb4>)
 800f244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f246:	4a22      	ldr	r2, [pc, #136]	; (800f2d0 <HAL_HCD_MspInit+0xb4>)
 800f248:	f043 0302 	orr.w	r3, r3, #2
 800f24c:	6313      	str	r3, [r2, #48]	; 0x30
 800f24e:	4b20      	ldr	r3, [pc, #128]	; (800f2d0 <HAL_HCD_MspInit+0xb4>)
 800f250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f252:	f003 0302 	and.w	r3, r3, #2
 800f256:	613b      	str	r3, [r7, #16]
 800f258:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800f25a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800f25e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f260:	2302      	movs	r3, #2
 800f262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f264:	2300      	movs	r3, #0
 800f266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f268:	2300      	movs	r3, #0
 800f26a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800f26c:	230c      	movs	r3, #12
 800f26e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f270:	f107 0314 	add.w	r3, r7, #20
 800f274:	4619      	mov	r1, r3
 800f276:	4817      	ldr	r0, [pc, #92]	; (800f2d4 <HAL_HCD_MspInit+0xb8>)
 800f278:	f7f5 f84c 	bl	8004314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800f27c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f282:	2300      	movs	r3, #0
 800f284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f286:	2300      	movs	r3, #0
 800f288:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800f28a:	f107 0314 	add.w	r3, r7, #20
 800f28e:	4619      	mov	r1, r3
 800f290:	4810      	ldr	r0, [pc, #64]	; (800f2d4 <HAL_HCD_MspInit+0xb8>)
 800f292:	f7f5 f83f 	bl	8004314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800f296:	2300      	movs	r3, #0
 800f298:	60fb      	str	r3, [r7, #12]
 800f29a:	4b0d      	ldr	r3, [pc, #52]	; (800f2d0 <HAL_HCD_MspInit+0xb4>)
 800f29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f29e:	4a0c      	ldr	r2, [pc, #48]	; (800f2d0 <HAL_HCD_MspInit+0xb4>)
 800f2a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f2a4:	6313      	str	r3, [r2, #48]	; 0x30
 800f2a6:	4b0a      	ldr	r3, [pc, #40]	; (800f2d0 <HAL_HCD_MspInit+0xb4>)
 800f2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f2ae:	60fb      	str	r3, [r7, #12]
 800f2b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	2105      	movs	r1, #5
 800f2b6:	204d      	movs	r0, #77	; 0x4d
 800f2b8:	f7f4 fa8c 	bl	80037d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800f2bc:	204d      	movs	r0, #77	; 0x4d
 800f2be:	f7f4 faa5 	bl	800380c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800f2c2:	bf00      	nop
 800f2c4:	3728      	adds	r7, #40	; 0x28
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	40040000 	.word	0x40040000
 800f2d0:	40023800 	.word	0x40023800
 800f2d4:	40020400 	.word	0x40020400

0800f2d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7fe feb9 	bl	800e05e <USBH_LL_IncTimer>
}
 800f2ec:	bf00      	nop
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f302:	4618      	mov	r0, r3
 800f304:	f7fe fefd 	bl	800e102 <USBH_LL_Connect>
}
 800f308:	bf00      	nop
 800f30a:	3708      	adds	r7, #8
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f31e:	4618      	mov	r0, r3
 800f320:	f7fe ff12 	bl	800e148 <USBH_LL_Disconnect>
}
 800f324:	bf00      	nop
 800f326:	3708      	adds	r7, #8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	460b      	mov	r3, r1
 800f336:	70fb      	strb	r3, [r7, #3]
 800f338:	4613      	mov	r3, r2
 800f33a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f342:	4618      	mov	r0, r3
 800f344:	f7fe ff47 	bl	800e1d6 <USBH_LL_NotifyURBChange>
#endif
}
 800f348:	bf00      	nop
 800f34a:	3708      	adds	r7, #8
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f35e:	4618      	mov	r0, r3
 800f360:	f7fe fea7 	bl	800e0b2 <USBH_LL_PortEnabled>
}
 800f364:	bf00      	nop
 800f366:	3708      	adds	r7, #8
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}

0800f36c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fe feb3 	bl	800e0e6 <USBH_LL_PortDisabled>
}
 800f380:	bf00      	nop
 800f382:	3708      	adds	r7, #8
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}

0800f388 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f396:	2b00      	cmp	r3, #0
 800f398:	d132      	bne.n	800f400 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800f39a:	4a1c      	ldr	r2, [pc, #112]	; (800f40c <USBH_LL_Init+0x84>)
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	4a19      	ldr	r2, [pc, #100]	; (800f40c <USBH_LL_Init+0x84>)
 800f3a6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800f3aa:	4b18      	ldr	r3, [pc, #96]	; (800f40c <USBH_LL_Init+0x84>)
 800f3ac:	4a18      	ldr	r2, [pc, #96]	; (800f410 <USBH_LL_Init+0x88>)
 800f3ae:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800f3b0:	4b16      	ldr	r3, [pc, #88]	; (800f40c <USBH_LL_Init+0x84>)
 800f3b2:	220c      	movs	r2, #12
 800f3b4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800f3b6:	4b15      	ldr	r3, [pc, #84]	; (800f40c <USBH_LL_Init+0x84>)
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800f3bc:	4b13      	ldr	r3, [pc, #76]	; (800f40c <USBH_LL_Init+0x84>)
 800f3be:	2200      	movs	r2, #0
 800f3c0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800f3c2:	4b12      	ldr	r3, [pc, #72]	; (800f40c <USBH_LL_Init+0x84>)
 800f3c4:	2202      	movs	r2, #2
 800f3c6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800f3c8:	4b10      	ldr	r3, [pc, #64]	; (800f40c <USBH_LL_Init+0x84>)
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800f3ce:	4b0f      	ldr	r3, [pc, #60]	; (800f40c <USBH_LL_Init+0x84>)
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800f3d4:	4b0d      	ldr	r3, [pc, #52]	; (800f40c <USBH_LL_Init+0x84>)
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800f3da:	4b0c      	ldr	r3, [pc, #48]	; (800f40c <USBH_LL_Init+0x84>)
 800f3dc:	2200      	movs	r2, #0
 800f3de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800f3e0:	480a      	ldr	r0, [pc, #40]	; (800f40c <USBH_LL_Init+0x84>)
 800f3e2:	f7f5 fa68 	bl	80048b6 <HAL_HCD_Init>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d001      	beq.n	800f3f0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800f3ec:	f7f2 f8da 	bl	80015a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800f3f0:	4806      	ldr	r0, [pc, #24]	; (800f40c <USBH_LL_Init+0x84>)
 800f3f2:	f7f5 fe4c 	bl	800508e <HAL_HCD_GetCurrentFrame>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f7fe fe20 	bl	800e040 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f400:	2300      	movs	r3, #0
}
 800f402:	4618      	mov	r0, r3
 800f404:	3708      	adds	r7, #8
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	20004a3c 	.word	0x20004a3c
 800f410:	40040000 	.word	0x40040000

0800f414 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f41c:	2300      	movs	r3, #0
 800f41e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f420:	2300      	movs	r3, #0
 800f422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7f5 fdb9 	bl	8004fa2 <HAL_HCD_Start>
 800f430:	4603      	mov	r3, r0
 800f432:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f434:	7bfb      	ldrb	r3, [r7, #15]
 800f436:	4618      	mov	r0, r3
 800f438:	f000 f95c 	bl	800f6f4 <USBH_Get_USB_Status>
 800f43c:	4603      	mov	r3, r0
 800f43e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f440:	7bbb      	ldrb	r3, [r7, #14]
}
 800f442:	4618      	mov	r0, r3
 800f444:	3710      	adds	r7, #16
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}

0800f44a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f44a:	b580      	push	{r7, lr}
 800f44c:	b084      	sub	sp, #16
 800f44e:	af00      	add	r7, sp, #0
 800f450:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f452:	2300      	movs	r3, #0
 800f454:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f456:	2300      	movs	r3, #0
 800f458:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f460:	4618      	mov	r0, r3
 800f462:	f7f5 fdc1 	bl	8004fe8 <HAL_HCD_Stop>
 800f466:	4603      	mov	r3, r0
 800f468:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f46a:	7bfb      	ldrb	r3, [r7, #15]
 800f46c:	4618      	mov	r0, r3
 800f46e:	f000 f941 	bl	800f6f4 <USBH_Get_USB_Status>
 800f472:	4603      	mov	r3, r0
 800f474:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f476:	7bbb      	ldrb	r3, [r7, #14]
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3710      	adds	r7, #16
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b084      	sub	sp, #16
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f488:	2301      	movs	r3, #1
 800f48a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f492:	4618      	mov	r0, r3
 800f494:	f7f5 fe09 	bl	80050aa <HAL_HCD_GetCurrentSpeed>
 800f498:	4603      	mov	r3, r0
 800f49a:	2b02      	cmp	r3, #2
 800f49c:	d00c      	beq.n	800f4b8 <USBH_LL_GetSpeed+0x38>
 800f49e:	2b02      	cmp	r3, #2
 800f4a0:	d80d      	bhi.n	800f4be <USBH_LL_GetSpeed+0x3e>
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d002      	beq.n	800f4ac <USBH_LL_GetSpeed+0x2c>
 800f4a6:	2b01      	cmp	r3, #1
 800f4a8:	d003      	beq.n	800f4b2 <USBH_LL_GetSpeed+0x32>
 800f4aa:	e008      	b.n	800f4be <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	73fb      	strb	r3, [r7, #15]
    break;
 800f4b0:	e008      	b.n	800f4c4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	73fb      	strb	r3, [r7, #15]
    break;
 800f4b6:	e005      	b.n	800f4c4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f4b8:	2302      	movs	r3, #2
 800f4ba:	73fb      	strb	r3, [r7, #15]
    break;
 800f4bc:	e002      	b.n	800f4c4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	73fb      	strb	r3, [r7, #15]
    break;
 800f4c2:	bf00      	nop
  }
  return  speed;
 800f4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3710      	adds	r7, #16
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}

0800f4ce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f4ce:	b580      	push	{r7, lr}
 800f4d0:	b084      	sub	sp, #16
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7f5 fd9c 	bl	8005022 <HAL_HCD_ResetPort>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f4ee:	7bfb      	ldrb	r3, [r7, #15]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f000 f8ff 	bl	800f6f4 <USBH_Get_USB_Status>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3710      	adds	r7, #16
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	460b      	mov	r3, r1
 800f50e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f516:	78fa      	ldrb	r2, [r7, #3]
 800f518:	4611      	mov	r1, r2
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7f5 fda3 	bl	8005066 <HAL_HCD_HC_GetXferCount>
 800f520:	4603      	mov	r3, r0
}
 800f522:	4618      	mov	r0, r3
 800f524:	3708      	adds	r7, #8
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}

0800f52a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f52a:	b590      	push	{r4, r7, lr}
 800f52c:	b089      	sub	sp, #36	; 0x24
 800f52e:	af04      	add	r7, sp, #16
 800f530:	6078      	str	r0, [r7, #4]
 800f532:	4608      	mov	r0, r1
 800f534:	4611      	mov	r1, r2
 800f536:	461a      	mov	r2, r3
 800f538:	4603      	mov	r3, r0
 800f53a:	70fb      	strb	r3, [r7, #3]
 800f53c:	460b      	mov	r3, r1
 800f53e:	70bb      	strb	r3, [r7, #2]
 800f540:	4613      	mov	r3, r2
 800f542:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f544:	2300      	movs	r3, #0
 800f546:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f548:	2300      	movs	r3, #0
 800f54a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f552:	787c      	ldrb	r4, [r7, #1]
 800f554:	78ba      	ldrb	r2, [r7, #2]
 800f556:	78f9      	ldrb	r1, [r7, #3]
 800f558:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f55a:	9302      	str	r3, [sp, #8]
 800f55c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f560:	9301      	str	r3, [sp, #4]
 800f562:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f566:	9300      	str	r3, [sp, #0]
 800f568:	4623      	mov	r3, r4
 800f56a:	f7f5 fa06 	bl	800497a <HAL_HCD_HC_Init>
 800f56e:	4603      	mov	r3, r0
 800f570:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f572:	7bfb      	ldrb	r3, [r7, #15]
 800f574:	4618      	mov	r0, r3
 800f576:	f000 f8bd 	bl	800f6f4 <USBH_Get_USB_Status>
 800f57a:	4603      	mov	r3, r0
 800f57c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f57e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f580:	4618      	mov	r0, r3
 800f582:	3714      	adds	r7, #20
 800f584:	46bd      	mov	sp, r7
 800f586:	bd90      	pop	{r4, r7, pc}

0800f588 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	460b      	mov	r3, r1
 800f592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f594:	2300      	movs	r3, #0
 800f596:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f598:	2300      	movs	r3, #0
 800f59a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f5a2:	78fa      	ldrb	r2, [r7, #3]
 800f5a4:	4611      	mov	r1, r2
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7f5 fa76 	bl	8004a98 <HAL_HCD_HC_Halt>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f5b0:	7bfb      	ldrb	r3, [r7, #15]
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f000 f89e 	bl	800f6f4 <USBH_Get_USB_Status>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}

0800f5c6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f5c6:	b590      	push	{r4, r7, lr}
 800f5c8:	b089      	sub	sp, #36	; 0x24
 800f5ca:	af04      	add	r7, sp, #16
 800f5cc:	6078      	str	r0, [r7, #4]
 800f5ce:	4608      	mov	r0, r1
 800f5d0:	4611      	mov	r1, r2
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	70fb      	strb	r3, [r7, #3]
 800f5d8:	460b      	mov	r3, r1
 800f5da:	70bb      	strb	r3, [r7, #2]
 800f5dc:	4613      	mov	r3, r2
 800f5de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f5ee:	787c      	ldrb	r4, [r7, #1]
 800f5f0:	78ba      	ldrb	r2, [r7, #2]
 800f5f2:	78f9      	ldrb	r1, [r7, #3]
 800f5f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f5f8:	9303      	str	r3, [sp, #12]
 800f5fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f5fc:	9302      	str	r3, [sp, #8]
 800f5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f600:	9301      	str	r3, [sp, #4]
 800f602:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f606:	9300      	str	r3, [sp, #0]
 800f608:	4623      	mov	r3, r4
 800f60a:	f7f5 fa69 	bl	8004ae0 <HAL_HCD_HC_SubmitRequest>
 800f60e:	4603      	mov	r3, r0
 800f610:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f612:	7bfb      	ldrb	r3, [r7, #15]
 800f614:	4618      	mov	r0, r3
 800f616:	f000 f86d 	bl	800f6f4 <USBH_Get_USB_Status>
 800f61a:	4603      	mov	r3, r0
 800f61c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f61e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f620:	4618      	mov	r0, r3
 800f622:	3714      	adds	r7, #20
 800f624:	46bd      	mov	sp, r7
 800f626:	bd90      	pop	{r4, r7, pc}

0800f628 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	460b      	mov	r3, r1
 800f632:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f63a:	78fa      	ldrb	r2, [r7, #3]
 800f63c:	4611      	mov	r1, r2
 800f63e:	4618      	mov	r0, r3
 800f640:	f7f5 fcfd 	bl	800503e <HAL_HCD_HC_GetURBState>
 800f644:	4603      	mov	r3, r0
}
 800f646:	4618      	mov	r0, r3
 800f648:	3708      	adds	r7, #8
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}

0800f64e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f64e:	b580      	push	{r7, lr}
 800f650:	b082      	sub	sp, #8
 800f652:	af00      	add	r7, sp, #0
 800f654:	6078      	str	r0, [r7, #4]
 800f656:	460b      	mov	r3, r1
 800f658:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f660:	2b00      	cmp	r3, #0
 800f662:	d103      	bne.n	800f66c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800f664:	78fb      	ldrb	r3, [r7, #3]
 800f666:	4618      	mov	r0, r3
 800f668:	f000 f870 	bl	800f74c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f66c:	20c8      	movs	r0, #200	; 0xc8
 800f66e:	f7f3 fd63 	bl	8003138 <HAL_Delay>
  return USBH_OK;
 800f672:	2300      	movs	r3, #0
}
 800f674:	4618      	mov	r0, r3
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b085      	sub	sp, #20
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	460b      	mov	r3, r1
 800f686:	70fb      	strb	r3, [r7, #3]
 800f688:	4613      	mov	r3, r2
 800f68a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f692:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f694:	78fb      	ldrb	r3, [r7, #3]
 800f696:	68fa      	ldr	r2, [r7, #12]
 800f698:	212c      	movs	r1, #44	; 0x2c
 800f69a:	fb01 f303 	mul.w	r3, r1, r3
 800f69e:	4413      	add	r3, r2
 800f6a0:	333b      	adds	r3, #59	; 0x3b
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d009      	beq.n	800f6bc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f6a8:	78fb      	ldrb	r3, [r7, #3]
 800f6aa:	68fa      	ldr	r2, [r7, #12]
 800f6ac:	212c      	movs	r1, #44	; 0x2c
 800f6ae:	fb01 f303 	mul.w	r3, r1, r3
 800f6b2:	4413      	add	r3, r2
 800f6b4:	3354      	adds	r3, #84	; 0x54
 800f6b6:	78ba      	ldrb	r2, [r7, #2]
 800f6b8:	701a      	strb	r2, [r3, #0]
 800f6ba:	e008      	b.n	800f6ce <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f6bc:	78fb      	ldrb	r3, [r7, #3]
 800f6be:	68fa      	ldr	r2, [r7, #12]
 800f6c0:	212c      	movs	r1, #44	; 0x2c
 800f6c2:	fb01 f303 	mul.w	r3, r1, r3
 800f6c6:	4413      	add	r3, r2
 800f6c8:	3355      	adds	r3, #85	; 0x55
 800f6ca:	78ba      	ldrb	r2, [r7, #2]
 800f6cc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f6ce:	2300      	movs	r3, #0
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3714      	adds	r7, #20
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr

0800f6dc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f7f3 fd27 	bl	8003138 <HAL_Delay>
}
 800f6ea:	bf00      	nop
 800f6ec:	3708      	adds	r7, #8
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
	...

0800f6f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b085      	sub	sp, #20
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f6fe:	2300      	movs	r3, #0
 800f700:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f702:	79fb      	ldrb	r3, [r7, #7]
 800f704:	2b03      	cmp	r3, #3
 800f706:	d817      	bhi.n	800f738 <USBH_Get_USB_Status+0x44>
 800f708:	a201      	add	r2, pc, #4	; (adr r2, 800f710 <USBH_Get_USB_Status+0x1c>)
 800f70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f70e:	bf00      	nop
 800f710:	0800f721 	.word	0x0800f721
 800f714:	0800f727 	.word	0x0800f727
 800f718:	0800f72d 	.word	0x0800f72d
 800f71c:	0800f733 	.word	0x0800f733
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f720:	2300      	movs	r3, #0
 800f722:	73fb      	strb	r3, [r7, #15]
    break;
 800f724:	e00b      	b.n	800f73e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f726:	2302      	movs	r3, #2
 800f728:	73fb      	strb	r3, [r7, #15]
    break;
 800f72a:	e008      	b.n	800f73e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f72c:	2301      	movs	r3, #1
 800f72e:	73fb      	strb	r3, [r7, #15]
    break;
 800f730:	e005      	b.n	800f73e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f732:	2302      	movs	r3, #2
 800f734:	73fb      	strb	r3, [r7, #15]
    break;
 800f736:	e002      	b.n	800f73e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f738:	2302      	movs	r3, #2
 800f73a:	73fb      	strb	r3, [r7, #15]
    break;
 800f73c:	bf00      	nop
  }
  return usb_status;
 800f73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f740:	4618      	mov	r0, r3
 800f742:	3714      	adds	r7, #20
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af00      	add	r7, sp, #0
 800f752:	4603      	mov	r3, r0
 800f754:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f756:	79fb      	ldrb	r3, [r7, #7]
 800f758:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800f75a:	79fb      	ldrb	r3, [r7, #7]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d102      	bne.n	800f766 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f760:	2301      	movs	r3, #1
 800f762:	73fb      	strb	r3, [r7, #15]
 800f764:	e001      	b.n	800f76a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f766:	2300      	movs	r3, #0
 800f768:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800f76a:	7bfb      	ldrb	r3, [r7, #15]
 800f76c:	461a      	mov	r2, r3
 800f76e:	2110      	movs	r1, #16
 800f770:	4803      	ldr	r0, [pc, #12]	; (800f780 <MX_DriverVbusHS+0x34>)
 800f772:	f7f5 f887 	bl	8004884 <HAL_GPIO_WritePin>
}
 800f776:	bf00      	nop
 800f778:	3710      	adds	r7, #16
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	40020800 	.word	0x40020800

0800f784 <__errno>:
 800f784:	4b01      	ldr	r3, [pc, #4]	; (800f78c <__errno+0x8>)
 800f786:	6818      	ldr	r0, [r3, #0]
 800f788:	4770      	bx	lr
 800f78a:	bf00      	nop
 800f78c:	2000008c 	.word	0x2000008c

0800f790 <__libc_init_array>:
 800f790:	b570      	push	{r4, r5, r6, lr}
 800f792:	4d0d      	ldr	r5, [pc, #52]	; (800f7c8 <__libc_init_array+0x38>)
 800f794:	4c0d      	ldr	r4, [pc, #52]	; (800f7cc <__libc_init_array+0x3c>)
 800f796:	1b64      	subs	r4, r4, r5
 800f798:	10a4      	asrs	r4, r4, #2
 800f79a:	2600      	movs	r6, #0
 800f79c:	42a6      	cmp	r6, r4
 800f79e:	d109      	bne.n	800f7b4 <__libc_init_array+0x24>
 800f7a0:	4d0b      	ldr	r5, [pc, #44]	; (800f7d0 <__libc_init_array+0x40>)
 800f7a2:	4c0c      	ldr	r4, [pc, #48]	; (800f7d4 <__libc_init_array+0x44>)
 800f7a4:	f000 f93c 	bl	800fa20 <_init>
 800f7a8:	1b64      	subs	r4, r4, r5
 800f7aa:	10a4      	asrs	r4, r4, #2
 800f7ac:	2600      	movs	r6, #0
 800f7ae:	42a6      	cmp	r6, r4
 800f7b0:	d105      	bne.n	800f7be <__libc_init_array+0x2e>
 800f7b2:	bd70      	pop	{r4, r5, r6, pc}
 800f7b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7b8:	4798      	blx	r3
 800f7ba:	3601      	adds	r6, #1
 800f7bc:	e7ee      	b.n	800f79c <__libc_init_array+0xc>
 800f7be:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7c2:	4798      	blx	r3
 800f7c4:	3601      	adds	r6, #1
 800f7c6:	e7f2      	b.n	800f7ae <__libc_init_array+0x1e>
 800f7c8:	08012490 	.word	0x08012490
 800f7cc:	08012490 	.word	0x08012490
 800f7d0:	08012490 	.word	0x08012490
 800f7d4:	08012494 	.word	0x08012494

0800f7d8 <malloc>:
 800f7d8:	4b02      	ldr	r3, [pc, #8]	; (800f7e4 <malloc+0xc>)
 800f7da:	4601      	mov	r1, r0
 800f7dc:	6818      	ldr	r0, [r3, #0]
 800f7de:	f000 b88d 	b.w	800f8fc <_malloc_r>
 800f7e2:	bf00      	nop
 800f7e4:	2000008c 	.word	0x2000008c

0800f7e8 <free>:
 800f7e8:	4b02      	ldr	r3, [pc, #8]	; (800f7f4 <free+0xc>)
 800f7ea:	4601      	mov	r1, r0
 800f7ec:	6818      	ldr	r0, [r3, #0]
 800f7ee:	f000 b819 	b.w	800f824 <_free_r>
 800f7f2:	bf00      	nop
 800f7f4:	2000008c 	.word	0x2000008c

0800f7f8 <memcpy>:
 800f7f8:	440a      	add	r2, r1
 800f7fa:	4291      	cmp	r1, r2
 800f7fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f800:	d100      	bne.n	800f804 <memcpy+0xc>
 800f802:	4770      	bx	lr
 800f804:	b510      	push	{r4, lr}
 800f806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f80a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f80e:	4291      	cmp	r1, r2
 800f810:	d1f9      	bne.n	800f806 <memcpy+0xe>
 800f812:	bd10      	pop	{r4, pc}

0800f814 <memset>:
 800f814:	4402      	add	r2, r0
 800f816:	4603      	mov	r3, r0
 800f818:	4293      	cmp	r3, r2
 800f81a:	d100      	bne.n	800f81e <memset+0xa>
 800f81c:	4770      	bx	lr
 800f81e:	f803 1b01 	strb.w	r1, [r3], #1
 800f822:	e7f9      	b.n	800f818 <memset+0x4>

0800f824 <_free_r>:
 800f824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f826:	2900      	cmp	r1, #0
 800f828:	d044      	beq.n	800f8b4 <_free_r+0x90>
 800f82a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f82e:	9001      	str	r0, [sp, #4]
 800f830:	2b00      	cmp	r3, #0
 800f832:	f1a1 0404 	sub.w	r4, r1, #4
 800f836:	bfb8      	it	lt
 800f838:	18e4      	addlt	r4, r4, r3
 800f83a:	f000 f8e3 	bl	800fa04 <__malloc_lock>
 800f83e:	4a1e      	ldr	r2, [pc, #120]	; (800f8b8 <_free_r+0x94>)
 800f840:	9801      	ldr	r0, [sp, #4]
 800f842:	6813      	ldr	r3, [r2, #0]
 800f844:	b933      	cbnz	r3, 800f854 <_free_r+0x30>
 800f846:	6063      	str	r3, [r4, #4]
 800f848:	6014      	str	r4, [r2, #0]
 800f84a:	b003      	add	sp, #12
 800f84c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f850:	f000 b8de 	b.w	800fa10 <__malloc_unlock>
 800f854:	42a3      	cmp	r3, r4
 800f856:	d908      	bls.n	800f86a <_free_r+0x46>
 800f858:	6825      	ldr	r5, [r4, #0]
 800f85a:	1961      	adds	r1, r4, r5
 800f85c:	428b      	cmp	r3, r1
 800f85e:	bf01      	itttt	eq
 800f860:	6819      	ldreq	r1, [r3, #0]
 800f862:	685b      	ldreq	r3, [r3, #4]
 800f864:	1949      	addeq	r1, r1, r5
 800f866:	6021      	streq	r1, [r4, #0]
 800f868:	e7ed      	b.n	800f846 <_free_r+0x22>
 800f86a:	461a      	mov	r2, r3
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	b10b      	cbz	r3, 800f874 <_free_r+0x50>
 800f870:	42a3      	cmp	r3, r4
 800f872:	d9fa      	bls.n	800f86a <_free_r+0x46>
 800f874:	6811      	ldr	r1, [r2, #0]
 800f876:	1855      	adds	r5, r2, r1
 800f878:	42a5      	cmp	r5, r4
 800f87a:	d10b      	bne.n	800f894 <_free_r+0x70>
 800f87c:	6824      	ldr	r4, [r4, #0]
 800f87e:	4421      	add	r1, r4
 800f880:	1854      	adds	r4, r2, r1
 800f882:	42a3      	cmp	r3, r4
 800f884:	6011      	str	r1, [r2, #0]
 800f886:	d1e0      	bne.n	800f84a <_free_r+0x26>
 800f888:	681c      	ldr	r4, [r3, #0]
 800f88a:	685b      	ldr	r3, [r3, #4]
 800f88c:	6053      	str	r3, [r2, #4]
 800f88e:	4421      	add	r1, r4
 800f890:	6011      	str	r1, [r2, #0]
 800f892:	e7da      	b.n	800f84a <_free_r+0x26>
 800f894:	d902      	bls.n	800f89c <_free_r+0x78>
 800f896:	230c      	movs	r3, #12
 800f898:	6003      	str	r3, [r0, #0]
 800f89a:	e7d6      	b.n	800f84a <_free_r+0x26>
 800f89c:	6825      	ldr	r5, [r4, #0]
 800f89e:	1961      	adds	r1, r4, r5
 800f8a0:	428b      	cmp	r3, r1
 800f8a2:	bf04      	itt	eq
 800f8a4:	6819      	ldreq	r1, [r3, #0]
 800f8a6:	685b      	ldreq	r3, [r3, #4]
 800f8a8:	6063      	str	r3, [r4, #4]
 800f8aa:	bf04      	itt	eq
 800f8ac:	1949      	addeq	r1, r1, r5
 800f8ae:	6021      	streq	r1, [r4, #0]
 800f8b0:	6054      	str	r4, [r2, #4]
 800f8b2:	e7ca      	b.n	800f84a <_free_r+0x26>
 800f8b4:	b003      	add	sp, #12
 800f8b6:	bd30      	pop	{r4, r5, pc}
 800f8b8:	20004d40 	.word	0x20004d40

0800f8bc <sbrk_aligned>:
 800f8bc:	b570      	push	{r4, r5, r6, lr}
 800f8be:	4e0e      	ldr	r6, [pc, #56]	; (800f8f8 <sbrk_aligned+0x3c>)
 800f8c0:	460c      	mov	r4, r1
 800f8c2:	6831      	ldr	r1, [r6, #0]
 800f8c4:	4605      	mov	r5, r0
 800f8c6:	b911      	cbnz	r1, 800f8ce <sbrk_aligned+0x12>
 800f8c8:	f000 f88c 	bl	800f9e4 <_sbrk_r>
 800f8cc:	6030      	str	r0, [r6, #0]
 800f8ce:	4621      	mov	r1, r4
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	f000 f887 	bl	800f9e4 <_sbrk_r>
 800f8d6:	1c43      	adds	r3, r0, #1
 800f8d8:	d00a      	beq.n	800f8f0 <sbrk_aligned+0x34>
 800f8da:	1cc4      	adds	r4, r0, #3
 800f8dc:	f024 0403 	bic.w	r4, r4, #3
 800f8e0:	42a0      	cmp	r0, r4
 800f8e2:	d007      	beq.n	800f8f4 <sbrk_aligned+0x38>
 800f8e4:	1a21      	subs	r1, r4, r0
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	f000 f87c 	bl	800f9e4 <_sbrk_r>
 800f8ec:	3001      	adds	r0, #1
 800f8ee:	d101      	bne.n	800f8f4 <sbrk_aligned+0x38>
 800f8f0:	f04f 34ff 	mov.w	r4, #4294967295
 800f8f4:	4620      	mov	r0, r4
 800f8f6:	bd70      	pop	{r4, r5, r6, pc}
 800f8f8:	20004d44 	.word	0x20004d44

0800f8fc <_malloc_r>:
 800f8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f900:	1ccd      	adds	r5, r1, #3
 800f902:	f025 0503 	bic.w	r5, r5, #3
 800f906:	3508      	adds	r5, #8
 800f908:	2d0c      	cmp	r5, #12
 800f90a:	bf38      	it	cc
 800f90c:	250c      	movcc	r5, #12
 800f90e:	2d00      	cmp	r5, #0
 800f910:	4607      	mov	r7, r0
 800f912:	db01      	blt.n	800f918 <_malloc_r+0x1c>
 800f914:	42a9      	cmp	r1, r5
 800f916:	d905      	bls.n	800f924 <_malloc_r+0x28>
 800f918:	230c      	movs	r3, #12
 800f91a:	603b      	str	r3, [r7, #0]
 800f91c:	2600      	movs	r6, #0
 800f91e:	4630      	mov	r0, r6
 800f920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f924:	4e2e      	ldr	r6, [pc, #184]	; (800f9e0 <_malloc_r+0xe4>)
 800f926:	f000 f86d 	bl	800fa04 <__malloc_lock>
 800f92a:	6833      	ldr	r3, [r6, #0]
 800f92c:	461c      	mov	r4, r3
 800f92e:	bb34      	cbnz	r4, 800f97e <_malloc_r+0x82>
 800f930:	4629      	mov	r1, r5
 800f932:	4638      	mov	r0, r7
 800f934:	f7ff ffc2 	bl	800f8bc <sbrk_aligned>
 800f938:	1c43      	adds	r3, r0, #1
 800f93a:	4604      	mov	r4, r0
 800f93c:	d14d      	bne.n	800f9da <_malloc_r+0xde>
 800f93e:	6834      	ldr	r4, [r6, #0]
 800f940:	4626      	mov	r6, r4
 800f942:	2e00      	cmp	r6, #0
 800f944:	d140      	bne.n	800f9c8 <_malloc_r+0xcc>
 800f946:	6823      	ldr	r3, [r4, #0]
 800f948:	4631      	mov	r1, r6
 800f94a:	4638      	mov	r0, r7
 800f94c:	eb04 0803 	add.w	r8, r4, r3
 800f950:	f000 f848 	bl	800f9e4 <_sbrk_r>
 800f954:	4580      	cmp	r8, r0
 800f956:	d13a      	bne.n	800f9ce <_malloc_r+0xd2>
 800f958:	6821      	ldr	r1, [r4, #0]
 800f95a:	3503      	adds	r5, #3
 800f95c:	1a6d      	subs	r5, r5, r1
 800f95e:	f025 0503 	bic.w	r5, r5, #3
 800f962:	3508      	adds	r5, #8
 800f964:	2d0c      	cmp	r5, #12
 800f966:	bf38      	it	cc
 800f968:	250c      	movcc	r5, #12
 800f96a:	4629      	mov	r1, r5
 800f96c:	4638      	mov	r0, r7
 800f96e:	f7ff ffa5 	bl	800f8bc <sbrk_aligned>
 800f972:	3001      	adds	r0, #1
 800f974:	d02b      	beq.n	800f9ce <_malloc_r+0xd2>
 800f976:	6823      	ldr	r3, [r4, #0]
 800f978:	442b      	add	r3, r5
 800f97a:	6023      	str	r3, [r4, #0]
 800f97c:	e00e      	b.n	800f99c <_malloc_r+0xa0>
 800f97e:	6822      	ldr	r2, [r4, #0]
 800f980:	1b52      	subs	r2, r2, r5
 800f982:	d41e      	bmi.n	800f9c2 <_malloc_r+0xc6>
 800f984:	2a0b      	cmp	r2, #11
 800f986:	d916      	bls.n	800f9b6 <_malloc_r+0xba>
 800f988:	1961      	adds	r1, r4, r5
 800f98a:	42a3      	cmp	r3, r4
 800f98c:	6025      	str	r5, [r4, #0]
 800f98e:	bf18      	it	ne
 800f990:	6059      	strne	r1, [r3, #4]
 800f992:	6863      	ldr	r3, [r4, #4]
 800f994:	bf08      	it	eq
 800f996:	6031      	streq	r1, [r6, #0]
 800f998:	5162      	str	r2, [r4, r5]
 800f99a:	604b      	str	r3, [r1, #4]
 800f99c:	4638      	mov	r0, r7
 800f99e:	f104 060b 	add.w	r6, r4, #11
 800f9a2:	f000 f835 	bl	800fa10 <__malloc_unlock>
 800f9a6:	f026 0607 	bic.w	r6, r6, #7
 800f9aa:	1d23      	adds	r3, r4, #4
 800f9ac:	1af2      	subs	r2, r6, r3
 800f9ae:	d0b6      	beq.n	800f91e <_malloc_r+0x22>
 800f9b0:	1b9b      	subs	r3, r3, r6
 800f9b2:	50a3      	str	r3, [r4, r2]
 800f9b4:	e7b3      	b.n	800f91e <_malloc_r+0x22>
 800f9b6:	6862      	ldr	r2, [r4, #4]
 800f9b8:	42a3      	cmp	r3, r4
 800f9ba:	bf0c      	ite	eq
 800f9bc:	6032      	streq	r2, [r6, #0]
 800f9be:	605a      	strne	r2, [r3, #4]
 800f9c0:	e7ec      	b.n	800f99c <_malloc_r+0xa0>
 800f9c2:	4623      	mov	r3, r4
 800f9c4:	6864      	ldr	r4, [r4, #4]
 800f9c6:	e7b2      	b.n	800f92e <_malloc_r+0x32>
 800f9c8:	4634      	mov	r4, r6
 800f9ca:	6876      	ldr	r6, [r6, #4]
 800f9cc:	e7b9      	b.n	800f942 <_malloc_r+0x46>
 800f9ce:	230c      	movs	r3, #12
 800f9d0:	603b      	str	r3, [r7, #0]
 800f9d2:	4638      	mov	r0, r7
 800f9d4:	f000 f81c 	bl	800fa10 <__malloc_unlock>
 800f9d8:	e7a1      	b.n	800f91e <_malloc_r+0x22>
 800f9da:	6025      	str	r5, [r4, #0]
 800f9dc:	e7de      	b.n	800f99c <_malloc_r+0xa0>
 800f9de:	bf00      	nop
 800f9e0:	20004d40 	.word	0x20004d40

0800f9e4 <_sbrk_r>:
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	4d06      	ldr	r5, [pc, #24]	; (800fa00 <_sbrk_r+0x1c>)
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	4604      	mov	r4, r0
 800f9ec:	4608      	mov	r0, r1
 800f9ee:	602b      	str	r3, [r5, #0]
 800f9f0:	f7f3 faee 	bl	8002fd0 <_sbrk>
 800f9f4:	1c43      	adds	r3, r0, #1
 800f9f6:	d102      	bne.n	800f9fe <_sbrk_r+0x1a>
 800f9f8:	682b      	ldr	r3, [r5, #0]
 800f9fa:	b103      	cbz	r3, 800f9fe <_sbrk_r+0x1a>
 800f9fc:	6023      	str	r3, [r4, #0]
 800f9fe:	bd38      	pop	{r3, r4, r5, pc}
 800fa00:	20004d48 	.word	0x20004d48

0800fa04 <__malloc_lock>:
 800fa04:	4801      	ldr	r0, [pc, #4]	; (800fa0c <__malloc_lock+0x8>)
 800fa06:	f000 b809 	b.w	800fa1c <__retarget_lock_acquire_recursive>
 800fa0a:	bf00      	nop
 800fa0c:	20004d4c 	.word	0x20004d4c

0800fa10 <__malloc_unlock>:
 800fa10:	4801      	ldr	r0, [pc, #4]	; (800fa18 <__malloc_unlock+0x8>)
 800fa12:	f000 b804 	b.w	800fa1e <__retarget_lock_release_recursive>
 800fa16:	bf00      	nop
 800fa18:	20004d4c 	.word	0x20004d4c

0800fa1c <__retarget_lock_acquire_recursive>:
 800fa1c:	4770      	bx	lr

0800fa1e <__retarget_lock_release_recursive>:
 800fa1e:	4770      	bx	lr

0800fa20 <_init>:
 800fa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa22:	bf00      	nop
 800fa24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa26:	bc08      	pop	{r3}
 800fa28:	469e      	mov	lr, r3
 800fa2a:	4770      	bx	lr

0800fa2c <_fini>:
 800fa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa2e:	bf00      	nop
 800fa30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa32:	bc08      	pop	{r3}
 800fa34:	469e      	mov	lr, r3
 800fa36:	4770      	bx	lr
