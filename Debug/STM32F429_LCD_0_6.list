
STM32F429_LCD_0_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a7c  080102a8  080102a8  000202a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d24  08012d24  000300f0  2**0
                  CONTENTS
  4 .ARM          00000008  08012d24  08012d24  00022d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d2c  08012d2c  000300f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d2c  08012d2c  00022d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012d30  08012d30  00022d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08012d34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300f0  2**0
                  CONTENTS
 10 .bss          00004c90  200000f0  200000f0  000300f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004d80  20004d80  000300f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000324f7  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000694d  00000000  00000000  00062617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000027a0  00000000  00000000  00068f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002510  00000000  00000000  0006b708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f21c  00000000  00000000  0006dc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003409c  00000000  00000000  0009ce34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105ad7  00000000  00000000  000d0ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d69a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a9f8  00000000  00000000  001d69f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010290 	.word	0x08010290

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	08010290 	.word	0x08010290

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <vApplicationGetIdleTaskMemory+0x2c>)
 8000514:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <vApplicationGetIdleTaskMemory+0x30>)
 800051a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000522:	bf00      	nop
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	2000010c 	.word	0x2000010c
 8000534:	20000160 	.word	0x20000160

08000538 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800053c:	f001 fa8a 	bl	8001a54 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000540:	20ca      	movs	r0, #202	; 0xca
 8000542:	f000 f95d 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000546:	20c3      	movs	r0, #195	; 0xc3
 8000548:	f000 f967 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800054c:	2008      	movs	r0, #8
 800054e:	f000 f964 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000552:	2050      	movs	r0, #80	; 0x50
 8000554:	f000 f961 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000558:	20cf      	movs	r0, #207	; 0xcf
 800055a:	f000 f951 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800055e:	2000      	movs	r0, #0
 8000560:	f000 f95b 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000564:	20c1      	movs	r0, #193	; 0xc1
 8000566:	f000 f958 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800056a:	2030      	movs	r0, #48	; 0x30
 800056c:	f000 f955 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000570:	20ed      	movs	r0, #237	; 0xed
 8000572:	f000 f945 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000576:	2064      	movs	r0, #100	; 0x64
 8000578:	f000 f94f 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800057c:	2003      	movs	r0, #3
 800057e:	f000 f94c 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000582:	2012      	movs	r0, #18
 8000584:	f000 f949 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000588:	2081      	movs	r0, #129	; 0x81
 800058a:	f000 f946 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800058e:	20e8      	movs	r0, #232	; 0xe8
 8000590:	f000 f936 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000594:	2085      	movs	r0, #133	; 0x85
 8000596:	f000 f940 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800059a:	2000      	movs	r0, #0
 800059c:	f000 f93d 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80005a0:	2078      	movs	r0, #120	; 0x78
 80005a2:	f000 f93a 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80005a6:	20cb      	movs	r0, #203	; 0xcb
 80005a8:	f000 f92a 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80005ac:	2039      	movs	r0, #57	; 0x39
 80005ae:	f000 f934 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80005b2:	202c      	movs	r0, #44	; 0x2c
 80005b4:	f000 f931 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 f92e 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80005be:	2034      	movs	r0, #52	; 0x34
 80005c0:	f000 f92b 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80005c4:	2002      	movs	r0, #2
 80005c6:	f000 f928 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80005ca:	20f7      	movs	r0, #247	; 0xf7
 80005cc:	f000 f918 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80005d0:	2020      	movs	r0, #32
 80005d2:	f000 f922 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80005d6:	20ea      	movs	r0, #234	; 0xea
 80005d8:	f000 f912 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 f91c 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f919 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80005e8:	20b1      	movs	r0, #177	; 0xb1
 80005ea:	f000 f909 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f913 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80005f4:	201b      	movs	r0, #27
 80005f6:	f000 f910 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80005fa:	20b6      	movs	r0, #182	; 0xb6
 80005fc:	f000 f900 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000600:	200a      	movs	r0, #10
 8000602:	f000 f90a 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000606:	20a2      	movs	r0, #162	; 0xa2
 8000608:	f000 f907 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800060c:	20c0      	movs	r0, #192	; 0xc0
 800060e:	f000 f8f7 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000612:	2010      	movs	r0, #16
 8000614:	f000 f901 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000618:	20c1      	movs	r0, #193	; 0xc1
 800061a:	f000 f8f1 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800061e:	2010      	movs	r0, #16
 8000620:	f000 f8fb 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000624:	20c5      	movs	r0, #197	; 0xc5
 8000626:	f000 f8eb 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800062a:	2045      	movs	r0, #69	; 0x45
 800062c:	f000 f8f5 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000630:	2015      	movs	r0, #21
 8000632:	f000 f8f2 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000636:	20c7      	movs	r0, #199	; 0xc7
 8000638:	f000 f8e2 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800063c:	2090      	movs	r0, #144	; 0x90
 800063e:	f000 f8ec 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000642:	2036      	movs	r0, #54	; 0x36
 8000644:	f000 f8dc 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000648:	20c8      	movs	r0, #200	; 0xc8
 800064a:	f000 f8e6 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800064e:	20f2      	movs	r0, #242	; 0xf2
 8000650:	f000 f8d6 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000654:	2000      	movs	r0, #0
 8000656:	f000 f8e0 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800065a:	20b0      	movs	r0, #176	; 0xb0
 800065c:	f000 f8d0 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000660:	20c2      	movs	r0, #194	; 0xc2
 8000662:	f000 f8da 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000666:	20b6      	movs	r0, #182	; 0xb6
 8000668:	f000 f8ca 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800066c:	200a      	movs	r0, #10
 800066e:	f000 f8d4 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000672:	20a7      	movs	r0, #167	; 0xa7
 8000674:	f000 f8d1 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000678:	2027      	movs	r0, #39	; 0x27
 800067a:	f000 f8ce 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800067e:	2004      	movs	r0, #4
 8000680:	f000 f8cb 	bl	800081a <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000684:	202a      	movs	r0, #42	; 0x2a
 8000686:	f000 f8bb 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800068a:	2000      	movs	r0, #0
 800068c:	f000 f8c5 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000690:	2000      	movs	r0, #0
 8000692:	f000 f8c2 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000696:	2000      	movs	r0, #0
 8000698:	f000 f8bf 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800069c:	20ef      	movs	r0, #239	; 0xef
 800069e:	f000 f8bc 	bl	800081a <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80006a2:	202b      	movs	r0, #43	; 0x2b
 80006a4:	f000 f8ac 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 f8b6 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 f8b3 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f8b0 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80006ba:	203f      	movs	r0, #63	; 0x3f
 80006bc:	f000 f8ad 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80006c0:	20f6      	movs	r0, #246	; 0xf6
 80006c2:	f000 f89d 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80006c6:	2001      	movs	r0, #1
 80006c8:	f000 f8a7 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 f8a4 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80006d2:	2006      	movs	r0, #6
 80006d4:	f000 f8a1 	bl	800081a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80006d8:	202c      	movs	r0, #44	; 0x2c
 80006da:	f000 f891 	bl	8000800 <ili9341_WriteReg>
  LCD_Delay(200);
 80006de:	20c8      	movs	r0, #200	; 0xc8
 80006e0:	f001 faa6 	bl	8001c30 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80006e4:	2026      	movs	r0, #38	; 0x26
 80006e6:	f000 f88b 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 f895 	bl	800081a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80006f0:	20e0      	movs	r0, #224	; 0xe0
 80006f2:	f000 f885 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80006f6:	200f      	movs	r0, #15
 80006f8:	f000 f88f 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80006fc:	2029      	movs	r0, #41	; 0x29
 80006fe:	f000 f88c 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000702:	2024      	movs	r0, #36	; 0x24
 8000704:	f000 f889 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000708:	200c      	movs	r0, #12
 800070a:	f000 f886 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800070e:	200e      	movs	r0, #14
 8000710:	f000 f883 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000714:	2009      	movs	r0, #9
 8000716:	f000 f880 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800071a:	204e      	movs	r0, #78	; 0x4e
 800071c:	f000 f87d 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000720:	2078      	movs	r0, #120	; 0x78
 8000722:	f000 f87a 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000726:	203c      	movs	r0, #60	; 0x3c
 8000728:	f000 f877 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800072c:	2009      	movs	r0, #9
 800072e:	f000 f874 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000732:	2013      	movs	r0, #19
 8000734:	f000 f871 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000738:	2005      	movs	r0, #5
 800073a:	f000 f86e 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800073e:	2017      	movs	r0, #23
 8000740:	f000 f86b 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000744:	2011      	movs	r0, #17
 8000746:	f000 f868 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800074a:	2000      	movs	r0, #0
 800074c:	f000 f865 	bl	800081a <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000750:	20e1      	movs	r0, #225	; 0xe1
 8000752:	f000 f855 	bl	8000800 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000756:	2000      	movs	r0, #0
 8000758:	f000 f85f 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800075c:	2016      	movs	r0, #22
 800075e:	f000 f85c 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000762:	201b      	movs	r0, #27
 8000764:	f000 f859 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000768:	2004      	movs	r0, #4
 800076a:	f000 f856 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800076e:	2011      	movs	r0, #17
 8000770:	f000 f853 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000774:	2007      	movs	r0, #7
 8000776:	f000 f850 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800077a:	2031      	movs	r0, #49	; 0x31
 800077c:	f000 f84d 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000780:	2033      	movs	r0, #51	; 0x33
 8000782:	f000 f84a 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000786:	2042      	movs	r0, #66	; 0x42
 8000788:	f000 f847 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800078c:	2005      	movs	r0, #5
 800078e:	f000 f844 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000792:	200c      	movs	r0, #12
 8000794:	f000 f841 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000798:	200a      	movs	r0, #10
 800079a:	f000 f83e 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 f83b 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80007a4:	202f      	movs	r0, #47	; 0x2f
 80007a6:	f000 f838 	bl	800081a <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80007aa:	200f      	movs	r0, #15
 80007ac:	f000 f835 	bl	800081a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80007b0:	2011      	movs	r0, #17
 80007b2:	f000 f825 	bl	8000800 <ili9341_WriteReg>
  LCD_Delay(200);
 80007b6:	20c8      	movs	r0, #200	; 0xc8
 80007b8:	f001 fa3a 	bl	8001c30 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80007bc:	2029      	movs	r0, #41	; 0x29
 80007be:	f000 f81f 	bl	8000800 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80007c2:	202c      	movs	r0, #44	; 0x2c
 80007c4:	f000 f81c 	bl	8000800 <ili9341_WriteReg>
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80007d0:	f001 f940 	bl	8001a54 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80007d4:	2103      	movs	r1, #3
 80007d6:	20d3      	movs	r0, #211	; 0xd3
 80007d8:	f000 f82c 	bl	8000834 <ili9341_ReadData>
 80007dc:	4603      	mov	r3, r0
 80007de:	b29b      	uxth	r3, r3
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80007e8:	2029      	movs	r0, #41	; 0x29
 80007ea:	f000 f809 	bl	8000800 <ili9341_WriteReg>
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80007f6:	2028      	movs	r0, #40	; 0x28
 80007f8:	f000 f802 	bl	8000800 <ili9341_WriteReg>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4618      	mov	r0, r3
 800080e:	f001 f9bb 	bl	8001b88 <LCD_IO_WriteReg>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000824:	88fb      	ldrh	r3, [r7, #6]
 8000826:	4618      	mov	r0, r3
 8000828:	f001 f98c 	bl	8001b44 <LCD_IO_WriteData>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	460a      	mov	r2, r1
 800083e:	80fb      	strh	r3, [r7, #6]
 8000840:	4613      	mov	r3, r2
 8000842:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000844:	797a      	ldrb	r2, [r7, #5]
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f001 f9be 	bl	8001bcc <LCD_IO_ReadData>
 8000850:	4603      	mov	r3, r0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800085e:	23f0      	movs	r3, #240	; 0xf0
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800086e:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b5b0      	push	{r4, r5, r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000882:	f002 fdab 	bl	80033dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000886:	f000 f82f 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088a:	f000 fb19 	bl	8000ec0 <MX_GPIO_Init>
  MX_CRC_Init();
 800088e:	f000 f8e7 	bl	8000a60 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000892:	f000 f8f9 	bl	8000a88 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000896:	f000 fac3 	bl	8000e20 <MX_FMC_Init>
  MX_I2C3_Init();
 800089a:	f000 f927 	bl	8000aec <MX_I2C3_Init>
  MX_LTDC_Init();
 800089e:	f000 f965 	bl	8000b6c <MX_LTDC_Init>
  MX_SPI5_Init();
 80008a2:	f000 f9e3 	bl	8000c6c <MX_SPI5_Init>
  MX_TIM1_Init();
 80008a6:	f000 fa17 	bl	8000cd8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80008aa:	f000 fa8f 	bl	8000dcc <MX_USART1_UART_Init>
  MX_UART5_Init();
 80008ae:	f000 fa63 	bl	8000d78 <MX_UART5_Init>
  MX_ADC1_Init();
 80008b2:	f000 f883 	bl	80009bc <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008b6:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <main+0x64>)
 80008b8:	1d3c      	adds	r4, r7, #4
 80008ba:	461d      	mov	r5, r3
 80008bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f00a fb6e 	bl	800afae <osThreadCreate>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a03      	ldr	r2, [pc, #12]	; (80008e4 <main+0x68>)
 80008d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008d8:	f00a fb62 	bl	800afa0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <main+0x60>
 80008de:	bf00      	nop
 80008e0:	080102b4 	.word	0x080102b4
 80008e4:	20000648 	.word	0x20000648

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	; 0x50
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0320 	add.w	r3, r7, #32
 80008f2:	2230      	movs	r2, #48	; 0x30
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f00f fbc4 	bl	8010084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <SystemClock_Config+0xcc>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	4a27      	ldr	r2, [pc, #156]	; (80009b4 <SystemClock_Config+0xcc>)
 8000916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091a:	6413      	str	r3, [r2, #64]	; 0x40
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <SystemClock_Config+0xcc>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <SystemClock_Config+0xd0>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a21      	ldr	r2, [pc, #132]	; (80009b8 <SystemClock_Config+0xd0>)
 8000932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <SystemClock_Config+0xd0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094e:	2302      	movs	r3, #2
 8000950:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000952:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000956:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000958:	2304      	movs	r3, #4
 800095a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800095c:	23a8      	movs	r3, #168	; 0xa8
 800095e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000960:	2302      	movs	r3, #2
 8000962:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000964:	2307      	movs	r3, #7
 8000966:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	4618      	mov	r0, r3
 800096e:	f006 fcaf 	bl	80072d0 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000978:	f000 ffa8 	bl	80018cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2302      	movs	r3, #2
 8000982:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000988:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800098c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800098e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000992:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2105      	movs	r1, #5
 800099a:	4618      	mov	r0, r3
 800099c:	f006 ff10 	bl	80077c0 <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009a6:	f000 ff91 	bl	80018cc <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3750      	adds	r7, #80	; 0x50
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40007000 	.word	0x40007000

080009bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009d0:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <MX_ADC1_Init+0x9c>)
 80009d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_ADC1_Init+0x98>)
 80009fe:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <MX_ADC1_Init+0xa0>)
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_ADC1_Init+0x98>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_ADC1_Init+0x98>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_ADC1_Init+0x98>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_ADC1_Init+0x98>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <MX_ADC1_Init+0x98>)
 8000a1e:	f002 fd43 	bl	80034a8 <HAL_ADC_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a28:	f000 ff50 	bl	80018cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_ADC1_Init+0x98>)
 8000a3e:	f002 ff15 	bl	800386c <HAL_ADC_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a48:	f000 ff40 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000360 	.word	0x20000360
 8000a58:	40012000 	.word	0x40012000
 8000a5c:	0f000001 	.word	0x0f000001

08000a60 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_CRC_Init+0x20>)
 8000a66:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <MX_CRC_Init+0x24>)
 8000a68:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_CRC_Init+0x20>)
 8000a6c:	f003 fa0e 	bl	8003e8c <HAL_CRC_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a76:	f000 ff29 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200003a8 	.word	0x200003a8
 8000a84:	40023000 	.word	0x40023000

08000a88 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_DMA2D_Init+0x5c>)
 8000a8e:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <MX_DMA2D_Init+0x60>)
 8000a90:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_DMA2D_Init+0x5c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_DMA2D_Init+0x5c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_DMA2D_Init+0x5c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_DMA2D_Init+0x5c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_DMA2D_Init+0x5c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_DMA2D_Init+0x5c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_DMA2D_Init+0x5c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <MX_DMA2D_Init+0x5c>)
 8000abe:	f003 fbbf 	bl	8004240 <HAL_DMA2D_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000ac8:	f000 ff00 	bl	80018cc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000acc:	2101      	movs	r1, #1
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_DMA2D_Init+0x5c>)
 8000ad0:	f003 fe24 	bl	800471c <HAL_DMA2D_ConfigLayer>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ada:	f000 fef7 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200003b0 	.word	0x200003b0
 8000ae8:	4002b000 	.word	0x4002b000

08000aec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000af2:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <MX_I2C3_Init+0x78>)
 8000af4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000af8:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <MX_I2C3_Init+0x7c>)
 8000afa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b2a:	f005 fe01 	bl	8006730 <HAL_I2C_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b34:	f000 feca 	bl	80018cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b3c:	f005 ff3c 	bl	80069b8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000b46:	f000 fec1 	bl	80018cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b4e:	f005 ff6f 	bl	8006a30 <HAL_I2CEx_ConfigDigitalFilter>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b58:	f000 feb8 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200003f0 	.word	0x200003f0
 8000b64:	40005c00 	.word	0x40005c00
 8000b68:	000186a0 	.word	0x000186a0

08000b6c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08e      	sub	sp, #56	; 0x38
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2234      	movs	r2, #52	; 0x34
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f00f fa83 	bl	8010084 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b7e:	4b39      	ldr	r3, [pc, #228]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000b80:	4a39      	ldr	r2, [pc, #228]	; (8000c68 <MX_LTDC_Init+0xfc>)
 8000b82:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b84:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b8a:	4b36      	ldr	r3, [pc, #216]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b90:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b96:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000b9c:	4b31      	ldr	r3, [pc, #196]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000b9e:	2209      	movs	r2, #9
 8000ba0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000ba2:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000baa:	221d      	movs	r2, #29
 8000bac:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000bb6:	f240 120d 	movw	r2, #269	; 0x10d
 8000bba:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000bbc:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000bbe:	f240 1243 	movw	r2, #323	; 0x143
 8000bc2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000bc6:	f240 1217 	movw	r2, #279	; 0x117
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000bcc:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000bce:	f240 1247 	movw	r2, #327	; 0x147
 8000bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bd4:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bdc:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bec:	481d      	ldr	r0, [pc, #116]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000bee:	f005 ff5f 	bl	8006ab0 <HAL_LTDC_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000bf8:	f000 fe68 	bl	80018cc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000c00:	23f0      	movs	r3, #240	; 0xf0
 8000c02:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000c08:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c0c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c12:	23ff      	movs	r3, #255	; 0xff
 8000c14:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c1e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c20:	2307      	movs	r3, #7
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000c24:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000c2a:	23f0      	movs	r3, #240	; 0xf0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000c2e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_LTDC_Init+0xf8>)
 8000c4e:	f006 f8c1 	bl	8006dd4 <HAL_LTDC_ConfigLayer>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000c58:	f000 fe38 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	3738      	adds	r7, #56	; 0x38
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000444 	.word	0x20000444
 8000c68:	40016800 	.word	0x40016800

08000c6c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_SPI5_Init+0x64>)
 8000c72:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <MX_SPI5_Init+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_SPI5_Init+0x64>)
 8000c78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c7c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_SPI5_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_SPI5_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_SPI5_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_SPI5_Init+0x64>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_SPI5_Init+0x64>)
 8000c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c9c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_SPI5_Init+0x64>)
 8000ca0:	2218      	movs	r2, #24
 8000ca2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <MX_SPI5_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_SPI5_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <MX_SPI5_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_SPI5_Init+0x64>)
 8000cb8:	220a      	movs	r2, #10
 8000cba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <MX_SPI5_Init+0x64>)
 8000cbe:	f007 fa22 	bl	8008106 <HAL_SPI_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000cc8:	f000 fe00 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200004ec 	.word	0x200004ec
 8000cd4:	40015000 	.word	0x40015000

08000cd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_TIM1_Init+0x98>)
 8000cf6:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <MX_TIM1_Init+0x9c>)
 8000cf8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_TIM1_Init+0x98>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_TIM1_Init+0x98>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_TIM1_Init+0x98>)
 8000d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_TIM1_Init+0x98>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_TIM1_Init+0x98>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_TIM1_Init+0x98>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d20:	4813      	ldr	r0, [pc, #76]	; (8000d70 <MX_TIM1_Init+0x98>)
 8000d22:	f007 ffcf 	bl	8008cc4 <HAL_TIM_Base_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d2c:	f000 fdce 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480c      	ldr	r0, [pc, #48]	; (8000d70 <MX_TIM1_Init+0x98>)
 8000d3e:	f008 f989 	bl	8009054 <HAL_TIM_ConfigClockSource>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d48:	f000 fdc0 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_TIM1_Init+0x98>)
 8000d5a:	f008 fba5 	bl	80094a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d64:	f000 fdb2 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000544 	.word	0x20000544
 8000d74:	40010000 	.word	0x40010000

08000d78 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_UART5_Init+0x4c>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <MX_UART5_Init+0x50>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_UART5_Init+0x4c>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_UART5_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_UART5_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_UART5_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_UART5_Init+0x4c>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_UART5_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_UART5_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_UART5_Init+0x4c>)
 8000db0:	f008 fc0a 	bl	80095c8 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000dba:	f000 fd87 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000058c 	.word	0x2000058c
 8000dc8:	40005000 	.word	0x40005000

08000dcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <MX_USART1_UART_Init+0x50>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_USART1_UART_Init+0x4c>)
 8000e04:	f008 fbe0 	bl	80095c8 <HAL_UART_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e0e:	f000 fd5d 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200005d0 	.word	0x200005d0
 8000e1c:	40011000 	.word	0x40011000

08000e20 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
 8000e34:	615a      	str	r2, [r3, #20]
 8000e36:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_FMC_Init+0x98>)
 8000e3a:	4a20      	ldr	r2, [pc, #128]	; (8000ebc <MX_FMC_Init+0x9c>)
 8000e3c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <MX_FMC_Init+0x98>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_FMC_Init+0x98>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_FMC_Init+0x98>)
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <MX_FMC_Init+0x98>)
 8000e52:	2210      	movs	r2, #16
 8000e54:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_FMC_Init+0x98>)
 8000e58:	2240      	movs	r2, #64	; 0x40
 8000e5a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_FMC_Init+0x98>)
 8000e5e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000e62:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_FMC_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_FMC_Init+0x98>)
 8000e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e70:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_FMC_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_FMC_Init+0x98>)
 8000e7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e84:	2307      	movs	r3, #7
 8000e86:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000e90:	2303      	movs	r3, #3
 8000e92:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_FMC_Init+0x98>)
 8000ea2:	f007 f89f 	bl	8007fe4 <HAL_SDRAM_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000eac:	f000 fd0e 	bl	80018cc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000eb0:	bf00      	nop
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000614 	.word	0x20000614
 8000ebc:	a0000140 	.word	0xa0000140

08000ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08e      	sub	sp, #56	; 0x38
 8000ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
 8000eda:	4b84      	ldr	r3, [pc, #528]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a83      	ldr	r2, [pc, #524]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000ee0:	f043 0310 	orr.w	r3, r3, #16
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b81      	ldr	r3, [pc, #516]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	623b      	str	r3, [r7, #32]
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
 8000ef6:	4b7d      	ldr	r3, [pc, #500]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a7c      	ldr	r2, [pc, #496]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b7a      	ldr	r3, [pc, #488]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	61fb      	str	r3, [r7, #28]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	4b76      	ldr	r3, [pc, #472]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a75      	ldr	r2, [pc, #468]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b73      	ldr	r3, [pc, #460]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0320 	and.w	r3, r3, #32
 8000f26:	61bb      	str	r3, [r7, #24]
 8000f28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	4b6f      	ldr	r3, [pc, #444]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a6e      	ldr	r2, [pc, #440]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b6c      	ldr	r3, [pc, #432]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b68      	ldr	r3, [pc, #416]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a67      	ldr	r2, [pc, #412]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b65      	ldr	r3, [pc, #404]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b61      	ldr	r3, [pc, #388]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a60      	ldr	r2, [pc, #384]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b5e      	ldr	r3, [pc, #376]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b5a      	ldr	r3, [pc, #360]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a59      	ldr	r2, [pc, #356]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b57      	ldr	r3, [pc, #348]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b53      	ldr	r3, [pc, #332]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a52      	ldr	r2, [pc, #328]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b50      	ldr	r3, [pc, #320]	; (80010ec <MX_GPIO_Init+0x22c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_BLUE_1_Pin|LED_YELLOW_2_Pin|LED_GREEN_3_Pin|LED_RED_4_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	213c      	movs	r1, #60	; 0x3c
 8000fba:	484d      	ldr	r0, [pc, #308]	; (80010f0 <MX_GPIO_Init+0x230>)
 8000fbc:	f003 ff94 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2116      	movs	r1, #22
 8000fc4:	484b      	ldr	r0, [pc, #300]	; (80010f4 <MX_GPIO_Init+0x234>)
 8000fc6:	f003 ff8f 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	484a      	ldr	r0, [pc, #296]	; (80010f8 <MX_GPIO_Init+0x238>)
 8000fd0:	f003 ff8a 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000fda:	4848      	ldr	r0, [pc, #288]	; (80010fc <MX_GPIO_Init+0x23c>)
 8000fdc:	f003 ff84 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000fe6:	4846      	ldr	r0, [pc, #280]	; (8001100 <MX_GPIO_Init+0x240>)
 8000fe8:	f003 ff7e 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_1_Pin LED_YELLOW_2_Pin LED_GREEN_3_Pin LED_RED_4_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_1_Pin|LED_YELLOW_2_Pin|LED_GREEN_3_Pin|LED_RED_4_Pin;
 8000fec:	233c      	movs	r3, #60	; 0x3c
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001000:	4619      	mov	r1, r3
 8001002:	483b      	ldr	r0, [pc, #236]	; (80010f0 <MX_GPIO_Init+0x230>)
 8001004:	f003 fcb8 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001008:	2316      	movs	r3, #22
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	4835      	ldr	r0, [pc, #212]	; (80010f4 <MX_GPIO_Init+0x234>)
 8001020:	f003 fcaa 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001024:	f248 0307 	movw	r3, #32775	; 0x8007
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800102a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	4619      	mov	r1, r3
 800103a:	482f      	ldr	r0, [pc, #188]	; (80010f8 <MX_GPIO_Init+0x238>)
 800103c:	f003 fc9c 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	4828      	ldr	r0, [pc, #160]	; (80010f8 <MX_GPIO_Init+0x238>)
 8001058:	f003 fc8e 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800105c:	2320      	movs	r3, #32
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001060:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	4619      	mov	r1, r3
 8001070:	4820      	ldr	r0, [pc, #128]	; (80010f4 <MX_GPIO_Init+0x234>)
 8001072:	f003 fc81 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001076:	2304      	movs	r3, #4
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	481e      	ldr	r0, [pc, #120]	; (8001104 <MX_GPIO_Init+0x244>)
 800108a:	f003 fc75 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800108e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001094:	2300      	movs	r3, #0
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a0:	4619      	mov	r1, r3
 80010a2:	4816      	ldr	r0, [pc, #88]	; (80010fc <MX_GPIO_Init+0x23c>)
 80010a4:	f003 fc68 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80010a8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	4619      	mov	r1, r3
 80010c0:	480e      	ldr	r0, [pc, #56]	; (80010fc <MX_GPIO_Init+0x23c>)
 80010c2:	f003 fc59 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80010c6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <MX_GPIO_Init+0x240>)
 80010e0:	f003 fc4a 	bl	8004978 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e4:	bf00      	nop
 80010e6:	3738      	adds	r7, #56	; 0x38
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40020c00 	.word	0x40020c00
 8001100:	40021800 	.word	0x40021800
 8001104:	40020400 	.word	0x40020400

08001108 <apaga_leds>:

/* USER CODE BEGIN 4 */
void apaga_leds(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2104      	movs	r1, #4
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <apaga_leds+0x30>)
 8001112:	f003 fee9 	bl	8004ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2108      	movs	r1, #8
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <apaga_leds+0x30>)
 800111c:	f003 fee4 	bl	8004ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2110      	movs	r1, #16
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <apaga_leds+0x30>)
 8001126:	f003 fedf 	bl	8004ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2120      	movs	r1, #32
 800112e:	4802      	ldr	r0, [pc, #8]	; (8001138 <apaga_leds+0x30>)
 8001130:	f003 feda 	bl	8004ee8 <HAL_GPIO_WritePin>
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021000 	.word	0x40021000

0800113c <float_to_char>:
void float_to_char(char *total_str,float value)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0c0      	sub	sp, #256	; 0x100
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	ed87 0a02 	vstr	s0, [r7, #8]
	int ipart=(int)value; //Extracting interger part only
 8001148:	edd7 7a02 	vldr	s15, [r7, #8]
 800114c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001150:	ee17 3a90 	vmov	r3, s15
 8001154:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	float fpart=value-(int)value; //Extracting floating value only
 8001158:	edd7 7a02 	vldr	s15, [r7, #8]
 800115c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001164:	ed97 7a02 	vldr	s14, [r7, #8]
 8001168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116c:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
	int reversed=0;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	int i=0;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	char istring[100];
	if(ipart==0)
 800117c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001180:	2b00      	cmp	r3, #0
 8001182:	d124      	bne.n	80011ce <float_to_char+0x92>
	{
		istring[0]='0';
 8001184:	2330      	movs	r3, #48	; 0x30
 8001186:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 800118a:	e04b      	b.n	8001224 <float_to_char+0xe8>
	}
	else
	{
		while(ipart>0)
		{
			reversed=reversed*10 + ipart%10; //Reversing integer
 800118c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4618      	mov	r0, r3
 800119a:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800119e:	4b6b      	ldr	r3, [pc, #428]	; (800134c <float_to_char+0x210>)
 80011a0:	fb83 2301 	smull	r2, r3, r3, r1
 80011a4:	109a      	asrs	r2, r3, #2
 80011a6:	17cb      	asrs	r3, r1, #31
 80011a8:	1ad2      	subs	r2, r2, r3
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	1aca      	subs	r2, r1, r3
 80011b4:	1883      	adds	r3, r0, r2
 80011b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			ipart=ipart/10;
 80011ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80011be:	4a63      	ldr	r2, [pc, #396]	; (800134c <float_to_char+0x210>)
 80011c0:	fb82 1203 	smull	r1, r2, r2, r3
 80011c4:	1092      	asrs	r2, r2, #2
 80011c6:	17db      	asrs	r3, r3, #31
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		while(ipart>0)
 80011ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	dcda      	bgt.n	800118c <float_to_char+0x50>
		}
	}
	while(reversed>0)
 80011d6:	e025      	b.n	8001224 <float_to_char+0xe8>
	{
		istring[i]=reversed%10+'0'; //Adding digits to string array
 80011d8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80011dc:	4b5b      	ldr	r3, [pc, #364]	; (800134c <float_to_char+0x210>)
 80011de:	fb83 1302 	smull	r1, r3, r3, r2
 80011e2:	1099      	asrs	r1, r3, #2
 80011e4:	17d3      	asrs	r3, r2, #31
 80011e6:	1ac9      	subs	r1, r1, r3
 80011e8:	460b      	mov	r3, r1
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	1ad1      	subs	r1, r2, r3
 80011f2:	b2cb      	uxtb	r3, r1
 80011f4:	3330      	adds	r3, #48	; 0x30
 80011f6:	b2d9      	uxtb	r1, r3
 80011f8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80011fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001200:	4413      	add	r3, r2
 8001202:	460a      	mov	r2, r1
 8001204:	701a      	strb	r2, [r3, #0]
		reversed=reversed/10;
 8001206:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800120a:	4a50      	ldr	r2, [pc, #320]	; (800134c <float_to_char+0x210>)
 800120c:	fb82 1203 	smull	r1, r2, r2, r3
 8001210:	1092      	asrs	r2, r2, #2
 8001212:	17db      	asrs	r3, r3, #31
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		i++;
 800121a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800121e:	3301      	adds	r3, #1
 8001220:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	while(reversed>0)
 8001224:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001228:	2b00      	cmp	r3, #0
 800122a:	dcd5      	bgt.n	80011d8 <float_to_char+0x9c>
	}
	char fstring[100];
	int k = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	float x= fpart;
 8001232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001236:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	fstring[k]='.'; //Adding . as decimal point
 800123a:	f107 0214 	add.w	r2, r7, #20
 800123e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001242:	4413      	add	r3, r2
 8001244:	222e      	movs	r2, #46	; 0x2e
 8001246:	701a      	strb	r2, [r3, #0]
	k++;
 8001248:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800124c:	3301      	adds	r3, #1
 800124e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	for(int j=0;j<6;j++)
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001258:	e02d      	b.n	80012b6 <float_to_char+0x17a>
	{
		x=x*10;
 800125a:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 800125e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001266:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
		fstring[k]='0'+(int)x;
 800126a:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 800126e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001272:	edc7 7a01 	vstr	s15, [r7, #4]
 8001276:	793b      	ldrb	r3, [r7, #4]
 8001278:	3330      	adds	r3, #48	; 0x30
 800127a:	b2d9      	uxtb	r1, r3
 800127c:	f107 0214 	add.w	r2, r7, #20
 8001280:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001284:	4413      	add	r3, r2
 8001286:	460a      	mov	r2, r1
 8001288:	701a      	strb	r2, [r3, #0]
		x=x-(int)x;
 800128a:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 800128e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001296:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 800129a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129e:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
		k++;
 80012a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80012a6:	3301      	adds	r3, #1
 80012a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	for(int j=0;j<6;j++)
 80012ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80012b0:	3301      	adds	r3, #1
 80012b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80012b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80012ba:	2b05      	cmp	r3, #5
 80012bc:	ddcd      	ble.n	800125a <float_to_char+0x11e>
	}

	int len = strlen(istring); //Length of integer string
 80012be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7fe ff94 	bl	80001f0 <strlen>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for(int i=0;i<100;i++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80012d4:	e030      	b.n	8001338 <float_to_char+0x1fc>
	{
		if(istring[i]!='\0')
 80012d6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80012da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012de:	4413      	add	r3, r2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00b      	beq.n	80012fe <float_to_char+0x1c2>
		{
			total_str[i]=istring[i]; //Grouping integer string and floating value string
 80012e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80012f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80012f6:	440a      	add	r2, r1
 80012f8:	7812      	ldrb	r2, [r2, #0]
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	e017      	b.n	800132e <float_to_char+0x1f2>
		}
		else if(fstring[i]!='\0')
 80012fe:	f107 0214 	add.w	r2, r7, #20
 8001302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00f      	beq.n	800132e <float_to_char+0x1f2>
		{
			total_str[i]=fstring[i-len];
 800130e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001316:	1ad2      	subs	r2, r2, r3
 8001318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800131c:	68f9      	ldr	r1, [r7, #12]
 800131e:	440b      	add	r3, r1
 8001320:	32f8      	adds	r2, #248	; 0xf8
 8001322:	f107 0108 	add.w	r1, r7, #8
 8001326:	440a      	add	r2, r1
 8001328:	f812 2cec 	ldrb.w	r2, [r2, #-236]
 800132c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<100;i++)
 800132e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001332:	3301      	adds	r3, #1
 8001334:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800133c:	2b63      	cmp	r3, #99	; 0x63
 800133e:	ddca      	ble.n	80012d6 <float_to_char+0x19a>
		}
	}
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	66666667 	.word	0x66666667

08001350 <ExecutionTime_task>:
void ExecutionTime_task(void *pvParameters)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    //#define configuse_newlib_reentrant 0
	/*##-1- LCD Initialization #################################################*/
	/* Initialize the LCD */
	BSP_LCD_Init();
 8001358:	f000 fc76 	bl	8001c48 <BSP_LCD_Init>

	/* Layer2 Init */
	BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 800135c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001360:	2001      	movs	r0, #1
 8001362:	f000 fcf3 	bl	8001d4c <BSP_LCD_LayerDefaultInit>
	/* Set Foreground Layer */
	BSP_LCD_SelectLayer(1);
 8001366:	2001      	movs	r0, #1
 8001368:	f000 fd54 	bl	8001e14 <BSP_LCD_SelectLayer>
	/* Clear the LCD */
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f000 fdfe 	bl	8001f70 <BSP_LCD_Clear>
	BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	2001      	movs	r0, #1
 800137a:	f000 fd99 	bl	8001eb0 <BSP_LCD_SetColorKeying>
	BSP_LCD_SetLayerVisible(1, DISABLE);
 800137e:	2100      	movs	r1, #0
 8001380:	2001      	movs	r0, #1
 8001382:	f000 fd57 	bl	8001e34 <BSP_LCD_SetLayerVisible>

	/* Layer1 Init */
	BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8001386:	496f      	ldr	r1, [pc, #444]	; (8001544 <ExecutionTime_task+0x1f4>)
 8001388:	2000      	movs	r0, #0
 800138a:	f000 fcdf 	bl	8001d4c <BSP_LCD_LayerDefaultInit>

	/* Set Foreground Layer */
	BSP_LCD_SelectLayer(0);
 800138e:	2000      	movs	r0, #0
 8001390:	f000 fd40 	bl	8001e14 <BSP_LCD_SelectLayer>

	/* Enable The LCD */
	BSP_LCD_DisplayOn();
 8001394:	f000 ff16 	bl	80021c4 <BSP_LCD_DisplayOn>

	/* Clear the LCD */
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f000 fde8 	bl	8001f70 <BSP_LCD_Clear>

	BSP_LCD_SetFont(&Font20);
 80013a0:	4869      	ldr	r0, [pc, #420]	; (8001548 <ExecutionTime_task+0x1f8>)
 80013a2:	f000 fdcb 	bl	8001f3c <BSP_LCD_SetFont>

	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - (27*2), (uint8_t*)"Execution Time:", CENTER_MODE);
 80013a6:	f000 fcc5 	bl	8001d34 <BSP_LCD_GetYSize>
 80013aa:	4603      	mov	r3, r0
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	3b36      	subs	r3, #54	; 0x36
 80013b2:	b299      	uxth	r1, r3
 80013b4:	2301      	movs	r3, #1
 80013b6:	4a65      	ldr	r2, [pc, #404]	; (800154c <ExecutionTime_task+0x1fc>)
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 fe45 	bl	8002048 <BSP_LCD_DisplayStringAt>

		/* Clear the LCD */
		//BSP_LCD_Clear(LCD_COLOR_WHITE);

		/* Set Touchscreen Demo description */
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013be:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013c2:	f000 fd89 	bl	8001ed8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80013c6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ca:	f000 fd9d 	bl	8001f08 <BSP_LCD_SetBackColor>

		//BSP_LCD_SetFont(&Font12);
		if(cont_sec <= 9){
 80013ce:	4b60      	ldr	r3, [pc, #384]	; (8001550 <ExecutionTime_task+0x200>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b09      	cmp	r3, #9
 80013d4:	d809      	bhi.n	80013ea <ExecutionTime_task+0x9a>
			sec[0] = '0';
 80013d6:	4b5f      	ldr	r3, [pc, #380]	; (8001554 <ExecutionTime_task+0x204>)
 80013d8:	2230      	movs	r2, #48	; 0x30
 80013da:	701a      	strb	r2, [r3, #0]
			sec[1] = (char)cont_sec + '0';
 80013dc:	4b5c      	ldr	r3, [pc, #368]	; (8001550 <ExecutionTime_task+0x200>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	3330      	adds	r3, #48	; 0x30
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <ExecutionTime_task+0x204>)
 80013e6:	705a      	strb	r2, [r3, #1]
 80013e8:	e0c9      	b.n	800157e <ExecutionTime_task+0x22e>
		}
		else if((cont_sec > 9) && (cont_sec <= 59)){
 80013ea:	4b59      	ldr	r3, [pc, #356]	; (8001550 <ExecutionTime_task+0x200>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b09      	cmp	r3, #9
 80013f0:	d921      	bls.n	8001436 <ExecutionTime_task+0xe6>
 80013f2:	4b57      	ldr	r3, [pc, #348]	; (8001550 <ExecutionTime_task+0x200>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b3b      	cmp	r3, #59	; 0x3b
 80013f8:	d81d      	bhi.n	8001436 <ExecutionTime_task+0xe6>
			uint8_t aux1 = cont_sec / 10;
 80013fa:	4b55      	ldr	r3, [pc, #340]	; (8001550 <ExecutionTime_task+0x200>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4a56      	ldr	r2, [pc, #344]	; (8001558 <ExecutionTime_task+0x208>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	73fb      	strb	r3, [r7, #15]
			uint8_t aux2 = cont_sec - (aux1 * 10);
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	461a      	mov	r2, r3
 800140c:	0152      	lsls	r2, r2, #5
 800140e:	1ad2      	subs	r2, r2, r3
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <ExecutionTime_task+0x200>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4413      	add	r3, r2
 800141e:	73bb      	strb	r3, [r7, #14]
			sec[0] = (char)aux1 + '0';
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	3330      	adds	r3, #48	; 0x30
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b4b      	ldr	r3, [pc, #300]	; (8001554 <ExecutionTime_task+0x204>)
 8001428:	701a      	strb	r2, [r3, #0]
			sec[1] = (char)aux2 + '0';
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	3330      	adds	r3, #48	; 0x30
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <ExecutionTime_task+0x204>)
 8001432:	705a      	strb	r2, [r3, #1]
		else if((cont_sec > 9) && (cont_sec <= 59)){
 8001434:	e0a3      	b.n	800157e <ExecutionTime_task+0x22e>
		}
		else{ // cont_sec == 60
			sec[0] = '0';
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <ExecutionTime_task+0x204>)
 8001438:	2230      	movs	r2, #48	; 0x30
 800143a:	701a      	strb	r2, [r3, #0]
			sec[1] = '0';
 800143c:	4b45      	ldr	r3, [pc, #276]	; (8001554 <ExecutionTime_task+0x204>)
 800143e:	2230      	movs	r2, #48	; 0x30
 8001440:	705a      	strb	r2, [r3, #1]
			cont_sec = 0;
 8001442:	4b43      	ldr	r3, [pc, #268]	; (8001550 <ExecutionTime_task+0x200>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]

			cont_min++;
 8001448:	4b44      	ldr	r3, [pc, #272]	; (800155c <ExecutionTime_task+0x20c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b42      	ldr	r3, [pc, #264]	; (800155c <ExecutionTime_task+0x20c>)
 8001452:	701a      	strb	r2, [r3, #0]

			if(cont_min <= 9){
 8001454:	4b41      	ldr	r3, [pc, #260]	; (800155c <ExecutionTime_task+0x20c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b09      	cmp	r3, #9
 800145a:	d809      	bhi.n	8001470 <ExecutionTime_task+0x120>
				min[0] = '0';
 800145c:	4b40      	ldr	r3, [pc, #256]	; (8001560 <ExecutionTime_task+0x210>)
 800145e:	2230      	movs	r2, #48	; 0x30
 8001460:	701a      	strb	r2, [r3, #0]
				min[1] = (char)cont_min + '0';
 8001462:	4b3e      	ldr	r3, [pc, #248]	; (800155c <ExecutionTime_task+0x20c>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	3330      	adds	r3, #48	; 0x30
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <ExecutionTime_task+0x210>)
 800146c:	705a      	strb	r2, [r3, #1]
 800146e:	e086      	b.n	800157e <ExecutionTime_task+0x22e>
			}
			else if((cont_min > 9) && (cont_min <= 59)){
 8001470:	4b3a      	ldr	r3, [pc, #232]	; (800155c <ExecutionTime_task+0x20c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b09      	cmp	r3, #9
 8001476:	d921      	bls.n	80014bc <ExecutionTime_task+0x16c>
 8001478:	4b38      	ldr	r3, [pc, #224]	; (800155c <ExecutionTime_task+0x20c>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b3b      	cmp	r3, #59	; 0x3b
 800147e:	d81d      	bhi.n	80014bc <ExecutionTime_task+0x16c>
				uint8_t aux1 = cont_min / 10;
 8001480:	4b36      	ldr	r3, [pc, #216]	; (800155c <ExecutionTime_task+0x20c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4a34      	ldr	r2, [pc, #208]	; (8001558 <ExecutionTime_task+0x208>)
 8001486:	fba2 2303 	umull	r2, r3, r2, r3
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	737b      	strb	r3, [r7, #13]
				uint8_t aux2 = cont_min - (aux1 * 10);
 800148e:	7b7b      	ldrb	r3, [r7, #13]
 8001490:	461a      	mov	r2, r3
 8001492:	0152      	lsls	r2, r2, #5
 8001494:	1ad2      	subs	r2, r2, r3
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <ExecutionTime_task+0x20c>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	733b      	strb	r3, [r7, #12]
				min[0] = (char)aux1 + '0';
 80014a6:	7b7b      	ldrb	r3, [r7, #13]
 80014a8:	3330      	adds	r3, #48	; 0x30
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <ExecutionTime_task+0x210>)
 80014ae:	701a      	strb	r2, [r3, #0]
				min[1] = (char)aux2 + '0';
 80014b0:	7b3b      	ldrb	r3, [r7, #12]
 80014b2:	3330      	adds	r3, #48	; 0x30
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <ExecutionTime_task+0x210>)
 80014b8:	705a      	strb	r2, [r3, #1]
			else if((cont_min > 9) && (cont_min <= 59)){
 80014ba:	e060      	b.n	800157e <ExecutionTime_task+0x22e>
			}
			else{ // min >= 60
				min[0] = '0';
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <ExecutionTime_task+0x210>)
 80014be:	2230      	movs	r2, #48	; 0x30
 80014c0:	701a      	strb	r2, [r3, #0]
				min[1] = '0';
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <ExecutionTime_task+0x210>)
 80014c4:	2230      	movs	r2, #48	; 0x30
 80014c6:	705a      	strb	r2, [r3, #1]
				cont_min = 0;
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <ExecutionTime_task+0x20c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]

				cont_hora++;
 80014ce:	4b25      	ldr	r3, [pc, #148]	; (8001564 <ExecutionTime_task+0x214>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <ExecutionTime_task+0x214>)
 80014d8:	701a      	strb	r2, [r3, #0]
				if(cont_hora <= 9){
 80014da:	4b22      	ldr	r3, [pc, #136]	; (8001564 <ExecutionTime_task+0x214>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b09      	cmp	r3, #9
 80014e0:	d809      	bhi.n	80014f6 <ExecutionTime_task+0x1a6>
					hora[0] = '0';
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <ExecutionTime_task+0x218>)
 80014e4:	2230      	movs	r2, #48	; 0x30
 80014e6:	701a      	strb	r2, [r3, #0]
					hora[1] = (char)cont_hora + '0';
 80014e8:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <ExecutionTime_task+0x214>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	3330      	adds	r3, #48	; 0x30
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <ExecutionTime_task+0x218>)
 80014f2:	705a      	strb	r2, [r3, #1]
 80014f4:	e043      	b.n	800157e <ExecutionTime_task+0x22e>
				}
				else if((cont_hora > 9) && (cont_hora < 24)){
 80014f6:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <ExecutionTime_task+0x214>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b09      	cmp	r3, #9
 80014fc:	d936      	bls.n	800156c <ExecutionTime_task+0x21c>
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <ExecutionTime_task+0x214>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b17      	cmp	r3, #23
 8001504:	d832      	bhi.n	800156c <ExecutionTime_task+0x21c>
					uint8_t aux1 = cont_hora / 10;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <ExecutionTime_task+0x214>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	4a13      	ldr	r2, [pc, #76]	; (8001558 <ExecutionTime_task+0x208>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	08db      	lsrs	r3, r3, #3
 8001512:	72fb      	strb	r3, [r7, #11]
					uint8_t aux2 = cont_hora - (aux1 * 10);
 8001514:	7afb      	ldrb	r3, [r7, #11]
 8001516:	461a      	mov	r2, r3
 8001518:	0152      	lsls	r2, r2, #5
 800151a:	1ad2      	subs	r2, r2, r3
 800151c:	0092      	lsls	r2, r2, #2
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	b2da      	uxtb	r2, r3
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <ExecutionTime_task+0x214>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4413      	add	r3, r2
 800152a:	72bb      	strb	r3, [r7, #10]
					hora[0] = (char)aux1 + '0';
 800152c:	7afb      	ldrb	r3, [r7, #11]
 800152e:	3330      	adds	r3, #48	; 0x30
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <ExecutionTime_task+0x218>)
 8001534:	701a      	strb	r2, [r3, #0]
					hora[1] = (char)aux2 + '0';
 8001536:	7abb      	ldrb	r3, [r7, #10]
 8001538:	3330      	adds	r3, #48	; 0x30
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <ExecutionTime_task+0x218>)
 800153e:	705a      	strb	r2, [r3, #1]
				else if((cont_hora > 9) && (cont_hora < 24)){
 8001540:	e01d      	b.n	800157e <ExecutionTime_task+0x22e>
 8001542:	bf00      	nop
 8001544:	d0130000 	.word	0xd0130000
 8001548:	20000050 	.word	0x20000050
 800154c:	080102d0 	.word	0x080102d0
 8001550:	20000658 	.word	0x20000658
 8001554:	20000038 	.word	0x20000038
 8001558:	cccccccd 	.word	0xcccccccd
 800155c:	20000659 	.word	0x20000659
 8001560:	2000003c 	.word	0x2000003c
 8001564:	2000065a 	.word	0x2000065a
 8001568:	20000040 	.word	0x20000040
				}
				else{ // cont_hora == 24
					cont_hora = 0;
 800156c:	4b53      	ldr	r3, [pc, #332]	; (80016bc <ExecutionTime_task+0x36c>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
					hora[0] = '0';
 8001572:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <ExecutionTime_task+0x370>)
 8001574:	2230      	movs	r2, #48	; 0x30
 8001576:	701a      	strb	r2, [r3, #0]
					hora[1] = '0';
 8001578:	4b51      	ldr	r3, [pc, #324]	; (80016c0 <ExecutionTime_task+0x370>)
 800157a:	2230      	movs	r2, #48	; 0x30
 800157c:	705a      	strb	r2, [r3, #1]
				}
			}
		}

		uint8_t dosPuntos = 58; // 58 = ':' en código ASCII.
 800157e:	233a      	movs	r3, #58	; 0x3a
 8001580:	727b      	strb	r3, [r7, #9]
		char dosPuntosChar = (char)dosPuntos;
 8001582:	7a7b      	ldrb	r3, [r7, #9]
 8001584:	723b      	strb	r3, [r7, #8]

//		BSP_LCD_SetFont(&Font20);
//
//		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - (27*2), (uint8_t*)"Execution Time:", CENTER_MODE);

		BSP_LCD_SetFont(&Font24);
 8001586:	484f      	ldr	r0, [pc, #316]	; (80016c4 <ExecutionTime_task+0x374>)
 8001588:	f000 fcd8 	bl	8001f3c <BSP_LCD_SetFont>

		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2 - (14*4), BSP_LCD_GetYSize()/2, hora[0]);
 800158c:	f000 fbc6 	bl	8001d1c <BSP_LCD_GetXSize>
 8001590:	4603      	mov	r3, r0
 8001592:	085b      	lsrs	r3, r3, #1
 8001594:	b29b      	uxth	r3, r3
 8001596:	3b38      	subs	r3, #56	; 0x38
 8001598:	b29c      	uxth	r4, r3
 800159a:	f000 fbcb 	bl	8001d34 <BSP_LCD_GetYSize>
 800159e:	4603      	mov	r3, r0
 80015a0:	085b      	lsrs	r3, r3, #1
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	4a46      	ldr	r2, [pc, #280]	; (80016c0 <ExecutionTime_task+0x370>)
 80015a6:	7812      	ldrb	r2, [r2, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4620      	mov	r0, r4
 80015ac:	f000 fd08 	bl	8001fc0 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2 - (14*3), BSP_LCD_GetYSize()/2, hora[1]);
 80015b0:	f000 fbb4 	bl	8001d1c <BSP_LCD_GetXSize>
 80015b4:	4603      	mov	r3, r0
 80015b6:	085b      	lsrs	r3, r3, #1
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3b2a      	subs	r3, #42	; 0x2a
 80015bc:	b29c      	uxth	r4, r3
 80015be:	f000 fbb9 	bl	8001d34 <BSP_LCD_GetYSize>
 80015c2:	4603      	mov	r3, r0
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4a3d      	ldr	r2, [pc, #244]	; (80016c0 <ExecutionTime_task+0x370>)
 80015ca:	7852      	ldrb	r2, [r2, #1]
 80015cc:	4619      	mov	r1, r3
 80015ce:	4620      	mov	r0, r4
 80015d0:	f000 fcf6 	bl	8001fc0 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2 - (14*2), BSP_LCD_GetYSize()/2, dosPuntosChar);
 80015d4:	f000 fba2 	bl	8001d1c <BSP_LCD_GetXSize>
 80015d8:	4603      	mov	r3, r0
 80015da:	085b      	lsrs	r3, r3, #1
 80015dc:	b29b      	uxth	r3, r3
 80015de:	3b1c      	subs	r3, #28
 80015e0:	b29c      	uxth	r4, r3
 80015e2:	f000 fba7 	bl	8001d34 <BSP_LCD_GetYSize>
 80015e6:	4603      	mov	r3, r0
 80015e8:	085b      	lsrs	r3, r3, #1
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	7a3a      	ldrb	r2, [r7, #8]
 80015ee:	4619      	mov	r1, r3
 80015f0:	4620      	mov	r0, r4
 80015f2:	f000 fce5 	bl	8001fc0 <BSP_LCD_DisplayChar>

		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2 - 14, BSP_LCD_GetYSize()/2, min[0]);
 80015f6:	f000 fb91 	bl	8001d1c <BSP_LCD_GetXSize>
 80015fa:	4603      	mov	r3, r0
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b0e      	subs	r3, #14
 8001602:	b29c      	uxth	r4, r3
 8001604:	f000 fb96 	bl	8001d34 <BSP_LCD_GetYSize>
 8001608:	4603      	mov	r3, r0
 800160a:	085b      	lsrs	r3, r3, #1
 800160c:	b29b      	uxth	r3, r3
 800160e:	4a2e      	ldr	r2, [pc, #184]	; (80016c8 <ExecutionTime_task+0x378>)
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	4619      	mov	r1, r3
 8001614:	4620      	mov	r0, r4
 8001616:	f000 fcd3 	bl	8001fc0 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2, min[1]);
 800161a:	f000 fb7f 	bl	8001d1c <BSP_LCD_GetXSize>
 800161e:	4603      	mov	r3, r0
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	b29c      	uxth	r4, r3
 8001624:	f000 fb86 	bl	8001d34 <BSP_LCD_GetYSize>
 8001628:	4603      	mov	r3, r0
 800162a:	085b      	lsrs	r3, r3, #1
 800162c:	b29b      	uxth	r3, r3
 800162e:	4a26      	ldr	r2, [pc, #152]	; (80016c8 <ExecutionTime_task+0x378>)
 8001630:	7852      	ldrb	r2, [r2, #1]
 8001632:	4619      	mov	r1, r3
 8001634:	4620      	mov	r0, r4
 8001636:	f000 fcc3 	bl	8001fc0 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2 + 14, BSP_LCD_GetYSize()/2, dosPuntosChar);
 800163a:	f000 fb6f 	bl	8001d1c <BSP_LCD_GetXSize>
 800163e:	4603      	mov	r3, r0
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	b29b      	uxth	r3, r3
 8001644:	330e      	adds	r3, #14
 8001646:	b29c      	uxth	r4, r3
 8001648:	f000 fb74 	bl	8001d34 <BSP_LCD_GetYSize>
 800164c:	4603      	mov	r3, r0
 800164e:	085b      	lsrs	r3, r3, #1
 8001650:	b29b      	uxth	r3, r3
 8001652:	7a3a      	ldrb	r2, [r7, #8]
 8001654:	4619      	mov	r1, r3
 8001656:	4620      	mov	r0, r4
 8001658:	f000 fcb2 	bl	8001fc0 <BSP_LCD_DisplayChar>

		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2 + (14*2), BSP_LCD_GetYSize()/2, sec[0]);
 800165c:	f000 fb5e 	bl	8001d1c <BSP_LCD_GetXSize>
 8001660:	4603      	mov	r3, r0
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	b29b      	uxth	r3, r3
 8001666:	331c      	adds	r3, #28
 8001668:	b29c      	uxth	r4, r3
 800166a:	f000 fb63 	bl	8001d34 <BSP_LCD_GetYSize>
 800166e:	4603      	mov	r3, r0
 8001670:	085b      	lsrs	r3, r3, #1
 8001672:	b29b      	uxth	r3, r3
 8001674:	4a15      	ldr	r2, [pc, #84]	; (80016cc <ExecutionTime_task+0x37c>)
 8001676:	7812      	ldrb	r2, [r2, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	4620      	mov	r0, r4
 800167c:	f000 fca0 	bl	8001fc0 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(BSP_LCD_GetXSize()/2 + (14*3), BSP_LCD_GetYSize()/2, sec[1]);
 8001680:	f000 fb4c 	bl	8001d1c <BSP_LCD_GetXSize>
 8001684:	4603      	mov	r3, r0
 8001686:	085b      	lsrs	r3, r3, #1
 8001688:	b29b      	uxth	r3, r3
 800168a:	332a      	adds	r3, #42	; 0x2a
 800168c:	b29c      	uxth	r4, r3
 800168e:	f000 fb51 	bl	8001d34 <BSP_LCD_GetYSize>
 8001692:	4603      	mov	r3, r0
 8001694:	085b      	lsrs	r3, r3, #1
 8001696:	b29b      	uxth	r3, r3
 8001698:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <ExecutionTime_task+0x37c>)
 800169a:	7852      	ldrb	r2, [r2, #1]
 800169c:	4619      	mov	r1, r3
 800169e:	4620      	mov	r0, r4
 80016a0:	f000 fc8e 	bl	8001fc0 <BSP_LCD_DisplayChar>

		cont_sec++;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <ExecutionTime_task+0x380>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <ExecutionTime_task+0x380>)
 80016ae:	701a      	strb	r2, [r3, #0]
		vTaskDelay(1000);// Retraso 1s, que son 1000 ticks de reloj
 80016b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016b4:	f00b fa10 	bl	800cad8 <vTaskDelay>
	{
 80016b8:	e681      	b.n	80013be <ExecutionTime_task+0x6e>
 80016ba:	bf00      	nop
 80016bc:	2000065a 	.word	0x2000065a
 80016c0:	20000040 	.word	0x20000040
 80016c4:	20000048 	.word	0x20000048
 80016c8:	2000003c 	.word	0x2000003c
 80016cc:	20000038 	.word	0x20000038
 80016d0:	20000658 	.word	0x20000658

080016d4 <Sequence_task>:
	}
}
void Sequence_task(void *pvParameters)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    #define configuse_newlib_reentrant 1

	while(1)
	{
		//vTaskDelay(1500/portTICK_PERIOD_MS);
		vTaskDelay(1500);
 80016dc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80016e0:	f00b f9fa 	bl	800cad8 <vTaskDelay>

        //#define configuse_newlib_reentrant 1

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 80016e4:	2201      	movs	r2, #1
 80016e6:	2104      	movs	r1, #4
 80016e8:	4812      	ldr	r0, [pc, #72]	; (8001734 <Sequence_task+0x60>)
 80016ea:	f003 fbfd 	bl	8004ee8 <HAL_GPIO_WritePin>

		//vTaskDelay(1500/portTICK_PERIOD_MS);
		vTaskDelay(1500);
 80016ee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80016f2:	f00b f9f1 	bl	800cad8 <vTaskDelay>

        //#define configuse_newlib_reentrant 1

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80016f6:	2201      	movs	r2, #1
 80016f8:	2108      	movs	r1, #8
 80016fa:	480e      	ldr	r0, [pc, #56]	; (8001734 <Sequence_task+0x60>)
 80016fc:	f003 fbf4 	bl	8004ee8 <HAL_GPIO_WritePin>

		//vTaskDelay(1500/portTICK_PERIOD_MS);
		vTaskDelay(1500);
 8001700:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001704:	f00b f9e8 	bl	800cad8 <vTaskDelay>

        //#define configuse_newlib_reentrant 1

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	2110      	movs	r1, #16
 800170c:	4809      	ldr	r0, [pc, #36]	; (8001734 <Sequence_task+0x60>)
 800170e:	f003 fbeb 	bl	8004ee8 <HAL_GPIO_WritePin>

		//vTaskDelay(1500/portTICK_PERIOD_MS);
		vTaskDelay(1500);
 8001712:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001716:	f00b f9df 	bl	800cad8 <vTaskDelay>

        //#define configuse_newlib_reentrant 1

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 800171a:	2201      	movs	r2, #1
 800171c:	2120      	movs	r1, #32
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <Sequence_task+0x60>)
 8001720:	f003 fbe2 	bl	8004ee8 <HAL_GPIO_WritePin>

		//vTaskDelay(1500/portTICK_PERIOD_MS);
		vTaskDelay(1500);
 8001724:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001728:	f00b f9d6 	bl	800cad8 <vTaskDelay>
		apaga_leds();
 800172c:	f7ff fcec 	bl	8001108 <apaga_leds>
		vTaskDelay(1500);
 8001730:	e7d4      	b.n	80016dc <Sequence_task+0x8>
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <ADC1_IN5_task>:
	}
}
void ADC1_IN5_task(void *pvParameters)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Read Channel 5 ADC1:

		HAL_ADC_Stop(&hadc1);
 8001740:	482d      	ldr	r0, [pc, #180]	; (80017f8 <ADC1_IN5_task+0xc0>)
 8001742:	f001 ffc7 	bl	80036d4 <HAL_ADC_Stop>

		sConfig.Channel = ADC_CHANNEL_5;
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <ADC1_IN5_task+0xc4>)
 8001748:	2205      	movs	r2, #5
 800174a:	601a      	str	r2, [r3, #0]
		sConfig.Rank = 1;
 800174c:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <ADC1_IN5_task+0xc4>)
 800174e:	2201      	movs	r2, #1
 8001750:	605a      	str	r2, [r3, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <ADC1_IN5_task+0xc4>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001758:	4928      	ldr	r1, [pc, #160]	; (80017fc <ADC1_IN5_task+0xc4>)
 800175a:	4827      	ldr	r0, [pc, #156]	; (80017f8 <ADC1_IN5_task+0xc0>)
 800175c:	f002 f886 	bl	800386c <HAL_ADC_ConfigChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <ADC1_IN5_task+0x32>
		{
			Error_Handler();
 8001766:	f000 f8b1 	bl	80018cc <Error_Handler>
		}

		HAL_ADC_Start(&hadc1);
 800176a:	4823      	ldr	r0, [pc, #140]	; (80017f8 <ADC1_IN5_task+0xc0>)
 800176c:	f001 fee0 	bl	8003530 <HAL_ADC_Start>

		HAL_ADC_PollForConversion(&hadc1, 50);
 8001770:	2132      	movs	r1, #50	; 0x32
 8001772:	4821      	ldr	r0, [pc, #132]	; (80017f8 <ADC1_IN5_task+0xc0>)
 8001774:	f001 ffe1 	bl	800373a <HAL_ADC_PollForConversion>

		ReadsADC1[0] = HAL_ADC_GetValue(&hadc1);
 8001778:	481f      	ldr	r0, [pc, #124]	; (80017f8 <ADC1_IN5_task+0xc0>)
 800177a:	f002 f869 	bl	8003850 <HAL_ADC_GetValue>
 800177e:	4603      	mov	r3, r0
 8001780:	4a1f      	ldr	r2, [pc, #124]	; (8001800 <ADC1_IN5_task+0xc8>)
 8001782:	6013      	str	r3, [r2, #0]

		voltADC1_CH5 = (5 *(float)ReadsADC1[0]) / 4095;
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <ADC1_IN5_task+0xc8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001790:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001794:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001798:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001804 <ADC1_IN5_task+0xcc>
 800179c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <ADC1_IN5_task+0xd0>)
 80017a2:	edc3 7a00 	vstr	s15, [r3]

		float_to_char(TxBuffer, voltADC1_CH5);
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <ADC1_IN5_task+0xd0>)
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	eeb0 0a67 	vmov.f32	s0, s15
 80017b0:	4816      	ldr	r0, [pc, #88]	; (800180c <ADC1_IN5_task+0xd4>)
 80017b2:	f7ff fcc3 	bl	800113c <float_to_char>

		HAL_UART_Transmit(&huart5, (uint8_t *)"\n\r", sizeof("\n\r"), 500);
 80017b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017ba:	2203      	movs	r2, #3
 80017bc:	4914      	ldr	r1, [pc, #80]	; (8001810 <ADC1_IN5_task+0xd8>)
 80017be:	4815      	ldr	r0, [pc, #84]	; (8001814 <ADC1_IN5_task+0xdc>)
 80017c0:	f007 ff4f 	bl	8009662 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart5, (uint8_t *)"ADC1_IN5 Conversion: ", sizeof("ADC1_IN5 Conversion: "), 500);
 80017c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017c8:	2216      	movs	r2, #22
 80017ca:	4913      	ldr	r1, [pc, #76]	; (8001818 <ADC1_IN5_task+0xe0>)
 80017cc:	4811      	ldr	r0, [pc, #68]	; (8001814 <ADC1_IN5_task+0xdc>)
 80017ce:	f007 ff48 	bl	8009662 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart5, (uint8_t *)TxBuffer, sizeof(TxBuffer), 500);
 80017d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017d6:	2205      	movs	r2, #5
 80017d8:	490c      	ldr	r1, [pc, #48]	; (800180c <ADC1_IN5_task+0xd4>)
 80017da:	480e      	ldr	r0, [pc, #56]	; (8001814 <ADC1_IN5_task+0xdc>)
 80017dc:	f007 ff41 	bl	8009662 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart5, (uint8_t *)"\n\r", sizeof("\n\r"), 500);
 80017e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017e4:	2203      	movs	r2, #3
 80017e6:	490a      	ldr	r1, [pc, #40]	; (8001810 <ADC1_IN5_task+0xd8>)
 80017e8:	480a      	ldr	r0, [pc, #40]	; (8001814 <ADC1_IN5_task+0xdc>)
 80017ea:	f007 ff3a 	bl	8009662 <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart5, (uint8_t *)&voltADC1_CH5, sizeof(voltADC1_CH5), 500);
//		printf("\n\r");
//		printf("Hola\n\r");
		//printf("Voltaje ADC1_IN5: %f\n\r", voltADC1_CH5);

		vTaskDelay(10);
 80017ee:	200a      	movs	r0, #10
 80017f0:	f00b f972 	bl	800cad8 <vTaskDelay>
		HAL_ADC_Stop(&hadc1);
 80017f4:	e7a4      	b.n	8001740 <ADC1_IN5_task+0x8>
 80017f6:	bf00      	nop
 80017f8:	20000360 	.word	0x20000360
 80017fc:	2000065c 	.word	0x2000065c
 8001800:	2000066c 	.word	0x2000066c
 8001804:	457ff000 	.word	0x457ff000
 8001808:	2000067c 	.word	0x2000067c
 800180c:	20000680 	.word	0x20000680
 8001810:	080102e0 	.word	0x080102e0
 8001814:	2000058c 	.word	0x2000058c
 8001818:	080102e4 	.word	0x080102e4

0800181c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af02      	add	r7, sp, #8
 8001822:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001824:	f00e f8de 	bl	800f9e4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //CREACION DE TAREAS CON ASIGNACION DE MEMORIA DINAMICA
	  taskENTER_CRITICAL();  // Entrar en la zona crítica
 8001828:	f00a f8cc 	bl	800b9c4 <vPortEnterCritical>
	  // Crear tarea TASK1
	  xTaskCreate(	(TaskFunction_t )ExecutionTime_task,	//Funcion de la Tarea a ejecutar
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <StartDefaultTask+0x64>)
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	2301      	movs	r3, #1
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2300      	movs	r3, #0
 8001836:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800183a:	4912      	ldr	r1, [pc, #72]	; (8001884 <StartDefaultTask+0x68>)
 800183c:	4812      	ldr	r0, [pc, #72]	; (8001888 <StartDefaultTask+0x6c>)
 800183e:	f00a ff84 	bl	800c74a <xTaskCreate>
	  			(const char*    )"ExecutionTimeTask",		//Nombre de la Tarea, propositos de Depuracion
	  			(uint16_t       )2048+1024,					//Pila de Memoria a usar en esta Tarea
	  			(void*          )NULL,						//Ningun apuntero a parametros
	  			(UBaseType_t    )1,							//Prioridad Normal de la Tarea
	  			(TaskHandle_t*  )&ExecutionTime_Handler);	// ID declarado de esta Tarea
	  xTaskCreate(	(TaskFunction_t )Sequence_task,	        //Funcion de la Tarea a ejecutar
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <StartDefaultTask+0x70>)
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	2301      	movs	r3, #1
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2300      	movs	r3, #0
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	4910      	ldr	r1, [pc, #64]	; (8001890 <StartDefaultTask+0x74>)
 8001850:	4810      	ldr	r0, [pc, #64]	; (8001894 <StartDefaultTask+0x78>)
 8001852:	f00a ff7a 	bl	800c74a <xTaskCreate>
	  			(const char*    )"Sequence_LEDS",		    //Nombre de la Tarea, propositos de Depuracion
	  			(uint16_t       )128,					    //Pila de Memoria a usar en esta Tarea
	  			(void*          )NULL,						//Ningun apuntero a parametros
	  			(UBaseType_t    )1,							//Prioridad Normal de la Tarea
	  			(TaskHandle_t*  )&SequenceTask_Handler);	// ID declarado de esta Tarea
	  xTaskCreate(	(TaskFunction_t )ADC1_IN5_task,	        //Funcion de la Tarea a ejecutar
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <StartDefaultTask+0x7c>)
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	2300      	movs	r3, #0
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2300      	movs	r3, #0
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	490e      	ldr	r1, [pc, #56]	; (800189c <StartDefaultTask+0x80>)
 8001864:	480e      	ldr	r0, [pc, #56]	; (80018a0 <StartDefaultTask+0x84>)
 8001866:	f00a ff70 	bl	800c74a <xTaskCreate>
	  			(const char*    )"ADC_Conversor",		    //Nombre de la Tarea, propositos de Depuracion
	  			(uint16_t       )128,					    //Pila de Memoria a usar en esta Tarea
	  			(void*          )NULL,						//Ningun apuntero a parametros
	  			(UBaseType_t    )0,							//Prioridad Normal de la Tarea
	  			(TaskHandle_t*  )&ADC1_IN5_Handler);	// ID declarado de esta Tarea
	  vTaskDelete(defaultTaskHandle); //Borrar esta tarea
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <StartDefaultTask+0x88>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f00b f8a2 	bl	800c9b8 <vTaskDelete>
	  taskEXIT_CRITICAL();            //Salir en la zona crítica
 8001874:	f00a f8d6 	bl	800ba24 <vPortExitCritical>
	  osDelay(1);
 8001878:	2001      	movs	r0, #1
 800187a:	f009 fbe4 	bl	800b046 <osDelay>
	  taskENTER_CRITICAL();  // Entrar en la zona crítica
 800187e:	e7d3      	b.n	8001828 <StartDefaultTask+0xc>
 8001880:	2000064c 	.word	0x2000064c
 8001884:	080102fc 	.word	0x080102fc
 8001888:	08001351 	.word	0x08001351
 800188c:	20000650 	.word	0x20000650
 8001890:	08010310 	.word	0x08010310
 8001894:	080016d5 	.word	0x080016d5
 8001898:	20000654 	.word	0x20000654
 800189c:	08010320 	.word	0x08010320
 80018a0:	08001739 	.word	0x08001739
 80018a4:	20000648 	.word	0x20000648

080018a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d101      	bne.n	80018be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018ba:	f001 fdb1 	bl	8003420 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40001000 	.word	0x40001000

080018cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
}
 80018d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <Error_Handler+0x8>
	...

080018d8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80018dc:	4819      	ldr	r0, [pc, #100]	; (8001944 <SPIx_Init+0x6c>)
 80018de:	f007 f8b2 	bl	8008a46 <HAL_SPI_GetState>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d12b      	bne.n	8001940 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80018e8:	4b16      	ldr	r3, [pc, #88]	; (8001944 <SPIx_Init+0x6c>)
 80018ea:	4a17      	ldr	r2, [pc, #92]	; (8001948 <SPIx_Init+0x70>)
 80018ec:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <SPIx_Init+0x6c>)
 80018f0:	2218      	movs	r2, #24
 80018f2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <SPIx_Init+0x6c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <SPIx_Init+0x6c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001900:	4b10      	ldr	r3, [pc, #64]	; (8001944 <SPIx_Init+0x6c>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <SPIx_Init+0x6c>)
 8001908:	2200      	movs	r2, #0
 800190a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <SPIx_Init+0x6c>)
 800190e:	2207      	movs	r2, #7
 8001910:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <SPIx_Init+0x6c>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <SPIx_Init+0x6c>)
 800191a:	2200      	movs	r2, #0
 800191c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <SPIx_Init+0x6c>)
 8001920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001924:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <SPIx_Init+0x6c>)
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <SPIx_Init+0x6c>)
 800192e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001932:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001934:	4803      	ldr	r0, [pc, #12]	; (8001944 <SPIx_Init+0x6c>)
 8001936:	f000 f853 	bl	80019e0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800193a:	4802      	ldr	r0, [pc, #8]	; (8001944 <SPIx_Init+0x6c>)
 800193c:	f006 fbe3 	bl	8008106 <HAL_SPI_Init>
  } 
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000688 	.word	0x20000688
 8001948:	40015000 	.word	0x40015000

0800194c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	b29a      	uxth	r2, r3
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <SPIx_Read+0x38>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f107 0108 	add.w	r1, r7, #8
 8001966:	4808      	ldr	r0, [pc, #32]	; (8001988 <SPIx_Read+0x3c>)
 8001968:	f006 fdba 	bl	80084e0 <HAL_SPI_Receive>
 800196c:	4603      	mov	r3, r0
 800196e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001976:	f000 f827 	bl	80019c8 <SPIx_Error>
  }
  
  return readvalue;
 800197a:	68bb      	ldr	r3, [r7, #8]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000044 	.word	0x20000044
 8001988:	20000688 	.word	0x20000688

0800198c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <SPIx_Write+0x34>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	1db9      	adds	r1, r7, #6
 80019a0:	2201      	movs	r2, #1
 80019a2:	4808      	ldr	r0, [pc, #32]	; (80019c4 <SPIx_Write+0x38>)
 80019a4:	f006 fc60 	bl	8008268 <HAL_SPI_Transmit>
 80019a8:	4603      	mov	r3, r0
 80019aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80019b2:	f000 f809 	bl	80019c8 <SPIx_Error>
  }
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000044 	.word	0x20000044
 80019c4:	20000688 	.word	0x20000688

080019c8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80019cc:	4803      	ldr	r0, [pc, #12]	; (80019dc <SPIx_Error+0x14>)
 80019ce:	f006 fc23 	bl	8008218 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80019d2:	f7ff ff81 	bl	80018d8 <SPIx_Init>
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000688 	.word	0x20000688

080019e0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <SPIx_MspInit+0x6c>)
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	4a16      	ldr	r2, [pc, #88]	; (8001a4c <SPIx_MspInit+0x6c>)
 80019f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019f6:	6453      	str	r3, [r2, #68]	; 0x44
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <SPIx_MspInit+0x6c>)
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <SPIx_MspInit+0x6c>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <SPIx_MspInit+0x6c>)
 8001a0e:	f043 0320 	orr.w	r3, r3, #32
 8001a12:	6313      	str	r3, [r2, #48]	; 0x30
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <SPIx_MspInit+0x6c>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	f003 0320 	and.w	r3, r3, #32
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001a20:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001a32:	2305      	movs	r3, #5
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4804      	ldr	r0, [pc, #16]	; (8001a50 <SPIx_MspInit+0x70>)
 8001a3e:	f002 ff9b 	bl	8004978 <HAL_GPIO_Init>
}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	; 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40021400 	.word	0x40021400

08001a54 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001a5a:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <LCD_IO_Init+0xe0>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d164      	bne.n	8001b2c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001a62:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <LCD_IO_Init+0xe0>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <LCD_IO_Init+0xe4>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4a31      	ldr	r2, [pc, #196]	; (8001b38 <LCD_IO_Init+0xe4>)
 8001a72:	f043 0308 	orr.w	r3, r3, #8
 8001a76:	6313      	str	r3, [r2, #48]	; 0x30
 8001a78:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <LCD_IO_Init+0xe4>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001a92:	2302      	movs	r3, #2
 8001a94:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4827      	ldr	r0, [pc, #156]	; (8001b3c <LCD_IO_Init+0xe8>)
 8001a9e:	f002 ff6b 	bl	8004978 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <LCD_IO_Init+0xe4>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a23      	ldr	r2, [pc, #140]	; (8001b38 <LCD_IO_Init+0xe4>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <LCD_IO_Init+0xe4>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4819      	ldr	r0, [pc, #100]	; (8001b3c <LCD_IO_Init+0xe8>)
 8001ad8:	f002 ff4e 	bl	8004978 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <LCD_IO_Init+0xe4>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <LCD_IO_Init+0xe4>)
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	6313      	str	r3, [r2, #48]	; 0x30
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <LCD_IO_Init+0xe4>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001af8:	2304      	movs	r3, #4
 8001afa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001afc:	2301      	movs	r3, #1
 8001afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480c      	ldr	r0, [pc, #48]	; (8001b40 <LCD_IO_Init+0xec>)
 8001b10:	f002 ff32 	bl	8004978 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001b14:	2200      	movs	r2, #0
 8001b16:	2104      	movs	r1, #4
 8001b18:	4809      	ldr	r0, [pc, #36]	; (8001b40 <LCD_IO_Init+0xec>)
 8001b1a:	f003 f9e5 	bl	8004ee8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001b1e:	2201      	movs	r2, #1
 8001b20:	2104      	movs	r1, #4
 8001b22:	4807      	ldr	r0, [pc, #28]	; (8001b40 <LCD_IO_Init+0xec>)
 8001b24:	f003 f9e0 	bl	8004ee8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001b28:	f7ff fed6 	bl	80018d8 <SPIx_Init>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3720      	adds	r7, #32
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200006e0 	.word	0x200006e0
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020c00 	.word	0x40020c00
 8001b40:	40020800 	.word	0x40020800

08001b44 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b54:	480a      	ldr	r0, [pc, #40]	; (8001b80 <LCD_IO_WriteData+0x3c>)
 8001b56:	f003 f9c7 	bl	8004ee8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2104      	movs	r1, #4
 8001b5e:	4809      	ldr	r0, [pc, #36]	; (8001b84 <LCD_IO_WriteData+0x40>)
 8001b60:	f003 f9c2 	bl	8004ee8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff10 	bl	800198c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2104      	movs	r1, #4
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <LCD_IO_WriteData+0x40>)
 8001b72:	f003 f9b9 	bl	8004ee8 <HAL_GPIO_WritePin>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40020800 	.word	0x40020800

08001b88 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001b92:	2200      	movs	r2, #0
 8001b94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b98:	480a      	ldr	r0, [pc, #40]	; (8001bc4 <LCD_IO_WriteReg+0x3c>)
 8001b9a:	f003 f9a5 	bl	8004ee8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2104      	movs	r1, #4
 8001ba2:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <LCD_IO_WriteReg+0x40>)
 8001ba4:	f003 f9a0 	bl	8004ee8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff feed 	bl	800198c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <LCD_IO_WriteReg+0x40>)
 8001bb8:	f003 f996 	bl	8004ee8 <HAL_GPIO_WritePin>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40020c00 	.word	0x40020c00
 8001bc8:	40020800 	.word	0x40020800

08001bcc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	80fb      	strh	r3, [r7, #6]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001be0:	2200      	movs	r2, #0
 8001be2:	2104      	movs	r1, #4
 8001be4:	4810      	ldr	r0, [pc, #64]	; (8001c28 <LCD_IO_ReadData+0x5c>)
 8001be6:	f003 f97f 	bl	8004ee8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001bea:	2200      	movs	r2, #0
 8001bec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bf0:	480e      	ldr	r0, [pc, #56]	; (8001c2c <LCD_IO_ReadData+0x60>)
 8001bf2:	f003 f979 	bl	8004ee8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fec7 	bl	800198c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001bfe:	797b      	ldrb	r3, [r7, #5]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fea3 	bl	800194c <SPIx_Read>
 8001c06:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c0e:	4807      	ldr	r0, [pc, #28]	; (8001c2c <LCD_IO_ReadData+0x60>)
 8001c10:	f003 f96a 	bl	8004ee8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c14:	2201      	movs	r2, #1
 8001c16:	2104      	movs	r1, #4
 8001c18:	4803      	ldr	r0, [pc, #12]	; (8001c28 <LCD_IO_ReadData+0x5c>)
 8001c1a:	f003 f965 	bl	8004ee8 <HAL_GPIO_WritePin>
  
  return readvalue;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40020800 	.word	0x40020800
 8001c2c:	40020c00 	.word	0x40020c00

08001c30 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f001 fc11 	bl	8003460 <HAL_Delay>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001c4c:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001c4e:	4a2e      	ldr	r2, [pc, #184]	; (8001d08 <BSP_LCD_Init+0xc0>)
 8001c50:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001c52:	4b2c      	ldr	r3, [pc, #176]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001c54:	2209      	movs	r2, #9
 8001c56:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001c5e:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001c60:	221d      	movs	r2, #29
 8001c62:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001c66:	2203      	movs	r2, #3
 8001c68:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001c6c:	f240 120d 	movw	r2, #269	; 0x10d
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001c74:	f240 1243 	movw	r2, #323	; 0x143
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001c7a:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001c7c:	f240 1217 	movw	r2, #279	; 0x117
 8001c80:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001c84:	f240 1247 	movw	r2, #327	; 0x147
 8001c88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001c92:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <BSP_LCD_Init+0xc4>)
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001ca8:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <BSP_LCD_Init+0xc4>)
 8001caa:	22c0      	movs	r2, #192	; 0xc0
 8001cac:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <BSP_LCD_Init+0xc4>)
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <BSP_LCD_Init+0xc4>)
 8001cb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cba:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001cbc:	4813      	ldr	r0, [pc, #76]	; (8001d0c <BSP_LCD_Init+0xc4>)
 8001cbe:	f005 ffd1 	bl	8007c64 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8001cda:	f000 fa83 	bl	80021e4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001cde:	4809      	ldr	r0, [pc, #36]	; (8001d04 <BSP_LCD_Init+0xbc>)
 8001ce0:	f004 fee6 	bl	8006ab0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <BSP_LCD_Init+0xc8>)
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <BSP_LCD_Init+0xcc>)
 8001ce8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <BSP_LCD_Init+0xc8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001cf2:	f000 fc65 	bl	80025c0 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001cf6:	4808      	ldr	r0, [pc, #32]	; (8001d18 <BSP_LCD_Init+0xd0>)
 8001cf8:	f000 f920 	bl	8001f3c <BSP_LCD_SetFont>

  return LCD_OK;
 8001cfc:	2300      	movs	r3, #0
}  
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200006e4 	.word	0x200006e4
 8001d08:	40016800 	.word	0x40016800
 8001d0c:	200007cc 	.word	0x200007cc
 8001d10:	20000818 	.word	0x20000818
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000048 	.word	0x20000048

08001d1c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <BSP_LCD_GetXSize+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	4798      	blx	r3
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000818 	.word	0x20000818

08001d34 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <BSP_LCD_GetYSize+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	4798      	blx	r3
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000818 	.word	0x20000818

08001d4c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b090      	sub	sp, #64	; 0x40
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001d5c:	f7ff ffde 	bl	8001d1c <BSP_LCD_GetXSize>
 8001d60:	4603      	mov	r3, r0
 8001d62:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001d68:	f7ff ffe4 	bl	8001d34 <BSP_LCD_GetYSize>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001d78:	23ff      	movs	r3, #255	; 0xff
 8001d7a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001d92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001d98:	2307      	movs	r3, #7
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001d9c:	f7ff ffbe 	bl	8001d1c <BSP_LCD_GetXSize>
 8001da0:	4603      	mov	r3, r0
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001da4:	f7ff ffc6 	bl	8001d34 <BSP_LCD_GetYSize>
 8001da8:	4603      	mov	r3, r0
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001dac:	88fa      	ldrh	r2, [r7, #6]
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4619      	mov	r1, r3
 8001db4:	4814      	ldr	r0, [pc, #80]	; (8001e08 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001db6:	f005 f80d 	bl	8006dd4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	4913      	ldr	r1, [pc, #76]	; (8001e0c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3304      	adds	r3, #4
 8001dca:	f04f 32ff 	mov.w	r2, #4294967295
 8001dce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001dd0:	88fa      	ldrh	r2, [r7, #6]
 8001dd2:	490e      	ldr	r1, [pc, #56]	; (8001e0c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	3308      	adds	r3, #8
 8001de0:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001de2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001de4:	88fa      	ldrh	r2, [r7, #6]
 8001de6:	4909      	ldr	r1, [pc, #36]	; (8001e0c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001df6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001dfa:	f005 f8a7 	bl	8006f4c <HAL_LTDC_EnableDither>
}
 8001dfe:	bf00      	nop
 8001e00:	3740      	adds	r7, #64	; 0x40
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200006e4 	.word	0x200006e4
 8001e0c:	20000800 	.word	0x20000800
 8001e10:	20000048 	.word	0x20000048

08001e14 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <BSP_LCD_SelectLayer+0x1c>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6013      	str	r3, [r2, #0]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	200007fc 	.word	0x200007fc

08001e34 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d112      	bne.n	8001e6c <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <BSP_LCD_SetLayerVisible+0x78>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	01db      	lsls	r3, r3, #7
 8001e50:	4413      	add	r3, r2
 8001e52:	3384      	adds	r3, #132	; 0x84
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a15      	ldr	r2, [pc, #84]	; (8001eac <BSP_LCD_SetLayerVisible+0x78>)
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	01d2      	lsls	r2, r2, #7
 8001e60:	440a      	add	r2, r1
 8001e62:	3284      	adds	r2, #132	; 0x84
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e011      	b.n	8001e90 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <BSP_LCD_SetLayerVisible+0x78>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	01db      	lsls	r3, r3, #7
 8001e76:	4413      	add	r3, r2
 8001e78:	3384      	adds	r3, #132	; 0x84
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <BSP_LCD_SetLayerVisible+0x78>)
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	4611      	mov	r1, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	01d2      	lsls	r2, r2, #7
 8001e86:	440a      	add	r2, r1
 8001e88:	3284      	adds	r2, #132	; 0x84
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <BSP_LCD_SetLayerVisible+0x78>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <BSP_LCD_SetLayerVisible+0x78>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	200006e4 	.word	0x200006e4

08001eb0 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6839      	ldr	r1, [r7, #0]
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <BSP_LCD_SetColorKeying+0x24>)
 8001ec0:	f004 ffc6 	bl	8006e50 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <BSP_LCD_SetColorKeying+0x24>)
 8001ec8:	f005 f806 	bl	8006ed8 <HAL_LTDC_EnableColorKeying>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	200006e4 	.word	0x200006e4

08001ed8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <BSP_LCD_SetTextColor+0x28>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4907      	ldr	r1, [pc, #28]	; (8001f04 <BSP_LCD_SetTextColor+0x2c>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	601a      	str	r2, [r3, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	200007fc 	.word	0x200007fc
 8001f04:	20000800 	.word	0x20000800

08001f08 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <BSP_LCD_SetBackColor+0x2c>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4908      	ldr	r1, [pc, #32]	; (8001f38 <BSP_LCD_SetBackColor+0x30>)
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	3304      	adds	r3, #4
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	200007fc 	.word	0x200007fc
 8001f38:	20000800 	.word	0x20000800

08001f3c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <BSP_LCD_SetFont+0x2c>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4908      	ldr	r1, [pc, #32]	; (8001f6c <BSP_LCD_SetFont+0x30>)
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	3308      	adds	r3, #8
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	601a      	str	r2, [r3, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	200007fc 	.word	0x200007fc
 8001f6c:	20000800 	.word	0x20000800

08001f70 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <BSP_LCD_Clear+0x48>)
 8001f7a:	681c      	ldr	r4, [r3, #0]
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <BSP_LCD_Clear+0x48>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <BSP_LCD_Clear+0x4c>)
 8001f82:	2134      	movs	r1, #52	; 0x34
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	335c      	adds	r3, #92	; 0x5c
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461e      	mov	r6, r3
 8001f90:	f7ff fec4 	bl	8001d1c <BSP_LCD_GetXSize>
 8001f94:	4605      	mov	r5, r0
 8001f96:	f7ff fecd 	bl	8001d34 <BSP_LCD_GetYSize>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	462a      	mov	r2, r5
 8001fa8:	4631      	mov	r1, r6
 8001faa:	4620      	mov	r0, r4
 8001fac:	f000 fad0 	bl	8002550 <FillBuffer>
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb8:	200007fc 	.word	0x200007fc
 8001fbc:	200006e4 	.word	0x200006e4

08001fc0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	80bb      	strh	r3, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <BSP_LCD_DisplayChar+0x80>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	491b      	ldr	r1, [pc, #108]	; (8002044 <BSP_LCD_DisplayChar+0x84>)
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3308      	adds	r3, #8
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001fee:	4b14      	ldr	r3, [pc, #80]	; (8002040 <BSP_LCD_DisplayChar+0x80>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4c14      	ldr	r4, [pc, #80]	; (8002044 <BSP_LCD_DisplayChar+0x84>)
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4423      	add	r3, r4
 8001ffe:	3308      	adds	r3, #8
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002004:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002008:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <BSP_LCD_DisplayChar+0x80>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4c0d      	ldr	r4, [pc, #52]	; (8002044 <BSP_LCD_DisplayChar+0x84>)
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4423      	add	r3, r4
 8002018:	3308      	adds	r3, #8
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	889b      	ldrh	r3, [r3, #4]
 800201e:	3307      	adds	r3, #7
 8002020:	2b00      	cmp	r3, #0
 8002022:	da00      	bge.n	8002026 <BSP_LCD_DisplayChar+0x66>
 8002024:	3307      	adds	r3, #7
 8002026:	10db      	asrs	r3, r3, #3
 8002028:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800202c:	18ca      	adds	r2, r1, r3
 800202e:	88b9      	ldrh	r1, [r7, #4]
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f9d2 	bl	80023dc <DrawChar>
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bd90      	pop	{r4, r7, pc}
 8002040:	200007fc 	.word	0x200007fc
 8002044:	20000800 	.word	0x20000800

08002048 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002048:	b5b0      	push	{r4, r5, r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	60ba      	str	r2, [r7, #8]
 8002050:	461a      	mov	r2, r3
 8002052:	4603      	mov	r3, r0
 8002054:	81fb      	strh	r3, [r7, #14]
 8002056:	460b      	mov	r3, r1
 8002058:	81bb      	strh	r3, [r7, #12]
 800205a:	4613      	mov	r3, r2
 800205c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800205e:	2301      	movs	r3, #1
 8002060:	83fb      	strh	r3, [r7, #30]
 8002062:	2300      	movs	r3, #0
 8002064:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002072:	e002      	b.n	800207a <BSP_LCD_DisplayStringAt+0x32>
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	3301      	adds	r3, #1
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	617a      	str	r2, [r7, #20]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f6      	bne.n	8002074 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002086:	f7ff fe49 	bl	8001d1c <BSP_LCD_GetXSize>
 800208a:	4601      	mov	r1, r0
 800208c:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <BSP_LCD_DisplayStringAt+0x174>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	484b      	ldr	r0, [pc, #300]	; (80021c0 <BSP_LCD_DisplayStringAt+0x178>)
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4403      	add	r3, r0
 800209c:	3308      	adds	r3, #8
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	889b      	ldrh	r3, [r3, #4]
 80020a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a6:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d01c      	beq.n	80020e8 <BSP_LCD_DisplayStringAt+0xa0>
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	dc33      	bgt.n	800211a <BSP_LCD_DisplayStringAt+0xd2>
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d002      	beq.n	80020bc <BSP_LCD_DisplayStringAt+0x74>
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d019      	beq.n	80020ee <BSP_LCD_DisplayStringAt+0xa6>
 80020ba:	e02e      	b.n	800211a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	1ad1      	subs	r1, r2, r3
 80020c2:	4b3e      	ldr	r3, [pc, #248]	; (80021bc <BSP_LCD_DisplayStringAt+0x174>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	483e      	ldr	r0, [pc, #248]	; (80021c0 <BSP_LCD_DisplayStringAt+0x178>)
 80020c8:	4613      	mov	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4403      	add	r3, r0
 80020d2:	3308      	adds	r3, #8
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	889b      	ldrh	r3, [r3, #4]
 80020d8:	fb01 f303 	mul.w	r3, r1, r3
 80020dc:	085b      	lsrs	r3, r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	89fb      	ldrh	r3, [r7, #14]
 80020e2:	4413      	add	r3, r2
 80020e4:	83fb      	strh	r3, [r7, #30]
      break;
 80020e6:	e01b      	b.n	8002120 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	83fb      	strh	r3, [r7, #30]
      break;
 80020ec:	e018      	b.n	8002120 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	b299      	uxth	r1, r3
 80020f6:	4b31      	ldr	r3, [pc, #196]	; (80021bc <BSP_LCD_DisplayStringAt+0x174>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4831      	ldr	r0, [pc, #196]	; (80021c0 <BSP_LCD_DisplayStringAt+0x178>)
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4403      	add	r3, r0
 8002106:	3308      	adds	r3, #8
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	889b      	ldrh	r3, [r3, #4]
 800210c:	fb11 f303 	smulbb	r3, r1, r3
 8002110:	b29a      	uxth	r2, r3
 8002112:	89fb      	ldrh	r3, [r7, #14]
 8002114:	4413      	add	r3, r2
 8002116:	83fb      	strh	r3, [r7, #30]
      break;
 8002118:	e002      	b.n	8002120 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	83fb      	strh	r3, [r7, #30]
      break;
 800211e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002120:	e01a      	b.n	8002158 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	781a      	ldrb	r2, [r3, #0]
 8002126:	89b9      	ldrh	r1, [r7, #12]
 8002128:	8bfb      	ldrh	r3, [r7, #30]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff48 	bl	8001fc0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002130:	4b22      	ldr	r3, [pc, #136]	; (80021bc <BSP_LCD_DisplayStringAt+0x174>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4922      	ldr	r1, [pc, #136]	; (80021c0 <BSP_LCD_DisplayStringAt+0x178>)
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	3308      	adds	r3, #8
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	889a      	ldrh	r2, [r3, #4]
 8002146:	8bfb      	ldrh	r3, [r7, #30]
 8002148:	4413      	add	r3, r2
 800214a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	3301      	adds	r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
    i++;
 8002152:	8bbb      	ldrh	r3, [r7, #28]
 8002154:	3301      	adds	r3, #1
 8002156:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf14      	ite	ne
 8002160:	2301      	movne	r3, #1
 8002162:	2300      	moveq	r3, #0
 8002164:	b2dc      	uxtb	r4, r3
 8002166:	f7ff fdd9 	bl	8001d1c <BSP_LCD_GetXSize>
 800216a:	8bb9      	ldrh	r1, [r7, #28]
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <BSP_LCD_DisplayStringAt+0x174>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4d13      	ldr	r5, [pc, #76]	; (80021c0 <BSP_LCD_DisplayStringAt+0x178>)
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	442b      	add	r3, r5
 800217c:	3308      	adds	r3, #8
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	889b      	ldrh	r3, [r3, #4]
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	1ac3      	subs	r3, r0, r3
 8002188:	b299      	uxth	r1, r3
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <BSP_LCD_DisplayStringAt+0x174>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	480c      	ldr	r0, [pc, #48]	; (80021c0 <BSP_LCD_DisplayStringAt+0x178>)
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4403      	add	r3, r0
 800219a:	3308      	adds	r3, #8
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	889b      	ldrh	r3, [r3, #4]
 80021a0:	4299      	cmp	r1, r3
 80021a2:	bf2c      	ite	cs
 80021a4:	2301      	movcs	r3, #1
 80021a6:	2300      	movcc	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4023      	ands	r3, r4
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1b7      	bne.n	8002122 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bdb0      	pop	{r4, r5, r7, pc}
 80021bc:	200007fc 	.word	0x200007fc
 80021c0:	20000800 	.word	0x20000800

080021c4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <BSP_LCD_DisplayOn+0x1c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80021d2:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <BSP_LCD_DisplayOn+0x1c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4798      	blx	r3
  }
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000818 	.word	0x20000818

080021e4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08e      	sub	sp, #56	; 0x38
 80021e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
 80021ee:	4b61      	ldr	r3, [pc, #388]	; (8002374 <BSP_LCD_MspInit+0x190>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a60      	ldr	r2, [pc, #384]	; (8002374 <BSP_LCD_MspInit+0x190>)
 80021f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b5e      	ldr	r3, [pc, #376]	; (8002374 <BSP_LCD_MspInit+0x190>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002202:	623b      	str	r3, [r7, #32]
 8002204:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	4b5a      	ldr	r3, [pc, #360]	; (8002374 <BSP_LCD_MspInit+0x190>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a59      	ldr	r2, [pc, #356]	; (8002374 <BSP_LCD_MspInit+0x190>)
 8002210:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b57      	ldr	r3, [pc, #348]	; (8002374 <BSP_LCD_MspInit+0x190>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	4b53      	ldr	r3, [pc, #332]	; (8002374 <BSP_LCD_MspInit+0x190>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a52      	ldr	r2, [pc, #328]	; (8002374 <BSP_LCD_MspInit+0x190>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b50      	ldr	r3, [pc, #320]	; (8002374 <BSP_LCD_MspInit+0x190>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	4b4c      	ldr	r3, [pc, #304]	; (8002374 <BSP_LCD_MspInit+0x190>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a4b      	ldr	r2, [pc, #300]	; (8002374 <BSP_LCD_MspInit+0x190>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b49      	ldr	r3, [pc, #292]	; (8002374 <BSP_LCD_MspInit+0x190>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b45      	ldr	r3, [pc, #276]	; (8002374 <BSP_LCD_MspInit+0x190>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a44      	ldr	r2, [pc, #272]	; (8002374 <BSP_LCD_MspInit+0x190>)
 8002264:	f043 0304 	orr.w	r3, r3, #4
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b42      	ldr	r3, [pc, #264]	; (8002374 <BSP_LCD_MspInit+0x190>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <BSP_LCD_MspInit+0x190>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a3d      	ldr	r2, [pc, #244]	; (8002374 <BSP_LCD_MspInit+0x190>)
 8002280:	f043 0308 	orr.w	r3, r3, #8
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <BSP_LCD_MspInit+0x190>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	4b37      	ldr	r3, [pc, #220]	; (8002374 <BSP_LCD_MspInit+0x190>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a36      	ldr	r2, [pc, #216]	; (8002374 <BSP_LCD_MspInit+0x190>)
 800229c:	f043 0320 	orr.w	r3, r3, #32
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b34      	ldr	r3, [pc, #208]	; (8002374 <BSP_LCD_MspInit+0x190>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	4b30      	ldr	r3, [pc, #192]	; (8002374 <BSP_LCD_MspInit+0x190>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a2f      	ldr	r2, [pc, #188]	; (8002374 <BSP_LCD_MspInit+0x190>)
 80022b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <BSP_LCD_MspInit+0x190>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80022ca:	f641 0358 	movw	r3, #6232	; 0x1858
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80022d8:	2302      	movs	r3, #2
 80022da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80022dc:	230e      	movs	r3, #14
 80022de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80022e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e4:	4619      	mov	r1, r3
 80022e6:	4824      	ldr	r0, [pc, #144]	; (8002378 <BSP_LCD_MspInit+0x194>)
 80022e8:	f002 fb46 	bl	8004978 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80022ec:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80022f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f6:	4619      	mov	r1, r3
 80022f8:	4820      	ldr	r0, [pc, #128]	; (800237c <BSP_LCD_MspInit+0x198>)
 80022fa:	f002 fb3d 	bl	8004978 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80022fe:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002308:	4619      	mov	r1, r3
 800230a:	481d      	ldr	r0, [pc, #116]	; (8002380 <BSP_LCD_MspInit+0x19c>)
 800230c:	f002 fb34 	bl	8004978 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002310:	2348      	movs	r3, #72	; 0x48
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002318:	4619      	mov	r1, r3
 800231a:	481a      	ldr	r0, [pc, #104]	; (8002384 <BSP_LCD_MspInit+0x1a0>)
 800231c:	f002 fb2c 	bl	8004978 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232a:	4619      	mov	r1, r3
 800232c:	4816      	ldr	r0, [pc, #88]	; (8002388 <BSP_LCD_MspInit+0x1a4>)
 800232e:	f002 fb23 	bl	8004978 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002332:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233c:	4619      	mov	r1, r3
 800233e:	4813      	ldr	r0, [pc, #76]	; (800238c <BSP_LCD_MspInit+0x1a8>)
 8002340:	f002 fb1a 	bl	8004978 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002344:	2303      	movs	r3, #3
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002348:	2309      	movs	r3, #9
 800234a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800234c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002350:	4619      	mov	r1, r3
 8002352:	480a      	ldr	r0, [pc, #40]	; (800237c <BSP_LCD_MspInit+0x198>)
 8002354:	f002 fb10 	bl	8004978 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002358:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800235e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002362:	4619      	mov	r1, r3
 8002364:	4809      	ldr	r0, [pc, #36]	; (800238c <BSP_LCD_MspInit+0x1a8>)
 8002366:	f002 fb07 	bl	8004978 <HAL_GPIO_Init>
}
 800236a:	bf00      	nop
 800236c:	3738      	adds	r7, #56	; 0x38
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800
 8002378:	40020000 	.word	0x40020000
 800237c:	40020400 	.word	0x40020400
 8002380:	40020800 	.word	0x40020800
 8002384:	40020c00 	.word	0x40020c00
 8002388:	40021400 	.word	0x40021400
 800238c:	40021800 	.word	0x40021800

08002390 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	603a      	str	r2, [r7, #0]
 800239a:	80fb      	strh	r3, [r7, #6]
 800239c:	460b      	mov	r3, r1
 800239e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <BSP_LCD_DrawPixel+0x44>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0c      	ldr	r2, [pc, #48]	; (80023d8 <BSP_LCD_DrawPixel+0x48>)
 80023a6:	2134      	movs	r1, #52	; 0x34
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	335c      	adds	r3, #92	; 0x5c
 80023b0:	681c      	ldr	r4, [r3, #0]
 80023b2:	88bd      	ldrh	r5, [r7, #4]
 80023b4:	f7ff fcb2 	bl	8001d1c <BSP_LCD_GetXSize>
 80023b8:	4603      	mov	r3, r0
 80023ba:	fb03 f205 	mul.w	r2, r3, r5
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4423      	add	r3, r4
 80023c6:	461a      	mov	r2, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6013      	str	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bdb0      	pop	{r4, r5, r7, pc}
 80023d4:	200007fc 	.word	0x200007fc
 80023d8:	200006e4 	.word	0x200006e4

080023dc <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	603a      	str	r2, [r7, #0]
 80023e6:	80fb      	strh	r3, [r7, #6]
 80023e8:	460b      	mov	r3, r1
 80023ea:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80023f8:	4b53      	ldr	r3, [pc, #332]	; (8002548 <DrawChar+0x16c>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4953      	ldr	r1, [pc, #332]	; (800254c <DrawChar+0x170>)
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	3308      	adds	r3, #8
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	88db      	ldrh	r3, [r3, #6]
 800240e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002410:	4b4d      	ldr	r3, [pc, #308]	; (8002548 <DrawChar+0x16c>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	494d      	ldr	r1, [pc, #308]	; (800254c <DrawChar+0x170>)
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	3308      	adds	r3, #8
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	889b      	ldrh	r3, [r3, #4]
 8002426:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002428:	8a3b      	ldrh	r3, [r7, #16]
 800242a:	3307      	adds	r3, #7
 800242c:	2b00      	cmp	r3, #0
 800242e:	da00      	bge.n	8002432 <DrawChar+0x56>
 8002430:	3307      	adds	r3, #7
 8002432:	10db      	asrs	r3, r3, #3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	b2da      	uxtb	r2, r3
 800243a:	8a3b      	ldrh	r3, [r7, #16]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	e076      	b.n	8002536 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002448:	8a3b      	ldrh	r3, [r7, #16]
 800244a:	3307      	adds	r3, #7
 800244c:	2b00      	cmp	r3, #0
 800244e:	da00      	bge.n	8002452 <DrawChar+0x76>
 8002450:	3307      	adds	r3, #7
 8002452:	10db      	asrs	r3, r3, #3
 8002454:	461a      	mov	r2, r3
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	4413      	add	r3, r2
 8002460:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002462:	8a3b      	ldrh	r3, [r7, #16]
 8002464:	3307      	adds	r3, #7
 8002466:	2b00      	cmp	r3, #0
 8002468:	da00      	bge.n	800246c <DrawChar+0x90>
 800246a:	3307      	adds	r3, #7
 800246c:	10db      	asrs	r3, r3, #3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d002      	beq.n	8002478 <DrawChar+0x9c>
 8002472:	2b02      	cmp	r3, #2
 8002474:	d004      	beq.n	8002480 <DrawChar+0xa4>
 8002476:	e00c      	b.n	8002492 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	617b      	str	r3, [r7, #20]
      break;
 800247e:	e016      	b.n	80024ae <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	3201      	adds	r2, #1
 800248a:	7812      	ldrb	r2, [r2, #0]
 800248c:	4313      	orrs	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
      break;
 8002490:	e00d      	b.n	80024ae <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	041a      	lsls	r2, r3, #16
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	3301      	adds	r3, #1
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	4313      	orrs	r3, r2
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	3202      	adds	r2, #2
 80024a6:	7812      	ldrb	r2, [r2, #0]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]
      break;
 80024ac:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	e036      	b.n	8002522 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80024b4:	8a3a      	ldrh	r2, [r7, #16]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	1ad2      	subs	r2, r2, r3
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	4413      	add	r3, r2
 80024be:	3b01      	subs	r3, #1
 80024c0:	2201      	movs	r2, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d012      	beq.n	80024f6 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	4413      	add	r3, r2
 80024d8:	b298      	uxth	r0, r3
 80024da:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <DrawChar+0x16c>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	491b      	ldr	r1, [pc, #108]	; (800254c <DrawChar+0x170>)
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	88bb      	ldrh	r3, [r7, #4]
 80024ee:	4619      	mov	r1, r3
 80024f0:	f7ff ff4e 	bl	8002390 <BSP_LCD_DrawPixel>
 80024f4:	e012      	b.n	800251c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	4413      	add	r3, r2
 80024fe:	b298      	uxth	r0, r3
 8002500:	4b11      	ldr	r3, [pc, #68]	; (8002548 <DrawChar+0x16c>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4911      	ldr	r1, [pc, #68]	; (800254c <DrawChar+0x170>)
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3304      	adds	r3, #4
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	88bb      	ldrh	r3, [r7, #4]
 8002516:	4619      	mov	r1, r3
 8002518:	f7ff ff3a 	bl	8002390 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	3301      	adds	r3, #1
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	8a3b      	ldrh	r3, [r7, #16]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	429a      	cmp	r2, r3
 8002528:	d3c4      	bcc.n	80024b4 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800252a:	88bb      	ldrh	r3, [r7, #4]
 800252c:	3301      	adds	r3, #1
 800252e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	3301      	adds	r3, #1
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	8a7b      	ldrh	r3, [r7, #18]
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	429a      	cmp	r2, r3
 800253c:	d384      	bcc.n	8002448 <DrawChar+0x6c>
  }
}
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	200007fc 	.word	0x200007fc
 800254c:	20000800 	.word	0x20000800

08002550 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af02      	add	r7, sp, #8
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800255e:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <FillBuffer+0x68>)
 8002560:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002564:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <FillBuffer+0x68>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 800256c:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <FillBuffer+0x68>)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <FillBuffer+0x68>)
 8002574:	4a11      	ldr	r2, [pc, #68]	; (80025bc <FillBuffer+0x6c>)
 8002576:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002578:	480f      	ldr	r0, [pc, #60]	; (80025b8 <FillBuffer+0x68>)
 800257a:	f001 fe61 	bl	8004240 <HAL_DMA2D_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d115      	bne.n	80025b0 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002584:	68f9      	ldr	r1, [r7, #12]
 8002586:	480c      	ldr	r0, [pc, #48]	; (80025b8 <FillBuffer+0x68>)
 8002588:	f002 f8c8 	bl	800471c <HAL_DMA2D_ConfigLayer>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10e      	bne.n	80025b0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69f9      	ldr	r1, [r7, #28]
 800259c:	4806      	ldr	r0, [pc, #24]	; (80025b8 <FillBuffer+0x68>)
 800259e:	f001 fe98 	bl	80042d2 <HAL_DMA2D_Start>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d103      	bne.n	80025b0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80025a8:	210a      	movs	r1, #10
 80025aa:	4803      	ldr	r0, [pc, #12]	; (80025b8 <FillBuffer+0x68>)
 80025ac:	f001 febc 	bl	8004328 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	2000078c 	.word	0x2000078c
 80025bc:	4002b000 	.word	0x4002b000

080025c0 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80025c4:	4b29      	ldr	r3, [pc, #164]	; (800266c <BSP_SDRAM_Init+0xac>)
 80025c6:	4a2a      	ldr	r2, [pc, #168]	; (8002670 <BSP_SDRAM_Init+0xb0>)
 80025c8:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <BSP_SDRAM_Init+0xb4>)
 80025cc:	2202      	movs	r2, #2
 80025ce:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80025d0:	4b28      	ldr	r3, [pc, #160]	; (8002674 <BSP_SDRAM_Init+0xb4>)
 80025d2:	2207      	movs	r2, #7
 80025d4:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80025d6:	4b27      	ldr	r3, [pc, #156]	; (8002674 <BSP_SDRAM_Init+0xb4>)
 80025d8:	2204      	movs	r2, #4
 80025da:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <BSP_SDRAM_Init+0xb4>)
 80025de:	2207      	movs	r2, #7
 80025e0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80025e2:	4b24      	ldr	r3, [pc, #144]	; (8002674 <BSP_SDRAM_Init+0xb4>)
 80025e4:	2202      	movs	r2, #2
 80025e6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80025e8:	4b22      	ldr	r3, [pc, #136]	; (8002674 <BSP_SDRAM_Init+0xb4>)
 80025ea:	2202      	movs	r2, #2
 80025ec:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <BSP_SDRAM_Init+0xb4>)
 80025f0:	2202      	movs	r2, #2
 80025f2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80025f4:	4b1d      	ldr	r3, [pc, #116]	; (800266c <BSP_SDRAM_Init+0xac>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80025fa:	4b1c      	ldr	r3, [pc, #112]	; (800266c <BSP_SDRAM_Init+0xac>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002600:	4b1a      	ldr	r3, [pc, #104]	; (800266c <BSP_SDRAM_Init+0xac>)
 8002602:	2204      	movs	r2, #4
 8002604:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002606:	4b19      	ldr	r3, [pc, #100]	; (800266c <BSP_SDRAM_Init+0xac>)
 8002608:	2210      	movs	r2, #16
 800260a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800260c:	4b17      	ldr	r3, [pc, #92]	; (800266c <BSP_SDRAM_Init+0xac>)
 800260e:	2240      	movs	r2, #64	; 0x40
 8002610:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002612:	4b16      	ldr	r3, [pc, #88]	; (800266c <BSP_SDRAM_Init+0xac>)
 8002614:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002618:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800261a:	4b14      	ldr	r3, [pc, #80]	; (800266c <BSP_SDRAM_Init+0xac>)
 800261c:	2200      	movs	r2, #0
 800261e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <BSP_SDRAM_Init+0xac>)
 8002622:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002626:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <BSP_SDRAM_Init+0xac>)
 800262a:	2200      	movs	r2, #0
 800262c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <BSP_SDRAM_Init+0xac>)
 8002630:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002634:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002636:	2100      	movs	r1, #0
 8002638:	480c      	ldr	r0, [pc, #48]	; (800266c <BSP_SDRAM_Init+0xac>)
 800263a:	f000 f87f 	bl	800273c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800263e:	490d      	ldr	r1, [pc, #52]	; (8002674 <BSP_SDRAM_Init+0xb4>)
 8002640:	480a      	ldr	r0, [pc, #40]	; (800266c <BSP_SDRAM_Init+0xac>)
 8002642:	f005 fccf 	bl	8007fe4 <HAL_SDRAM_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <BSP_SDRAM_Init+0xb8>)
 800264e:	2201      	movs	r2, #1
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	e002      	b.n	800265a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <BSP_SDRAM_Init+0xb8>)
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800265a:	f240 506a 	movw	r0, #1386	; 0x56a
 800265e:	f000 f80d 	bl	800267c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <BSP_SDRAM_Init+0xb8>)
 8002664:	781b      	ldrb	r3, [r3, #0]
}
 8002666:	4618      	mov	r0, r3
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	2000081c 	.word	0x2000081c
 8002670:	a0000140 	.word	0xa0000140
 8002674:	20000850 	.word	0x20000850
 8002678:	20000058 	.word	0x20000058

0800267c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800268e:	4b29      	ldr	r3, [pc, #164]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002690:	2208      	movs	r2, #8
 8002692:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002696:	2201      	movs	r2, #1
 8002698:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800269a:	4b26      	ldr	r3, [pc, #152]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800269c:	2200      	movs	r2, #0
 800269e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80026a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a4:	4923      	ldr	r1, [pc, #140]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026a6:	4824      	ldr	r0, [pc, #144]	; (8002738 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80026a8:	f005 fcd0 	bl	800804c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80026ac:	2001      	movs	r0, #1
 80026ae:	f000 fed7 	bl	8003460 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026b4:	2202      	movs	r2, #2
 80026b6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80026b8:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026ba:	2208      	movs	r2, #8
 80026bc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80026ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ce:	4919      	ldr	r1, [pc, #100]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026d0:	4819      	ldr	r0, [pc, #100]	; (8002738 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80026d2:	f005 fcbb 	bl	800804c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80026d6:	4b17      	ldr	r3, [pc, #92]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026d8:	2203      	movs	r2, #3
 80026da:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026de:	2208      	movs	r2, #8
 80026e0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026e4:	2204      	movs	r2, #4
 80026e6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80026ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f2:	4910      	ldr	r1, [pc, #64]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026f4:	4810      	ldr	r0, [pc, #64]	; (8002738 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80026f6:	f005 fca9 	bl	800804c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80026fa:	f44f 730c 	mov.w	r3, #560	; 0x230
 80026fe:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002702:	2204      	movs	r2, #4
 8002704:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002708:	2208      	movs	r2, #8
 800270a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800270e:	2201      	movs	r2, #1
 8002710:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4a07      	ldr	r2, [pc, #28]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002716:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800271c:	4905      	ldr	r1, [pc, #20]	; (8002734 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800271e:	4806      	ldr	r0, [pc, #24]	; (8002738 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002720:	f005 fc94 	bl	800804c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4804      	ldr	r0, [pc, #16]	; (8002738 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002728:	f005 fcc5 	bl	80080b6 <HAL_SDRAM_ProgramRefreshRate>
}
 800272c:	bf00      	nop
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	2000086c 	.word	0x2000086c
 8002738:	2000081c 	.word	0x2000081c

0800273c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b090      	sub	sp, #64	; 0x40
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80ec 	beq.w	8002926 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
 8002752:	4b77      	ldr	r3, [pc, #476]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	4a76      	ldr	r2, [pc, #472]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6393      	str	r3, [r2, #56]	; 0x38
 800275e:	4b74      	ldr	r3, [pc, #464]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
 800276e:	4b70      	ldr	r3, [pc, #448]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a6f      	ldr	r2, [pc, #444]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 8002774:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b6d      	ldr	r3, [pc, #436]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	623b      	str	r3, [r7, #32]
 800278a:	4b69      	ldr	r3, [pc, #420]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a68      	ldr	r2, [pc, #416]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b66      	ldr	r3, [pc, #408]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	623b      	str	r3, [r7, #32]
 80027a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	4b62      	ldr	r3, [pc, #392]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a61      	ldr	r2, [pc, #388]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b5f      	ldr	r3, [pc, #380]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	4b5b      	ldr	r3, [pc, #364]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a5a      	ldr	r2, [pc, #360]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 80027c8:	f043 0308 	orr.w	r3, r3, #8
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b58      	ldr	r3, [pc, #352]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	4b54      	ldr	r3, [pc, #336]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	4a53      	ldr	r2, [pc, #332]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 80027e4:	f043 0310 	orr.w	r3, r3, #16
 80027e8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ea:	4b51      	ldr	r3, [pc, #324]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	4b4d      	ldr	r3, [pc, #308]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a4c      	ldr	r2, [pc, #304]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 8002800:	f043 0320 	orr.w	r3, r3, #32
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b46      	ldr	r3, [pc, #280]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a45      	ldr	r2, [pc, #276]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 800281c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b43      	ldr	r3, [pc, #268]	; (8002930 <BSP_SDRAM_MspInit+0x1f4>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002832:	2302      	movs	r3, #2
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800283a:	230c      	movs	r3, #12
 800283c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800283e:	2360      	movs	r3, #96	; 0x60
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002846:	4619      	mov	r1, r3
 8002848:	483a      	ldr	r0, [pc, #232]	; (8002934 <BSP_SDRAM_MspInit+0x1f8>)
 800284a:	f002 f895 	bl	8004978 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800284e:	2301      	movs	r3, #1
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002856:	4619      	mov	r1, r3
 8002858:	4837      	ldr	r0, [pc, #220]	; (8002938 <BSP_SDRAM_MspInit+0x1fc>)
 800285a:	f002 f88d 	bl	8004978 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800285e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002868:	4619      	mov	r1, r3
 800286a:	4834      	ldr	r0, [pc, #208]	; (800293c <BSP_SDRAM_MspInit+0x200>)
 800286c:	f002 f884 	bl	8004978 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002870:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800287a:	4619      	mov	r1, r3
 800287c:	4830      	ldr	r0, [pc, #192]	; (8002940 <BSP_SDRAM_MspInit+0x204>)
 800287e:	f002 f87b 	bl	8004978 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002882:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800288c:	4619      	mov	r1, r3
 800288e:	482d      	ldr	r0, [pc, #180]	; (8002944 <BSP_SDRAM_MspInit+0x208>)
 8002890:	f002 f872 	bl	8004978 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002894:	f248 1333 	movw	r3, #33075	; 0x8133
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800289a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800289e:	4619      	mov	r1, r3
 80028a0:	4829      	ldr	r0, [pc, #164]	; (8002948 <BSP_SDRAM_MspInit+0x20c>)
 80028a2:	f002 f869 	bl	8004978 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80028a6:	4b29      	ldr	r3, [pc, #164]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80028ac:	4b27      	ldr	r3, [pc, #156]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 80028ae:	2280      	movs	r2, #128	; 0x80
 80028b0:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80028b2:	4b26      	ldr	r3, [pc, #152]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 80028b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b8:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80028ba:	4b24      	ldr	r3, [pc, #144]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 80028bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028c0:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 80028c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028c8:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 80028cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028d0:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80028d2:	4b1e      	ldr	r3, [pc, #120]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80028d8:	4b1c      	ldr	r3, [pc, #112]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 80028da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028de:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 80028e8:	2203      	movs	r2, #3
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80028ec:	4b17      	ldr	r3, [pc, #92]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 80028fa:	4a15      	ldr	r2, [pc, #84]	; (8002950 <BSP_SDRAM_MspInit+0x214>)
 80028fc:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a12      	ldr	r2, [pc, #72]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
 8002904:	4a11      	ldr	r2, [pc, #68]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800290a:	4810      	ldr	r0, [pc, #64]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 800290c:	f001 fb88 	bl	8004020 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002910:	480e      	ldr	r0, [pc, #56]	; (800294c <BSP_SDRAM_MspInit+0x210>)
 8002912:	f001 fad7 	bl	8003ec4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	210f      	movs	r1, #15
 800291a:	2038      	movs	r0, #56	; 0x38
 800291c:	f001 fa8c 	bl	8003e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002920:	2038      	movs	r0, #56	; 0x38
 8002922:	f001 faa5 	bl	8003e70 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002926:	bf00      	nop
 8002928:	3740      	adds	r7, #64	; 0x40
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	40020400 	.word	0x40020400
 8002938:	40020800 	.word	0x40020800
 800293c:	40020c00 	.word	0x40020c00
 8002940:	40021000 	.word	0x40021000
 8002944:	40021400 	.word	0x40021400
 8002948:	40021800 	.word	0x40021800
 800294c:	2000087c 	.word	0x2000087c
 8002950:	40026410 	.word	0x40026410

08002954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_MspInit+0x54>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	4a11      	ldr	r2, [pc, #68]	; (80029a8 <HAL_MspInit+0x54>)
 8002964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002968:	6453      	str	r3, [r2, #68]	; 0x44
 800296a:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <HAL_MspInit+0x54>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_MspInit+0x54>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <HAL_MspInit+0x54>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_MspInit+0x54>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002992:	2200      	movs	r2, #0
 8002994:	210f      	movs	r1, #15
 8002996:	f06f 0001 	mvn.w	r0, #1
 800299a:	f001 fa4d 	bl	8003e38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800

080029ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <HAL_ADC_MspInit+0x7c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d127      	bne.n	8002a1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_ADC_MspInit+0x80>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <HAL_ADC_MspInit+0x80>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <HAL_ADC_MspInit+0x80>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <HAL_ADC_MspInit+0x80>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <HAL_ADC_MspInit+0x80>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <HAL_ADC_MspInit+0x80>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a06:	2320      	movs	r3, #32
 8002a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	4619      	mov	r1, r3
 8002a18:	4805      	ldr	r0, [pc, #20]	; (8002a30 <HAL_ADC_MspInit+0x84>)
 8002a1a:	f001 ffad 	bl	8004978 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a1e:	bf00      	nop
 8002a20:	3728      	adds	r7, #40	; 0x28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40012000 	.word	0x40012000
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40020000 	.word	0x40020000

08002a34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0b      	ldr	r2, [pc, #44]	; (8002a70 <HAL_CRC_MspInit+0x3c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d10d      	bne.n	8002a62 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_CRC_MspInit+0x40>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a09      	ldr	r2, [pc, #36]	; (8002a74 <HAL_CRC_MspInit+0x40>)
 8002a50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <HAL_CRC_MspInit+0x40>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40023000 	.word	0x40023000
 8002a74:	40023800 	.word	0x40023800

08002a78 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <HAL_DMA2D_MspInit+0x48>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d115      	bne.n	8002ab6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <HAL_DMA2D_MspInit+0x4c>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	4a0c      	ldr	r2, [pc, #48]	; (8002ac4 <HAL_DMA2D_MspInit+0x4c>)
 8002a94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a98:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_DMA2D_MspInit+0x4c>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2105      	movs	r1, #5
 8002aaa:	205a      	movs	r0, #90	; 0x5a
 8002aac:	f001 f9c4 	bl	8003e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002ab0:	205a      	movs	r0, #90	; 0x5a
 8002ab2:	f001 f9dd 	bl	8003e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	4002b000 	.word	0x4002b000
 8002ac4:	40023800 	.word	0x40023800

08002ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08a      	sub	sp, #40	; 0x28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a29      	ldr	r2, [pc, #164]	; (8002b8c <HAL_I2C_MspInit+0xc4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d14b      	bne.n	8002b82 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	4b28      	ldr	r3, [pc, #160]	; (8002b90 <HAL_I2C_MspInit+0xc8>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a27      	ldr	r2, [pc, #156]	; (8002b90 <HAL_I2C_MspInit+0xc8>)
 8002af4:	f043 0304 	orr.w	r3, r3, #4
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <HAL_I2C_MspInit+0xc8>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <HAL_I2C_MspInit+0xc8>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	4a20      	ldr	r2, [pc, #128]	; (8002b90 <HAL_I2C_MspInit+0xc8>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6313      	str	r3, [r2, #48]	; 0x30
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <HAL_I2C_MspInit+0xc8>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b28:	2312      	movs	r3, #18
 8002b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b34:	2304      	movs	r3, #4
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4815      	ldr	r0, [pc, #84]	; (8002b94 <HAL_I2C_MspInit+0xcc>)
 8002b40:	f001 ff1a 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b4a:	2312      	movs	r3, #18
 8002b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b52:	2300      	movs	r3, #0
 8002b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b56:	2304      	movs	r3, #4
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002b5a:	f107 0314 	add.w	r3, r7, #20
 8002b5e:	4619      	mov	r1, r3
 8002b60:	480d      	ldr	r0, [pc, #52]	; (8002b98 <HAL_I2C_MspInit+0xd0>)
 8002b62:	f001 ff09 	bl	8004978 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_I2C_MspInit+0xc8>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	4a08      	ldr	r2, [pc, #32]	; (8002b90 <HAL_I2C_MspInit+0xc8>)
 8002b70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b74:	6413      	str	r3, [r2, #64]	; 0x40
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_I2C_MspInit+0xc8>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b82:	bf00      	nop
 8002b84:	3728      	adds	r7, #40	; 0x28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40005c00 	.word	0x40005c00
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40020800 	.word	0x40020800
 8002b98:	40020000 	.word	0x40020000

08002b9c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b09a      	sub	sp, #104	; 0x68
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb8:	2230      	movs	r2, #48	; 0x30
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f00d fa61 	bl	8010084 <memset>
  if(hltdc->Instance==LTDC)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a85      	ldr	r2, [pc, #532]	; (8002ddc <HAL_LTDC_MspInit+0x240>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	f040 8103 	bne.w	8002dd4 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002bce:	2308      	movs	r3, #8
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 90;
 8002bd2:	235a      	movs	r3, #90	; 0x5a
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8002bd6:	2305      	movs	r3, #5
 8002bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bde:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be4:	4618      	mov	r0, r3
 8002be6:	f005 f83d 	bl	8007c64 <HAL_RCCEx_PeriphCLKConfig>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002bf0:	f7fe fe6c 	bl	80018cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	623b      	str	r3, [r7, #32]
 8002bf8:	4b79      	ldr	r3, [pc, #484]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfc:	4a78      	ldr	r2, [pc, #480]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002bfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c02:	6453      	str	r3, [r2, #68]	; 0x44
 8002c04:	4b76      	ldr	r3, [pc, #472]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c0c:	623b      	str	r3, [r7, #32]
 8002c0e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	4b72      	ldr	r3, [pc, #456]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	4a71      	ldr	r2, [pc, #452]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c1a:	f043 0320 	orr.w	r3, r3, #32
 8002c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c20:	4b6f      	ldr	r3, [pc, #444]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	4b6b      	ldr	r3, [pc, #428]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	4a6a      	ldr	r2, [pc, #424]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3c:	4b68      	ldr	r3, [pc, #416]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	4b64      	ldr	r3, [pc, #400]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	4a63      	ldr	r2, [pc, #396]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c52:	f043 0302 	orr.w	r3, r3, #2
 8002c56:	6313      	str	r3, [r2, #48]	; 0x30
 8002c58:	4b61      	ldr	r3, [pc, #388]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	4b5d      	ldr	r3, [pc, #372]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	4a5c      	ldr	r2, [pc, #368]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c72:	6313      	str	r3, [r2, #48]	; 0x30
 8002c74:	4b5a      	ldr	r3, [pc, #360]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	4b56      	ldr	r3, [pc, #344]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	4a55      	ldr	r2, [pc, #340]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c90:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	4b4f      	ldr	r3, [pc, #316]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	4a4e      	ldr	r2, [pc, #312]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002ca6:	f043 0308 	orr.w	r3, r3, #8
 8002caa:	6313      	str	r3, [r2, #48]	; 0x30
 8002cac:	4b4c      	ldr	r3, [pc, #304]	; (8002de0 <HAL_LTDC_MspInit+0x244>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cbc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cca:	230e      	movs	r3, #14
 8002ccc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002cce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4843      	ldr	r0, [pc, #268]	; (8002de4 <HAL_LTDC_MspInit+0x248>)
 8002cd6:	f001 fe4f 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002cda:	f641 0358 	movw	r3, #6232	; 0x1858
 8002cde:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cec:	230e      	movs	r3, #14
 8002cee:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	483c      	ldr	r0, [pc, #240]	; (8002de8 <HAL_LTDC_MspInit+0x24c>)
 8002cf8:	f001 fe3e 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d00:	2302      	movs	r3, #2
 8002d02:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002d0c:	2309      	movs	r3, #9
 8002d0e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d14:	4619      	mov	r1, r3
 8002d16:	4835      	ldr	r0, [pc, #212]	; (8002dec <HAL_LTDC_MspInit+0x250>)
 8002d18:	f001 fe2e 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002d1c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002d20:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d2e:	230e      	movs	r3, #14
 8002d30:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d36:	4619      	mov	r1, r3
 8002d38:	482c      	ldr	r0, [pc, #176]	; (8002dec <HAL_LTDC_MspInit+0x250>)
 8002d3a:	f001 fe1d 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002d3e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002d42:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d50:	230e      	movs	r3, #14
 8002d52:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4825      	ldr	r0, [pc, #148]	; (8002df0 <HAL_LTDC_MspInit+0x254>)
 8002d5c:	f001 fe0c 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002d60:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002d64:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	2302      	movs	r3, #2
 8002d68:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d72:	230e      	movs	r3, #14
 8002d74:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	481d      	ldr	r0, [pc, #116]	; (8002df4 <HAL_LTDC_MspInit+0x258>)
 8002d7e:	f001 fdfb 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002d82:	2348      	movs	r3, #72	; 0x48
 8002d84:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	2302      	movs	r3, #2
 8002d88:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d92:	230e      	movs	r3, #14
 8002d94:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4816      	ldr	r0, [pc, #88]	; (8002df8 <HAL_LTDC_MspInit+0x25c>)
 8002d9e:	f001 fdeb 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002da2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002da6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da8:	2302      	movs	r3, #2
 8002daa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db0:	2300      	movs	r3, #0
 8002db2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002db4:	2309      	movs	r3, #9
 8002db6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002db8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	480c      	ldr	r0, [pc, #48]	; (8002df0 <HAL_LTDC_MspInit+0x254>)
 8002dc0:	f001 fdda 	bl	8004978 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2105      	movs	r1, #5
 8002dc8:	2058      	movs	r0, #88	; 0x58
 8002dca:	f001 f835 	bl	8003e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002dce:	2058      	movs	r0, #88	; 0x58
 8002dd0:	f001 f84e 	bl	8003e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002dd4:	bf00      	nop
 8002dd6:	3768      	adds	r7, #104	; 0x68
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40016800 	.word	0x40016800
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40021400 	.word	0x40021400
 8002de8:	40020000 	.word	0x40020000
 8002dec:	40020400 	.word	0x40020400
 8002df0:	40021800 	.word	0x40021800
 8002df4:	40020800 	.word	0x40020800
 8002df8:	40020c00 	.word	0x40020c00

08002dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a19      	ldr	r2, [pc, #100]	; (8002e80 <HAL_SPI_MspInit+0x84>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d12c      	bne.n	8002e78 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <HAL_SPI_MspInit+0x88>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	4a17      	ldr	r2, [pc, #92]	; (8002e84 <HAL_SPI_MspInit+0x88>)
 8002e28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_SPI_MspInit+0x88>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_SPI_MspInit+0x88>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <HAL_SPI_MspInit+0x88>)
 8002e44:	f043 0320 	orr.w	r3, r3, #32
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <HAL_SPI_MspInit+0x88>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002e56:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e64:	2300      	movs	r3, #0
 8002e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002e68:	2305      	movs	r3, #5
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4619      	mov	r1, r3
 8002e72:	4805      	ldr	r0, [pc, #20]	; (8002e88 <HAL_SPI_MspInit+0x8c>)
 8002e74:	f001 fd80 	bl	8004978 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002e78:	bf00      	nop
 8002e7a:	3728      	adds	r7, #40	; 0x28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40015000 	.word	0x40015000
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40021400 	.word	0x40021400

08002e8c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <HAL_SPI_MspDeInit+0x30>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10a      	bne.n	8002eb4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <HAL_SPI_MspDeInit+0x34>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <HAL_SPI_MspDeInit+0x34>)
 8002ea4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ea8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002eaa:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <HAL_SPI_MspDeInit+0x38>)
 8002eb0:	f001 ff0e 	bl	8004cd0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40015000 	.word	0x40015000
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40021400 	.word	0x40021400

08002ec8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <HAL_TIM_Base_MspInit+0x3c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d10d      	bne.n	8002ef6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <HAL_TIM_Base_MspInit+0x40>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <HAL_TIM_Base_MspInit+0x40>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eea:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <HAL_TIM_Base_MspInit+0x40>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40023800 	.word	0x40023800

08002f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08c      	sub	sp, #48	; 0x30
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 031c 	add.w	r3, r7, #28
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a42      	ldr	r2, [pc, #264]	; (8003034 <HAL_UART_MspInit+0x128>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d14b      	bne.n	8002fc6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_UART_MspInit+0x12c>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a40      	ldr	r2, [pc, #256]	; (8003038 <HAL_UART_MspInit+0x12c>)
 8002f38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <HAL_UART_MspInit+0x12c>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	4b3a      	ldr	r3, [pc, #232]	; (8003038 <HAL_UART_MspInit+0x12c>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a39      	ldr	r2, [pc, #228]	; (8003038 <HAL_UART_MspInit+0x12c>)
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b37      	ldr	r3, [pc, #220]	; (8003038 <HAL_UART_MspInit+0x12c>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	4b33      	ldr	r3, [pc, #204]	; (8003038 <HAL_UART_MspInit+0x12c>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	4a32      	ldr	r2, [pc, #200]	; (8003038 <HAL_UART_MspInit+0x12c>)
 8002f70:	f043 0308 	orr.w	r3, r3, #8
 8002f74:	6313      	str	r3, [r2, #48]	; 0x30
 8002f76:	4b30      	ldr	r3, [pc, #192]	; (8003038 <HAL_UART_MspInit+0x12c>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f90:	2303      	movs	r3, #3
 8002f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f94:	2308      	movs	r3, #8
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f98:	f107 031c 	add.w	r3, r7, #28
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4827      	ldr	r0, [pc, #156]	; (800303c <HAL_UART_MspInit+0x130>)
 8002fa0:	f001 fcea 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb8:	f107 031c 	add.w	r3, r7, #28
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4820      	ldr	r0, [pc, #128]	; (8003040 <HAL_UART_MspInit+0x134>)
 8002fc0:	f001 fcda 	bl	8004978 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002fc4:	e031      	b.n	800302a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1e      	ldr	r2, [pc, #120]	; (8003044 <HAL_UART_MspInit+0x138>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d12c      	bne.n	800302a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	4b18      	ldr	r3, [pc, #96]	; (8003038 <HAL_UART_MspInit+0x12c>)
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	4a17      	ldr	r2, [pc, #92]	; (8003038 <HAL_UART_MspInit+0x12c>)
 8002fda:	f043 0310 	orr.w	r3, r3, #16
 8002fde:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe0:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_UART_MspInit+0x12c>)
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fec:	2300      	movs	r3, #0
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HAL_UART_MspInit+0x12c>)
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	4a10      	ldr	r2, [pc, #64]	; (8003038 <HAL_UART_MspInit+0x12c>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffc:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <HAL_UART_MspInit+0x12c>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003008:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800300c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300e:	2302      	movs	r3, #2
 8003010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003016:	2303      	movs	r3, #3
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800301a:	2307      	movs	r3, #7
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301e:	f107 031c 	add.w	r3, r7, #28
 8003022:	4619      	mov	r1, r3
 8003024:	4808      	ldr	r0, [pc, #32]	; (8003048 <HAL_UART_MspInit+0x13c>)
 8003026:	f001 fca7 	bl	8004978 <HAL_GPIO_Init>
}
 800302a:	bf00      	nop
 800302c:	3730      	adds	r7, #48	; 0x30
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40005000 	.word	0x40005000
 8003038:	40023800 	.word	0x40023800
 800303c:	40020800 	.word	0x40020800
 8003040:	40020c00 	.word	0x40020c00
 8003044:	40011000 	.word	0x40011000
 8003048:	40020000 	.word	0x40020000

0800304c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003052:	1d3b      	adds	r3, r7, #4
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003060:	4b3b      	ldr	r3, [pc, #236]	; (8003150 <HAL_FMC_MspInit+0x104>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d16f      	bne.n	8003148 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8003068:	4b39      	ldr	r3, [pc, #228]	; (8003150 <HAL_FMC_MspInit+0x104>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	4b38      	ldr	r3, [pc, #224]	; (8003154 <HAL_FMC_MspInit+0x108>)
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	4a37      	ldr	r2, [pc, #220]	; (8003154 <HAL_FMC_MspInit+0x108>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6393      	str	r3, [r2, #56]	; 0x38
 800307e:	4b35      	ldr	r3, [pc, #212]	; (8003154 <HAL_FMC_MspInit+0x108>)
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800308a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800308e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003090:	2302      	movs	r3, #2
 8003092:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003098:	2303      	movs	r3, #3
 800309a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800309c:	230c      	movs	r3, #12
 800309e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	4619      	mov	r1, r3
 80030a4:	482c      	ldr	r0, [pc, #176]	; (8003158 <HAL_FMC_MspInit+0x10c>)
 80030a6:	f001 fc67 	bl	8004978 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80030aa:	2301      	movs	r3, #1
 80030ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	2302      	movs	r3, #2
 80030b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b6:	2303      	movs	r3, #3
 80030b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80030ba:	230c      	movs	r3, #12
 80030bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80030be:	1d3b      	adds	r3, r7, #4
 80030c0:	4619      	mov	r1, r3
 80030c2:	4826      	ldr	r0, [pc, #152]	; (800315c <HAL_FMC_MspInit+0x110>)
 80030c4:	f001 fc58 	bl	8004978 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80030c8:	f248 1333 	movw	r3, #33075	; 0x8133
 80030cc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d6:	2303      	movs	r3, #3
 80030d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80030da:	230c      	movs	r3, #12
 80030dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	4619      	mov	r1, r3
 80030e2:	481f      	ldr	r0, [pc, #124]	; (8003160 <HAL_FMC_MspInit+0x114>)
 80030e4:	f001 fc48 	bl	8004978 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80030e8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80030ec:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	2302      	movs	r3, #2
 80030f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f6:	2303      	movs	r3, #3
 80030f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80030fa:	230c      	movs	r3, #12
 80030fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030fe:	1d3b      	adds	r3, r7, #4
 8003100:	4619      	mov	r1, r3
 8003102:	4818      	ldr	r0, [pc, #96]	; (8003164 <HAL_FMC_MspInit+0x118>)
 8003104:	f001 fc38 	bl	8004978 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8003108:	f24c 7303 	movw	r3, #50947	; 0xc703
 800310c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003116:	2303      	movs	r3, #3
 8003118:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800311a:	230c      	movs	r3, #12
 800311c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	4619      	mov	r1, r3
 8003122:	4811      	ldr	r0, [pc, #68]	; (8003168 <HAL_FMC_MspInit+0x11c>)
 8003124:	f001 fc28 	bl	8004978 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003128:	2360      	movs	r3, #96	; 0x60
 800312a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003134:	2303      	movs	r3, #3
 8003136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003138:	230c      	movs	r3, #12
 800313a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	4619      	mov	r1, r3
 8003140:	480a      	ldr	r0, [pc, #40]	; (800316c <HAL_FMC_MspInit+0x120>)
 8003142:	f001 fc19 	bl	8004978 <HAL_GPIO_Init>
 8003146:	e000      	b.n	800314a <HAL_FMC_MspInit+0xfe>
    return;
 8003148:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	200008dc 	.word	0x200008dc
 8003154:	40023800 	.word	0x40023800
 8003158:	40021400 	.word	0x40021400
 800315c:	40020800 	.word	0x40020800
 8003160:	40021800 	.word	0x40021800
 8003164:	40021000 	.word	0x40021000
 8003168:	40020c00 	.word	0x40020c00
 800316c:	40020400 	.word	0x40020400

08003170 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003178:	f7ff ff68 	bl	800304c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08e      	sub	sp, #56	; 0x38
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	4b33      	ldr	r3, [pc, #204]	; (8003268 <HAL_InitTick+0xe4>)
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	4a32      	ldr	r2, [pc, #200]	; (8003268 <HAL_InitTick+0xe4>)
 800319e:	f043 0310 	orr.w	r3, r3, #16
 80031a2:	6413      	str	r3, [r2, #64]	; 0x40
 80031a4:	4b30      	ldr	r3, [pc, #192]	; (8003268 <HAL_InitTick+0xe4>)
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80031b0:	f107 0210 	add.w	r2, r7, #16
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f004 fd20 	bl	8007c00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80031ca:	f004 fcf1 	bl	8007bb0 <HAL_RCC_GetPCLK1Freq>
 80031ce:	6378      	str	r0, [r7, #52]	; 0x34
 80031d0:	e004      	b.n	80031dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80031d2:	f004 fced 	bl	8007bb0 <HAL_RCC_GetPCLK1Freq>
 80031d6:	4603      	mov	r3, r0
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80031dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031de:	4a23      	ldr	r2, [pc, #140]	; (800326c <HAL_InitTick+0xe8>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	0c9b      	lsrs	r3, r3, #18
 80031e6:	3b01      	subs	r3, #1
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80031ea:	4b21      	ldr	r3, [pc, #132]	; (8003270 <HAL_InitTick+0xec>)
 80031ec:	4a21      	ldr	r2, [pc, #132]	; (8003274 <HAL_InitTick+0xf0>)
 80031ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80031f0:	4b1f      	ldr	r3, [pc, #124]	; (8003270 <HAL_InitTick+0xec>)
 80031f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80031f8:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <HAL_InitTick+0xec>)
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80031fe:	4b1c      	ldr	r3, [pc, #112]	; (8003270 <HAL_InitTick+0xec>)
 8003200:	2200      	movs	r2, #0
 8003202:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_InitTick+0xec>)
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800320a:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_InitTick+0xec>)
 800320c:	2200      	movs	r2, #0
 800320e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003210:	4817      	ldr	r0, [pc, #92]	; (8003270 <HAL_InitTick+0xec>)
 8003212:	f005 fd57 	bl	8008cc4 <HAL_TIM_Base_Init>
 8003216:	4603      	mov	r3, r0
 8003218:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800321c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003220:	2b00      	cmp	r3, #0
 8003222:	d11b      	bne.n	800325c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003224:	4812      	ldr	r0, [pc, #72]	; (8003270 <HAL_InitTick+0xec>)
 8003226:	f005 fd9d 	bl	8008d64 <HAL_TIM_Base_Start_IT>
 800322a:	4603      	mov	r3, r0
 800322c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003230:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003234:	2b00      	cmp	r3, #0
 8003236:	d111      	bne.n	800325c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003238:	2036      	movs	r0, #54	; 0x36
 800323a:	f000 fe19 	bl	8003e70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b0f      	cmp	r3, #15
 8003242:	d808      	bhi.n	8003256 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003244:	2200      	movs	r2, #0
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	2036      	movs	r0, #54	; 0x36
 800324a:	f000 fdf5 	bl	8003e38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800324e:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <HAL_InitTick+0xf4>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	e002      	b.n	800325c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800325c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003260:	4618      	mov	r0, r3
 8003262:	3738      	adds	r7, #56	; 0x38
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40023800 	.word	0x40023800
 800326c:	431bde83 	.word	0x431bde83
 8003270:	200008e0 	.word	0x200008e0
 8003274:	40001000 	.word	0x40001000
 8003278:	20000060 	.word	0x20000060

0800327c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003280:	e7fe      	b.n	8003280 <NMI_Handler+0x4>

08003282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003286:	e7fe      	b.n	8003286 <HardFault_Handler+0x4>

08003288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800328c:	e7fe      	b.n	800328c <MemManage_Handler+0x4>

0800328e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003292:	e7fe      	b.n	8003292 <BusFault_Handler+0x4>

08003294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003298:	e7fe      	b.n	8003298 <UsageFault_Handler+0x4>

0800329a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800329a:	b480      	push	{r7}
 800329c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032ac:	4802      	ldr	r0, [pc, #8]	; (80032b8 <TIM6_DAC_IRQHandler+0x10>)
 80032ae:	f005 fdc9 	bl	8008e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200008e0 	.word	0x200008e0

080032bc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80032c0:	4802      	ldr	r0, [pc, #8]	; (80032cc <OTG_HS_IRQHandler+0x10>)
 80032c2:	f002 f895 	bl	80053f0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20004a6c 	.word	0x20004a6c

080032d0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80032d4:	4802      	ldr	r0, [pc, #8]	; (80032e0 <LTDC_IRQHandler+0x10>)
 80032d6:	f003 fcbb 	bl	8006c50 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000444 	.word	0x20000444

080032e4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80032e8:	4802      	ldr	r0, [pc, #8]	; (80032f4 <DMA2D_IRQHandler+0x10>)
 80032ea:	f001 f906 	bl	80044fa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	200003b0 	.word	0x200003b0

080032f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003300:	4a14      	ldr	r2, [pc, #80]	; (8003354 <_sbrk+0x5c>)
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <_sbrk+0x60>)
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800330c:	4b13      	ldr	r3, [pc, #76]	; (800335c <_sbrk+0x64>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <_sbrk+0x64>)
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <_sbrk+0x68>)
 8003318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <_sbrk+0x64>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	429a      	cmp	r2, r3
 8003326:	d207      	bcs.n	8003338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003328:	f00c fe64 	bl	800fff4 <__errno>
 800332c:	4603      	mov	r3, r0
 800332e:	220c      	movs	r2, #12
 8003330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295
 8003336:	e009      	b.n	800334c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <_sbrk+0x64>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800333e:	4b07      	ldr	r3, [pc, #28]	; (800335c <_sbrk+0x64>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	4a05      	ldr	r2, [pc, #20]	; (800335c <_sbrk+0x64>)
 8003348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800334a:	68fb      	ldr	r3, [r7, #12]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20030000 	.word	0x20030000
 8003358:	00000400 	.word	0x00000400
 800335c:	20000928 	.word	0x20000928
 8003360:	20004d80 	.word	0x20004d80

08003364 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <SystemInit+0x20>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	4a05      	ldr	r2, [pc, #20]	; (8003384 <SystemInit+0x20>)
 8003370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800338c:	480d      	ldr	r0, [pc, #52]	; (80033c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800338e:	490e      	ldr	r1, [pc, #56]	; (80033c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003390:	4a0e      	ldr	r2, [pc, #56]	; (80033cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003394:	e002      	b.n	800339c <LoopCopyDataInit>

08003396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800339a:	3304      	adds	r3, #4

0800339c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800339c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800339e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033a0:	d3f9      	bcc.n	8003396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033a2:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033a4:	4c0b      	ldr	r4, [pc, #44]	; (80033d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033a8:	e001      	b.n	80033ae <LoopFillZerobss>

080033aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033ac:	3204      	adds	r2, #4

080033ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033b0:	d3fb      	bcc.n	80033aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80033b2:	f7ff ffd7 	bl	8003364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033b6:	f00c fe23 	bl	8010000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ba:	f7fd fa5f 	bl	800087c <main>
  bx  lr    
 80033be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80033c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80033c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033c8:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80033cc:	08012d34 	.word	0x08012d34
  ldr r2, =_sbss
 80033d0:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80033d4:	20004d80 	.word	0x20004d80

080033d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033d8:	e7fe      	b.n	80033d8 <ADC_IRQHandler>
	...

080033dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033e0:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_Init+0x40>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <HAL_Init+0x40>)
 80033e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_Init+0x40>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_Init+0x40>)
 80033f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_Init+0x40>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a07      	ldr	r2, [pc, #28]	; (800341c <HAL_Init+0x40>)
 80033fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003404:	2003      	movs	r0, #3
 8003406:	f000 fd0c 	bl	8003e22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800340a:	200f      	movs	r0, #15
 800340c:	f7ff feba 	bl	8003184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003410:	f7ff faa0 	bl	8002954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023c00 	.word	0x40023c00

08003420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_IncTick+0x20>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_IncTick+0x24>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4413      	add	r3, r2
 8003430:	4a04      	ldr	r2, [pc, #16]	; (8003444 <HAL_IncTick+0x24>)
 8003432:	6013      	str	r3, [r2, #0]
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20000064 	.word	0x20000064
 8003444:	2000092c 	.word	0x2000092c

08003448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return uwTick;
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_GetTick+0x14>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	2000092c 	.word	0x2000092c

08003460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003468:	f7ff ffee 	bl	8003448 <HAL_GetTick>
 800346c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003478:	d005      	beq.n	8003486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800347a:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <HAL_Delay+0x44>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003486:	bf00      	nop
 8003488:	f7ff ffde 	bl	8003448 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	429a      	cmp	r2, r3
 8003496:	d8f7      	bhi.n	8003488 <HAL_Delay+0x28>
  {
  }
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000064 	.word	0x20000064

080034a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e033      	b.n	8003526 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff fa70 	bl	80029ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d118      	bne.n	8003518 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034ee:	f023 0302 	bic.w	r3, r3, #2
 80034f2:	f043 0202 	orr.w	r2, r3, #2
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fae8 	bl	8003ad0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f023 0303 	bic.w	r3, r3, #3
 800350e:	f043 0201 	orr.w	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
 8003516:	e001      	b.n	800351c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003524:	7bfb      	ldrb	r3, [r7, #15]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_ADC_Start+0x1a>
 8003546:	2302      	movs	r3, #2
 8003548:	e0b2      	b.n	80036b0 <HAL_ADC_Start+0x180>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d018      	beq.n	8003592 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003570:	4b52      	ldr	r3, [pc, #328]	; (80036bc <HAL_ADC_Start+0x18c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a52      	ldr	r2, [pc, #328]	; (80036c0 <HAL_ADC_Start+0x190>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	0c9a      	lsrs	r2, r3, #18
 800357c:	4613      	mov	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4413      	add	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003584:	e002      	b.n	800358c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	3b01      	subs	r3, #1
 800358a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f9      	bne.n	8003586 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d17a      	bne.n	8003696 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035de:	d106      	bne.n	80035ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	f023 0206 	bic.w	r2, r3, #6
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	645a      	str	r2, [r3, #68]	; 0x44
 80035ec:	e002      	b.n	80035f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035fc:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_ADC_Start+0x194>)
 80035fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003608:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2b00      	cmp	r3, #0
 8003614:	d12a      	bne.n	800366c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a2b      	ldr	r2, [pc, #172]	; (80036c8 <HAL_ADC_Start+0x198>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d015      	beq.n	800364c <HAL_ADC_Start+0x11c>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a29      	ldr	r2, [pc, #164]	; (80036cc <HAL_ADC_Start+0x19c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d105      	bne.n	8003636 <HAL_ADC_Start+0x106>
 800362a:	4b26      	ldr	r3, [pc, #152]	; (80036c4 <HAL_ADC_Start+0x194>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a25      	ldr	r2, [pc, #148]	; (80036d0 <HAL_ADC_Start+0x1a0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d136      	bne.n	80036ae <HAL_ADC_Start+0x17e>
 8003640:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_ADC_Start+0x194>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	d130      	bne.n	80036ae <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d129      	bne.n	80036ae <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003668:	609a      	str	r2, [r3, #8]
 800366a:	e020      	b.n	80036ae <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <HAL_ADC_Start+0x198>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d11b      	bne.n	80036ae <HAL_ADC_Start+0x17e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d114      	bne.n	80036ae <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	e00b      	b.n	80036ae <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f043 0210 	orr.w	r2, r3, #16
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f043 0201 	orr.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	2000005c 	.word	0x2000005c
 80036c0:	431bde83 	.word	0x431bde83
 80036c4:	40012300 	.word	0x40012300
 80036c8:	40012000 	.word	0x40012000
 80036cc:	40012100 	.word	0x40012100
 80036d0:	40012200 	.word	0x40012200

080036d4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_Stop+0x16>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e021      	b.n	800372e <HAL_ADC_Stop+0x5a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	f043 0201 	orr.w	r2, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003756:	d113      	bne.n	8003780 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003766:	d10b      	bne.n	8003780 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e063      	b.n	8003848 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003780:	f7ff fe62 	bl	8003448 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003786:	e021      	b.n	80037cc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d01d      	beq.n	80037cc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <HAL_ADC_PollForConversion+0x6c>
 8003796:	f7ff fe57 	bl	8003448 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d212      	bcs.n	80037cc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d00b      	beq.n	80037cc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f043 0204 	orr.w	r2, r3, #4
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e03d      	b.n	8003848 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d1d6      	bne.n	8003788 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f06f 0212 	mvn.w	r2, #18
 80037e2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d123      	bne.n	8003846 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003802:	2b00      	cmp	r3, #0
 8003804:	d11f      	bne.n	8003846 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003810:	2b00      	cmp	r3, #0
 8003812:	d006      	beq.n	8003822 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800381e:	2b00      	cmp	r3, #0
 8003820:	d111      	bne.n	8003846 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d105      	bne.n	8003846 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x1c>
 8003884:	2302      	movs	r3, #2
 8003886:	e113      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x244>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b09      	cmp	r3, #9
 8003896:	d925      	bls.n	80038e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68d9      	ldr	r1, [r3, #12]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	4613      	mov	r3, r2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	4413      	add	r3, r2
 80038ac:	3b1e      	subs	r3, #30
 80038ae:	2207      	movs	r2, #7
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43da      	mvns	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	400a      	ands	r2, r1
 80038bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68d9      	ldr	r1, [r3, #12]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	4618      	mov	r0, r3
 80038d0:	4603      	mov	r3, r0
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	4403      	add	r3, r0
 80038d6:	3b1e      	subs	r3, #30
 80038d8:	409a      	lsls	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	e022      	b.n	800392a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6919      	ldr	r1, [r3, #16]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	4613      	mov	r3, r2
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4413      	add	r3, r2
 80038f8:	2207      	movs	r2, #7
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	400a      	ands	r2, r1
 8003906:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6919      	ldr	r1, [r3, #16]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
 8003918:	4618      	mov	r0, r3
 800391a:	4603      	mov	r3, r0
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4403      	add	r3, r0
 8003920:	409a      	lsls	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b06      	cmp	r3, #6
 8003930:	d824      	bhi.n	800397c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	3b05      	subs	r3, #5
 8003944:	221f      	movs	r2, #31
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43da      	mvns	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	400a      	ands	r2, r1
 8003952:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	4618      	mov	r0, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	3b05      	subs	r3, #5
 800396e:	fa00 f203 	lsl.w	r2, r0, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	635a      	str	r2, [r3, #52]	; 0x34
 800397a:	e04c      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b0c      	cmp	r3, #12
 8003982:	d824      	bhi.n	80039ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	3b23      	subs	r3, #35	; 0x23
 8003996:	221f      	movs	r2, #31
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43da      	mvns	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	400a      	ands	r2, r1
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	4618      	mov	r0, r3
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	3b23      	subs	r3, #35	; 0x23
 80039c0:	fa00 f203 	lsl.w	r2, r0, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30
 80039cc:	e023      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	3b41      	subs	r3, #65	; 0x41
 80039e0:	221f      	movs	r2, #31
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43da      	mvns	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	400a      	ands	r2, r1
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	4618      	mov	r0, r3
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	3b41      	subs	r3, #65	; 0x41
 8003a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a16:	4b29      	ldr	r3, [pc, #164]	; (8003abc <HAL_ADC_ConfigChannel+0x250>)
 8003a18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a28      	ldr	r2, [pc, #160]	; (8003ac0 <HAL_ADC_ConfigChannel+0x254>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10f      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x1d8>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b12      	cmp	r3, #18
 8003a2a:	d10b      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1d      	ldr	r2, [pc, #116]	; (8003ac0 <HAL_ADC_ConfigChannel+0x254>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d12b      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x23a>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1c      	ldr	r2, [pc, #112]	; (8003ac4 <HAL_ADC_ConfigChannel+0x258>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <HAL_ADC_ConfigChannel+0x1f4>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b11      	cmp	r3, #17
 8003a5e:	d122      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a11      	ldr	r2, [pc, #68]	; (8003ac4 <HAL_ADC_ConfigChannel+0x258>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d111      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <HAL_ADC_ConfigChannel+0x25c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a11      	ldr	r2, [pc, #68]	; (8003acc <HAL_ADC_ConfigChannel+0x260>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	0c9a      	lsrs	r2, r3, #18
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a98:	e002      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f9      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	40012300 	.word	0x40012300
 8003ac0:	40012000 	.word	0x40012000
 8003ac4:	10000012 	.word	0x10000012
 8003ac8:	2000005c 	.word	0x2000005c
 8003acc:	431bde83 	.word	0x431bde83

08003ad0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ad8:	4b79      	ldr	r3, [pc, #484]	; (8003cc0 <ADC_Init+0x1f0>)
 8003ada:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	431a      	orrs	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	021a      	lsls	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6899      	ldr	r1, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	4a58      	ldr	r2, [pc, #352]	; (8003cc4 <ADC_Init+0x1f4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d022      	beq.n	8003bae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6899      	ldr	r1, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6899      	ldr	r1, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	609a      	str	r2, [r3, #8]
 8003bac:	e00f      	b.n	8003bce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0202 	bic.w	r2, r2, #2
 8003bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6899      	ldr	r1, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	7e1b      	ldrb	r3, [r3, #24]
 8003be8:	005a      	lsls	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d01b      	beq.n	8003c34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6859      	ldr	r1, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	3b01      	subs	r3, #1
 8003c28:	035a      	lsls	r2, r3, #13
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	e007      	b.n	8003c44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	051a      	lsls	r2, r3, #20
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6899      	ldr	r1, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c86:	025a      	lsls	r2, r3, #9
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6899      	ldr	r1, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	029a      	lsls	r2, r3, #10
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	609a      	str	r2, [r3, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	40012300 	.word	0x40012300
 8003cc4:	0f000001 	.word	0x0f000001

08003cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cfa:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	60d3      	str	r3, [r2, #12]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <__NVIC_GetPriorityGrouping+0x18>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	0a1b      	lsrs	r3, r3, #8
 8003d1a:	f003 0307 	and.w	r3, r3, #7
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	db0b      	blt.n	8003d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	f003 021f 	and.w	r2, r3, #31
 8003d44:	4907      	ldr	r1, [pc, #28]	; (8003d64 <__NVIC_EnableIRQ+0x38>)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	e000e100 	.word	0xe000e100

08003d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	6039      	str	r1, [r7, #0]
 8003d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	db0a      	blt.n	8003d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	490c      	ldr	r1, [pc, #48]	; (8003db4 <__NVIC_SetPriority+0x4c>)
 8003d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d86:	0112      	lsls	r2, r2, #4
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d90:	e00a      	b.n	8003da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	4908      	ldr	r1, [pc, #32]	; (8003db8 <__NVIC_SetPriority+0x50>)
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	3b04      	subs	r3, #4
 8003da0:	0112      	lsls	r2, r2, #4
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	440b      	add	r3, r1
 8003da6:	761a      	strb	r2, [r3, #24]
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	e000e100 	.word	0xe000e100
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b089      	sub	sp, #36	; 0x24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f1c3 0307 	rsb	r3, r3, #7
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	bf28      	it	cs
 8003dda:	2304      	movcs	r3, #4
 8003ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	3304      	adds	r3, #4
 8003de2:	2b06      	cmp	r3, #6
 8003de4:	d902      	bls.n	8003dec <NVIC_EncodePriority+0x30>
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	3b03      	subs	r3, #3
 8003dea:	e000      	b.n	8003dee <NVIC_EncodePriority+0x32>
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43da      	mvns	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	401a      	ands	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e04:	f04f 31ff 	mov.w	r1, #4294967295
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	43d9      	mvns	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e14:	4313      	orrs	r3, r2
         );
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3724      	adds	r7, #36	; 0x24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff ff4c 	bl	8003cc8 <__NVIC_SetPriorityGrouping>
}
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e4a:	f7ff ff61 	bl	8003d10 <__NVIC_GetPriorityGrouping>
 8003e4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	6978      	ldr	r0, [r7, #20]
 8003e56:	f7ff ffb1 	bl	8003dbc <NVIC_EncodePriority>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e60:	4611      	mov	r1, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff ff80 	bl	8003d68 <__NVIC_SetPriority>
}
 8003e68:	bf00      	nop
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ff54 	bl	8003d2c <__NVIC_EnableIRQ>
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e00e      	b.n	8003ebc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	795b      	ldrb	r3, [r3, #5]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d105      	bne.n	8003eb4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fe fdc0 	bl	8002a34 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ed0:	f7ff faba 	bl	8003448 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e099      	b.n	8004014 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f00:	e00f      	b.n	8003f22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f02:	f7ff faa1 	bl	8003448 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b05      	cmp	r3, #5
 8003f0e:	d908      	bls.n	8003f22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2203      	movs	r2, #3
 8003f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e078      	b.n	8004014 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e8      	bne.n	8003f02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4b38      	ldr	r3, [pc, #224]	; (800401c <HAL_DMA_Init+0x158>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d107      	bne.n	8003f8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	4313      	orrs	r3, r2
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f023 0307 	bic.w	r3, r3, #7
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d117      	bne.n	8003fe6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00e      	beq.n	8003fe6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f8bd 	bl	8004148 <DMA_CheckFifoParam>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2240      	movs	r2, #64	; 0x40
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e016      	b.n	8004014 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f874 	bl	80040dc <DMA_CalcBaseAndBitshift>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	223f      	movs	r2, #63	; 0x3f
 8003ffe:	409a      	lsls	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	f010803f 	.word	0xf010803f

08004020 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e050      	b.n	80040d4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d101      	bne.n	8004042 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800403e:	2302      	movs	r3, #2
 8004040:	e048      	b.n	80040d4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0201 	bic.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2200      	movs	r2, #0
 8004060:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2200      	movs	r2, #0
 8004070:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2200      	movs	r2, #0
 8004078:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2221      	movs	r2, #33	; 0x21
 8004080:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f82a 	bl	80040dc <DMA_CalcBaseAndBitshift>
 8004088:	4603      	mov	r3, r0
 800408a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b4:	223f      	movs	r2, #63	; 0x3f
 80040b6:	409a      	lsls	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	3b10      	subs	r3, #16
 80040ec:	4a14      	ldr	r2, [pc, #80]	; (8004140 <DMA_CalcBaseAndBitshift+0x64>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040f6:	4a13      	ldr	r2, [pc, #76]	; (8004144 <DMA_CalcBaseAndBitshift+0x68>)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d909      	bls.n	800411e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004112:	f023 0303 	bic.w	r3, r3, #3
 8004116:	1d1a      	adds	r2, r3, #4
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	659a      	str	r2, [r3, #88]	; 0x58
 800411c:	e007      	b.n	800412e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	aaaaaaab 	.word	0xaaaaaaab
 8004144:	08012d1c 	.word	0x08012d1c

08004148 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d11f      	bne.n	80041a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d856      	bhi.n	8004216 <DMA_CheckFifoParam+0xce>
 8004168:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <DMA_CheckFifoParam+0x28>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	08004181 	.word	0x08004181
 8004174:	08004193 	.word	0x08004193
 8004178:	08004181 	.word	0x08004181
 800417c:	08004217 	.word	0x08004217
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d046      	beq.n	800421a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004190:	e043      	b.n	800421a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800419a:	d140      	bne.n	800421e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a0:	e03d      	b.n	800421e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041aa:	d121      	bne.n	80041f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d837      	bhi.n	8004222 <DMA_CheckFifoParam+0xda>
 80041b2:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <DMA_CheckFifoParam+0x70>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	080041c9 	.word	0x080041c9
 80041bc:	080041cf 	.word	0x080041cf
 80041c0:	080041c9 	.word	0x080041c9
 80041c4:	080041e1 	.word	0x080041e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      break;
 80041cc:	e030      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d025      	beq.n	8004226 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041de:	e022      	b.n	8004226 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041e8:	d11f      	bne.n	800422a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041ee:	e01c      	b.n	800422a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d903      	bls.n	80041fe <DMA_CheckFifoParam+0xb6>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d003      	beq.n	8004204 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041fc:	e018      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
      break;
 8004202:	e015      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00e      	beq.n	800422e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      break;
 8004214:	e00b      	b.n	800422e <DMA_CheckFifoParam+0xe6>
      break;
 8004216:	bf00      	nop
 8004218:	e00a      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 800421a:	bf00      	nop
 800421c:	e008      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 800421e:	bf00      	nop
 8004220:	e006      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 8004222:	bf00      	nop
 8004224:	e004      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 8004226:	bf00      	nop
 8004228:	e002      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;   
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 800422e:	bf00      	nop
    }
  } 
  
  return status; 
 8004230:	7bfb      	ldrb	r3, [r7, #15]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop

08004240 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e03b      	b.n	80042ca <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fe fc06 	bl	8002a78 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004290:	f023 0107 	bic.w	r1, r3, #7
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68d1      	ldr	r1, [r2, #12]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	430b      	orrs	r3, r1
 80042b8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b086      	sub	sp, #24
 80042d6:	af02      	add	r7, sp, #8
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_DMA2D_Start+0x1c>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e018      	b.n	8004320 <HAL_DMA2D_Start+0x4e>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2202      	movs	r2, #2
 80042fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fa99 	bl	8004840 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0201 	orr.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d056      	beq.n	80043f2 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004344:	f7ff f880 	bl	8003448 <HAL_GetTick>
 8004348:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800434a:	e04b      	b.n	80043e4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800435a:	2b00      	cmp	r3, #0
 800435c:	d023      	beq.n	80043a6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436c:	f043 0202 	orr.w	r2, r3, #2
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	f043 0201 	orr.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2221      	movs	r2, #33	; 0x21
 8004390:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2204      	movs	r2, #4
 8004396:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e0a5      	b.n	80044f2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d01a      	beq.n	80043e4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	f7ff f84b 	bl	8003448 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <HAL_DMA2D_PollForTransfer+0x9c>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10f      	bne.n	80043e4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c8:	f043 0220 	orr.w	r2, r3, #32
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2203      	movs	r2, #3
 80043d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e086      	b.n	80044f2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0ac      	beq.n	800434c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d061      	beq.n	80044d8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004414:	f7ff f818 	bl	8003448 <HAL_GetTick>
 8004418:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800441a:	e056      	b.n	80044ca <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800442a:	2b00      	cmp	r3, #0
 800442c:	d02e      	beq.n	800448c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	f043 0204 	orr.w	r2, r3, #4
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004452:	f043 0202 	orr.w	r2, r3, #2
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004468:	f043 0201 	orr.w	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2229      	movs	r2, #41	; 0x29
 8004476:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2204      	movs	r2, #4
 800447c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e032      	b.n	80044f2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004492:	d01a      	beq.n	80044ca <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004494:	f7fe ffd8 	bl	8003448 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d302      	bcc.n	80044aa <HAL_DMA2D_PollForTransfer+0x182>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10f      	bne.n	80044ca <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	f043 0220 	orr.w	r2, r3, #32
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2203      	movs	r2, #3
 80044ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e013      	b.n	80044f2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0a1      	beq.n	800441c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2212      	movs	r2, #18
 80044de:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d026      	beq.n	800456a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d021      	beq.n	800456a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004534:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	f043 0201 	orr.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2201      	movs	r2, #1
 8004548:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2204      	movs	r2, #4
 800454e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d026      	beq.n	80045c2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d021      	beq.n	80045c2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800458c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2220      	movs	r2, #32
 8004594:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459a:	f043 0202 	orr.w	r2, r3, #2
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2204      	movs	r2, #4
 80045a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d026      	beq.n	800461a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d021      	beq.n	800461a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2208      	movs	r2, #8
 80045ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	f043 0204 	orr.w	r2, r3, #4
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2204      	movs	r2, #4
 80045fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d013      	beq.n	800464c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00e      	beq.n	800464c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2204      	movs	r2, #4
 8004644:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f853 	bl	80046f2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d024      	beq.n	80046a0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01f      	beq.n	80046a0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800466e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2202      	movs	r2, #2
 8004676:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01f      	beq.n	80046ea <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01a      	beq.n	80046ea <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046c2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2210      	movs	r2, #16
 80046ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f80e 	bl	8004706 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80046ea:	bf00      	nop
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_DMA2D_ConfigLayer+0x20>
 8004738:	2302      	movs	r3, #2
 800473a:	e079      	b.n	8004830 <HAL_DMA2D_ConfigLayer+0x114>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	3318      	adds	r3, #24
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	4413      	add	r3, r2
 8004756:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	041b      	lsls	r3, r3, #16
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004766:	4b35      	ldr	r3, [pc, #212]	; (800483c <HAL_DMA2D_ConfigLayer+0x120>)
 8004768:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b0a      	cmp	r3, #10
 8004770:	d003      	beq.n	800477a <HAL_DMA2D_ConfigLayer+0x5e>
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b09      	cmp	r3, #9
 8004778:	d107      	bne.n	800478a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	e005      	b.n	8004796 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	061b      	lsls	r3, r3, #24
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d120      	bne.n	80047de <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	43db      	mvns	r3, r3
 80047a6:	ea02 0103 	and.w	r1, r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b0a      	cmp	r3, #10
 80047c4:	d003      	beq.n	80047ce <HAL_DMA2D_ConfigLayer+0xb2>
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b09      	cmp	r3, #9
 80047cc:	d127      	bne.n	800481e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80047da:	629a      	str	r2, [r3, #40]	; 0x28
 80047dc:	e01f      	b.n	800481e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	43db      	mvns	r3, r3
 80047e8:	ea02 0103 	and.w	r1, r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b0a      	cmp	r3, #10
 8004806:	d003      	beq.n	8004810 <HAL_DMA2D_ConfigLayer+0xf4>
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b09      	cmp	r3, #9
 800480e:	d106      	bne.n	800481e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800481c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	ff03000f 	.word	0xff03000f

08004840 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004840:	b480      	push	{r7}
 8004842:	b08b      	sub	sp, #44	; 0x2c
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	041a      	lsls	r2, r3, #16
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	431a      	orrs	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004878:	d174      	bne.n	8004964 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004880:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004888:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004890:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d108      	bne.n	80048b2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
 80048b0:	e053      	b.n	800495a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d106      	bne.n	80048c8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	4313      	orrs	r3, r2
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
 80048c6:	e048      	b.n	800495a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d111      	bne.n	80048f4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	0cdb      	lsrs	r3, r3, #19
 80048d4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	0a9b      	lsrs	r3, r3, #10
 80048da:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	08db      	lsrs	r3, r3, #3
 80048e0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	02db      	lsls	r3, r3, #11
 80048ea:	4313      	orrs	r3, r2
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
 80048f2:	e032      	b.n	800495a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d117      	bne.n	800492c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	0fdb      	lsrs	r3, r3, #31
 8004900:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	0cdb      	lsrs	r3, r3, #19
 8004906:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	0adb      	lsrs	r3, r3, #11
 800490c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	08db      	lsrs	r3, r3, #3
 8004912:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	029b      	lsls	r3, r3, #10
 800491c:	431a      	orrs	r2, r3
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	03db      	lsls	r3, r3, #15
 8004922:	4313      	orrs	r3, r2
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
 800492a:	e016      	b.n	800495a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	0f1b      	lsrs	r3, r3, #28
 8004930:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	0d1b      	lsrs	r3, r3, #20
 8004936:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	0b1b      	lsrs	r3, r3, #12
 800493c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	011a      	lsls	r2, r3, #4
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	431a      	orrs	r2, r3
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	031b      	lsls	r3, r3, #12
 8004952:	4313      	orrs	r3, r2
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004962:	e003      	b.n	800496c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	60da      	str	r2, [r3, #12]
}
 800496c:	bf00      	nop
 800496e:	372c      	adds	r7, #44	; 0x2c
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004978:	b480      	push	{r7}
 800497a:	b089      	sub	sp, #36	; 0x24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004986:	2300      	movs	r3, #0
 8004988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	e177      	b.n	8004c84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004994:	2201      	movs	r2, #1
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4013      	ands	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	f040 8166 	bne.w	8004c7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d005      	beq.n	80049ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d130      	bne.n	8004a2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	2203      	movs	r2, #3
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	43db      	mvns	r3, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4013      	ands	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a00:	2201      	movs	r2, #1
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	f003 0201 	and.w	r2, r3, #1
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d017      	beq.n	8004a68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	2203      	movs	r2, #3
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 0303 	and.w	r3, r3, #3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d123      	bne.n	8004abc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	08da      	lsrs	r2, r3, #3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3208      	adds	r2, #8
 8004a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	220f      	movs	r2, #15
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43db      	mvns	r3, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4013      	ands	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	08da      	lsrs	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3208      	adds	r2, #8
 8004ab6:	69b9      	ldr	r1, [r7, #24]
 8004ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0203 	and.w	r2, r3, #3
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80c0 	beq.w	8004c7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	4b66      	ldr	r3, [pc, #408]	; (8004c9c <HAL_GPIO_Init+0x324>)
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	4a65      	ldr	r2, [pc, #404]	; (8004c9c <HAL_GPIO_Init+0x324>)
 8004b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b0e:	4b63      	ldr	r3, [pc, #396]	; (8004c9c <HAL_GPIO_Init+0x324>)
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b1a:	4a61      	ldr	r2, [pc, #388]	; (8004ca0 <HAL_GPIO_Init+0x328>)
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	089b      	lsrs	r3, r3, #2
 8004b20:	3302      	adds	r3, #2
 8004b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	220f      	movs	r2, #15
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	43db      	mvns	r3, r3
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a58      	ldr	r2, [pc, #352]	; (8004ca4 <HAL_GPIO_Init+0x32c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d037      	beq.n	8004bb6 <HAL_GPIO_Init+0x23e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a57      	ldr	r2, [pc, #348]	; (8004ca8 <HAL_GPIO_Init+0x330>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d031      	beq.n	8004bb2 <HAL_GPIO_Init+0x23a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a56      	ldr	r2, [pc, #344]	; (8004cac <HAL_GPIO_Init+0x334>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d02b      	beq.n	8004bae <HAL_GPIO_Init+0x236>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a55      	ldr	r2, [pc, #340]	; (8004cb0 <HAL_GPIO_Init+0x338>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d025      	beq.n	8004baa <HAL_GPIO_Init+0x232>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a54      	ldr	r2, [pc, #336]	; (8004cb4 <HAL_GPIO_Init+0x33c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01f      	beq.n	8004ba6 <HAL_GPIO_Init+0x22e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a53      	ldr	r2, [pc, #332]	; (8004cb8 <HAL_GPIO_Init+0x340>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d019      	beq.n	8004ba2 <HAL_GPIO_Init+0x22a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a52      	ldr	r2, [pc, #328]	; (8004cbc <HAL_GPIO_Init+0x344>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <HAL_GPIO_Init+0x226>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a51      	ldr	r2, [pc, #324]	; (8004cc0 <HAL_GPIO_Init+0x348>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00d      	beq.n	8004b9a <HAL_GPIO_Init+0x222>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a50      	ldr	r2, [pc, #320]	; (8004cc4 <HAL_GPIO_Init+0x34c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d007      	beq.n	8004b96 <HAL_GPIO_Init+0x21e>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a4f      	ldr	r2, [pc, #316]	; (8004cc8 <HAL_GPIO_Init+0x350>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d101      	bne.n	8004b92 <HAL_GPIO_Init+0x21a>
 8004b8e:	2309      	movs	r3, #9
 8004b90:	e012      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004b92:	230a      	movs	r3, #10
 8004b94:	e010      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004b96:	2308      	movs	r3, #8
 8004b98:	e00e      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004b9a:	2307      	movs	r3, #7
 8004b9c:	e00c      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004b9e:	2306      	movs	r3, #6
 8004ba0:	e00a      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004ba2:	2305      	movs	r3, #5
 8004ba4:	e008      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004ba6:	2304      	movs	r3, #4
 8004ba8:	e006      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004baa:	2303      	movs	r3, #3
 8004bac:	e004      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e002      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	f002 0203 	and.w	r2, r2, #3
 8004bbe:	0092      	lsls	r2, r2, #2
 8004bc0:	4093      	lsls	r3, r2
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bc8:	4935      	ldr	r1, [pc, #212]	; (8004ca0 <HAL_GPIO_Init+0x328>)
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	089b      	lsrs	r3, r3, #2
 8004bce:	3302      	adds	r3, #2
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bd6:	4b3d      	ldr	r3, [pc, #244]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	43db      	mvns	r3, r3
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	4013      	ands	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bfa:	4a34      	ldr	r2, [pc, #208]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c00:	4b32      	ldr	r3, [pc, #200]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c24:	4a29      	ldr	r2, [pc, #164]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c2a:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	43db      	mvns	r3, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4013      	ands	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c4e:	4a1f      	ldr	r2, [pc, #124]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c54:	4b1d      	ldr	r3, [pc, #116]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	4013      	ands	r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c78:	4a14      	ldr	r2, [pc, #80]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3301      	adds	r3, #1
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	2b0f      	cmp	r3, #15
 8004c88:	f67f ae84 	bls.w	8004994 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	3724      	adds	r7, #36	; 0x24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	40013800 	.word	0x40013800
 8004ca4:	40020000 	.word	0x40020000
 8004ca8:	40020400 	.word	0x40020400
 8004cac:	40020800 	.word	0x40020800
 8004cb0:	40020c00 	.word	0x40020c00
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	40021400 	.word	0x40021400
 8004cbc:	40021800 	.word	0x40021800
 8004cc0:	40021c00 	.word	0x40021c00
 8004cc4:	40022000 	.word	0x40022000
 8004cc8:	40022400 	.word	0x40022400
 8004ccc:	40013c00 	.word	0x40013c00

08004cd0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	e0d9      	b.n	8004ea0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cec:	2201      	movs	r2, #1
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	f040 80c9 	bne.w	8004e9a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004d08:	4a6b      	ldr	r2, [pc, #428]	; (8004eb8 <HAL_GPIO_DeInit+0x1e8>)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	089b      	lsrs	r3, r3, #2
 8004d0e:	3302      	adds	r3, #2
 8004d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d14:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	220f      	movs	r2, #15
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	4013      	ands	r3, r2
 8004d28:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a63      	ldr	r2, [pc, #396]	; (8004ebc <HAL_GPIO_DeInit+0x1ec>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d037      	beq.n	8004da2 <HAL_GPIO_DeInit+0xd2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a62      	ldr	r2, [pc, #392]	; (8004ec0 <HAL_GPIO_DeInit+0x1f0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d031      	beq.n	8004d9e <HAL_GPIO_DeInit+0xce>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a61      	ldr	r2, [pc, #388]	; (8004ec4 <HAL_GPIO_DeInit+0x1f4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d02b      	beq.n	8004d9a <HAL_GPIO_DeInit+0xca>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a60      	ldr	r2, [pc, #384]	; (8004ec8 <HAL_GPIO_DeInit+0x1f8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d025      	beq.n	8004d96 <HAL_GPIO_DeInit+0xc6>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a5f      	ldr	r2, [pc, #380]	; (8004ecc <HAL_GPIO_DeInit+0x1fc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d01f      	beq.n	8004d92 <HAL_GPIO_DeInit+0xc2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a5e      	ldr	r2, [pc, #376]	; (8004ed0 <HAL_GPIO_DeInit+0x200>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d019      	beq.n	8004d8e <HAL_GPIO_DeInit+0xbe>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a5d      	ldr	r2, [pc, #372]	; (8004ed4 <HAL_GPIO_DeInit+0x204>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d013      	beq.n	8004d8a <HAL_GPIO_DeInit+0xba>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a5c      	ldr	r2, [pc, #368]	; (8004ed8 <HAL_GPIO_DeInit+0x208>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00d      	beq.n	8004d86 <HAL_GPIO_DeInit+0xb6>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a5b      	ldr	r2, [pc, #364]	; (8004edc <HAL_GPIO_DeInit+0x20c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <HAL_GPIO_DeInit+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a5a      	ldr	r2, [pc, #360]	; (8004ee0 <HAL_GPIO_DeInit+0x210>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d101      	bne.n	8004d7e <HAL_GPIO_DeInit+0xae>
 8004d7a:	2309      	movs	r3, #9
 8004d7c:	e012      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d7e:	230a      	movs	r3, #10
 8004d80:	e010      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d82:	2308      	movs	r3, #8
 8004d84:	e00e      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d86:	2307      	movs	r3, #7
 8004d88:	e00c      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d8a:	2306      	movs	r3, #6
 8004d8c:	e00a      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d8e:	2305      	movs	r3, #5
 8004d90:	e008      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d92:	2304      	movs	r3, #4
 8004d94:	e006      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d96:	2303      	movs	r3, #3
 8004d98:	e004      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e002      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004da2:	2300      	movs	r3, #0
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	f002 0203 	and.w	r2, r2, #3
 8004daa:	0092      	lsls	r2, r2, #2
 8004dac:	4093      	lsls	r3, r2
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d132      	bne.n	8004e1a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004db4:	4b4b      	ldr	r3, [pc, #300]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	4949      	ldr	r1, [pc, #292]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004dc2:	4b48      	ldr	r3, [pc, #288]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	4946      	ldr	r1, [pc, #280]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004dd0:	4b44      	ldr	r3, [pc, #272]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	4942      	ldr	r1, [pc, #264]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004dde:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	43db      	mvns	r3, r3
 8004de6:	493f      	ldr	r1, [pc, #252]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	220f      	movs	r2, #15
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004dfc:	4a2e      	ldr	r2, [pc, #184]	; (8004eb8 <HAL_GPIO_DeInit+0x1e8>)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	089b      	lsrs	r3, r3, #2
 8004e02:	3302      	adds	r3, #2
 8004e04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	43da      	mvns	r2, r3
 8004e0c:	482a      	ldr	r0, [pc, #168]	; (8004eb8 <HAL_GPIO_DeInit+0x1e8>)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	400a      	ands	r2, r1
 8004e14:	3302      	adds	r3, #2
 8004e16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	2103      	movs	r1, #3
 8004e24:	fa01 f303 	lsl.w	r3, r1, r3
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	08da      	lsrs	r2, r3, #3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3208      	adds	r2, #8
 8004e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	220f      	movs	r2, #15
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	08d2      	lsrs	r2, r2, #3
 8004e50:	4019      	ands	r1, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3208      	adds	r2, #8
 8004e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	2103      	movs	r1, #3
 8004e64:	fa01 f303 	lsl.w	r3, r1, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	401a      	ands	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	2101      	movs	r1, #1
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	401a      	ands	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	2103      	movs	r1, #3
 8004e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	401a      	ands	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2b0f      	cmp	r3, #15
 8004ea4:	f67f af22 	bls.w	8004cec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40013800 	.word	0x40013800
 8004ebc:	40020000 	.word	0x40020000
 8004ec0:	40020400 	.word	0x40020400
 8004ec4:	40020800 	.word	0x40020800
 8004ec8:	40020c00 	.word	0x40020c00
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	40021400 	.word	0x40021400
 8004ed4:	40021800 	.word	0x40021800
 8004ed8:	40021c00 	.word	0x40021c00
 8004edc:	40022000 	.word	0x40022000
 8004ee0:	40022400 	.word	0x40022400
 8004ee4:	40013c00 	.word	0x40013c00

08004ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	807b      	strh	r3, [r7, #2]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ef8:	787b      	ldrb	r3, [r7, #1]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004efe:	887a      	ldrh	r2, [r7, #2]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f04:	e003      	b.n	8004f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f06:	887b      	ldrh	r3, [r7, #2]
 8004f08:	041a      	lsls	r2, r3, #16
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	619a      	str	r2, [r3, #24]
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f1c:	b08f      	sub	sp, #60	; 0x3c
 8004f1e:	af0a      	add	r7, sp, #40	; 0x28
 8004f20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e054      	b.n	8004fd6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f00a fda0 	bl	800fa8c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2203      	movs	r2, #3
 8004f50:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d102      	bne.n	8004f66 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f005 f87a 	bl	800a064 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	603b      	str	r3, [r7, #0]
 8004f76:	687e      	ldr	r6, [r7, #4]
 8004f78:	466d      	mov	r5, sp
 8004f7a:	f106 0410 	add.w	r4, r6, #16
 8004f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f8e:	1d33      	adds	r3, r6, #4
 8004f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f92:	6838      	ldr	r0, [r7, #0]
 8004f94:	f004 fff4 	bl	8009f80 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f005 f871 	bl	800a086 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	603b      	str	r3, [r7, #0]
 8004faa:	687e      	ldr	r6, [r7, #4]
 8004fac:	466d      	mov	r5, sp
 8004fae:	f106 0410 	add.w	r4, r6, #16
 8004fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004fbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004fc2:	1d33      	adds	r3, r6, #4
 8004fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fc6:	6838      	ldr	r0, [r7, #0]
 8004fc8:	f005 f9fa 	bl	800a3c0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fde <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004fde:	b590      	push	{r4, r7, lr}
 8004fe0:	b089      	sub	sp, #36	; 0x24
 8004fe2:	af04      	add	r7, sp, #16
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	4608      	mov	r0, r1
 8004fe8:	4611      	mov	r1, r2
 8004fea:	461a      	mov	r2, r3
 8004fec:	4603      	mov	r3, r0
 8004fee:	70fb      	strb	r3, [r7, #3]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	70bb      	strb	r3, [r7, #2]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <HAL_HCD_HC_Init+0x28>
 8005002:	2302      	movs	r3, #2
 8005004:	e076      	b.n	80050f4 <HAL_HCD_HC_Init+0x116>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	212c      	movs	r1, #44	; 0x2c
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	4413      	add	r3, r2
 800501a:	333d      	adds	r3, #61	; 0x3d
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005020:	78fb      	ldrb	r3, [r7, #3]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	212c      	movs	r1, #44	; 0x2c
 8005026:	fb01 f303 	mul.w	r3, r1, r3
 800502a:	4413      	add	r3, r2
 800502c:	3338      	adds	r3, #56	; 0x38
 800502e:	787a      	ldrb	r2, [r7, #1]
 8005030:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	212c      	movs	r1, #44	; 0x2c
 8005038:	fb01 f303 	mul.w	r3, r1, r3
 800503c:	4413      	add	r3, r2
 800503e:	3340      	adds	r3, #64	; 0x40
 8005040:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005042:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	212c      	movs	r1, #44	; 0x2c
 800504a:	fb01 f303 	mul.w	r3, r1, r3
 800504e:	4413      	add	r3, r2
 8005050:	3339      	adds	r3, #57	; 0x39
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	212c      	movs	r1, #44	; 0x2c
 800505c:	fb01 f303 	mul.w	r3, r1, r3
 8005060:	4413      	add	r3, r2
 8005062:	333f      	adds	r3, #63	; 0x3f
 8005064:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005068:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	78ba      	ldrb	r2, [r7, #2]
 800506e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005072:	b2d0      	uxtb	r0, r2
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	212c      	movs	r1, #44	; 0x2c
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	4413      	add	r3, r2
 800507e:	333a      	adds	r3, #58	; 0x3a
 8005080:	4602      	mov	r2, r0
 8005082:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005084:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005088:	2b00      	cmp	r3, #0
 800508a:	da09      	bge.n	80050a0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	212c      	movs	r1, #44	; 0x2c
 8005092:	fb01 f303 	mul.w	r3, r1, r3
 8005096:	4413      	add	r3, r2
 8005098:	333b      	adds	r3, #59	; 0x3b
 800509a:	2201      	movs	r2, #1
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	e008      	b.n	80050b2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	212c      	movs	r1, #44	; 0x2c
 80050a6:	fb01 f303 	mul.w	r3, r1, r3
 80050aa:	4413      	add	r3, r2
 80050ac:	333b      	adds	r3, #59	; 0x3b
 80050ae:	2200      	movs	r2, #0
 80050b0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	212c      	movs	r1, #44	; 0x2c
 80050b8:	fb01 f303 	mul.w	r3, r1, r3
 80050bc:	4413      	add	r3, r2
 80050be:	333c      	adds	r3, #60	; 0x3c
 80050c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80050c4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	787c      	ldrb	r4, [r7, #1]
 80050cc:	78ba      	ldrb	r2, [r7, #2]
 80050ce:	78f9      	ldrb	r1, [r7, #3]
 80050d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80050d2:	9302      	str	r3, [sp, #8]
 80050d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050d8:	9301      	str	r3, [sp, #4]
 80050da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	4623      	mov	r3, r4
 80050e2:	f005 faf3 	bl	800a6cc <USB_HC_Init>
 80050e6:	4603      	mov	r3, r0
 80050e8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd90      	pop	{r4, r7, pc}

080050fc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_HCD_HC_Halt+0x1e>
 8005116:	2302      	movs	r3, #2
 8005118:	e00f      	b.n	800513a <HAL_HCD_HC_Halt+0x3e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	78fa      	ldrb	r2, [r7, #3]
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f005 fd43 	bl	800abb6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	4608      	mov	r0, r1
 800514e:	4611      	mov	r1, r2
 8005150:	461a      	mov	r2, r3
 8005152:	4603      	mov	r3, r0
 8005154:	70fb      	strb	r3, [r7, #3]
 8005156:	460b      	mov	r3, r1
 8005158:	70bb      	strb	r3, [r7, #2]
 800515a:	4613      	mov	r3, r2
 800515c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	212c      	movs	r1, #44	; 0x2c
 8005164:	fb01 f303 	mul.w	r3, r1, r3
 8005168:	4413      	add	r3, r2
 800516a:	333b      	adds	r3, #59	; 0x3b
 800516c:	78ba      	ldrb	r2, [r7, #2]
 800516e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	212c      	movs	r1, #44	; 0x2c
 8005176:	fb01 f303 	mul.w	r3, r1, r3
 800517a:	4413      	add	r3, r2
 800517c:	333f      	adds	r3, #63	; 0x3f
 800517e:	787a      	ldrb	r2, [r7, #1]
 8005180:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005182:	7c3b      	ldrb	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d112      	bne.n	80051ae <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	212c      	movs	r1, #44	; 0x2c
 800518e:	fb01 f303 	mul.w	r3, r1, r3
 8005192:	4413      	add	r3, r2
 8005194:	3342      	adds	r3, #66	; 0x42
 8005196:	2203      	movs	r2, #3
 8005198:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800519a:	78fb      	ldrb	r3, [r7, #3]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	212c      	movs	r1, #44	; 0x2c
 80051a0:	fb01 f303 	mul.w	r3, r1, r3
 80051a4:	4413      	add	r3, r2
 80051a6:	333d      	adds	r3, #61	; 0x3d
 80051a8:	7f3a      	ldrb	r2, [r7, #28]
 80051aa:	701a      	strb	r2, [r3, #0]
 80051ac:	e008      	b.n	80051c0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	212c      	movs	r1, #44	; 0x2c
 80051b4:	fb01 f303 	mul.w	r3, r1, r3
 80051b8:	4413      	add	r3, r2
 80051ba:	3342      	adds	r3, #66	; 0x42
 80051bc:	2202      	movs	r2, #2
 80051be:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80051c0:	787b      	ldrb	r3, [r7, #1]
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	f200 80c6 	bhi.w	8005354 <HAL_HCD_HC_SubmitRequest+0x210>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	08005341 	.word	0x08005341
 80051d8:	08005245 	.word	0x08005245
 80051dc:	080052c3 	.word	0x080052c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80051e0:	7c3b      	ldrb	r3, [r7, #16]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	f040 80b8 	bne.w	8005358 <HAL_HCD_HC_SubmitRequest+0x214>
 80051e8:	78bb      	ldrb	r3, [r7, #2]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f040 80b4 	bne.w	8005358 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80051f0:	8b3b      	ldrh	r3, [r7, #24]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d108      	bne.n	8005208 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80051f6:	78fb      	ldrb	r3, [r7, #3]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	212c      	movs	r1, #44	; 0x2c
 80051fc:	fb01 f303 	mul.w	r3, r1, r3
 8005200:	4413      	add	r3, r2
 8005202:	3355      	adds	r3, #85	; 0x55
 8005204:	2201      	movs	r2, #1
 8005206:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	212c      	movs	r1, #44	; 0x2c
 800520e:	fb01 f303 	mul.w	r3, r1, r3
 8005212:	4413      	add	r3, r2
 8005214:	3355      	adds	r3, #85	; 0x55
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d109      	bne.n	8005230 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	212c      	movs	r1, #44	; 0x2c
 8005222:	fb01 f303 	mul.w	r3, r1, r3
 8005226:	4413      	add	r3, r2
 8005228:	3342      	adds	r3, #66	; 0x42
 800522a:	2200      	movs	r2, #0
 800522c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800522e:	e093      	b.n	8005358 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	212c      	movs	r1, #44	; 0x2c
 8005236:	fb01 f303 	mul.w	r3, r1, r3
 800523a:	4413      	add	r3, r2
 800523c:	3342      	adds	r3, #66	; 0x42
 800523e:	2202      	movs	r2, #2
 8005240:	701a      	strb	r2, [r3, #0]
      break;
 8005242:	e089      	b.n	8005358 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005244:	78bb      	ldrb	r3, [r7, #2]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d11d      	bne.n	8005286 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800524a:	78fb      	ldrb	r3, [r7, #3]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	212c      	movs	r1, #44	; 0x2c
 8005250:	fb01 f303 	mul.w	r3, r1, r3
 8005254:	4413      	add	r3, r2
 8005256:	3355      	adds	r3, #85	; 0x55
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	212c      	movs	r1, #44	; 0x2c
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	4413      	add	r3, r2
 800526a:	3342      	adds	r3, #66	; 0x42
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005270:	e073      	b.n	800535a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	212c      	movs	r1, #44	; 0x2c
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	4413      	add	r3, r2
 800527e:	3342      	adds	r3, #66	; 0x42
 8005280:	2202      	movs	r2, #2
 8005282:	701a      	strb	r2, [r3, #0]
      break;
 8005284:	e069      	b.n	800535a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	212c      	movs	r1, #44	; 0x2c
 800528c:	fb01 f303 	mul.w	r3, r1, r3
 8005290:	4413      	add	r3, r2
 8005292:	3354      	adds	r3, #84	; 0x54
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d109      	bne.n	80052ae <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	212c      	movs	r1, #44	; 0x2c
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	4413      	add	r3, r2
 80052a6:	3342      	adds	r3, #66	; 0x42
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
      break;
 80052ac:	e055      	b.n	800535a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80052ae:	78fb      	ldrb	r3, [r7, #3]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	212c      	movs	r1, #44	; 0x2c
 80052b4:	fb01 f303 	mul.w	r3, r1, r3
 80052b8:	4413      	add	r3, r2
 80052ba:	3342      	adds	r3, #66	; 0x42
 80052bc:	2202      	movs	r2, #2
 80052be:	701a      	strb	r2, [r3, #0]
      break;
 80052c0:	e04b      	b.n	800535a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80052c2:	78bb      	ldrb	r3, [r7, #2]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d11d      	bne.n	8005304 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	212c      	movs	r1, #44	; 0x2c
 80052ce:	fb01 f303 	mul.w	r3, r1, r3
 80052d2:	4413      	add	r3, r2
 80052d4:	3355      	adds	r3, #85	; 0x55
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d109      	bne.n	80052f0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80052dc:	78fb      	ldrb	r3, [r7, #3]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	212c      	movs	r1, #44	; 0x2c
 80052e2:	fb01 f303 	mul.w	r3, r1, r3
 80052e6:	4413      	add	r3, r2
 80052e8:	3342      	adds	r3, #66	; 0x42
 80052ea:	2200      	movs	r2, #0
 80052ec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80052ee:	e034      	b.n	800535a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	212c      	movs	r1, #44	; 0x2c
 80052f6:	fb01 f303 	mul.w	r3, r1, r3
 80052fa:	4413      	add	r3, r2
 80052fc:	3342      	adds	r3, #66	; 0x42
 80052fe:	2202      	movs	r2, #2
 8005300:	701a      	strb	r2, [r3, #0]
      break;
 8005302:	e02a      	b.n	800535a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	212c      	movs	r1, #44	; 0x2c
 800530a:	fb01 f303 	mul.w	r3, r1, r3
 800530e:	4413      	add	r3, r2
 8005310:	3354      	adds	r3, #84	; 0x54
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d109      	bne.n	800532c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	212c      	movs	r1, #44	; 0x2c
 800531e:	fb01 f303 	mul.w	r3, r1, r3
 8005322:	4413      	add	r3, r2
 8005324:	3342      	adds	r3, #66	; 0x42
 8005326:	2200      	movs	r2, #0
 8005328:	701a      	strb	r2, [r3, #0]
      break;
 800532a:	e016      	b.n	800535a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	212c      	movs	r1, #44	; 0x2c
 8005332:	fb01 f303 	mul.w	r3, r1, r3
 8005336:	4413      	add	r3, r2
 8005338:	3342      	adds	r3, #66	; 0x42
 800533a:	2202      	movs	r2, #2
 800533c:	701a      	strb	r2, [r3, #0]
      break;
 800533e:	e00c      	b.n	800535a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	212c      	movs	r1, #44	; 0x2c
 8005346:	fb01 f303 	mul.w	r3, r1, r3
 800534a:	4413      	add	r3, r2
 800534c:	3342      	adds	r3, #66	; 0x42
 800534e:	2200      	movs	r2, #0
 8005350:	701a      	strb	r2, [r3, #0]
      break;
 8005352:	e002      	b.n	800535a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005354:	bf00      	nop
 8005356:	e000      	b.n	800535a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005358:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	212c      	movs	r1, #44	; 0x2c
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	4413      	add	r3, r2
 8005366:	3344      	adds	r3, #68	; 0x44
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	8b3a      	ldrh	r2, [r7, #24]
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	202c      	movs	r0, #44	; 0x2c
 8005374:	fb00 f303 	mul.w	r3, r0, r3
 8005378:	440b      	add	r3, r1
 800537a:	334c      	adds	r3, #76	; 0x4c
 800537c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800537e:	78fb      	ldrb	r3, [r7, #3]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	212c      	movs	r1, #44	; 0x2c
 8005384:	fb01 f303 	mul.w	r3, r1, r3
 8005388:	4413      	add	r3, r2
 800538a:	3360      	adds	r3, #96	; 0x60
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	212c      	movs	r1, #44	; 0x2c
 8005396:	fb01 f303 	mul.w	r3, r1, r3
 800539a:	4413      	add	r3, r2
 800539c:	3350      	adds	r3, #80	; 0x50
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	212c      	movs	r1, #44	; 0x2c
 80053a8:	fb01 f303 	mul.w	r3, r1, r3
 80053ac:	4413      	add	r3, r2
 80053ae:	3339      	adds	r3, #57	; 0x39
 80053b0:	78fa      	ldrb	r2, [r7, #3]
 80053b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	212c      	movs	r1, #44	; 0x2c
 80053ba:	fb01 f303 	mul.w	r3, r1, r3
 80053be:	4413      	add	r3, r2
 80053c0:	3361      	adds	r3, #97	; 0x61
 80053c2:	2200      	movs	r2, #0
 80053c4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	78fb      	ldrb	r3, [r7, #3]
 80053cc:	222c      	movs	r2, #44	; 0x2c
 80053ce:	fb02 f303 	mul.w	r3, r2, r3
 80053d2:	3338      	adds	r3, #56	; 0x38
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	18d1      	adds	r1, r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	461a      	mov	r2, r3
 80053e0:	f005 fa96 	bl	800a910 <USB_HC_StartXfer>
 80053e4:	4603      	mov	r3, r0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop

080053f0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f004 ff97 	bl	800a33a <USB_GetMode>
 800540c:	4603      	mov	r3, r0
 800540e:	2b01      	cmp	r3, #1
 8005410:	f040 80f6 	bne.w	8005600 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4618      	mov	r0, r3
 800541a:	f004 ff7b 	bl	800a314 <USB_ReadInterrupts>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 80ec 	beq.w	80055fe <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f004 ff72 	bl	800a314 <USB_ReadInterrupts>
 8005430:	4603      	mov	r3, r0
 8005432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800543a:	d104      	bne.n	8005446 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005444:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f004 ff62 	bl	800a314 <USB_ReadInterrupts>
 8005450:	4603      	mov	r3, r0
 8005452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545a:	d104      	bne.n	8005466 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005464:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f004 ff52 	bl	800a314 <USB_ReadInterrupts>
 8005470:	4603      	mov	r3, r0
 8005472:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005476:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800547a:	d104      	bne.n	8005486 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005484:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f004 ff42 	bl	800a314 <USB_ReadInterrupts>
 8005490:	4603      	mov	r3, r0
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b02      	cmp	r3, #2
 8005498:	d103      	bne.n	80054a2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2202      	movs	r2, #2
 80054a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f004 ff34 	bl	800a314 <USB_ReadInterrupts>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054b6:	d11c      	bne.n	80054f2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80054c0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10f      	bne.n	80054f2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80054d2:	2110      	movs	r1, #16
 80054d4:	6938      	ldr	r0, [r7, #16]
 80054d6:	f004 fe23 	bl	800a120 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80054da:	6938      	ldr	r0, [r7, #16]
 80054dc:	f004 fe54 	bl	800a188 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2101      	movs	r1, #1
 80054e6:	4618      	mov	r0, r3
 80054e8:	f005 f82a 	bl	800a540 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f00a fb47 	bl	800fb80 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f004 ff0c 	bl	800a314 <USB_ReadInterrupts>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005502:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005506:	d102      	bne.n	800550e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f001 f89e 	bl	800664a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f004 fefe 	bl	800a314 <USB_ReadInterrupts>
 8005518:	4603      	mov	r3, r0
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b08      	cmp	r3, #8
 8005520:	d106      	bne.n	8005530 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f00a fb10 	bl	800fb48 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2208      	movs	r2, #8
 800552e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	f004 feed 	bl	800a314 <USB_ReadInterrupts>
 800553a:	4603      	mov	r3, r0
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b10      	cmp	r3, #16
 8005542:	d101      	bne.n	8005548 <HAL_HCD_IRQHandler+0x158>
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <HAL_HCD_IRQHandler+0x15a>
 8005548:	2300      	movs	r3, #0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d012      	beq.n	8005574 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0210 	bic.w	r2, r2, #16
 800555c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 ffa1 	bl	80064a6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0210 	orr.w	r2, r2, #16
 8005572:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f004 fecb 	bl	800a314 <USB_ReadInterrupts>
 800557e:	4603      	mov	r3, r0
 8005580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005588:	d13a      	bne.n	8005600 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f005 fb00 	bl	800ab94 <USB_HC_ReadInterrupt>
 8005594:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	e025      	b.n	80055e8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	fa22 f303 	lsr.w	r3, r2, r3
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d018      	beq.n	80055e2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c6:	d106      	bne.n	80055d6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f8ab 	bl	800572a <HCD_HC_IN_IRQHandler>
 80055d4:	e005      	b.n	80055e2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fbf9 	bl	8005dd4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	3301      	adds	r3, #1
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d3d4      	bcc.n	800559c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055fa:	615a      	str	r2, [r3, #20]
 80055fc:	e000      	b.n	8005600 <HAL_HCD_IRQHandler+0x210>
      return;
 80055fe:	bf00      	nop
    }
  }
}
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b082      	sub	sp, #8
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_HCD_Start+0x16>
 8005618:	2302      	movs	r3, #2
 800561a:	e013      	b.n	8005644 <HAL_HCD_Start+0x3e>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2101      	movs	r1, #1
 800562a:	4618      	mov	r0, r3
 800562c:	f004 ffec 	bl	800a608 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f004 fd04 	bl	800a042 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_HCD_Stop+0x16>
 800565e:	2302      	movs	r3, #2
 8005660:	e00d      	b.n	800567e <HAL_HCD_Stop+0x32>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f005 fbda 	bl	800ae28 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f004 ff8e 	bl	800a5b4 <USB_ResetPort>
 8005698:	4603      	mov	r3, r0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	460b      	mov	r3, r1
 80056ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	212c      	movs	r1, #44	; 0x2c
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	4413      	add	r3, r2
 80056ba:	3360      	adds	r3, #96	; 0x60
 80056bc:	781b      	ldrb	r3, [r3, #0]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	460b      	mov	r3, r1
 80056d4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	212c      	movs	r1, #44	; 0x2c
 80056dc:	fb01 f303 	mul.w	r3, r1, r3
 80056e0:	4413      	add	r3, r2
 80056e2:	3350      	adds	r3, #80	; 0x50
 80056e4:	681b      	ldr	r3, [r3, #0]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b082      	sub	sp, #8
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f004 ffd2 	bl	800a6a8 <USB_GetCurrentFrame>
 8005704:	4603      	mov	r3, r0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f004 ffad 	bl	800a67a <USB_GetHostSpeed>
 8005720:	4603      	mov	r3, r0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b086      	sub	sp, #24
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	460b      	mov	r3, r1
 8005734:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4413      	add	r3, r2
 800574c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b04      	cmp	r3, #4
 8005758:	d11a      	bne.n	8005790 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4413      	add	r3, r2
 8005762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005766:	461a      	mov	r2, r3
 8005768:	2304      	movs	r3, #4
 800576a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	212c      	movs	r1, #44	; 0x2c
 8005772:	fb01 f303 	mul.w	r3, r1, r3
 8005776:	4413      	add	r3, r2
 8005778:	3361      	adds	r3, #97	; 0x61
 800577a:	2206      	movs	r2, #6
 800577c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	4611      	mov	r1, r2
 8005788:	4618      	mov	r0, r3
 800578a:	f005 fa14 	bl	800abb6 <USB_HC_Halt>
 800578e:	e0af      	b.n	80058f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	4413      	add	r3, r2
 8005798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a6:	d11b      	bne.n	80057e0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b4:	461a      	mov	r2, r3
 80057b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	212c      	movs	r1, #44	; 0x2c
 80057c2:	fb01 f303 	mul.w	r3, r1, r3
 80057c6:	4413      	add	r3, r2
 80057c8:	3361      	adds	r3, #97	; 0x61
 80057ca:	2207      	movs	r2, #7
 80057cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	4611      	mov	r1, r2
 80057d8:	4618      	mov	r0, r3
 80057da:	f005 f9ec 	bl	800abb6 <USB_HC_Halt>
 80057de:	e087      	b.n	80058f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	d109      	bne.n	800580a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005802:	461a      	mov	r2, r3
 8005804:	2320      	movs	r3, #32
 8005806:	6093      	str	r3, [r2, #8]
 8005808:	e072      	b.n	80058f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	4413      	add	r3, r2
 8005812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b08      	cmp	r3, #8
 800581e:	d11a      	bne.n	8005856 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	4413      	add	r3, r2
 8005828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582c:	461a      	mov	r2, r3
 800582e:	2308      	movs	r3, #8
 8005830:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	212c      	movs	r1, #44	; 0x2c
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	4413      	add	r3, r2
 800583e:	3361      	adds	r3, #97	; 0x61
 8005840:	2205      	movs	r2, #5
 8005842:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	4611      	mov	r1, r2
 800584e:	4618      	mov	r0, r3
 8005850:	f005 f9b1 	bl	800abb6 <USB_HC_Halt>
 8005854:	e04c      	b.n	80058f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	4413      	add	r3, r2
 800585e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586c:	d11b      	bne.n	80058a6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	4413      	add	r3, r2
 8005876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587a:	461a      	mov	r2, r3
 800587c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005880:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	212c      	movs	r1, #44	; 0x2c
 8005888:	fb01 f303 	mul.w	r3, r1, r3
 800588c:	4413      	add	r3, r2
 800588e:	3361      	adds	r3, #97	; 0x61
 8005890:	2208      	movs	r2, #8
 8005892:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	4611      	mov	r1, r2
 800589e:	4618      	mov	r0, r3
 80058a0:	f005 f989 	bl	800abb6 <USB_HC_Halt>
 80058a4:	e024      	b.n	80058f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b8:	2b80      	cmp	r3, #128	; 0x80
 80058ba:	d119      	bne.n	80058f0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c8:	461a      	mov	r2, r3
 80058ca:	2380      	movs	r3, #128	; 0x80
 80058cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	212c      	movs	r1, #44	; 0x2c
 80058d4:	fb01 f303 	mul.w	r3, r1, r3
 80058d8:	4413      	add	r3, r2
 80058da:	3361      	adds	r3, #97	; 0x61
 80058dc:	2206      	movs	r2, #6
 80058de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	4611      	mov	r1, r2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f005 f963 	bl	800abb6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005906:	d112      	bne.n	800592e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	4611      	mov	r1, r2
 8005912:	4618      	mov	r0, r3
 8005914:	f005 f94f 	bl	800abb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4413      	add	r3, r2
 8005920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005924:	461a      	mov	r2, r3
 8005926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800592a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800592c:	e24e      	b.n	8005dcc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	4413      	add	r3, r2
 8005936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b01      	cmp	r3, #1
 8005942:	f040 80df 	bne.w	8005b04 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d019      	beq.n	8005982 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	212c      	movs	r1, #44	; 0x2c
 8005954:	fb01 f303 	mul.w	r3, r1, r3
 8005958:	4413      	add	r3, r2
 800595a:	3348      	adds	r3, #72	; 0x48
 800595c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	0159      	lsls	r1, r3, #5
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	440b      	add	r3, r1
 8005966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005970:	1ad2      	subs	r2, r2, r3
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	202c      	movs	r0, #44	; 0x2c
 8005978:	fb00 f303 	mul.w	r3, r0, r3
 800597c:	440b      	add	r3, r1
 800597e:	3350      	adds	r3, #80	; 0x50
 8005980:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	212c      	movs	r1, #44	; 0x2c
 8005988:	fb01 f303 	mul.w	r3, r1, r3
 800598c:	4413      	add	r3, r2
 800598e:	3361      	adds	r3, #97	; 0x61
 8005990:	2201      	movs	r2, #1
 8005992:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	212c      	movs	r1, #44	; 0x2c
 800599a:	fb01 f303 	mul.w	r3, r1, r3
 800599e:	4413      	add	r3, r2
 80059a0:	335c      	adds	r3, #92	; 0x5c
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b2:	461a      	mov	r2, r3
 80059b4:	2301      	movs	r3, #1
 80059b6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	212c      	movs	r1, #44	; 0x2c
 80059be:	fb01 f303 	mul.w	r3, r1, r3
 80059c2:	4413      	add	r3, r2
 80059c4:	333f      	adds	r3, #63	; 0x3f
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d009      	beq.n	80059e0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	212c      	movs	r1, #44	; 0x2c
 80059d2:	fb01 f303 	mul.w	r3, r1, r3
 80059d6:	4413      	add	r3, r2
 80059d8:	333f      	adds	r3, #63	; 0x3f
 80059da:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d111      	bne.n	8005a04 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	4611      	mov	r1, r2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f005 f8e3 	bl	800abb6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fc:	461a      	mov	r2, r3
 80059fe:	2310      	movs	r3, #16
 8005a00:	6093      	str	r3, [r2, #8]
 8005a02:	e03a      	b.n	8005a7a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	212c      	movs	r1, #44	; 0x2c
 8005a0a:	fb01 f303 	mul.w	r3, r1, r3
 8005a0e:	4413      	add	r3, r2
 8005a10:	333f      	adds	r3, #63	; 0x3f
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d009      	beq.n	8005a2c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	212c      	movs	r1, #44	; 0x2c
 8005a1e:	fb01 f303 	mul.w	r3, r1, r3
 8005a22:	4413      	add	r3, r2
 8005a24:	333f      	adds	r3, #63	; 0x3f
 8005a26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d126      	bne.n	8005a7a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	0151      	lsls	r1, r2, #5
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	440a      	add	r2, r1
 8005a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a4a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	212c      	movs	r1, #44	; 0x2c
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	4413      	add	r3, r2
 8005a58:	3360      	adds	r3, #96	; 0x60
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	b2d9      	uxtb	r1, r3
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	202c      	movs	r0, #44	; 0x2c
 8005a68:	fb00 f303 	mul.w	r3, r0, r3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3360      	adds	r3, #96	; 0x60
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f00a f891 	bl	800fb9c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d12b      	bne.n	8005ada <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	212c      	movs	r1, #44	; 0x2c
 8005a88:	fb01 f303 	mul.w	r3, r1, r3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	3348      	adds	r3, #72	; 0x48
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	202c      	movs	r0, #44	; 0x2c
 8005a98:	fb00 f202 	mul.w	r2, r0, r2
 8005a9c:	440a      	add	r2, r1
 8005a9e:	3240      	adds	r2, #64	; 0x40
 8005aa0:	8812      	ldrh	r2, [r2, #0]
 8005aa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 818e 	beq.w	8005dcc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	212c      	movs	r1, #44	; 0x2c
 8005ab6:	fb01 f303 	mul.w	r3, r1, r3
 8005aba:	4413      	add	r3, r2
 8005abc:	3354      	adds	r3, #84	; 0x54
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	f083 0301 	eor.w	r3, r3, #1
 8005ac4:	b2d8      	uxtb	r0, r3
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	212c      	movs	r1, #44	; 0x2c
 8005acc:	fb01 f303 	mul.w	r3, r1, r3
 8005ad0:	4413      	add	r3, r2
 8005ad2:	3354      	adds	r3, #84	; 0x54
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	701a      	strb	r2, [r3, #0]
}
 8005ad8:	e178      	b.n	8005dcc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	212c      	movs	r1, #44	; 0x2c
 8005ae0:	fb01 f303 	mul.w	r3, r1, r3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	3354      	adds	r3, #84	; 0x54
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	f083 0301 	eor.w	r3, r3, #1
 8005aee:	b2d8      	uxtb	r0, r3
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	212c      	movs	r1, #44	; 0x2c
 8005af6:	fb01 f303 	mul.w	r3, r1, r3
 8005afa:	4413      	add	r3, r2
 8005afc:	3354      	adds	r3, #84	; 0x54
 8005afe:	4602      	mov	r2, r0
 8005b00:	701a      	strb	r2, [r3, #0]
}
 8005b02:	e163      	b.n	8005dcc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	f040 80f6 	bne.w	8005d08 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	212c      	movs	r1, #44	; 0x2c
 8005b22:	fb01 f303 	mul.w	r3, r1, r3
 8005b26:	4413      	add	r3, r2
 8005b28:	3361      	adds	r3, #97	; 0x61
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d109      	bne.n	8005b44 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	212c      	movs	r1, #44	; 0x2c
 8005b36:	fb01 f303 	mul.w	r3, r1, r3
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3360      	adds	r3, #96	; 0x60
 8005b3e:	2201      	movs	r2, #1
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	e0c9      	b.n	8005cd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	212c      	movs	r1, #44	; 0x2c
 8005b4a:	fb01 f303 	mul.w	r3, r1, r3
 8005b4e:	4413      	add	r3, r2
 8005b50:	3361      	adds	r3, #97	; 0x61
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b05      	cmp	r3, #5
 8005b56:	d109      	bne.n	8005b6c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	212c      	movs	r1, #44	; 0x2c
 8005b5e:	fb01 f303 	mul.w	r3, r1, r3
 8005b62:	4413      	add	r3, r2
 8005b64:	3360      	adds	r3, #96	; 0x60
 8005b66:	2205      	movs	r2, #5
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	e0b5      	b.n	8005cd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	212c      	movs	r1, #44	; 0x2c
 8005b72:	fb01 f303 	mul.w	r3, r1, r3
 8005b76:	4413      	add	r3, r2
 8005b78:	3361      	adds	r3, #97	; 0x61
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b06      	cmp	r3, #6
 8005b7e:	d009      	beq.n	8005b94 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	212c      	movs	r1, #44	; 0x2c
 8005b86:	fb01 f303 	mul.w	r3, r1, r3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	3361      	adds	r3, #97	; 0x61
 8005b8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d150      	bne.n	8005c36 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	212c      	movs	r1, #44	; 0x2c
 8005b9a:	fb01 f303 	mul.w	r3, r1, r3
 8005b9e:	4413      	add	r3, r2
 8005ba0:	335c      	adds	r3, #92	; 0x5c
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	202c      	movs	r0, #44	; 0x2c
 8005bac:	fb00 f303 	mul.w	r3, r0, r3
 8005bb0:	440b      	add	r3, r1
 8005bb2:	335c      	adds	r3, #92	; 0x5c
 8005bb4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	212c      	movs	r1, #44	; 0x2c
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	335c      	adds	r3, #92	; 0x5c
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d912      	bls.n	8005bf0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	212c      	movs	r1, #44	; 0x2c
 8005bd0:	fb01 f303 	mul.w	r3, r1, r3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	335c      	adds	r3, #92	; 0x5c
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	212c      	movs	r1, #44	; 0x2c
 8005be2:	fb01 f303 	mul.w	r3, r1, r3
 8005be6:	4413      	add	r3, r2
 8005be8:	3360      	adds	r3, #96	; 0x60
 8005bea:	2204      	movs	r2, #4
 8005bec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005bee:	e073      	b.n	8005cd8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	212c      	movs	r1, #44	; 0x2c
 8005bf6:	fb01 f303 	mul.w	r3, r1, r3
 8005bfa:	4413      	add	r3, r2
 8005bfc:	3360      	adds	r3, #96	; 0x60
 8005bfe:	2202      	movs	r2, #2
 8005c00:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c18:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c20:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2e:	461a      	mov	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005c34:	e050      	b.n	8005cd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	212c      	movs	r1, #44	; 0x2c
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	4413      	add	r3, r2
 8005c42:	3361      	adds	r3, #97	; 0x61
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d122      	bne.n	8005c90 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	212c      	movs	r1, #44	; 0x2c
 8005c50:	fb01 f303 	mul.w	r3, r1, r3
 8005c54:	4413      	add	r3, r2
 8005c56:	3360      	adds	r3, #96	; 0x60
 8005c58:	2202      	movs	r2, #2
 8005c5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c88:	461a      	mov	r2, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	e023      	b.n	8005cd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	212c      	movs	r1, #44	; 0x2c
 8005c96:	fb01 f303 	mul.w	r3, r1, r3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	3361      	adds	r3, #97	; 0x61
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b07      	cmp	r3, #7
 8005ca2:	d119      	bne.n	8005cd8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	212c      	movs	r1, #44	; 0x2c
 8005caa:	fb01 f303 	mul.w	r3, r1, r3
 8005cae:	4413      	add	r3, r2
 8005cb0:	335c      	adds	r3, #92	; 0x5c
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	202c      	movs	r0, #44	; 0x2c
 8005cbc:	fb00 f303 	mul.w	r3, r0, r3
 8005cc0:	440b      	add	r3, r1
 8005cc2:	335c      	adds	r3, #92	; 0x5c
 8005cc4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	212c      	movs	r1, #44	; 0x2c
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	3360      	adds	r3, #96	; 0x60
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	b2d9      	uxtb	r1, r3
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	202c      	movs	r0, #44	; 0x2c
 8005cf4:	fb00 f303 	mul.w	r3, r0, r3
 8005cf8:	4413      	add	r3, r2
 8005cfa:	3360      	adds	r3, #96	; 0x60
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f009 ff4b 	bl	800fb9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005d06:	e061      	b.n	8005dcc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	2b10      	cmp	r3, #16
 8005d1c:	d156      	bne.n	8005dcc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	212c      	movs	r1, #44	; 0x2c
 8005d24:	fb01 f303 	mul.w	r3, r1, r3
 8005d28:	4413      	add	r3, r2
 8005d2a:	333f      	adds	r3, #63	; 0x3f
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d111      	bne.n	8005d56 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	212c      	movs	r1, #44	; 0x2c
 8005d38:	fb01 f303 	mul.w	r3, r1, r3
 8005d3c:	4413      	add	r3, r2
 8005d3e:	335c      	adds	r3, #92	; 0x5c
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f004 ff31 	bl	800abb6 <USB_HC_Halt>
 8005d54:	e031      	b.n	8005dba <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	212c      	movs	r1, #44	; 0x2c
 8005d5c:	fb01 f303 	mul.w	r3, r1, r3
 8005d60:	4413      	add	r3, r2
 8005d62:	333f      	adds	r3, #63	; 0x3f
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d009      	beq.n	8005d7e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	212c      	movs	r1, #44	; 0x2c
 8005d70:	fb01 f303 	mul.w	r3, r1, r3
 8005d74:	4413      	add	r3, r2
 8005d76:	333f      	adds	r3, #63	; 0x3f
 8005d78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d11d      	bne.n	8005dba <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	212c      	movs	r1, #44	; 0x2c
 8005d84:	fb01 f303 	mul.w	r3, r1, r3
 8005d88:	4413      	add	r3, r2
 8005d8a:	335c      	adds	r3, #92	; 0x5c
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d110      	bne.n	8005dba <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	212c      	movs	r1, #44	; 0x2c
 8005d9e:	fb01 f303 	mul.w	r3, r1, r3
 8005da2:	4413      	add	r3, r2
 8005da4:	3361      	adds	r3, #97	; 0x61
 8005da6:	2203      	movs	r2, #3
 8005da8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	4611      	mov	r1, r2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f004 fefe 	bl	800abb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	2310      	movs	r3, #16
 8005dca:	6093      	str	r3, [r2, #8]
}
 8005dcc:	bf00      	nop
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d11a      	bne.n	8005e3a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e10:	461a      	mov	r2, r3
 8005e12:	2304      	movs	r3, #4
 8005e14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	212c      	movs	r1, #44	; 0x2c
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	4413      	add	r3, r2
 8005e22:	3361      	adds	r3, #97	; 0x61
 8005e24:	2206      	movs	r2, #6
 8005e26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	4611      	mov	r1, r2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f004 febf 	bl	800abb6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8005e38:	e331      	b.n	800649e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	d12e      	bne.n	8005eae <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	2320      	movs	r3, #32
 8005e60:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	212c      	movs	r1, #44	; 0x2c
 8005e68:	fb01 f303 	mul.w	r3, r1, r3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	333d      	adds	r3, #61	; 0x3d
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	f040 8313 	bne.w	800649e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	212c      	movs	r1, #44	; 0x2c
 8005e7e:	fb01 f303 	mul.w	r3, r1, r3
 8005e82:	4413      	add	r3, r2
 8005e84:	333d      	adds	r3, #61	; 0x3d
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	212c      	movs	r1, #44	; 0x2c
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	4413      	add	r3, r2
 8005e96:	3360      	adds	r3, #96	; 0x60
 8005e98:	2202      	movs	r2, #2
 8005e9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f004 fe85 	bl	800abb6 <USB_HC_Halt>
}
 8005eac:	e2f7      	b.n	800649e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec4:	d112      	bne.n	8005eec <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ed8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f004 fe66 	bl	800abb6 <USB_HC_Halt>
}
 8005eea:	e2d8      	b.n	800649e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d140      	bne.n	8005f84 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	212c      	movs	r1, #44	; 0x2c
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	335c      	adds	r3, #92	; 0x5c
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f26:	2b40      	cmp	r3, #64	; 0x40
 8005f28:	d111      	bne.n	8005f4e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	212c      	movs	r1, #44	; 0x2c
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	4413      	add	r3, r2
 8005f36:	333d      	adds	r3, #61	; 0x3d
 8005f38:	2201      	movs	r2, #1
 8005f3a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f48:	461a      	mov	r2, r3
 8005f4a:	2340      	movs	r3, #64	; 0x40
 8005f4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	212c      	movs	r1, #44	; 0x2c
 8005f66:	fb01 f303 	mul.w	r3, r1, r3
 8005f6a:	4413      	add	r3, r2
 8005f6c:	3361      	adds	r3, #97	; 0x61
 8005f6e:	2201      	movs	r2, #1
 8005f70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f004 fe1a 	bl	800abb6 <USB_HC_Halt>
}
 8005f82:	e28c      	b.n	800649e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	2b40      	cmp	r3, #64	; 0x40
 8005f98:	d12c      	bne.n	8005ff4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	212c      	movs	r1, #44	; 0x2c
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3361      	adds	r3, #97	; 0x61
 8005fa8:	2204      	movs	r2, #4
 8005faa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	212c      	movs	r1, #44	; 0x2c
 8005fb2:	fb01 f303 	mul.w	r3, r1, r3
 8005fb6:	4413      	add	r3, r2
 8005fb8:	333d      	adds	r3, #61	; 0x3d
 8005fba:	2201      	movs	r2, #1
 8005fbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	212c      	movs	r1, #44	; 0x2c
 8005fc4:	fb01 f303 	mul.w	r3, r1, r3
 8005fc8:	4413      	add	r3, r2
 8005fca:	335c      	adds	r3, #92	; 0x5c
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	4611      	mov	r1, r2
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f004 fdeb 	bl	800abb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fec:	461a      	mov	r2, r3
 8005fee:	2340      	movs	r3, #64	; 0x40
 8005ff0:	6093      	str	r3, [r2, #8]
}
 8005ff2:	e254      	b.n	800649e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b08      	cmp	r3, #8
 8006008:	d11a      	bne.n	8006040 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	4413      	add	r3, r2
 8006012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006016:	461a      	mov	r2, r3
 8006018:	2308      	movs	r3, #8
 800601a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	212c      	movs	r1, #44	; 0x2c
 8006022:	fb01 f303 	mul.w	r3, r1, r3
 8006026:	4413      	add	r3, r2
 8006028:	3361      	adds	r3, #97	; 0x61
 800602a:	2205      	movs	r2, #5
 800602c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	4611      	mov	r1, r2
 8006038:	4618      	mov	r0, r3
 800603a:	f004 fdbc 	bl	800abb6 <USB_HC_Halt>
}
 800603e:	e22e      	b.n	800649e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	4413      	add	r3, r2
 8006048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 0310 	and.w	r3, r3, #16
 8006052:	2b10      	cmp	r3, #16
 8006054:	d140      	bne.n	80060d8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	212c      	movs	r1, #44	; 0x2c
 800605c:	fb01 f303 	mul.w	r3, r1, r3
 8006060:	4413      	add	r3, r2
 8006062:	335c      	adds	r3, #92	; 0x5c
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	212c      	movs	r1, #44	; 0x2c
 800606e:	fb01 f303 	mul.w	r3, r1, r3
 8006072:	4413      	add	r3, r2
 8006074:	3361      	adds	r3, #97	; 0x61
 8006076:	2203      	movs	r2, #3
 8006078:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	212c      	movs	r1, #44	; 0x2c
 8006080:	fb01 f303 	mul.w	r3, r1, r3
 8006084:	4413      	add	r3, r2
 8006086:	333d      	adds	r3, #61	; 0x3d
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d112      	bne.n	80060b4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	212c      	movs	r1, #44	; 0x2c
 8006094:	fb01 f303 	mul.w	r3, r1, r3
 8006098:	4413      	add	r3, r2
 800609a:	333c      	adds	r3, #60	; 0x3c
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d108      	bne.n	80060b4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	212c      	movs	r1, #44	; 0x2c
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	4413      	add	r3, r2
 80060ae:	333d      	adds	r3, #61	; 0x3d
 80060b0:	2201      	movs	r2, #1
 80060b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	4611      	mov	r1, r2
 80060be:	4618      	mov	r0, r3
 80060c0:	f004 fd79 	bl	800abb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d0:	461a      	mov	r2, r3
 80060d2:	2310      	movs	r3, #16
 80060d4:	6093      	str	r3, [r2, #8]
}
 80060d6:	e1e2      	b.n	800649e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ea:	2b80      	cmp	r3, #128	; 0x80
 80060ec:	d164      	bne.n	80061b8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d111      	bne.n	800611a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	212c      	movs	r1, #44	; 0x2c
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	4413      	add	r3, r2
 8006102:	3361      	adds	r3, #97	; 0x61
 8006104:	2206      	movs	r2, #6
 8006106:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	4611      	mov	r1, r2
 8006112:	4618      	mov	r0, r3
 8006114:	f004 fd4f 	bl	800abb6 <USB_HC_Halt>
 8006118:	e044      	b.n	80061a4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	212c      	movs	r1, #44	; 0x2c
 8006120:	fb01 f303 	mul.w	r3, r1, r3
 8006124:	4413      	add	r3, r2
 8006126:	335c      	adds	r3, #92	; 0x5c
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	202c      	movs	r0, #44	; 0x2c
 8006132:	fb00 f303 	mul.w	r3, r0, r3
 8006136:	440b      	add	r3, r1
 8006138:	335c      	adds	r3, #92	; 0x5c
 800613a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	212c      	movs	r1, #44	; 0x2c
 8006142:	fb01 f303 	mul.w	r3, r1, r3
 8006146:	4413      	add	r3, r2
 8006148:	335c      	adds	r3, #92	; 0x5c
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d920      	bls.n	8006192 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	212c      	movs	r1, #44	; 0x2c
 8006156:	fb01 f303 	mul.w	r3, r1, r3
 800615a:	4413      	add	r3, r2
 800615c:	335c      	adds	r3, #92	; 0x5c
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	212c      	movs	r1, #44	; 0x2c
 8006168:	fb01 f303 	mul.w	r3, r1, r3
 800616c:	4413      	add	r3, r2
 800616e:	3360      	adds	r3, #96	; 0x60
 8006170:	2204      	movs	r2, #4
 8006172:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	b2d9      	uxtb	r1, r3
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	202c      	movs	r0, #44	; 0x2c
 800617e:	fb00 f303 	mul.w	r3, r0, r3
 8006182:	4413      	add	r3, r2
 8006184:	3360      	adds	r3, #96	; 0x60
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f009 fd06 	bl	800fb9c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006190:	e008      	b.n	80061a4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	212c      	movs	r1, #44	; 0x2c
 8006198:	fb01 f303 	mul.w	r3, r1, r3
 800619c:	4413      	add	r3, r2
 800619e:	3360      	adds	r3, #96	; 0x60
 80061a0:	2202      	movs	r2, #2
 80061a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b0:	461a      	mov	r2, r3
 80061b2:	2380      	movs	r3, #128	; 0x80
 80061b4:	6093      	str	r3, [r2, #8]
}
 80061b6:	e172      	b.n	800649e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ce:	d11b      	bne.n	8006208 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	212c      	movs	r1, #44	; 0x2c
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	4413      	add	r3, r2
 80061dc:	3361      	adds	r3, #97	; 0x61
 80061de:	2208      	movs	r2, #8
 80061e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	4611      	mov	r1, r2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f004 fce2 	bl	800abb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fe:	461a      	mov	r2, r3
 8006200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006204:	6093      	str	r3, [r2, #8]
}
 8006206:	e14a      	b.n	800649e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	4413      	add	r3, r2
 8006210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b02      	cmp	r3, #2
 800621c:	f040 813f 	bne.w	800649e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	212c      	movs	r1, #44	; 0x2c
 8006226:	fb01 f303 	mul.w	r3, r1, r3
 800622a:	4413      	add	r3, r2
 800622c:	3361      	adds	r3, #97	; 0x61
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d17d      	bne.n	8006330 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	212c      	movs	r1, #44	; 0x2c
 800623a:	fb01 f303 	mul.w	r3, r1, r3
 800623e:	4413      	add	r3, r2
 8006240:	3360      	adds	r3, #96	; 0x60
 8006242:	2201      	movs	r2, #1
 8006244:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	212c      	movs	r1, #44	; 0x2c
 800624c:	fb01 f303 	mul.w	r3, r1, r3
 8006250:	4413      	add	r3, r2
 8006252:	333f      	adds	r3, #63	; 0x3f
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b02      	cmp	r3, #2
 8006258:	d00a      	beq.n	8006270 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	212c      	movs	r1, #44	; 0x2c
 8006260:	fb01 f303 	mul.w	r3, r1, r3
 8006264:	4413      	add	r3, r2
 8006266:	333f      	adds	r3, #63	; 0x3f
 8006268:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800626a:	2b03      	cmp	r3, #3
 800626c:	f040 8100 	bne.w	8006470 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d113      	bne.n	80062a0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	212c      	movs	r1, #44	; 0x2c
 800627e:	fb01 f303 	mul.w	r3, r1, r3
 8006282:	4413      	add	r3, r2
 8006284:	3355      	adds	r3, #85	; 0x55
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	f083 0301 	eor.w	r3, r3, #1
 800628c:	b2d8      	uxtb	r0, r3
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	212c      	movs	r1, #44	; 0x2c
 8006294:	fb01 f303 	mul.w	r3, r1, r3
 8006298:	4413      	add	r3, r2
 800629a:	3355      	adds	r3, #85	; 0x55
 800629c:	4602      	mov	r2, r0
 800629e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	f040 80e3 	bne.w	8006470 <HCD_HC_OUT_IRQHandler+0x69c>
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	212c      	movs	r1, #44	; 0x2c
 80062b0:	fb01 f303 	mul.w	r3, r1, r3
 80062b4:	4413      	add	r3, r2
 80062b6:	334c      	adds	r3, #76	; 0x4c
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 80d8 	beq.w	8006470 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	212c      	movs	r1, #44	; 0x2c
 80062c6:	fb01 f303 	mul.w	r3, r1, r3
 80062ca:	4413      	add	r3, r2
 80062cc:	334c      	adds	r3, #76	; 0x4c
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6879      	ldr	r1, [r7, #4]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	202c      	movs	r0, #44	; 0x2c
 80062d6:	fb00 f202 	mul.w	r2, r0, r2
 80062da:	440a      	add	r2, r1
 80062dc:	3240      	adds	r2, #64	; 0x40
 80062de:	8812      	ldrh	r2, [r2, #0]
 80062e0:	4413      	add	r3, r2
 80062e2:	3b01      	subs	r3, #1
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	202c      	movs	r0, #44	; 0x2c
 80062ea:	fb00 f202 	mul.w	r2, r0, r2
 80062ee:	440a      	add	r2, r1
 80062f0:	3240      	adds	r2, #64	; 0x40
 80062f2:	8812      	ldrh	r2, [r2, #0]
 80062f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80b5 	beq.w	8006470 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	212c      	movs	r1, #44	; 0x2c
 800630c:	fb01 f303 	mul.w	r3, r1, r3
 8006310:	4413      	add	r3, r2
 8006312:	3355      	adds	r3, #85	; 0x55
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	f083 0301 	eor.w	r3, r3, #1
 800631a:	b2d8      	uxtb	r0, r3
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	212c      	movs	r1, #44	; 0x2c
 8006322:	fb01 f303 	mul.w	r3, r1, r3
 8006326:	4413      	add	r3, r2
 8006328:	3355      	adds	r3, #85	; 0x55
 800632a:	4602      	mov	r2, r0
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	e09f      	b.n	8006470 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	212c      	movs	r1, #44	; 0x2c
 8006336:	fb01 f303 	mul.w	r3, r1, r3
 800633a:	4413      	add	r3, r2
 800633c:	3361      	adds	r3, #97	; 0x61
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b03      	cmp	r3, #3
 8006342:	d109      	bne.n	8006358 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	212c      	movs	r1, #44	; 0x2c
 800634a:	fb01 f303 	mul.w	r3, r1, r3
 800634e:	4413      	add	r3, r2
 8006350:	3360      	adds	r3, #96	; 0x60
 8006352:	2202      	movs	r2, #2
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e08b      	b.n	8006470 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	212c      	movs	r1, #44	; 0x2c
 800635e:	fb01 f303 	mul.w	r3, r1, r3
 8006362:	4413      	add	r3, r2
 8006364:	3361      	adds	r3, #97	; 0x61
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2b04      	cmp	r3, #4
 800636a:	d109      	bne.n	8006380 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	212c      	movs	r1, #44	; 0x2c
 8006372:	fb01 f303 	mul.w	r3, r1, r3
 8006376:	4413      	add	r3, r2
 8006378:	3360      	adds	r3, #96	; 0x60
 800637a:	2202      	movs	r2, #2
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	e077      	b.n	8006470 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	212c      	movs	r1, #44	; 0x2c
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	4413      	add	r3, r2
 800638c:	3361      	adds	r3, #97	; 0x61
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b05      	cmp	r3, #5
 8006392:	d109      	bne.n	80063a8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	212c      	movs	r1, #44	; 0x2c
 800639a:	fb01 f303 	mul.w	r3, r1, r3
 800639e:	4413      	add	r3, r2
 80063a0:	3360      	adds	r3, #96	; 0x60
 80063a2:	2205      	movs	r2, #5
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	e063      	b.n	8006470 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	212c      	movs	r1, #44	; 0x2c
 80063ae:	fb01 f303 	mul.w	r3, r1, r3
 80063b2:	4413      	add	r3, r2
 80063b4:	3361      	adds	r3, #97	; 0x61
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b06      	cmp	r3, #6
 80063ba:	d009      	beq.n	80063d0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	212c      	movs	r1, #44	; 0x2c
 80063c2:	fb01 f303 	mul.w	r3, r1, r3
 80063c6:	4413      	add	r3, r2
 80063c8:	3361      	adds	r3, #97	; 0x61
 80063ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d14f      	bne.n	8006470 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	212c      	movs	r1, #44	; 0x2c
 80063d6:	fb01 f303 	mul.w	r3, r1, r3
 80063da:	4413      	add	r3, r2
 80063dc:	335c      	adds	r3, #92	; 0x5c
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	202c      	movs	r0, #44	; 0x2c
 80063e8:	fb00 f303 	mul.w	r3, r0, r3
 80063ec:	440b      	add	r3, r1
 80063ee:	335c      	adds	r3, #92	; 0x5c
 80063f0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	212c      	movs	r1, #44	; 0x2c
 80063f8:	fb01 f303 	mul.w	r3, r1, r3
 80063fc:	4413      	add	r3, r2
 80063fe:	335c      	adds	r3, #92	; 0x5c
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d912      	bls.n	800642c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	212c      	movs	r1, #44	; 0x2c
 800640c:	fb01 f303 	mul.w	r3, r1, r3
 8006410:	4413      	add	r3, r2
 8006412:	335c      	adds	r3, #92	; 0x5c
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	212c      	movs	r1, #44	; 0x2c
 800641e:	fb01 f303 	mul.w	r3, r1, r3
 8006422:	4413      	add	r3, r2
 8006424:	3360      	adds	r3, #96	; 0x60
 8006426:	2204      	movs	r2, #4
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	e021      	b.n	8006470 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	212c      	movs	r1, #44	; 0x2c
 8006432:	fb01 f303 	mul.w	r3, r1, r3
 8006436:	4413      	add	r3, r2
 8006438:	3360      	adds	r3, #96	; 0x60
 800643a:	2202      	movs	r2, #2
 800643c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	4413      	add	r3, r2
 8006446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006454:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800645c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	4413      	add	r3, r2
 8006466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646a:	461a      	mov	r2, r3
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	4413      	add	r3, r2
 8006478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647c:	461a      	mov	r2, r3
 800647e:	2302      	movs	r3, #2
 8006480:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	b2d9      	uxtb	r1, r3
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	202c      	movs	r0, #44	; 0x2c
 800648c:	fb00 f303 	mul.w	r3, r0, r3
 8006490:	4413      	add	r3, r2
 8006492:	3360      	adds	r3, #96	; 0x60
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f009 fb7f 	bl	800fb9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800649e:	bf00      	nop
 80064a0:	3720      	adds	r7, #32
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b08a      	sub	sp, #40	; 0x28
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	0c5b      	lsrs	r3, r3, #17
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	091b      	lsrs	r3, r3, #4
 80064d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064da:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d004      	beq.n	80064ec <HCD_RXQLVL_IRQHandler+0x46>
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b05      	cmp	r3, #5
 80064e6:	f000 80a9 	beq.w	800663c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80064ea:	e0aa      	b.n	8006642 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80a6 	beq.w	8006640 <HCD_RXQLVL_IRQHandler+0x19a>
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	212c      	movs	r1, #44	; 0x2c
 80064fa:	fb01 f303 	mul.w	r3, r1, r3
 80064fe:	4413      	add	r3, r2
 8006500:	3344      	adds	r3, #68	; 0x44
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 809b 	beq.w	8006640 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	212c      	movs	r1, #44	; 0x2c
 8006510:	fb01 f303 	mul.w	r3, r1, r3
 8006514:	4413      	add	r3, r2
 8006516:	3350      	adds	r3, #80	; 0x50
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	441a      	add	r2, r3
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	202c      	movs	r0, #44	; 0x2c
 8006524:	fb00 f303 	mul.w	r3, r0, r3
 8006528:	440b      	add	r3, r1
 800652a:	334c      	adds	r3, #76	; 0x4c
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d87a      	bhi.n	8006628 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	212c      	movs	r1, #44	; 0x2c
 800653c:	fb01 f303 	mul.w	r3, r1, r3
 8006540:	4413      	add	r3, r2
 8006542:	3344      	adds	r3, #68	; 0x44
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	b292      	uxth	r2, r2
 800654a:	4619      	mov	r1, r3
 800654c:	f003 fe8a 	bl	800a264 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	212c      	movs	r1, #44	; 0x2c
 8006556:	fb01 f303 	mul.w	r3, r1, r3
 800655a:	4413      	add	r3, r2
 800655c:	3344      	adds	r3, #68	; 0x44
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	441a      	add	r2, r3
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	202c      	movs	r0, #44	; 0x2c
 800656a:	fb00 f303 	mul.w	r3, r0, r3
 800656e:	440b      	add	r3, r1
 8006570:	3344      	adds	r3, #68	; 0x44
 8006572:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	212c      	movs	r1, #44	; 0x2c
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	4413      	add	r3, r2
 8006580:	3350      	adds	r3, #80	; 0x50
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	441a      	add	r2, r3
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	202c      	movs	r0, #44	; 0x2c
 800658e:	fb00 f303 	mul.w	r3, r0, r3
 8006592:	440b      	add	r3, r1
 8006594:	3350      	adds	r3, #80	; 0x50
 8006596:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	0cdb      	lsrs	r3, r3, #19
 80065a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065ac:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	212c      	movs	r1, #44	; 0x2c
 80065b4:	fb01 f303 	mul.w	r3, r1, r3
 80065b8:	4413      	add	r3, r2
 80065ba:	3340      	adds	r3, #64	; 0x40
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d13c      	bne.n	8006640 <HCD_RXQLVL_IRQHandler+0x19a>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d039      	beq.n	8006640 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065e2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ea:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f8:	461a      	mov	r2, r3
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	212c      	movs	r1, #44	; 0x2c
 8006604:	fb01 f303 	mul.w	r3, r1, r3
 8006608:	4413      	add	r3, r2
 800660a:	3354      	adds	r3, #84	; 0x54
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	f083 0301 	eor.w	r3, r3, #1
 8006612:	b2d8      	uxtb	r0, r3
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	212c      	movs	r1, #44	; 0x2c
 800661a:	fb01 f303 	mul.w	r3, r1, r3
 800661e:	4413      	add	r3, r2
 8006620:	3354      	adds	r3, #84	; 0x54
 8006622:	4602      	mov	r2, r0
 8006624:	701a      	strb	r2, [r3, #0]
      break;
 8006626:	e00b      	b.n	8006640 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	212c      	movs	r1, #44	; 0x2c
 800662e:	fb01 f303 	mul.w	r3, r1, r3
 8006632:	4413      	add	r3, r2
 8006634:	3360      	adds	r3, #96	; 0x60
 8006636:	2204      	movs	r2, #4
 8006638:	701a      	strb	r2, [r3, #0]
      break;
 800663a:	e001      	b.n	8006640 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800663c:	bf00      	nop
 800663e:	e000      	b.n	8006642 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006640:	bf00      	nop
  }
}
 8006642:	bf00      	nop
 8006644:	3728      	adds	r7, #40	; 0x28
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b086      	sub	sp, #24
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006676:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b02      	cmp	r3, #2
 8006680:	d10b      	bne.n	800669a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b01      	cmp	r3, #1
 800668a:	d102      	bne.n	8006692 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f009 fa69 	bl	800fb64 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f043 0302 	orr.w	r3, r3, #2
 8006698:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d132      	bne.n	800670a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f043 0308 	orr.w	r3, r3, #8
 80066aa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f003 0304 	and.w	r3, r3, #4
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d126      	bne.n	8006704 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d113      	bne.n	80066e6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80066c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066c8:	d106      	bne.n	80066d8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2102      	movs	r1, #2
 80066d0:	4618      	mov	r0, r3
 80066d2:	f003 ff35 	bl	800a540 <USB_InitFSLSPClkSel>
 80066d6:	e011      	b.n	80066fc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2101      	movs	r1, #1
 80066de:	4618      	mov	r0, r3
 80066e0:	f003 ff2e 	bl	800a540 <USB_InitFSLSPClkSel>
 80066e4:	e00a      	b.n	80066fc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d106      	bne.n	80066fc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066f4:	461a      	mov	r2, r3
 80066f6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80066fa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f009 fa5f 	bl	800fbc0 <HAL_HCD_PortEnabled_Callback>
 8006702:	e002      	b.n	800670a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f009 fa69 	bl	800fbdc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b20      	cmp	r3, #32
 8006712:	d103      	bne.n	800671c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f043 0320 	orr.w	r3, r3, #32
 800671a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006722:	461a      	mov	r2, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	6013      	str	r3, [r2, #0]
}
 8006728:	bf00      	nop
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e12b      	b.n	800699a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7fc f9b6 	bl	8002ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2224      	movs	r2, #36	; 0x24
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0201 	bic.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006782:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006792:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006794:	f001 fa0c 	bl	8007bb0 <HAL_RCC_GetPCLK1Freq>
 8006798:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	4a81      	ldr	r2, [pc, #516]	; (80069a4 <HAL_I2C_Init+0x274>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d807      	bhi.n	80067b4 <HAL_I2C_Init+0x84>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4a80      	ldr	r2, [pc, #512]	; (80069a8 <HAL_I2C_Init+0x278>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	bf94      	ite	ls
 80067ac:	2301      	movls	r3, #1
 80067ae:	2300      	movhi	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	e006      	b.n	80067c2 <HAL_I2C_Init+0x92>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4a7d      	ldr	r2, [pc, #500]	; (80069ac <HAL_I2C_Init+0x27c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	bf94      	ite	ls
 80067bc:	2301      	movls	r3, #1
 80067be:	2300      	movhi	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e0e7      	b.n	800699a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4a78      	ldr	r2, [pc, #480]	; (80069b0 <HAL_I2C_Init+0x280>)
 80067ce:	fba2 2303 	umull	r2, r3, r2, r3
 80067d2:	0c9b      	lsrs	r3, r3, #18
 80067d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	4a6a      	ldr	r2, [pc, #424]	; (80069a4 <HAL_I2C_Init+0x274>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d802      	bhi.n	8006804 <HAL_I2C_Init+0xd4>
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	3301      	adds	r3, #1
 8006802:	e009      	b.n	8006818 <HAL_I2C_Init+0xe8>
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800680a:	fb02 f303 	mul.w	r3, r2, r3
 800680e:	4a69      	ldr	r2, [pc, #420]	; (80069b4 <HAL_I2C_Init+0x284>)
 8006810:	fba2 2303 	umull	r2, r3, r2, r3
 8006814:	099b      	lsrs	r3, r3, #6
 8006816:	3301      	adds	r3, #1
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	6812      	ldr	r2, [r2, #0]
 800681c:	430b      	orrs	r3, r1
 800681e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800682a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	495c      	ldr	r1, [pc, #368]	; (80069a4 <HAL_I2C_Init+0x274>)
 8006834:	428b      	cmp	r3, r1
 8006836:	d819      	bhi.n	800686c <HAL_I2C_Init+0x13c>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	1e59      	subs	r1, r3, #1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	fbb1 f3f3 	udiv	r3, r1, r3
 8006846:	1c59      	adds	r1, r3, #1
 8006848:	f640 73fc 	movw	r3, #4092	; 0xffc
 800684c:	400b      	ands	r3, r1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <HAL_I2C_Init+0x138>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	1e59      	subs	r1, r3, #1
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006860:	3301      	adds	r3, #1
 8006862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006866:	e051      	b.n	800690c <HAL_I2C_Init+0x1dc>
 8006868:	2304      	movs	r3, #4
 800686a:	e04f      	b.n	800690c <HAL_I2C_Init+0x1dc>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d111      	bne.n	8006898 <HAL_I2C_Init+0x168>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	1e58      	subs	r0, r3, #1
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6859      	ldr	r1, [r3, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	440b      	add	r3, r1
 8006882:	fbb0 f3f3 	udiv	r3, r0, r3
 8006886:	3301      	adds	r3, #1
 8006888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800688c:	2b00      	cmp	r3, #0
 800688e:	bf0c      	ite	eq
 8006890:	2301      	moveq	r3, #1
 8006892:	2300      	movne	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	e012      	b.n	80068be <HAL_I2C_Init+0x18e>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	1e58      	subs	r0, r3, #1
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6859      	ldr	r1, [r3, #4]
 80068a0:	460b      	mov	r3, r1
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	440b      	add	r3, r1
 80068a6:	0099      	lsls	r1, r3, #2
 80068a8:	440b      	add	r3, r1
 80068aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80068ae:	3301      	adds	r3, #1
 80068b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	bf0c      	ite	eq
 80068b8:	2301      	moveq	r3, #1
 80068ba:	2300      	movne	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <HAL_I2C_Init+0x196>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e022      	b.n	800690c <HAL_I2C_Init+0x1dc>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10e      	bne.n	80068ec <HAL_I2C_Init+0x1bc>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	1e58      	subs	r0, r3, #1
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6859      	ldr	r1, [r3, #4]
 80068d6:	460b      	mov	r3, r1
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	440b      	add	r3, r1
 80068dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80068e0:	3301      	adds	r3, #1
 80068e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ea:	e00f      	b.n	800690c <HAL_I2C_Init+0x1dc>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	1e58      	subs	r0, r3, #1
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6859      	ldr	r1, [r3, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	440b      	add	r3, r1
 80068fa:	0099      	lsls	r1, r3, #2
 80068fc:	440b      	add	r3, r1
 80068fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006902:	3301      	adds	r3, #1
 8006904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006908:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	6809      	ldr	r1, [r1, #0]
 8006910:	4313      	orrs	r3, r2
 8006912:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	69da      	ldr	r2, [r3, #28]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800693a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6911      	ldr	r1, [r2, #16]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	68d2      	ldr	r2, [r2, #12]
 8006946:	4311      	orrs	r1, r2
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6812      	ldr	r2, [r2, #0]
 800694c:	430b      	orrs	r3, r1
 800694e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695a      	ldr	r2, [r3, #20]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0201 	orr.w	r2, r2, #1
 800697a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	000186a0 	.word	0x000186a0
 80069a8:	001e847f 	.word	0x001e847f
 80069ac:	003d08ff 	.word	0x003d08ff
 80069b0:	431bde83 	.word	0x431bde83
 80069b4:	10624dd3 	.word	0x10624dd3

080069b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d129      	bne.n	8006a22 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2224      	movs	r2, #36	; 0x24
 80069d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 0201 	bic.w	r2, r2, #1
 80069e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0210 	bic.w	r2, r2, #16
 80069f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0201 	orr.w	r2, r2, #1
 8006a14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	e000      	b.n	8006a24 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006a22:	2302      	movs	r3, #2
  }
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d12a      	bne.n	8006aa0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2224      	movs	r2, #36	; 0x24
 8006a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0201 	bic.w	r2, r2, #1
 8006a60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a68:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006a6a:	89fb      	ldrh	r3, [r7, #14]
 8006a6c:	f023 030f 	bic.w	r3, r3, #15
 8006a70:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	89fb      	ldrh	r3, [r7, #14]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	89fa      	ldrh	r2, [r7, #14]
 8006a82:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0201 	orr.w	r2, r2, #1
 8006a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	e000      	b.n	8006aa2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006aa0:	2302      	movs	r3, #2
  }
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
	...

08006ab0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e0bf      	b.n	8006c42 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7fc f860 	bl	8002b9c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699a      	ldr	r2, [r3, #24]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006af2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6999      	ldr	r1, [r3, #24]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006b08:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6899      	ldr	r1, [r3, #8]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	4b4a      	ldr	r3, [pc, #296]	; (8006c4c <HAL_LTDC_Init+0x19c>)
 8006b24:	400b      	ands	r3, r1
 8006b26:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	041b      	lsls	r3, r3, #16
 8006b2e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6899      	ldr	r1, [r3, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68d9      	ldr	r1, [r3, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	4b3e      	ldr	r3, [pc, #248]	; (8006c4c <HAL_LTDC_Init+0x19c>)
 8006b52:	400b      	ands	r3, r1
 8006b54:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	041b      	lsls	r3, r3, #16
 8006b5c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68d9      	ldr	r1, [r3, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1a      	ldr	r2, [r3, #32]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6919      	ldr	r1, [r3, #16]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	4b33      	ldr	r3, [pc, #204]	; (8006c4c <HAL_LTDC_Init+0x19c>)
 8006b80:	400b      	ands	r3, r1
 8006b82:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	041b      	lsls	r3, r3, #16
 8006b8a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6919      	ldr	r1, [r3, #16]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6959      	ldr	r1, [r3, #20]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	4b27      	ldr	r3, [pc, #156]	; (8006c4c <HAL_LTDC_Init+0x19c>)
 8006bae:	400b      	ands	r3, r1
 8006bb0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	041b      	lsls	r3, r3, #16
 8006bb8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6959      	ldr	r1, [r3, #20]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bd6:	021b      	lsls	r3, r3, #8
 8006bd8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006be0:	041b      	lsls	r3, r3, #16
 8006be2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0206 	orr.w	r2, r2, #6
 8006c1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0201 	orr.w	r2, r2, #1
 8006c2e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	f000f800 	.word	0xf000f800

08006c50 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c66:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f003 0304 	and.w	r3, r3, #4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d023      	beq.n	8006cba <HAL_LTDC_IRQHandler+0x6a>
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d01e      	beq.n	8006cba <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0204 	bic.w	r2, r2, #4
 8006c8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2204      	movs	r2, #4
 8006c92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c9a:	f043 0201 	orr.w	r2, r3, #1
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2204      	movs	r2, #4
 8006ca8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f86f 	bl	8006d98 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d023      	beq.n	8006d0c <HAL_LTDC_IRQHandler+0xbc>
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01e      	beq.n	8006d0c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0202 	bic.w	r2, r2, #2
 8006cdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006cec:	f043 0202 	orr.w	r2, r3, #2
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2204      	movs	r2, #4
 8006cfa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f846 	bl	8006d98 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d01b      	beq.n	8006d4e <HAL_LTDC_IRQHandler+0xfe>
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d016      	beq.n	8006d4e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0201 	bic.w	r2, r2, #1
 8006d2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2201      	movs	r2, #1
 8006d36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f82f 	bl	8006dac <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f003 0308 	and.w	r3, r3, #8
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01b      	beq.n	8006d90 <HAL_LTDC_IRQHandler+0x140>
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f003 0308 	and.w	r3, r3, #8
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d016      	beq.n	8006d90 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0208 	bic.w	r2, r2, #8
 8006d70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2208      	movs	r2, #8
 8006d78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f818 	bl	8006dc0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006d90:	bf00      	nop
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006dd4:	b5b0      	push	{r4, r5, r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d101      	bne.n	8006dee <HAL_LTDC_ConfigLayer+0x1a>
 8006dea:	2302      	movs	r3, #2
 8006dec:	e02c      	b.n	8006e48 <HAL_LTDC_ConfigLayer+0x74>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2134      	movs	r1, #52	; 0x34
 8006e04:	fb01 f303 	mul.w	r3, r1, r3
 8006e08:	4413      	add	r3, r2
 8006e0a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	4614      	mov	r4, r2
 8006e12:	461d      	mov	r5, r3
 8006e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	68b9      	ldr	r1, [r7, #8]
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 f8b9 	bl	8006fa0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2201      	movs	r2, #1
 8006e34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bdb0      	pop	{r4, r5, r7, pc}

08006e50 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d101      	bne.n	8006e6a <HAL_LTDC_ConfigColorKeying+0x1a>
 8006e66:	2302      	movs	r3, #2
 8006e68:	e030      	b.n	8006ecc <HAL_LTDC_ConfigColorKeying+0x7c>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2202      	movs	r2, #2
 8006e76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	01db      	lsls	r3, r3, #7
 8006e84:	4413      	add	r3, r2
 8006e86:	3384      	adds	r3, #132	; 0x84
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	6812      	ldr	r2, [r2, #0]
 8006e8e:	4611      	mov	r1, r2
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	01d2      	lsls	r2, r2, #7
 8006e94:	440a      	add	r2, r1
 8006e96:	3284      	adds	r2, #132	; 0x84
 8006e98:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006e9c:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	01db      	lsls	r3, r3, #7
 8006ea8:	4413      	add	r3, r2
 8006eaa:	3384      	adds	r3, #132	; 0x84
 8006eac:	461a      	mov	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d101      	bne.n	8006ef0 <HAL_LTDC_EnableColorKeying+0x18>
 8006eec:	2302      	movs	r3, #2
 8006eee:	e026      	b.n	8006f3e <HAL_LTDC_EnableColorKeying+0x66>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	01db      	lsls	r3, r3, #7
 8006f0a:	4413      	add	r3, r2
 8006f0c:	3384      	adds	r3, #132	; 0x84
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	6812      	ldr	r2, [r2, #0]
 8006f14:	4611      	mov	r1, r2
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	01d2      	lsls	r2, r2, #7
 8006f1a:	440a      	add	r2, r1
 8006f1c:	3284      	adds	r2, #132	; 0x84
 8006f1e:	f043 0302 	orr.w	r3, r3, #2
 8006f22:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
	...

08006f4c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d101      	bne.n	8006f62 <HAL_LTDC_EnableDither+0x16>
 8006f5e:	2302      	movs	r3, #2
 8006f60:	e016      	b.n	8006f90 <HAL_LTDC_EnableDither+0x44>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006f72:	4b0a      	ldr	r3, [pc, #40]	; (8006f9c <HAL_LTDC_EnableDither+0x50>)
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	4a09      	ldr	r2, [pc, #36]	; (8006f9c <HAL_LTDC_EnableDither+0x50>)
 8006f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f7c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	40016800 	.word	0x40016800

08006fa0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b089      	sub	sp, #36	; 0x24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	0c1b      	lsrs	r3, r3, #16
 8006fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fbc:	4413      	add	r3, r2
 8006fbe:	041b      	lsls	r3, r3, #16
 8006fc0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	01db      	lsls	r3, r3, #7
 8006fcc:	4413      	add	r3, r2
 8006fce:	3384      	adds	r3, #132	; 0x84
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	6812      	ldr	r2, [r2, #0]
 8006fd6:	4611      	mov	r1, r2
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	01d2      	lsls	r2, r2, #7
 8006fdc:	440a      	add	r2, r1
 8006fde:	3284      	adds	r2, #132	; 0x84
 8006fe0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006fe4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	0c1b      	lsrs	r3, r3, #16
 8006ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006ff6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006ff8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4619      	mov	r1, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	01db      	lsls	r3, r3, #7
 8007004:	440b      	add	r3, r1
 8007006:	3384      	adds	r3, #132	; 0x84
 8007008:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800700e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800701e:	4413      	add	r3, r2
 8007020:	041b      	lsls	r3, r3, #16
 8007022:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	461a      	mov	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	01db      	lsls	r3, r3, #7
 800702e:	4413      	add	r3, r2
 8007030:	3384      	adds	r3, #132	; 0x84
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	6812      	ldr	r2, [r2, #0]
 8007038:	4611      	mov	r1, r2
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	01d2      	lsls	r2, r2, #7
 800703e:	440a      	add	r2, r1
 8007040:	3284      	adds	r2, #132	; 0x84
 8007042:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007046:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007056:	4413      	add	r3, r2
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4619      	mov	r1, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	01db      	lsls	r3, r3, #7
 8007064:	440b      	add	r3, r1
 8007066:	3384      	adds	r3, #132	; 0x84
 8007068:	4619      	mov	r1, r3
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4313      	orrs	r3, r2
 800706e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	461a      	mov	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	01db      	lsls	r3, r3, #7
 800707a:	4413      	add	r3, r2
 800707c:	3384      	adds	r3, #132	; 0x84
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	6812      	ldr	r2, [r2, #0]
 8007084:	4611      	mov	r1, r2
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	01d2      	lsls	r2, r2, #7
 800708a:	440a      	add	r2, r1
 800708c:	3284      	adds	r2, #132	; 0x84
 800708e:	f023 0307 	bic.w	r3, r3, #7
 8007092:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	461a      	mov	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	01db      	lsls	r3, r3, #7
 800709e:	4413      	add	r3, r2
 80070a0:	3384      	adds	r3, #132	; 0x84
 80070a2:	461a      	mov	r2, r3
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80070ba:	041b      	lsls	r3, r3, #16
 80070bc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	061b      	lsls	r3, r3, #24
 80070c4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	01db      	lsls	r3, r3, #7
 80070d0:	4413      	add	r3, r2
 80070d2:	3384      	adds	r3, #132	; 0x84
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	01db      	lsls	r3, r3, #7
 80070e0:	4413      	add	r3, r2
 80070e2:	3384      	adds	r3, #132	; 0x84
 80070e4:	461a      	mov	r2, r3
 80070e6:	2300      	movs	r3, #0
 80070e8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070f0:	461a      	mov	r2, r3
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	431a      	orrs	r2, r3
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	431a      	orrs	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4619      	mov	r1, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	01db      	lsls	r3, r3, #7
 8007104:	440b      	add	r3, r1
 8007106:	3384      	adds	r3, #132	; 0x84
 8007108:	4619      	mov	r1, r3
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	01db      	lsls	r3, r3, #7
 800711a:	4413      	add	r3, r2
 800711c:	3384      	adds	r3, #132	; 0x84
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	6812      	ldr	r2, [r2, #0]
 8007124:	4611      	mov	r1, r2
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	01d2      	lsls	r2, r2, #7
 800712a:	440a      	add	r2, r1
 800712c:	3284      	adds	r2, #132	; 0x84
 800712e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007132:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	01db      	lsls	r3, r3, #7
 800713e:	4413      	add	r3, r2
 8007140:	3384      	adds	r3, #132	; 0x84
 8007142:	461a      	mov	r2, r3
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	01db      	lsls	r3, r3, #7
 8007154:	4413      	add	r3, r2
 8007156:	3384      	adds	r3, #132	; 0x84
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	6812      	ldr	r2, [r2, #0]
 800715e:	4611      	mov	r1, r2
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	01d2      	lsls	r2, r2, #7
 8007164:	440a      	add	r2, r1
 8007166:	3284      	adds	r2, #132	; 0x84
 8007168:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800716c:	f023 0307 	bic.w	r3, r3, #7
 8007170:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	69da      	ldr	r2, [r3, #28]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	68f9      	ldr	r1, [r7, #12]
 800717c:	6809      	ldr	r1, [r1, #0]
 800717e:	4608      	mov	r0, r1
 8007180:	6879      	ldr	r1, [r7, #4]
 8007182:	01c9      	lsls	r1, r1, #7
 8007184:	4401      	add	r1, r0
 8007186:	3184      	adds	r1, #132	; 0x84
 8007188:	4313      	orrs	r3, r2
 800718a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	01db      	lsls	r3, r3, #7
 8007196:	4413      	add	r3, r2
 8007198:	3384      	adds	r3, #132	; 0x84
 800719a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	461a      	mov	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	01db      	lsls	r3, r3, #7
 80071a6:	4413      	add	r3, r2
 80071a8:	3384      	adds	r3, #132	; 0x84
 80071aa:	461a      	mov	r2, r3
 80071ac:	2300      	movs	r3, #0
 80071ae:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	01db      	lsls	r3, r3, #7
 80071ba:	4413      	add	r3, r2
 80071bc:	3384      	adds	r3, #132	; 0x84
 80071be:	461a      	mov	r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d102      	bne.n	80071d4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80071ce:	2304      	movs	r3, #4
 80071d0:	61fb      	str	r3, [r7, #28]
 80071d2:	e01b      	b.n	800720c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d102      	bne.n	80071e2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80071dc:	2303      	movs	r3, #3
 80071de:	61fb      	str	r3, [r7, #28]
 80071e0:	e014      	b.n	800720c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d00b      	beq.n	8007202 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d007      	beq.n	8007202 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d003      	beq.n	8007202 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80071fe:	2b07      	cmp	r3, #7
 8007200:	d102      	bne.n	8007208 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007202:	2302      	movs	r3, #2
 8007204:	61fb      	str	r3, [r7, #28]
 8007206:	e001      	b.n	800720c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007208:	2301      	movs	r3, #1
 800720a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	461a      	mov	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	01db      	lsls	r3, r3, #7
 8007216:	4413      	add	r3, r2
 8007218:	3384      	adds	r3, #132	; 0x84
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	6812      	ldr	r2, [r2, #0]
 8007220:	4611      	mov	r1, r2
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	01d2      	lsls	r2, r2, #7
 8007226:	440a      	add	r2, r1
 8007228:	3284      	adds	r2, #132	; 0x84
 800722a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800722e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	fb02 f303 	mul.w	r3, r2, r3
 800723a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	6859      	ldr	r1, [r3, #4]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	1acb      	subs	r3, r1, r3
 8007246:	69f9      	ldr	r1, [r7, #28]
 8007248:	fb01 f303 	mul.w	r3, r1, r3
 800724c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800724e:	68f9      	ldr	r1, [r7, #12]
 8007250:	6809      	ldr	r1, [r1, #0]
 8007252:	4608      	mov	r0, r1
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	01c9      	lsls	r1, r1, #7
 8007258:	4401      	add	r1, r0
 800725a:	3184      	adds	r1, #132	; 0x84
 800725c:	4313      	orrs	r3, r2
 800725e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	461a      	mov	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	01db      	lsls	r3, r3, #7
 800726a:	4413      	add	r3, r2
 800726c:	3384      	adds	r3, #132	; 0x84
 800726e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	6812      	ldr	r2, [r2, #0]
 8007274:	4611      	mov	r1, r2
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	01d2      	lsls	r2, r2, #7
 800727a:	440a      	add	r2, r1
 800727c:	3284      	adds	r2, #132	; 0x84
 800727e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007282:	f023 0307 	bic.w	r3, r3, #7
 8007286:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	01db      	lsls	r3, r3, #7
 8007292:	4413      	add	r3, r2
 8007294:	3384      	adds	r3, #132	; 0x84
 8007296:	461a      	mov	r2, r3
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	01db      	lsls	r3, r3, #7
 80072a8:	4413      	add	r3, r2
 80072aa:	3384      	adds	r3, #132	; 0x84
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	6812      	ldr	r2, [r2, #0]
 80072b2:	4611      	mov	r1, r2
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	01d2      	lsls	r2, r2, #7
 80072b8:	440a      	add	r2, r1
 80072ba:	3284      	adds	r2, #132	; 0x84
 80072bc:	f043 0301 	orr.w	r3, r3, #1
 80072c0:	6013      	str	r3, [r2, #0]
}
 80072c2:	bf00      	nop
 80072c4:	3724      	adds	r7, #36	; 0x24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
	...

080072d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e267      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d075      	beq.n	80073da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072ee:	4b88      	ldr	r3, [pc, #544]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f003 030c 	and.w	r3, r3, #12
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d00c      	beq.n	8007314 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072fa:	4b85      	ldr	r3, [pc, #532]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007302:	2b08      	cmp	r3, #8
 8007304:	d112      	bne.n	800732c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007306:	4b82      	ldr	r3, [pc, #520]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800730e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007312:	d10b      	bne.n	800732c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007314:	4b7e      	ldr	r3, [pc, #504]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d05b      	beq.n	80073d8 <HAL_RCC_OscConfig+0x108>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d157      	bne.n	80073d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e242      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007334:	d106      	bne.n	8007344 <HAL_RCC_OscConfig+0x74>
 8007336:	4b76      	ldr	r3, [pc, #472]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a75      	ldr	r2, [pc, #468]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800733c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	e01d      	b.n	8007380 <HAL_RCC_OscConfig+0xb0>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800734c:	d10c      	bne.n	8007368 <HAL_RCC_OscConfig+0x98>
 800734e:	4b70      	ldr	r3, [pc, #448]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a6f      	ldr	r2, [pc, #444]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	4b6d      	ldr	r3, [pc, #436]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a6c      	ldr	r2, [pc, #432]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	e00b      	b.n	8007380 <HAL_RCC_OscConfig+0xb0>
 8007368:	4b69      	ldr	r3, [pc, #420]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a68      	ldr	r2, [pc, #416]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800736e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	4b66      	ldr	r3, [pc, #408]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a65      	ldr	r2, [pc, #404]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800737a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800737e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d013      	beq.n	80073b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007388:	f7fc f85e 	bl	8003448 <HAL_GetTick>
 800738c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007390:	f7fc f85a 	bl	8003448 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b64      	cmp	r3, #100	; 0x64
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e207      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073a2:	4b5b      	ldr	r3, [pc, #364]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0f0      	beq.n	8007390 <HAL_RCC_OscConfig+0xc0>
 80073ae:	e014      	b.n	80073da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073b0:	f7fc f84a 	bl	8003448 <HAL_GetTick>
 80073b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073b6:	e008      	b.n	80073ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073b8:	f7fc f846 	bl	8003448 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b64      	cmp	r3, #100	; 0x64
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e1f3      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ca:	4b51      	ldr	r3, [pc, #324]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1f0      	bne.n	80073b8 <HAL_RCC_OscConfig+0xe8>
 80073d6:	e000      	b.n	80073da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d063      	beq.n	80074ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073e6:	4b4a      	ldr	r3, [pc, #296]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f003 030c 	and.w	r3, r3, #12
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00b      	beq.n	800740a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073f2:	4b47      	ldr	r3, [pc, #284]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073fa:	2b08      	cmp	r3, #8
 80073fc:	d11c      	bne.n	8007438 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073fe:	4b44      	ldr	r3, [pc, #272]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d116      	bne.n	8007438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800740a:	4b41      	ldr	r3, [pc, #260]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d005      	beq.n	8007422 <HAL_RCC_OscConfig+0x152>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d001      	beq.n	8007422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e1c7      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007422:	4b3b      	ldr	r3, [pc, #236]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	4937      	ldr	r1, [pc, #220]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007432:	4313      	orrs	r3, r2
 8007434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007436:	e03a      	b.n	80074ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d020      	beq.n	8007482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007440:	4b34      	ldr	r3, [pc, #208]	; (8007514 <HAL_RCC_OscConfig+0x244>)
 8007442:	2201      	movs	r2, #1
 8007444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007446:	f7fb ffff 	bl	8003448 <HAL_GetTick>
 800744a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800744c:	e008      	b.n	8007460 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800744e:	f7fb fffb 	bl	8003448 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	2b02      	cmp	r3, #2
 800745a:	d901      	bls.n	8007460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e1a8      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007460:	4b2b      	ldr	r3, [pc, #172]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0f0      	beq.n	800744e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800746c:	4b28      	ldr	r3, [pc, #160]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	4925      	ldr	r1, [pc, #148]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800747c:	4313      	orrs	r3, r2
 800747e:	600b      	str	r3, [r1, #0]
 8007480:	e015      	b.n	80074ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007482:	4b24      	ldr	r3, [pc, #144]	; (8007514 <HAL_RCC_OscConfig+0x244>)
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007488:	f7fb ffde 	bl	8003448 <HAL_GetTick>
 800748c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800748e:	e008      	b.n	80074a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007490:	f7fb ffda 	bl	8003448 <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	2b02      	cmp	r3, #2
 800749c:	d901      	bls.n	80074a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e187      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074a2:	4b1b      	ldr	r3, [pc, #108]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1f0      	bne.n	8007490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d036      	beq.n	8007528 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d016      	beq.n	80074f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074c2:	4b15      	ldr	r3, [pc, #84]	; (8007518 <HAL_RCC_OscConfig+0x248>)
 80074c4:	2201      	movs	r2, #1
 80074c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c8:	f7fb ffbe 	bl	8003448 <HAL_GetTick>
 80074cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074d0:	f7fb ffba 	bl	8003448 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e167      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074e2:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80074e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0f0      	beq.n	80074d0 <HAL_RCC_OscConfig+0x200>
 80074ee:	e01b      	b.n	8007528 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074f0:	4b09      	ldr	r3, [pc, #36]	; (8007518 <HAL_RCC_OscConfig+0x248>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074f6:	f7fb ffa7 	bl	8003448 <HAL_GetTick>
 80074fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074fc:	e00e      	b.n	800751c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074fe:	f7fb ffa3 	bl	8003448 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d907      	bls.n	800751c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e150      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
 8007510:	40023800 	.word	0x40023800
 8007514:	42470000 	.word	0x42470000
 8007518:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800751c:	4b88      	ldr	r3, [pc, #544]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 800751e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1ea      	bne.n	80074fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 8097 	beq.w	8007664 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007536:	2300      	movs	r3, #0
 8007538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800753a:	4b81      	ldr	r3, [pc, #516]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10f      	bne.n	8007566 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007546:	2300      	movs	r3, #0
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	4b7d      	ldr	r3, [pc, #500]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	4a7c      	ldr	r2, [pc, #496]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 8007550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007554:	6413      	str	r3, [r2, #64]	; 0x40
 8007556:	4b7a      	ldr	r3, [pc, #488]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755e:	60bb      	str	r3, [r7, #8]
 8007560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007562:	2301      	movs	r3, #1
 8007564:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007566:	4b77      	ldr	r3, [pc, #476]	; (8007744 <HAL_RCC_OscConfig+0x474>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756e:	2b00      	cmp	r3, #0
 8007570:	d118      	bne.n	80075a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007572:	4b74      	ldr	r3, [pc, #464]	; (8007744 <HAL_RCC_OscConfig+0x474>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a73      	ldr	r2, [pc, #460]	; (8007744 <HAL_RCC_OscConfig+0x474>)
 8007578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800757c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800757e:	f7fb ff63 	bl	8003448 <HAL_GetTick>
 8007582:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007584:	e008      	b.n	8007598 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007586:	f7fb ff5f 	bl	8003448 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d901      	bls.n	8007598 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e10c      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007598:	4b6a      	ldr	r3, [pc, #424]	; (8007744 <HAL_RCC_OscConfig+0x474>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d0f0      	beq.n	8007586 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d106      	bne.n	80075ba <HAL_RCC_OscConfig+0x2ea>
 80075ac:	4b64      	ldr	r3, [pc, #400]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b0:	4a63      	ldr	r2, [pc, #396]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075b2:	f043 0301 	orr.w	r3, r3, #1
 80075b6:	6713      	str	r3, [r2, #112]	; 0x70
 80075b8:	e01c      	b.n	80075f4 <HAL_RCC_OscConfig+0x324>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	2b05      	cmp	r3, #5
 80075c0:	d10c      	bne.n	80075dc <HAL_RCC_OscConfig+0x30c>
 80075c2:	4b5f      	ldr	r3, [pc, #380]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c6:	4a5e      	ldr	r2, [pc, #376]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075c8:	f043 0304 	orr.w	r3, r3, #4
 80075cc:	6713      	str	r3, [r2, #112]	; 0x70
 80075ce:	4b5c      	ldr	r3, [pc, #368]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d2:	4a5b      	ldr	r2, [pc, #364]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075d4:	f043 0301 	orr.w	r3, r3, #1
 80075d8:	6713      	str	r3, [r2, #112]	; 0x70
 80075da:	e00b      	b.n	80075f4 <HAL_RCC_OscConfig+0x324>
 80075dc:	4b58      	ldr	r3, [pc, #352]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e0:	4a57      	ldr	r2, [pc, #348]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075e2:	f023 0301 	bic.w	r3, r3, #1
 80075e6:	6713      	str	r3, [r2, #112]	; 0x70
 80075e8:	4b55      	ldr	r3, [pc, #340]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ec:	4a54      	ldr	r2, [pc, #336]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075ee:	f023 0304 	bic.w	r3, r3, #4
 80075f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d015      	beq.n	8007628 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075fc:	f7fb ff24 	bl	8003448 <HAL_GetTick>
 8007600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007602:	e00a      	b.n	800761a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007604:	f7fb ff20 	bl	8003448 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007612:	4293      	cmp	r3, r2
 8007614:	d901      	bls.n	800761a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e0cb      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800761a:	4b49      	ldr	r3, [pc, #292]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 800761c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0ee      	beq.n	8007604 <HAL_RCC_OscConfig+0x334>
 8007626:	e014      	b.n	8007652 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007628:	f7fb ff0e 	bl	8003448 <HAL_GetTick>
 800762c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800762e:	e00a      	b.n	8007646 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007630:	f7fb ff0a 	bl	8003448 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	f241 3288 	movw	r2, #5000	; 0x1388
 800763e:	4293      	cmp	r3, r2
 8007640:	d901      	bls.n	8007646 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e0b5      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007646:	4b3e      	ldr	r3, [pc, #248]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 8007648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764a:	f003 0302 	and.w	r3, r3, #2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1ee      	bne.n	8007630 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007652:	7dfb      	ldrb	r3, [r7, #23]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d105      	bne.n	8007664 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007658:	4b39      	ldr	r3, [pc, #228]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 800765a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765c:	4a38      	ldr	r2, [pc, #224]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 800765e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007662:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 80a1 	beq.w	80077b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800766e:	4b34      	ldr	r3, [pc, #208]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f003 030c 	and.w	r3, r3, #12
 8007676:	2b08      	cmp	r3, #8
 8007678:	d05c      	beq.n	8007734 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	2b02      	cmp	r3, #2
 8007680:	d141      	bne.n	8007706 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007682:	4b31      	ldr	r3, [pc, #196]	; (8007748 <HAL_RCC_OscConfig+0x478>)
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007688:	f7fb fede 	bl	8003448 <HAL_GetTick>
 800768c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800768e:	e008      	b.n	80076a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007690:	f7fb feda 	bl	8003448 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	2b02      	cmp	r3, #2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e087      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076a2:	4b27      	ldr	r3, [pc, #156]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1f0      	bne.n	8007690 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69da      	ldr	r2, [r3, #28]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	019b      	lsls	r3, r3, #6
 80076be:	431a      	orrs	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c4:	085b      	lsrs	r3, r3, #1
 80076c6:	3b01      	subs	r3, #1
 80076c8:	041b      	lsls	r3, r3, #16
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	061b      	lsls	r3, r3, #24
 80076d2:	491b      	ldr	r1, [pc, #108]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076d8:	4b1b      	ldr	r3, [pc, #108]	; (8007748 <HAL_RCC_OscConfig+0x478>)
 80076da:	2201      	movs	r2, #1
 80076dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076de:	f7fb feb3 	bl	8003448 <HAL_GetTick>
 80076e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076e4:	e008      	b.n	80076f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076e6:	f7fb feaf 	bl	8003448 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d901      	bls.n	80076f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e05c      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076f8:	4b11      	ldr	r3, [pc, #68]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0f0      	beq.n	80076e6 <HAL_RCC_OscConfig+0x416>
 8007704:	e054      	b.n	80077b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007706:	4b10      	ldr	r3, [pc, #64]	; (8007748 <HAL_RCC_OscConfig+0x478>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800770c:	f7fb fe9c 	bl	8003448 <HAL_GetTick>
 8007710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007714:	f7fb fe98 	bl	8003448 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e045      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007726:	4b06      	ldr	r3, [pc, #24]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f0      	bne.n	8007714 <HAL_RCC_OscConfig+0x444>
 8007732:	e03d      	b.n	80077b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d107      	bne.n	800774c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e038      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
 8007740:	40023800 	.word	0x40023800
 8007744:	40007000 	.word	0x40007000
 8007748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800774c:	4b1b      	ldr	r3, [pc, #108]	; (80077bc <HAL_RCC_OscConfig+0x4ec>)
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d028      	beq.n	80077ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007764:	429a      	cmp	r2, r3
 8007766:	d121      	bne.n	80077ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007772:	429a      	cmp	r2, r3
 8007774:	d11a      	bne.n	80077ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800777c:	4013      	ands	r3, r2
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007784:	4293      	cmp	r3, r2
 8007786:	d111      	bne.n	80077ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	085b      	lsrs	r3, r3, #1
 8007794:	3b01      	subs	r3, #1
 8007796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007798:	429a      	cmp	r2, r3
 800779a:	d107      	bne.n	80077ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d001      	beq.n	80077b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	40023800 	.word	0x40023800

080077c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e0cc      	b.n	800796e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077d4:	4b68      	ldr	r3, [pc, #416]	; (8007978 <HAL_RCC_ClockConfig+0x1b8>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d90c      	bls.n	80077fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077e2:	4b65      	ldr	r3, [pc, #404]	; (8007978 <HAL_RCC_ClockConfig+0x1b8>)
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ea:	4b63      	ldr	r3, [pc, #396]	; (8007978 <HAL_RCC_ClockConfig+0x1b8>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 030f 	and.w	r3, r3, #15
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d001      	beq.n	80077fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e0b8      	b.n	800796e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d020      	beq.n	800784a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0304 	and.w	r3, r3, #4
 8007810:	2b00      	cmp	r3, #0
 8007812:	d005      	beq.n	8007820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007814:	4b59      	ldr	r3, [pc, #356]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	4a58      	ldr	r2, [pc, #352]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 800781a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800781e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0308 	and.w	r3, r3, #8
 8007828:	2b00      	cmp	r3, #0
 800782a:	d005      	beq.n	8007838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800782c:	4b53      	ldr	r3, [pc, #332]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	4a52      	ldr	r2, [pc, #328]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007838:	4b50      	ldr	r3, [pc, #320]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	494d      	ldr	r1, [pc, #308]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007846:	4313      	orrs	r3, r2
 8007848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d044      	beq.n	80078e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d107      	bne.n	800786e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800785e:	4b47      	ldr	r3, [pc, #284]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d119      	bne.n	800789e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e07f      	b.n	800796e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d003      	beq.n	800787e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800787a:	2b03      	cmp	r3, #3
 800787c:	d107      	bne.n	800788e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800787e:	4b3f      	ldr	r3, [pc, #252]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d109      	bne.n	800789e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e06f      	b.n	800796e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800788e:	4b3b      	ldr	r3, [pc, #236]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e067      	b.n	800796e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800789e:	4b37      	ldr	r3, [pc, #220]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f023 0203 	bic.w	r2, r3, #3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	4934      	ldr	r1, [pc, #208]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078b0:	f7fb fdca 	bl	8003448 <HAL_GetTick>
 80078b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078b6:	e00a      	b.n	80078ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078b8:	f7fb fdc6 	bl	8003448 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e04f      	b.n	800796e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ce:	4b2b      	ldr	r3, [pc, #172]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f003 020c 	and.w	r2, r3, #12
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	429a      	cmp	r2, r3
 80078de:	d1eb      	bne.n	80078b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078e0:	4b25      	ldr	r3, [pc, #148]	; (8007978 <HAL_RCC_ClockConfig+0x1b8>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d20c      	bcs.n	8007908 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ee:	4b22      	ldr	r3, [pc, #136]	; (8007978 <HAL_RCC_ClockConfig+0x1b8>)
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078f6:	4b20      	ldr	r3, [pc, #128]	; (8007978 <HAL_RCC_ClockConfig+0x1b8>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 030f 	and.w	r3, r3, #15
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	429a      	cmp	r2, r3
 8007902:	d001      	beq.n	8007908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e032      	b.n	800796e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b00      	cmp	r3, #0
 8007912:	d008      	beq.n	8007926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007914:	4b19      	ldr	r3, [pc, #100]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	4916      	ldr	r1, [pc, #88]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007922:	4313      	orrs	r3, r2
 8007924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0308 	and.w	r3, r3, #8
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007932:	4b12      	ldr	r3, [pc, #72]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	490e      	ldr	r1, [pc, #56]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007942:	4313      	orrs	r3, r2
 8007944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007946:	f000 f821 	bl	800798c <HAL_RCC_GetSysClockFreq>
 800794a:	4602      	mov	r2, r0
 800794c:	4b0b      	ldr	r3, [pc, #44]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	091b      	lsrs	r3, r3, #4
 8007952:	f003 030f 	and.w	r3, r3, #15
 8007956:	490a      	ldr	r1, [pc, #40]	; (8007980 <HAL_RCC_ClockConfig+0x1c0>)
 8007958:	5ccb      	ldrb	r3, [r1, r3]
 800795a:	fa22 f303 	lsr.w	r3, r2, r3
 800795e:	4a09      	ldr	r2, [pc, #36]	; (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 8007960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007962:	4b09      	ldr	r3, [pc, #36]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	f7fb fc0c 	bl	8003184 <HAL_InitTick>

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	40023c00 	.word	0x40023c00
 800797c:	40023800 	.word	0x40023800
 8007980:	08012d04 	.word	0x08012d04
 8007984:	2000005c 	.word	0x2000005c
 8007988:	20000060 	.word	0x20000060

0800798c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800798c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007990:	b094      	sub	sp, #80	; 0x50
 8007992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007994:	2300      	movs	r3, #0
 8007996:	647b      	str	r3, [r7, #68]	; 0x44
 8007998:	2300      	movs	r3, #0
 800799a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800799c:	2300      	movs	r3, #0
 800799e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079a4:	4b79      	ldr	r3, [pc, #484]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 030c 	and.w	r3, r3, #12
 80079ac:	2b08      	cmp	r3, #8
 80079ae:	d00d      	beq.n	80079cc <HAL_RCC_GetSysClockFreq+0x40>
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	f200 80e1 	bhi.w	8007b78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <HAL_RCC_GetSysClockFreq+0x34>
 80079ba:	2b04      	cmp	r3, #4
 80079bc:	d003      	beq.n	80079c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80079be:	e0db      	b.n	8007b78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079c0:	4b73      	ldr	r3, [pc, #460]	; (8007b90 <HAL_RCC_GetSysClockFreq+0x204>)
 80079c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80079c4:	e0db      	b.n	8007b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079c6:	4b73      	ldr	r3, [pc, #460]	; (8007b94 <HAL_RCC_GetSysClockFreq+0x208>)
 80079c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80079ca:	e0d8      	b.n	8007b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079cc:	4b6f      	ldr	r3, [pc, #444]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079d6:	4b6d      	ldr	r3, [pc, #436]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d063      	beq.n	8007aaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079e2:	4b6a      	ldr	r3, [pc, #424]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	099b      	lsrs	r3, r3, #6
 80079e8:	2200      	movs	r2, #0
 80079ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80079ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80079ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f4:	633b      	str	r3, [r7, #48]	; 0x30
 80079f6:	2300      	movs	r3, #0
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
 80079fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80079fe:	4622      	mov	r2, r4
 8007a00:	462b      	mov	r3, r5
 8007a02:	f04f 0000 	mov.w	r0, #0
 8007a06:	f04f 0100 	mov.w	r1, #0
 8007a0a:	0159      	lsls	r1, r3, #5
 8007a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a10:	0150      	lsls	r0, r2, #5
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4621      	mov	r1, r4
 8007a18:	1a51      	subs	r1, r2, r1
 8007a1a:	6139      	str	r1, [r7, #16]
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a30:	4659      	mov	r1, fp
 8007a32:	018b      	lsls	r3, r1, #6
 8007a34:	4651      	mov	r1, sl
 8007a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a3a:	4651      	mov	r1, sl
 8007a3c:	018a      	lsls	r2, r1, #6
 8007a3e:	4651      	mov	r1, sl
 8007a40:	ebb2 0801 	subs.w	r8, r2, r1
 8007a44:	4659      	mov	r1, fp
 8007a46:	eb63 0901 	sbc.w	r9, r3, r1
 8007a4a:	f04f 0200 	mov.w	r2, #0
 8007a4e:	f04f 0300 	mov.w	r3, #0
 8007a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a5e:	4690      	mov	r8, r2
 8007a60:	4699      	mov	r9, r3
 8007a62:	4623      	mov	r3, r4
 8007a64:	eb18 0303 	adds.w	r3, r8, r3
 8007a68:	60bb      	str	r3, [r7, #8]
 8007a6a:	462b      	mov	r3, r5
 8007a6c:	eb49 0303 	adc.w	r3, r9, r3
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	f04f 0200 	mov.w	r2, #0
 8007a76:	f04f 0300 	mov.w	r3, #0
 8007a7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a7e:	4629      	mov	r1, r5
 8007a80:	024b      	lsls	r3, r1, #9
 8007a82:	4621      	mov	r1, r4
 8007a84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a88:	4621      	mov	r1, r4
 8007a8a:	024a      	lsls	r2, r1, #9
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a92:	2200      	movs	r2, #0
 8007a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a9c:	f7f8 fbb0 	bl	8000200 <__aeabi_uldivmod>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aa8:	e058      	b.n	8007b5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aaa:	4b38      	ldr	r3, [pc, #224]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	099b      	lsrs	r3, r3, #6
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007aba:	623b      	str	r3, [r7, #32]
 8007abc:	2300      	movs	r3, #0
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ac4:	4642      	mov	r2, r8
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	f04f 0000 	mov.w	r0, #0
 8007acc:	f04f 0100 	mov.w	r1, #0
 8007ad0:	0159      	lsls	r1, r3, #5
 8007ad2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ad6:	0150      	lsls	r0, r2, #5
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	4641      	mov	r1, r8
 8007ade:	ebb2 0a01 	subs.w	sl, r2, r1
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ae8:	f04f 0200 	mov.w	r2, #0
 8007aec:	f04f 0300 	mov.w	r3, #0
 8007af0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007af4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007af8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007afc:	ebb2 040a 	subs.w	r4, r2, sl
 8007b00:	eb63 050b 	sbc.w	r5, r3, fp
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	00eb      	lsls	r3, r5, #3
 8007b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b12:	00e2      	lsls	r2, r4, #3
 8007b14:	4614      	mov	r4, r2
 8007b16:	461d      	mov	r5, r3
 8007b18:	4643      	mov	r3, r8
 8007b1a:	18e3      	adds	r3, r4, r3
 8007b1c:	603b      	str	r3, [r7, #0]
 8007b1e:	464b      	mov	r3, r9
 8007b20:	eb45 0303 	adc.w	r3, r5, r3
 8007b24:	607b      	str	r3, [r7, #4]
 8007b26:	f04f 0200 	mov.w	r2, #0
 8007b2a:	f04f 0300 	mov.w	r3, #0
 8007b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b32:	4629      	mov	r1, r5
 8007b34:	028b      	lsls	r3, r1, #10
 8007b36:	4621      	mov	r1, r4
 8007b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	028a      	lsls	r2, r1, #10
 8007b40:	4610      	mov	r0, r2
 8007b42:	4619      	mov	r1, r3
 8007b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b46:	2200      	movs	r2, #0
 8007b48:	61bb      	str	r3, [r7, #24]
 8007b4a:	61fa      	str	r2, [r7, #28]
 8007b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b50:	f7f8 fb56 	bl	8000200 <__aeabi_uldivmod>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	4613      	mov	r3, r2
 8007b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b5c:	4b0b      	ldr	r3, [pc, #44]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	0c1b      	lsrs	r3, r3, #16
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	3301      	adds	r3, #1
 8007b68:	005b      	lsls	r3, r3, #1
 8007b6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b76:	e002      	b.n	8007b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b78:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <HAL_RCC_GetSysClockFreq+0x204>)
 8007b7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3750      	adds	r7, #80	; 0x50
 8007b84:	46bd      	mov	sp, r7
 8007b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b8a:	bf00      	nop
 8007b8c:	40023800 	.word	0x40023800
 8007b90:	00f42400 	.word	0x00f42400
 8007b94:	007a1200 	.word	0x007a1200

08007b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b9c:	4b03      	ldr	r3, [pc, #12]	; (8007bac <HAL_RCC_GetHCLKFreq+0x14>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	2000005c 	.word	0x2000005c

08007bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007bb4:	f7ff fff0 	bl	8007b98 <HAL_RCC_GetHCLKFreq>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	0a9b      	lsrs	r3, r3, #10
 8007bc0:	f003 0307 	and.w	r3, r3, #7
 8007bc4:	4903      	ldr	r1, [pc, #12]	; (8007bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bc6:	5ccb      	ldrb	r3, [r1, r3]
 8007bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	40023800 	.word	0x40023800
 8007bd4:	08012d14 	.word	0x08012d14

08007bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007bdc:	f7ff ffdc 	bl	8007b98 <HAL_RCC_GetHCLKFreq>
 8007be0:	4602      	mov	r2, r0
 8007be2:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	0b5b      	lsrs	r3, r3, #13
 8007be8:	f003 0307 	and.w	r3, r3, #7
 8007bec:	4903      	ldr	r1, [pc, #12]	; (8007bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bee:	5ccb      	ldrb	r3, [r1, r3]
 8007bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	40023800 	.word	0x40023800
 8007bfc:	08012d14 	.word	0x08012d14

08007c00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	220f      	movs	r2, #15
 8007c0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007c10:	4b12      	ldr	r3, [pc, #72]	; (8007c5c <HAL_RCC_GetClockConfig+0x5c>)
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f003 0203 	and.w	r2, r3, #3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007c1c:	4b0f      	ldr	r3, [pc, #60]	; (8007c5c <HAL_RCC_GetClockConfig+0x5c>)
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007c28:	4b0c      	ldr	r3, [pc, #48]	; (8007c5c <HAL_RCC_GetClockConfig+0x5c>)
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007c34:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <HAL_RCC_GetClockConfig+0x5c>)
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	08db      	lsrs	r3, r3, #3
 8007c3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c42:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <HAL_RCC_GetClockConfig+0x60>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 020f 	and.w	r2, r3, #15
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	601a      	str	r2, [r3, #0]
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	40023800 	.word	0x40023800
 8007c60:	40023c00 	.word	0x40023c00

08007c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10b      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d105      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d075      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007c98:	4b91      	ldr	r3, [pc, #580]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c9e:	f7fb fbd3 	bl	8003448 <HAL_GetTick>
 8007ca2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ca4:	e008      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007ca6:	f7fb fbcf 	bl	8003448 <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d901      	bls.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e189      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cb8:	4b8a      	ldr	r3, [pc, #552]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1f0      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d009      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	019a      	lsls	r2, r3, #6
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	071b      	lsls	r3, r3, #28
 8007cdc:	4981      	ldr	r1, [pc, #516]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d01f      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007cf0:	4b7c      	ldr	r3, [pc, #496]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cf6:	0f1b      	lsrs	r3, r3, #28
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	019a      	lsls	r2, r3, #6
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	061b      	lsls	r3, r3, #24
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	071b      	lsls	r3, r3, #28
 8007d10:	4974      	ldr	r1, [pc, #464]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007d18:	4b72      	ldr	r3, [pc, #456]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d1e:	f023 021f 	bic.w	r2, r3, #31
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	496e      	ldr	r1, [pc, #440]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00d      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	019a      	lsls	r2, r3, #6
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	061b      	lsls	r3, r3, #24
 8007d48:	431a      	orrs	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	071b      	lsls	r3, r3, #28
 8007d50:	4964      	ldr	r1, [pc, #400]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d58:	4b61      	ldr	r3, [pc, #388]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d5e:	f7fb fb73 	bl	8003448 <HAL_GetTick>
 8007d62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d64:	e008      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007d66:	f7fb fb6f 	bl	8003448 <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d901      	bls.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	e129      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d78:	4b5a      	ldr	r3, [pc, #360]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d0f0      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d105      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d079      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007d9c:	4b52      	ldr	r3, [pc, #328]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007da2:	f7fb fb51 	bl	8003448 <HAL_GetTick>
 8007da6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007da8:	e008      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007daa:	f7fb fb4d 	bl	8003448 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d901      	bls.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e107      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007dbc:	4b49      	ldr	r3, [pc, #292]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dc8:	d0ef      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0304 	and.w	r3, r3, #4
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d020      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007dd6:	4b43      	ldr	r3, [pc, #268]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ddc:	0f1b      	lsrs	r3, r3, #28
 8007dde:	f003 0307 	and.w	r3, r3, #7
 8007de2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	019a      	lsls	r2, r3, #6
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	061b      	lsls	r3, r3, #24
 8007df0:	431a      	orrs	r2, r3
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	071b      	lsls	r3, r3, #28
 8007df6:	493b      	ldr	r1, [pc, #236]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007dfe:	4b39      	ldr	r3, [pc, #228]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	021b      	lsls	r3, r3, #8
 8007e10:	4934      	ldr	r1, [pc, #208]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0308 	and.w	r3, r3, #8
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01e      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e24:	4b2f      	ldr	r3, [pc, #188]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e2a:	0e1b      	lsrs	r3, r3, #24
 8007e2c:	f003 030f 	and.w	r3, r3, #15
 8007e30:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	019a      	lsls	r2, r3, #6
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	061b      	lsls	r3, r3, #24
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	071b      	lsls	r3, r3, #28
 8007e44:	4927      	ldr	r1, [pc, #156]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007e4c:	4b25      	ldr	r3, [pc, #148]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	4922      	ldr	r1, [pc, #136]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007e62:	4b21      	ldr	r3, [pc, #132]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007e64:	2201      	movs	r2, #1
 8007e66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e68:	f7fb faee 	bl	8003448 <HAL_GetTick>
 8007e6c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e6e:	e008      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007e70:	f7fb faea 	bl	8003448 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d901      	bls.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e0a4      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e82:	4b18      	ldr	r3, [pc, #96]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e8e:	d1ef      	bne.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0320 	and.w	r3, r3, #32
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 808b 	beq.w	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	4b10      	ldr	r3, [pc, #64]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea6:	4a0f      	ldr	r2, [pc, #60]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eac:	6413      	str	r3, [r2, #64]	; 0x40
 8007eae:	4b0d      	ldr	r3, [pc, #52]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007eba:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a0b      	ldr	r2, [pc, #44]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ec4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ec6:	f7fb fabf 	bl	8003448 <HAL_GetTick>
 8007eca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ecc:	e010      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007ece:	f7fb fabb 	bl	8003448 <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d909      	bls.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e075      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007ee0:	42470068 	.word	0x42470068
 8007ee4:	40023800 	.word	0x40023800
 8007ee8:	42470070 	.word	0x42470070
 8007eec:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ef0:	4b38      	ldr	r3, [pc, #224]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0e8      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007efc:	4b36      	ldr	r3, [pc, #216]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f04:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d02f      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d028      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f1a:	4b2f      	ldr	r3, [pc, #188]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f24:	4b2d      	ldr	r3, [pc, #180]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007f26:	2201      	movs	r2, #1
 8007f28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f2a:	4b2c      	ldr	r3, [pc, #176]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007f30:	4a29      	ldr	r2, [pc, #164]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007f36:	4b28      	ldr	r3, [pc, #160]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d114      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007f42:	f7fb fa81 	bl	8003448 <HAL_GetTick>
 8007f46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f48:	e00a      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f4a:	f7fb fa7d 	bl	8003448 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d901      	bls.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e035      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f60:	4b1d      	ldr	r3, [pc, #116]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f64:	f003 0302 	and.w	r3, r3, #2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d0ee      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f78:	d10d      	bne.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007f7a:	4b17      	ldr	r3, [pc, #92]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f8e:	4912      	ldr	r1, [pc, #72]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	608b      	str	r3, [r1, #8]
 8007f94:	e005      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007f96:	4b10      	ldr	r3, [pc, #64]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	4a0f      	ldr	r2, [pc, #60]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f9c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007fa0:	6093      	str	r3, [r2, #8]
 8007fa2:	4b0d      	ldr	r3, [pc, #52]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fa4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fae:	490a      	ldr	r1, [pc, #40]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0310 	and.w	r3, r3, #16
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d004      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007fc6:	4b06      	ldr	r3, [pc, #24]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007fc8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	40007000 	.word	0x40007000
 8007fd8:	40023800 	.word	0x40023800
 8007fdc:	42470e40 	.word	0x42470e40
 8007fe0:	424711e0 	.word	0x424711e0

08007fe4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e025      	b.n	8008044 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	d106      	bne.n	8008012 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7fb f8af 	bl	8003170 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2202      	movs	r2, #2
 8008016:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3304      	adds	r3, #4
 8008022:	4619      	mov	r1, r3
 8008024:	4610      	mov	r0, r2
 8008026:	f001 fe91 	bl	8009d4c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6818      	ldr	r0, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	461a      	mov	r2, r3
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	f001 fee6 	bl	8009e06 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800805e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008060:	7dfb      	ldrb	r3, [r7, #23]
 8008062:	2b02      	cmp	r3, #2
 8008064:	d101      	bne.n	800806a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008066:	2302      	movs	r3, #2
 8008068:	e021      	b.n	80080ae <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800806a:	7dfb      	ldrb	r3, [r7, #23]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d002      	beq.n	8008076 <HAL_SDRAM_SendCommand+0x2a>
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	2b05      	cmp	r3, #5
 8008074:	d118      	bne.n	80080a8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2202      	movs	r2, #2
 800807a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	68b9      	ldr	r1, [r7, #8]
 8008086:	4618      	mov	r0, r3
 8008088:	f001 ff26 	bl	8009ed8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b02      	cmp	r3, #2
 8008092:	d104      	bne.n	800809e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2205      	movs	r2, #5
 8008098:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800809c:	e006      	b.n	80080ac <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80080a6:	e001      	b.n	80080ac <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e000      	b.n	80080ae <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b082      	sub	sp, #8
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d101      	bne.n	80080d0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80080cc:	2302      	movs	r3, #2
 80080ce:	e016      	b.n	80080fe <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d10f      	bne.n	80080fc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2202      	movs	r2, #2
 80080e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f001 ff31 	bl	8009f52 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	e000      	b.n	80080fe <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b082      	sub	sp, #8
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e07b      	b.n	8008210 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811c:	2b00      	cmp	r3, #0
 800811e:	d108      	bne.n	8008132 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008128:	d009      	beq.n	800813e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	61da      	str	r2, [r3, #28]
 8008130:	e005      	b.n	800813e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b00      	cmp	r3, #0
 800814e:	d106      	bne.n	800815e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7fa fe4f 	bl	8002dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2202      	movs	r2, #2
 8008162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008174:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008186:	431a      	orrs	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008190:	431a      	orrs	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f003 0302 	and.w	r3, r3, #2
 800819a:	431a      	orrs	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	431a      	orrs	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081b8:	431a      	orrs	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c2:	ea42 0103 	orr.w	r1, r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	0c1b      	lsrs	r3, r3, #16
 80081dc:	f003 0104 	and.w	r1, r3, #4
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	f003 0210 	and.w	r2, r3, #16
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	69da      	ldr	r2, [r3, #28]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e01a      	b.n	8008260 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2202      	movs	r2, #2
 800822e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008240:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7fa fe22 	bl	8002e8c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	603b      	str	r3, [r7, #0]
 8008274:	4613      	mov	r3, r2
 8008276:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008282:	2b01      	cmp	r3, #1
 8008284:	d101      	bne.n	800828a <HAL_SPI_Transmit+0x22>
 8008286:	2302      	movs	r3, #2
 8008288:	e126      	b.n	80084d8 <HAL_SPI_Transmit+0x270>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008292:	f7fb f8d9 	bl	8003448 <HAL_GetTick>
 8008296:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008298:	88fb      	ldrh	r3, [r7, #6]
 800829a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d002      	beq.n	80082ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80082a8:	2302      	movs	r3, #2
 80082aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80082ac:	e10b      	b.n	80084c6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <HAL_SPI_Transmit+0x52>
 80082b4:	88fb      	ldrh	r3, [r7, #6]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d102      	bne.n	80082c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80082be:	e102      	b.n	80084c6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2203      	movs	r2, #3
 80082c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	88fa      	ldrh	r2, [r7, #6]
 80082d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	88fa      	ldrh	r2, [r7, #6]
 80082de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008306:	d10f      	bne.n	8008328 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008316:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008326:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008332:	2b40      	cmp	r3, #64	; 0x40
 8008334:	d007      	beq.n	8008346 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008344:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800834e:	d14b      	bne.n	80083e8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <HAL_SPI_Transmit+0xf6>
 8008358:	8afb      	ldrh	r3, [r7, #22]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d13e      	bne.n	80083dc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008362:	881a      	ldrh	r2, [r3, #0]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836e:	1c9a      	adds	r2, r3, #2
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008378:	b29b      	uxth	r3, r3
 800837a:	3b01      	subs	r3, #1
 800837c:	b29a      	uxth	r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008382:	e02b      	b.n	80083dc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b02      	cmp	r3, #2
 8008390:	d112      	bne.n	80083b8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008396:	881a      	ldrh	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a2:	1c9a      	adds	r2, r3, #2
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	3b01      	subs	r3, #1
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80083b6:	e011      	b.n	80083dc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083b8:	f7fb f846 	bl	8003448 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d803      	bhi.n	80083d0 <HAL_SPI_Transmit+0x168>
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ce:	d102      	bne.n	80083d6 <HAL_SPI_Transmit+0x16e>
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d102      	bne.n	80083dc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80083da:	e074      	b.n	80084c6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1ce      	bne.n	8008384 <HAL_SPI_Transmit+0x11c>
 80083e6:	e04c      	b.n	8008482 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d002      	beq.n	80083f6 <HAL_SPI_Transmit+0x18e>
 80083f0:	8afb      	ldrh	r3, [r7, #22]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d140      	bne.n	8008478 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	330c      	adds	r3, #12
 8008400:	7812      	ldrb	r2, [r2, #0]
 8008402:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008412:	b29b      	uxth	r3, r3
 8008414:	3b01      	subs	r3, #1
 8008416:	b29a      	uxth	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800841c:	e02c      	b.n	8008478 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f003 0302 	and.w	r3, r3, #2
 8008428:	2b02      	cmp	r3, #2
 800842a:	d113      	bne.n	8008454 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	330c      	adds	r3, #12
 8008436:	7812      	ldrb	r2, [r2, #0]
 8008438:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843e:	1c5a      	adds	r2, r3, #1
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008448:	b29b      	uxth	r3, r3
 800844a:	3b01      	subs	r3, #1
 800844c:	b29a      	uxth	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	86da      	strh	r2, [r3, #54]	; 0x36
 8008452:	e011      	b.n	8008478 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008454:	f7fa fff8 	bl	8003448 <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	d803      	bhi.n	800846c <HAL_SPI_Transmit+0x204>
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846a:	d102      	bne.n	8008472 <HAL_SPI_Transmit+0x20a>
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d102      	bne.n	8008478 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008476:	e026      	b.n	80084c6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800847c:	b29b      	uxth	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1cd      	bne.n	800841e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 fbda 	bl	8008c40 <SPI_EndRxTxTransaction>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d002      	beq.n	8008498 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2220      	movs	r2, #32
 8008496:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10a      	bne.n	80084b6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084a0:	2300      	movs	r3, #0
 80084a2:	613b      	str	r3, [r7, #16]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	613b      	str	r3, [r7, #16]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	613b      	str	r3, [r7, #16]
 80084b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d002      	beq.n	80084c4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	77fb      	strb	r3, [r7, #31]
 80084c2:	e000      	b.n	80084c6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80084c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80084d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3720      	adds	r7, #32
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	603b      	str	r3, [r7, #0]
 80084ec:	4613      	mov	r3, r2
 80084ee:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084fc:	d112      	bne.n	8008524 <HAL_SPI_Receive+0x44>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10e      	bne.n	8008524 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2204      	movs	r2, #4
 800850a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800850e:	88fa      	ldrh	r2, [r7, #6]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	4613      	mov	r3, r2
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	68b9      	ldr	r1, [r7, #8]
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 f8f1 	bl	8008702 <HAL_SPI_TransmitReceive>
 8008520:	4603      	mov	r3, r0
 8008522:	e0ea      	b.n	80086fa <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800852a:	2b01      	cmp	r3, #1
 800852c:	d101      	bne.n	8008532 <HAL_SPI_Receive+0x52>
 800852e:	2302      	movs	r3, #2
 8008530:	e0e3      	b.n	80086fa <HAL_SPI_Receive+0x21a>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800853a:	f7fa ff85 	bl	8003448 <HAL_GetTick>
 800853e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b01      	cmp	r3, #1
 800854a:	d002      	beq.n	8008552 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800854c:	2302      	movs	r3, #2
 800854e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008550:	e0ca      	b.n	80086e8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <HAL_SPI_Receive+0x7e>
 8008558:	88fb      	ldrh	r3, [r7, #6]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d102      	bne.n	8008564 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008562:	e0c1      	b.n	80086e8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2204      	movs	r2, #4
 8008568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	88fa      	ldrh	r2, [r7, #6]
 800857c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	88fa      	ldrh	r2, [r7, #6]
 8008582:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085aa:	d10f      	bne.n	80085cc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80085ca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d6:	2b40      	cmp	r3, #64	; 0x40
 80085d8:	d007      	beq.n	80085ea <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085e8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d162      	bne.n	80086b8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80085f2:	e02e      	b.n	8008652 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d115      	bne.n	800862e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f103 020c 	add.w	r2, r3, #12
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860e:	7812      	ldrb	r2, [r2, #0]
 8008610:	b2d2      	uxtb	r2, r2
 8008612:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008622:	b29b      	uxth	r3, r3
 8008624:	3b01      	subs	r3, #1
 8008626:	b29a      	uxth	r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800862c:	e011      	b.n	8008652 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800862e:	f7fa ff0b 	bl	8003448 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	429a      	cmp	r2, r3
 800863c:	d803      	bhi.n	8008646 <HAL_SPI_Receive+0x166>
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008644:	d102      	bne.n	800864c <HAL_SPI_Receive+0x16c>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d102      	bne.n	8008652 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008650:	e04a      	b.n	80086e8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008656:	b29b      	uxth	r3, r3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1cb      	bne.n	80085f4 <HAL_SPI_Receive+0x114>
 800865c:	e031      	b.n	80086c2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b01      	cmp	r3, #1
 800866a:	d113      	bne.n	8008694 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008676:	b292      	uxth	r2, r2
 8008678:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867e:	1c9a      	adds	r2, r3, #2
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008688:	b29b      	uxth	r3, r3
 800868a:	3b01      	subs	r3, #1
 800868c:	b29a      	uxth	r2, r3
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008692:	e011      	b.n	80086b8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008694:	f7fa fed8 	bl	8003448 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d803      	bhi.n	80086ac <HAL_SPI_Receive+0x1cc>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086aa:	d102      	bne.n	80086b2 <HAL_SPI_Receive+0x1d2>
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d102      	bne.n	80086b8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80086b6:	e017      	b.n	80086e8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086bc:	b29b      	uxth	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1cd      	bne.n	800865e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 fa54 	bl	8008b74 <SPI_EndRxTransaction>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2220      	movs	r2, #32
 80086d6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	75fb      	strb	r3, [r7, #23]
 80086e4:	e000      	b.n	80086e8 <HAL_SPI_Receive+0x208>
  }

error :
 80086e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b08c      	sub	sp, #48	; 0x30
 8008706:	af00      	add	r7, sp, #0
 8008708:	60f8      	str	r0, [r7, #12]
 800870a:	60b9      	str	r1, [r7, #8]
 800870c:	607a      	str	r2, [r7, #4]
 800870e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008710:	2301      	movs	r3, #1
 8008712:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008720:	2b01      	cmp	r3, #1
 8008722:	d101      	bne.n	8008728 <HAL_SPI_TransmitReceive+0x26>
 8008724:	2302      	movs	r3, #2
 8008726:	e18a      	b.n	8008a3e <HAL_SPI_TransmitReceive+0x33c>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008730:	f7fa fe8a 	bl	8003448 <HAL_GetTick>
 8008734:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800873c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008746:	887b      	ldrh	r3, [r7, #2]
 8008748:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800874a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800874e:	2b01      	cmp	r3, #1
 8008750:	d00f      	beq.n	8008772 <HAL_SPI_TransmitReceive+0x70>
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008758:	d107      	bne.n	800876a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d103      	bne.n	800876a <HAL_SPI_TransmitReceive+0x68>
 8008762:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008766:	2b04      	cmp	r3, #4
 8008768:	d003      	beq.n	8008772 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800876a:	2302      	movs	r3, #2
 800876c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008770:	e15b      	b.n	8008a2a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d005      	beq.n	8008784 <HAL_SPI_TransmitReceive+0x82>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d002      	beq.n	8008784 <HAL_SPI_TransmitReceive+0x82>
 800877e:	887b      	ldrh	r3, [r7, #2]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d103      	bne.n	800878c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800878a:	e14e      	b.n	8008a2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b04      	cmp	r3, #4
 8008796:	d003      	beq.n	80087a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2205      	movs	r2, #5
 800879c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	887a      	ldrh	r2, [r7, #2]
 80087b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	887a      	ldrh	r2, [r7, #2]
 80087b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	887a      	ldrh	r2, [r7, #2]
 80087c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	887a      	ldrh	r2, [r7, #2]
 80087c8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e0:	2b40      	cmp	r3, #64	; 0x40
 80087e2:	d007      	beq.n	80087f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087fc:	d178      	bne.n	80088f0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <HAL_SPI_TransmitReceive+0x10a>
 8008806:	8b7b      	ldrh	r3, [r7, #26]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d166      	bne.n	80088da <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008810:	881a      	ldrh	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881c:	1c9a      	adds	r2, r3, #2
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008826:	b29b      	uxth	r3, r3
 8008828:	3b01      	subs	r3, #1
 800882a:	b29a      	uxth	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008830:	e053      	b.n	80088da <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f003 0302 	and.w	r3, r3, #2
 800883c:	2b02      	cmp	r3, #2
 800883e:	d11b      	bne.n	8008878 <HAL_SPI_TransmitReceive+0x176>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008844:	b29b      	uxth	r3, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	d016      	beq.n	8008878 <HAL_SPI_TransmitReceive+0x176>
 800884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884c:	2b01      	cmp	r3, #1
 800884e:	d113      	bne.n	8008878 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008854:	881a      	ldrh	r2, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008860:	1c9a      	adds	r2, r3, #2
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800886a:	b29b      	uxth	r3, r3
 800886c:	3b01      	subs	r3, #1
 800886e:	b29a      	uxth	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008874:	2300      	movs	r3, #0
 8008876:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b01      	cmp	r3, #1
 8008884:	d119      	bne.n	80088ba <HAL_SPI_TransmitReceive+0x1b8>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800888a:	b29b      	uxth	r3, r3
 800888c:	2b00      	cmp	r3, #0
 800888e:	d014      	beq.n	80088ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889a:	b292      	uxth	r2, r2
 800889c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a2:	1c9a      	adds	r2, r3, #2
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	3b01      	subs	r3, #1
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088b6:	2301      	movs	r3, #1
 80088b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80088ba:	f7fa fdc5 	bl	8003448 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d807      	bhi.n	80088da <HAL_SPI_TransmitReceive+0x1d8>
 80088ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d0:	d003      	beq.n	80088da <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80088d8:	e0a7      	b.n	8008a2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088de:	b29b      	uxth	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1a6      	bne.n	8008832 <HAL_SPI_TransmitReceive+0x130>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1a1      	bne.n	8008832 <HAL_SPI_TransmitReceive+0x130>
 80088ee:	e07c      	b.n	80089ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <HAL_SPI_TransmitReceive+0x1fc>
 80088f8:	8b7b      	ldrh	r3, [r7, #26]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d16b      	bne.n	80089d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	330c      	adds	r3, #12
 8008908:	7812      	ldrb	r2, [r2, #0]
 800890a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800891a:	b29b      	uxth	r3, r3
 800891c:	3b01      	subs	r3, #1
 800891e:	b29a      	uxth	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008924:	e057      	b.n	80089d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f003 0302 	and.w	r3, r3, #2
 8008930:	2b02      	cmp	r3, #2
 8008932:	d11c      	bne.n	800896e <HAL_SPI_TransmitReceive+0x26c>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d017      	beq.n	800896e <HAL_SPI_TransmitReceive+0x26c>
 800893e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008940:	2b01      	cmp	r3, #1
 8008942:	d114      	bne.n	800896e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	330c      	adds	r3, #12
 800894e:	7812      	ldrb	r2, [r2, #0]
 8008950:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008960:	b29b      	uxth	r3, r3
 8008962:	3b01      	subs	r3, #1
 8008964:	b29a      	uxth	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	2b01      	cmp	r3, #1
 800897a:	d119      	bne.n	80089b0 <HAL_SPI_TransmitReceive+0x2ae>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008980:	b29b      	uxth	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d014      	beq.n	80089b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68da      	ldr	r2, [r3, #12]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008990:	b2d2      	uxtb	r2, r2
 8008992:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008998:	1c5a      	adds	r2, r3, #1
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	3b01      	subs	r3, #1
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80089ac:	2301      	movs	r3, #1
 80089ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80089b0:	f7fa fd4a 	bl	8003448 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089bc:	429a      	cmp	r2, r3
 80089be:	d803      	bhi.n	80089c8 <HAL_SPI_TransmitReceive+0x2c6>
 80089c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c6:	d102      	bne.n	80089ce <HAL_SPI_TransmitReceive+0x2cc>
 80089c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d103      	bne.n	80089d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80089d4:	e029      	b.n	8008a2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089da:	b29b      	uxth	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1a2      	bne.n	8008926 <HAL_SPI_TransmitReceive+0x224>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d19d      	bne.n	8008926 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 f926 	bl	8008c40 <SPI_EndRxTxTransaction>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d006      	beq.n	8008a08 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2220      	movs	r2, #32
 8008a04:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008a06:	e010      	b.n	8008a2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10b      	bne.n	8008a28 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a10:	2300      	movs	r3, #0
 8008a12:	617b      	str	r3, [r7, #20]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	617b      	str	r3, [r7, #20]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	617b      	str	r3, [r7, #20]
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	e000      	b.n	8008a2a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008a28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3730      	adds	r7, #48	; 0x30
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a54:	b2db      	uxtb	r3, r3
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
	...

08008a64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	4613      	mov	r3, r2
 8008a72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a74:	f7fa fce8 	bl	8003448 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7c:	1a9b      	subs	r3, r3, r2
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	4413      	add	r3, r2
 8008a82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a84:	f7fa fce0 	bl	8003448 <HAL_GetTick>
 8008a88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a8a:	4b39      	ldr	r3, [pc, #228]	; (8008b70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	015b      	lsls	r3, r3, #5
 8008a90:	0d1b      	lsrs	r3, r3, #20
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	fb02 f303 	mul.w	r3, r2, r3
 8008a98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a9a:	e054      	b.n	8008b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa2:	d050      	beq.n	8008b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008aa4:	f7fa fcd0 	bl	8003448 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	69fa      	ldr	r2, [r7, #28]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d902      	bls.n	8008aba <SPI_WaitFlagStateUntilTimeout+0x56>
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d13d      	bne.n	8008b36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008ac8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ad2:	d111      	bne.n	8008af8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008adc:	d004      	beq.n	8008ae8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ae6:	d107      	bne.n	8008af8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008af6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b00:	d10f      	bne.n	8008b22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e017      	b.n	8008b66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	3b01      	subs	r3, #1
 8008b44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	689a      	ldr	r2, [r3, #8]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	bf0c      	ite	eq
 8008b56:	2301      	moveq	r3, #1
 8008b58:	2300      	movne	r3, #0
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	79fb      	ldrb	r3, [r7, #7]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d19b      	bne.n	8008a9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3720      	adds	r7, #32
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	2000005c 	.word	0x2000005c

08008b74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af02      	add	r7, sp, #8
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b88:	d111      	bne.n	8008bae <SPI_EndRxTransaction+0x3a>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b92:	d004      	beq.n	8008b9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b9c:	d107      	bne.n	8008bae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bb6:	d12a      	bne.n	8008c0e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bc0:	d012      	beq.n	8008be8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	2180      	movs	r1, #128	; 0x80
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f7ff ff49 	bl	8008a64 <SPI_WaitFlagStateUntilTimeout>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d02d      	beq.n	8008c34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bdc:	f043 0220 	orr.w	r2, r3, #32
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e026      	b.n	8008c36 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f7ff ff36 	bl	8008a64 <SPI_WaitFlagStateUntilTimeout>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d01a      	beq.n	8008c34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c02:	f043 0220 	orr.w	r2, r3, #32
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e013      	b.n	8008c36 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2200      	movs	r2, #0
 8008c16:	2101      	movs	r1, #1
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f7ff ff23 	bl	8008a64 <SPI_WaitFlagStateUntilTimeout>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d007      	beq.n	8008c34 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c28:	f043 0220 	orr.w	r2, r3, #32
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e000      	b.n	8008c36 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
	...

08008c40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af02      	add	r7, sp, #8
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008c4c:	4b1b      	ldr	r3, [pc, #108]	; (8008cbc <SPI_EndRxTxTransaction+0x7c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a1b      	ldr	r2, [pc, #108]	; (8008cc0 <SPI_EndRxTxTransaction+0x80>)
 8008c52:	fba2 2303 	umull	r2, r3, r2, r3
 8008c56:	0d5b      	lsrs	r3, r3, #21
 8008c58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c5c:	fb02 f303 	mul.w	r3, r2, r3
 8008c60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c6a:	d112      	bne.n	8008c92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2200      	movs	r2, #0
 8008c74:	2180      	movs	r1, #128	; 0x80
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f7ff fef4 	bl	8008a64 <SPI_WaitFlagStateUntilTimeout>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d016      	beq.n	8008cb0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c86:	f043 0220 	orr.w	r2, r3, #32
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e00f      	b.n	8008cb2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00a      	beq.n	8008cae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca8:	2b80      	cmp	r3, #128	; 0x80
 8008caa:	d0f2      	beq.n	8008c92 <SPI_EndRxTxTransaction+0x52>
 8008cac:	e000      	b.n	8008cb0 <SPI_EndRxTxTransaction+0x70>
        break;
 8008cae:	bf00      	nop
  }

  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	2000005c 	.word	0x2000005c
 8008cc0:	165e9f81 	.word	0x165e9f81

08008cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e041      	b.n	8008d5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d106      	bne.n	8008cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7fa f8ec 	bl	8002ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f000 fa96 	bl	8009234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
	...

08008d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d001      	beq.n	8008d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e04e      	b.n	8008e1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68da      	ldr	r2, [r3, #12]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f042 0201 	orr.w	r2, r2, #1
 8008d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a23      	ldr	r2, [pc, #140]	; (8008e28 <HAL_TIM_Base_Start_IT+0xc4>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d022      	beq.n	8008de4 <HAL_TIM_Base_Start_IT+0x80>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da6:	d01d      	beq.n	8008de4 <HAL_TIM_Base_Start_IT+0x80>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a1f      	ldr	r2, [pc, #124]	; (8008e2c <HAL_TIM_Base_Start_IT+0xc8>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d018      	beq.n	8008de4 <HAL_TIM_Base_Start_IT+0x80>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a1e      	ldr	r2, [pc, #120]	; (8008e30 <HAL_TIM_Base_Start_IT+0xcc>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d013      	beq.n	8008de4 <HAL_TIM_Base_Start_IT+0x80>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a1c      	ldr	r2, [pc, #112]	; (8008e34 <HAL_TIM_Base_Start_IT+0xd0>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d00e      	beq.n	8008de4 <HAL_TIM_Base_Start_IT+0x80>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a1b      	ldr	r2, [pc, #108]	; (8008e38 <HAL_TIM_Base_Start_IT+0xd4>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d009      	beq.n	8008de4 <HAL_TIM_Base_Start_IT+0x80>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a19      	ldr	r2, [pc, #100]	; (8008e3c <HAL_TIM_Base_Start_IT+0xd8>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d004      	beq.n	8008de4 <HAL_TIM_Base_Start_IT+0x80>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a18      	ldr	r2, [pc, #96]	; (8008e40 <HAL_TIM_Base_Start_IT+0xdc>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d111      	bne.n	8008e08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f003 0307 	and.w	r3, r3, #7
 8008dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b06      	cmp	r3, #6
 8008df4:	d010      	beq.n	8008e18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f042 0201 	orr.w	r2, r2, #1
 8008e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e06:	e007      	b.n	8008e18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f042 0201 	orr.w	r2, r2, #1
 8008e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3714      	adds	r7, #20
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	40010000 	.word	0x40010000
 8008e2c:	40000400 	.word	0x40000400
 8008e30:	40000800 	.word	0x40000800
 8008e34:	40000c00 	.word	0x40000c00
 8008e38:	40010400 	.word	0x40010400
 8008e3c:	40014000 	.word	0x40014000
 8008e40:	40001800 	.word	0x40001800

08008e44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	f003 0302 	and.w	r3, r3, #2
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d122      	bne.n	8008ea0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f003 0302 	and.w	r3, r3, #2
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d11b      	bne.n	8008ea0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f06f 0202 	mvn.w	r2, #2
 8008e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	f003 0303 	and.w	r3, r3, #3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f9b5 	bl	80091f6 <HAL_TIM_IC_CaptureCallback>
 8008e8c:	e005      	b.n	8008e9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f9a7 	bl	80091e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f9b8 	bl	800920a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	f003 0304 	and.w	r3, r3, #4
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	d122      	bne.n	8008ef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	f003 0304 	and.w	r3, r3, #4
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	d11b      	bne.n	8008ef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f06f 0204 	mvn.w	r2, #4
 8008ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2202      	movs	r2, #2
 8008eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f98b 	bl	80091f6 <HAL_TIM_IC_CaptureCallback>
 8008ee0:	e005      	b.n	8008eee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f97d 	bl	80091e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f98e 	bl	800920a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	f003 0308 	and.w	r3, r3, #8
 8008efe:	2b08      	cmp	r3, #8
 8008f00:	d122      	bne.n	8008f48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f003 0308 	and.w	r3, r3, #8
 8008f0c:	2b08      	cmp	r3, #8
 8008f0e:	d11b      	bne.n	8008f48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f06f 0208 	mvn.w	r2, #8
 8008f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2204      	movs	r2, #4
 8008f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	f003 0303 	and.w	r3, r3, #3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f961 	bl	80091f6 <HAL_TIM_IC_CaptureCallback>
 8008f34:	e005      	b.n	8008f42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f953 	bl	80091e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f964 	bl	800920a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	f003 0310 	and.w	r3, r3, #16
 8008f52:	2b10      	cmp	r3, #16
 8008f54:	d122      	bne.n	8008f9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	f003 0310 	and.w	r3, r3, #16
 8008f60:	2b10      	cmp	r3, #16
 8008f62:	d11b      	bne.n	8008f9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f06f 0210 	mvn.w	r2, #16
 8008f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2208      	movs	r2, #8
 8008f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f937 	bl	80091f6 <HAL_TIM_IC_CaptureCallback>
 8008f88:	e005      	b.n	8008f96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f929 	bl	80091e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f93a 	bl	800920a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d10e      	bne.n	8008fc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d107      	bne.n	8008fc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f06f 0201 	mvn.w	r2, #1
 8008fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7f8 fc70 	bl	80018a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd2:	2b80      	cmp	r3, #128	; 0x80
 8008fd4:	d10e      	bne.n	8008ff4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe0:	2b80      	cmp	r3, #128	; 0x80
 8008fe2:	d107      	bne.n	8008ff4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fae0 	bl	80095b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffe:	2b40      	cmp	r3, #64	; 0x40
 8009000:	d10e      	bne.n	8009020 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900c:	2b40      	cmp	r3, #64	; 0x40
 800900e:	d107      	bne.n	8009020 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f8ff 	bl	800921e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	f003 0320 	and.w	r3, r3, #32
 800902a:	2b20      	cmp	r3, #32
 800902c:	d10e      	bne.n	800904c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f003 0320 	and.w	r3, r3, #32
 8009038:	2b20      	cmp	r3, #32
 800903a:	d107      	bne.n	800904c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f06f 0220 	mvn.w	r2, #32
 8009044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 faaa 	bl	80095a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800904c:	bf00      	nop
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009068:	2b01      	cmp	r3, #1
 800906a:	d101      	bne.n	8009070 <HAL_TIM_ConfigClockSource+0x1c>
 800906c:	2302      	movs	r3, #2
 800906e:	e0b4      	b.n	80091da <HAL_TIM_ConfigClockSource+0x186>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2202      	movs	r2, #2
 800907c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800908e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009096:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090a8:	d03e      	beq.n	8009128 <HAL_TIM_ConfigClockSource+0xd4>
 80090aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090ae:	f200 8087 	bhi.w	80091c0 <HAL_TIM_ConfigClockSource+0x16c>
 80090b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b6:	f000 8086 	beq.w	80091c6 <HAL_TIM_ConfigClockSource+0x172>
 80090ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090be:	d87f      	bhi.n	80091c0 <HAL_TIM_ConfigClockSource+0x16c>
 80090c0:	2b70      	cmp	r3, #112	; 0x70
 80090c2:	d01a      	beq.n	80090fa <HAL_TIM_ConfigClockSource+0xa6>
 80090c4:	2b70      	cmp	r3, #112	; 0x70
 80090c6:	d87b      	bhi.n	80091c0 <HAL_TIM_ConfigClockSource+0x16c>
 80090c8:	2b60      	cmp	r3, #96	; 0x60
 80090ca:	d050      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x11a>
 80090cc:	2b60      	cmp	r3, #96	; 0x60
 80090ce:	d877      	bhi.n	80091c0 <HAL_TIM_ConfigClockSource+0x16c>
 80090d0:	2b50      	cmp	r3, #80	; 0x50
 80090d2:	d03c      	beq.n	800914e <HAL_TIM_ConfigClockSource+0xfa>
 80090d4:	2b50      	cmp	r3, #80	; 0x50
 80090d6:	d873      	bhi.n	80091c0 <HAL_TIM_ConfigClockSource+0x16c>
 80090d8:	2b40      	cmp	r3, #64	; 0x40
 80090da:	d058      	beq.n	800918e <HAL_TIM_ConfigClockSource+0x13a>
 80090dc:	2b40      	cmp	r3, #64	; 0x40
 80090de:	d86f      	bhi.n	80091c0 <HAL_TIM_ConfigClockSource+0x16c>
 80090e0:	2b30      	cmp	r3, #48	; 0x30
 80090e2:	d064      	beq.n	80091ae <HAL_TIM_ConfigClockSource+0x15a>
 80090e4:	2b30      	cmp	r3, #48	; 0x30
 80090e6:	d86b      	bhi.n	80091c0 <HAL_TIM_ConfigClockSource+0x16c>
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	d060      	beq.n	80091ae <HAL_TIM_ConfigClockSource+0x15a>
 80090ec:	2b20      	cmp	r3, #32
 80090ee:	d867      	bhi.n	80091c0 <HAL_TIM_ConfigClockSource+0x16c>
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d05c      	beq.n	80091ae <HAL_TIM_ConfigClockSource+0x15a>
 80090f4:	2b10      	cmp	r3, #16
 80090f6:	d05a      	beq.n	80091ae <HAL_TIM_ConfigClockSource+0x15a>
 80090f8:	e062      	b.n	80091c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6818      	ldr	r0, [r3, #0]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	6899      	ldr	r1, [r3, #8]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	f000 f9ad 	bl	8009468 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800911c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	609a      	str	r2, [r3, #8]
      break;
 8009126:	e04f      	b.n	80091c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6818      	ldr	r0, [r3, #0]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	6899      	ldr	r1, [r3, #8]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	685a      	ldr	r2, [r3, #4]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	f000 f996 	bl	8009468 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	689a      	ldr	r2, [r3, #8]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800914a:	609a      	str	r2, [r3, #8]
      break;
 800914c:	e03c      	b.n	80091c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6818      	ldr	r0, [r3, #0]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	6859      	ldr	r1, [r3, #4]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	461a      	mov	r2, r3
 800915c:	f000 f90a 	bl	8009374 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2150      	movs	r1, #80	; 0x50
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f963 	bl	8009432 <TIM_ITRx_SetConfig>
      break;
 800916c:	e02c      	b.n	80091c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6818      	ldr	r0, [r3, #0]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	6859      	ldr	r1, [r3, #4]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	461a      	mov	r2, r3
 800917c:	f000 f929 	bl	80093d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2160      	movs	r1, #96	; 0x60
 8009186:	4618      	mov	r0, r3
 8009188:	f000 f953 	bl	8009432 <TIM_ITRx_SetConfig>
      break;
 800918c:	e01c      	b.n	80091c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	6859      	ldr	r1, [r3, #4]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	461a      	mov	r2, r3
 800919c:	f000 f8ea 	bl	8009374 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2140      	movs	r1, #64	; 0x40
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 f943 	bl	8009432 <TIM_ITRx_SetConfig>
      break;
 80091ac:	e00c      	b.n	80091c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4619      	mov	r1, r3
 80091b8:	4610      	mov	r0, r2
 80091ba:	f000 f93a 	bl	8009432 <TIM_ITRx_SetConfig>
      break;
 80091be:	e003      	b.n	80091c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	73fb      	strb	r3, [r7, #15]
      break;
 80091c4:	e000      	b.n	80091c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80091c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091ea:	bf00      	nop
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091fe:	bf00      	nop
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009212:	bf00      	nop
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800921e:	b480      	push	{r7}
 8009220:	b083      	sub	sp, #12
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
	...

08009234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a40      	ldr	r2, [pc, #256]	; (8009348 <TIM_Base_SetConfig+0x114>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d013      	beq.n	8009274 <TIM_Base_SetConfig+0x40>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009252:	d00f      	beq.n	8009274 <TIM_Base_SetConfig+0x40>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a3d      	ldr	r2, [pc, #244]	; (800934c <TIM_Base_SetConfig+0x118>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d00b      	beq.n	8009274 <TIM_Base_SetConfig+0x40>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a3c      	ldr	r2, [pc, #240]	; (8009350 <TIM_Base_SetConfig+0x11c>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d007      	beq.n	8009274 <TIM_Base_SetConfig+0x40>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a3b      	ldr	r2, [pc, #236]	; (8009354 <TIM_Base_SetConfig+0x120>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d003      	beq.n	8009274 <TIM_Base_SetConfig+0x40>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a3a      	ldr	r2, [pc, #232]	; (8009358 <TIM_Base_SetConfig+0x124>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d108      	bne.n	8009286 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	4313      	orrs	r3, r2
 8009284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a2f      	ldr	r2, [pc, #188]	; (8009348 <TIM_Base_SetConfig+0x114>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d02b      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009294:	d027      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a2c      	ldr	r2, [pc, #176]	; (800934c <TIM_Base_SetConfig+0x118>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d023      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a2b      	ldr	r2, [pc, #172]	; (8009350 <TIM_Base_SetConfig+0x11c>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d01f      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a2a      	ldr	r2, [pc, #168]	; (8009354 <TIM_Base_SetConfig+0x120>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d01b      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a29      	ldr	r2, [pc, #164]	; (8009358 <TIM_Base_SetConfig+0x124>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d017      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a28      	ldr	r2, [pc, #160]	; (800935c <TIM_Base_SetConfig+0x128>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d013      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a27      	ldr	r2, [pc, #156]	; (8009360 <TIM_Base_SetConfig+0x12c>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d00f      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a26      	ldr	r2, [pc, #152]	; (8009364 <TIM_Base_SetConfig+0x130>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d00b      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a25      	ldr	r2, [pc, #148]	; (8009368 <TIM_Base_SetConfig+0x134>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d007      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a24      	ldr	r2, [pc, #144]	; (800936c <TIM_Base_SetConfig+0x138>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d003      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a23      	ldr	r2, [pc, #140]	; (8009370 <TIM_Base_SetConfig+0x13c>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d108      	bne.n	80092f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	4313      	orrs	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	689a      	ldr	r2, [r3, #8]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a0a      	ldr	r2, [pc, #40]	; (8009348 <TIM_Base_SetConfig+0x114>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d003      	beq.n	800932c <TIM_Base_SetConfig+0xf8>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a0c      	ldr	r2, [pc, #48]	; (8009358 <TIM_Base_SetConfig+0x124>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d103      	bne.n	8009334 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	691a      	ldr	r2, [r3, #16]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	615a      	str	r2, [r3, #20]
}
 800933a:	bf00      	nop
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	40010000 	.word	0x40010000
 800934c:	40000400 	.word	0x40000400
 8009350:	40000800 	.word	0x40000800
 8009354:	40000c00 	.word	0x40000c00
 8009358:	40010400 	.word	0x40010400
 800935c:	40014000 	.word	0x40014000
 8009360:	40014400 	.word	0x40014400
 8009364:	40014800 	.word	0x40014800
 8009368:	40001800 	.word	0x40001800
 800936c:	40001c00 	.word	0x40001c00
 8009370:	40002000 	.word	0x40002000

08009374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	f023 0201 	bic.w	r2, r3, #1
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800939e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	011b      	lsls	r3, r3, #4
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f023 030a 	bic.w	r3, r3, #10
 80093b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	621a      	str	r2, [r3, #32]
}
 80093c6:	bf00      	nop
 80093c8:	371c      	adds	r7, #28
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b087      	sub	sp, #28
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	60f8      	str	r0, [r7, #12]
 80093da:	60b9      	str	r1, [r7, #8]
 80093dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6a1b      	ldr	r3, [r3, #32]
 80093e2:	f023 0210 	bic.w	r2, r3, #16
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6a1b      	ldr	r3, [r3, #32]
 80093f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	031b      	lsls	r3, r3, #12
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	4313      	orrs	r3, r2
 8009406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800940e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	011b      	lsls	r3, r3, #4
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	4313      	orrs	r3, r2
 8009418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	621a      	str	r2, [r3, #32]
}
 8009426:	bf00      	nop
 8009428:	371c      	adds	r7, #28
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009432:	b480      	push	{r7}
 8009434:	b085      	sub	sp, #20
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4313      	orrs	r3, r2
 8009450:	f043 0307 	orr.w	r3, r3, #7
 8009454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	609a      	str	r2, [r3, #8]
}
 800945c:	bf00      	nop
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	021a      	lsls	r2, r3, #8
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	431a      	orrs	r2, r3
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	4313      	orrs	r3, r2
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	4313      	orrs	r3, r2
 8009494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	609a      	str	r2, [r3, #8]
}
 800949c:	bf00      	nop
 800949e:	371c      	adds	r7, #28
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d101      	bne.n	80094c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094bc:	2302      	movs	r3, #2
 80094be:	e05a      	b.n	8009576 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2202      	movs	r2, #2
 80094cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a21      	ldr	r2, [pc, #132]	; (8009584 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d022      	beq.n	800954a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800950c:	d01d      	beq.n	800954a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a1d      	ldr	r2, [pc, #116]	; (8009588 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d018      	beq.n	800954a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a1b      	ldr	r2, [pc, #108]	; (800958c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d013      	beq.n	800954a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a1a      	ldr	r2, [pc, #104]	; (8009590 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d00e      	beq.n	800954a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a18      	ldr	r2, [pc, #96]	; (8009594 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d009      	beq.n	800954a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a17      	ldr	r2, [pc, #92]	; (8009598 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d004      	beq.n	800954a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a15      	ldr	r2, [pc, #84]	; (800959c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d10c      	bne.n	8009564 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	4313      	orrs	r3, r2
 800955a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	40010000 	.word	0x40010000
 8009588:	40000400 	.word	0x40000400
 800958c:	40000800 	.word	0x40000800
 8009590:	40000c00 	.word	0x40000c00
 8009594:	40010400 	.word	0x40010400
 8009598:	40014000 	.word	0x40014000
 800959c:	40001800 	.word	0x40001800

080095a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d101      	bne.n	80095da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e03f      	b.n	800965a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d106      	bne.n	80095f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7f9 fc8c 	bl	8002f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2224      	movs	r2, #36	; 0x24
 80095f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68da      	ldr	r2, [r3, #12]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800960a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f929 	bl	8009864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	691a      	ldr	r2, [r3, #16]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	695a      	ldr	r2, [r3, #20]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68da      	ldr	r2, [r3, #12]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2220      	movs	r2, #32
 800964c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2220      	movs	r2, #32
 8009654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b08a      	sub	sp, #40	; 0x28
 8009666:	af02      	add	r7, sp, #8
 8009668:	60f8      	str	r0, [r7, #12]
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	603b      	str	r3, [r7, #0]
 800966e:	4613      	mov	r3, r2
 8009670:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009672:	2300      	movs	r3, #0
 8009674:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2b20      	cmp	r3, #32
 8009680:	d17c      	bne.n	800977c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <HAL_UART_Transmit+0x2c>
 8009688:	88fb      	ldrh	r3, [r7, #6]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e075      	b.n	800977e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009698:	2b01      	cmp	r3, #1
 800969a:	d101      	bne.n	80096a0 <HAL_UART_Transmit+0x3e>
 800969c:	2302      	movs	r3, #2
 800969e:	e06e      	b.n	800977e <HAL_UART_Transmit+0x11c>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2221      	movs	r2, #33	; 0x21
 80096b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096b6:	f7f9 fec7 	bl	8003448 <HAL_GetTick>
 80096ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	88fa      	ldrh	r2, [r7, #6]
 80096c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	88fa      	ldrh	r2, [r7, #6]
 80096c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096d0:	d108      	bne.n	80096e4 <HAL_UART_Transmit+0x82>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d104      	bne.n	80096e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80096da:	2300      	movs	r3, #0
 80096dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	61bb      	str	r3, [r7, #24]
 80096e2:	e003      	b.n	80096ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096e8:	2300      	movs	r3, #0
 80096ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80096f4:	e02a      	b.n	800974c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2200      	movs	r2, #0
 80096fe:	2180      	movs	r1, #128	; 0x80
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 f840 	bl	8009786 <UART_WaitOnFlagUntilTimeout>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800970c:	2303      	movs	r3, #3
 800970e:	e036      	b.n	800977e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10b      	bne.n	800972e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	461a      	mov	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009724:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	3302      	adds	r3, #2
 800972a:	61bb      	str	r3, [r7, #24]
 800972c:	e007      	b.n	800973e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	781a      	ldrb	r2, [r3, #0]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	3301      	adds	r3, #1
 800973c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009742:	b29b      	uxth	r3, r3
 8009744:	3b01      	subs	r3, #1
 8009746:	b29a      	uxth	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009750:	b29b      	uxth	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1cf      	bne.n	80096f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2200      	movs	r2, #0
 800975e:	2140      	movs	r1, #64	; 0x40
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f000 f810 	bl	8009786 <UART_WaitOnFlagUntilTimeout>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800976c:	2303      	movs	r3, #3
 800976e:	e006      	b.n	800977e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2220      	movs	r2, #32
 8009774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	e000      	b.n	800977e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800977c:	2302      	movs	r3, #2
  }
}
 800977e:	4618      	mov	r0, r3
 8009780:	3720      	adds	r7, #32
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b090      	sub	sp, #64	; 0x40
 800978a:	af00      	add	r7, sp, #0
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	603b      	str	r3, [r7, #0]
 8009792:	4613      	mov	r3, r2
 8009794:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009796:	e050      	b.n	800983a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800979a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979e:	d04c      	beq.n	800983a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80097a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d007      	beq.n	80097b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80097a6:	f7f9 fe4f 	bl	8003448 <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d241      	bcs.n	800983a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	330c      	adds	r3, #12
 80097bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c0:	e853 3f00 	ldrex	r3, [r3]
 80097c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80097cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	330c      	adds	r3, #12
 80097d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80097d6:	637a      	str	r2, [r7, #52]	; 0x34
 80097d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097de:	e841 2300 	strex	r3, r2, [r1]
 80097e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80097e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1e5      	bne.n	80097b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	3314      	adds	r3, #20
 80097f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	e853 3f00 	ldrex	r3, [r3]
 80097f8:	613b      	str	r3, [r7, #16]
   return(result);
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	f023 0301 	bic.w	r3, r3, #1
 8009800:	63bb      	str	r3, [r7, #56]	; 0x38
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3314      	adds	r3, #20
 8009808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800980a:	623a      	str	r2, [r7, #32]
 800980c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980e:	69f9      	ldr	r1, [r7, #28]
 8009810:	6a3a      	ldr	r2, [r7, #32]
 8009812:	e841 2300 	strex	r3, r2, [r1]
 8009816:	61bb      	str	r3, [r7, #24]
   return(result);
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1e5      	bne.n	80097ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2220      	movs	r2, #32
 8009822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2220      	movs	r2, #32
 800982a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	e00f      	b.n	800985a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	4013      	ands	r3, r2
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	429a      	cmp	r2, r3
 8009848:	bf0c      	ite	eq
 800984a:	2301      	moveq	r3, #1
 800984c:	2300      	movne	r3, #0
 800984e:	b2db      	uxtb	r3, r3
 8009850:	461a      	mov	r2, r3
 8009852:	79fb      	ldrb	r3, [r7, #7]
 8009854:	429a      	cmp	r2, r3
 8009856:	d09f      	beq.n	8009798 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3740      	adds	r7, #64	; 0x40
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
	...

08009864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009868:	b0c0      	sub	sp, #256	; 0x100
 800986a:	af00      	add	r7, sp, #0
 800986c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800987c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009880:	68d9      	ldr	r1, [r3, #12]
 8009882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	ea40 0301 	orr.w	r3, r0, r1
 800988c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800988e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009892:	689a      	ldr	r2, [r3, #8]
 8009894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	431a      	orrs	r2, r3
 800989c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	431a      	orrs	r2, r3
 80098a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098a8:	69db      	ldr	r3, [r3, #28]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80098b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80098bc:	f021 010c 	bic.w	r1, r1, #12
 80098c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098ca:	430b      	orrs	r3, r1
 80098cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80098da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098de:	6999      	ldr	r1, [r3, #24]
 80098e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	ea40 0301 	orr.w	r3, r0, r1
 80098ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80098ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	4b8f      	ldr	r3, [pc, #572]	; (8009b30 <UART_SetConfig+0x2cc>)
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d005      	beq.n	8009904 <UART_SetConfig+0xa0>
 80098f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	4b8d      	ldr	r3, [pc, #564]	; (8009b34 <UART_SetConfig+0x2d0>)
 8009900:	429a      	cmp	r2, r3
 8009902:	d104      	bne.n	800990e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009904:	f7fe f968 	bl	8007bd8 <HAL_RCC_GetPCLK2Freq>
 8009908:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800990c:	e003      	b.n	8009916 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800990e:	f7fe f94f 	bl	8007bb0 <HAL_RCC_GetPCLK1Freq>
 8009912:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800991a:	69db      	ldr	r3, [r3, #28]
 800991c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009920:	f040 810c 	bne.w	8009b3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009928:	2200      	movs	r2, #0
 800992a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800992e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009932:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009936:	4622      	mov	r2, r4
 8009938:	462b      	mov	r3, r5
 800993a:	1891      	adds	r1, r2, r2
 800993c:	65b9      	str	r1, [r7, #88]	; 0x58
 800993e:	415b      	adcs	r3, r3
 8009940:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009942:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009946:	4621      	mov	r1, r4
 8009948:	eb12 0801 	adds.w	r8, r2, r1
 800994c:	4629      	mov	r1, r5
 800994e:	eb43 0901 	adc.w	r9, r3, r1
 8009952:	f04f 0200 	mov.w	r2, #0
 8009956:	f04f 0300 	mov.w	r3, #0
 800995a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800995e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009966:	4690      	mov	r8, r2
 8009968:	4699      	mov	r9, r3
 800996a:	4623      	mov	r3, r4
 800996c:	eb18 0303 	adds.w	r3, r8, r3
 8009970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009974:	462b      	mov	r3, r5
 8009976:	eb49 0303 	adc.w	r3, r9, r3
 800997a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800997e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800998a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800998e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009992:	460b      	mov	r3, r1
 8009994:	18db      	adds	r3, r3, r3
 8009996:	653b      	str	r3, [r7, #80]	; 0x50
 8009998:	4613      	mov	r3, r2
 800999a:	eb42 0303 	adc.w	r3, r2, r3
 800999e:	657b      	str	r3, [r7, #84]	; 0x54
 80099a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80099a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80099a8:	f7f6 fc2a 	bl	8000200 <__aeabi_uldivmod>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	4b61      	ldr	r3, [pc, #388]	; (8009b38 <UART_SetConfig+0x2d4>)
 80099b2:	fba3 2302 	umull	r2, r3, r3, r2
 80099b6:	095b      	lsrs	r3, r3, #5
 80099b8:	011c      	lsls	r4, r3, #4
 80099ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099be:	2200      	movs	r2, #0
 80099c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80099c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80099c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80099cc:	4642      	mov	r2, r8
 80099ce:	464b      	mov	r3, r9
 80099d0:	1891      	adds	r1, r2, r2
 80099d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80099d4:	415b      	adcs	r3, r3
 80099d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80099dc:	4641      	mov	r1, r8
 80099de:	eb12 0a01 	adds.w	sl, r2, r1
 80099e2:	4649      	mov	r1, r9
 80099e4:	eb43 0b01 	adc.w	fp, r3, r1
 80099e8:	f04f 0200 	mov.w	r2, #0
 80099ec:	f04f 0300 	mov.w	r3, #0
 80099f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80099f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80099f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099fc:	4692      	mov	sl, r2
 80099fe:	469b      	mov	fp, r3
 8009a00:	4643      	mov	r3, r8
 8009a02:	eb1a 0303 	adds.w	r3, sl, r3
 8009a06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a0a:	464b      	mov	r3, r9
 8009a0c:	eb4b 0303 	adc.w	r3, fp, r3
 8009a10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009a24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	18db      	adds	r3, r3, r3
 8009a2c:	643b      	str	r3, [r7, #64]	; 0x40
 8009a2e:	4613      	mov	r3, r2
 8009a30:	eb42 0303 	adc.w	r3, r2, r3
 8009a34:	647b      	str	r3, [r7, #68]	; 0x44
 8009a36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009a3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009a3e:	f7f6 fbdf 	bl	8000200 <__aeabi_uldivmod>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	4611      	mov	r1, r2
 8009a48:	4b3b      	ldr	r3, [pc, #236]	; (8009b38 <UART_SetConfig+0x2d4>)
 8009a4a:	fba3 2301 	umull	r2, r3, r3, r1
 8009a4e:	095b      	lsrs	r3, r3, #5
 8009a50:	2264      	movs	r2, #100	; 0x64
 8009a52:	fb02 f303 	mul.w	r3, r2, r3
 8009a56:	1acb      	subs	r3, r1, r3
 8009a58:	00db      	lsls	r3, r3, #3
 8009a5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009a5e:	4b36      	ldr	r3, [pc, #216]	; (8009b38 <UART_SetConfig+0x2d4>)
 8009a60:	fba3 2302 	umull	r2, r3, r3, r2
 8009a64:	095b      	lsrs	r3, r3, #5
 8009a66:	005b      	lsls	r3, r3, #1
 8009a68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a6c:	441c      	add	r4, r3
 8009a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009a7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009a80:	4642      	mov	r2, r8
 8009a82:	464b      	mov	r3, r9
 8009a84:	1891      	adds	r1, r2, r2
 8009a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8009a88:	415b      	adcs	r3, r3
 8009a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a90:	4641      	mov	r1, r8
 8009a92:	1851      	adds	r1, r2, r1
 8009a94:	6339      	str	r1, [r7, #48]	; 0x30
 8009a96:	4649      	mov	r1, r9
 8009a98:	414b      	adcs	r3, r1
 8009a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a9c:	f04f 0200 	mov.w	r2, #0
 8009aa0:	f04f 0300 	mov.w	r3, #0
 8009aa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009aa8:	4659      	mov	r1, fp
 8009aaa:	00cb      	lsls	r3, r1, #3
 8009aac:	4651      	mov	r1, sl
 8009aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ab2:	4651      	mov	r1, sl
 8009ab4:	00ca      	lsls	r2, r1, #3
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4603      	mov	r3, r0
 8009abc:	4642      	mov	r2, r8
 8009abe:	189b      	adds	r3, r3, r2
 8009ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ac4:	464b      	mov	r3, r9
 8009ac6:	460a      	mov	r2, r1
 8009ac8:	eb42 0303 	adc.w	r3, r2, r3
 8009acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009adc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009ae0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	18db      	adds	r3, r3, r3
 8009ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009aea:	4613      	mov	r3, r2
 8009aec:	eb42 0303 	adc.w	r3, r2, r3
 8009af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009af6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009afa:	f7f6 fb81 	bl	8000200 <__aeabi_uldivmod>
 8009afe:	4602      	mov	r2, r0
 8009b00:	460b      	mov	r3, r1
 8009b02:	4b0d      	ldr	r3, [pc, #52]	; (8009b38 <UART_SetConfig+0x2d4>)
 8009b04:	fba3 1302 	umull	r1, r3, r3, r2
 8009b08:	095b      	lsrs	r3, r3, #5
 8009b0a:	2164      	movs	r1, #100	; 0x64
 8009b0c:	fb01 f303 	mul.w	r3, r1, r3
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	00db      	lsls	r3, r3, #3
 8009b14:	3332      	adds	r3, #50	; 0x32
 8009b16:	4a08      	ldr	r2, [pc, #32]	; (8009b38 <UART_SetConfig+0x2d4>)
 8009b18:	fba2 2303 	umull	r2, r3, r2, r3
 8009b1c:	095b      	lsrs	r3, r3, #5
 8009b1e:	f003 0207 	and.w	r2, r3, #7
 8009b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4422      	add	r2, r4
 8009b2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009b2c:	e105      	b.n	8009d3a <UART_SetConfig+0x4d6>
 8009b2e:	bf00      	nop
 8009b30:	40011000 	.word	0x40011000
 8009b34:	40011400 	.word	0x40011400
 8009b38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009b46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009b4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009b4e:	4642      	mov	r2, r8
 8009b50:	464b      	mov	r3, r9
 8009b52:	1891      	adds	r1, r2, r2
 8009b54:	6239      	str	r1, [r7, #32]
 8009b56:	415b      	adcs	r3, r3
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24
 8009b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b5e:	4641      	mov	r1, r8
 8009b60:	1854      	adds	r4, r2, r1
 8009b62:	4649      	mov	r1, r9
 8009b64:	eb43 0501 	adc.w	r5, r3, r1
 8009b68:	f04f 0200 	mov.w	r2, #0
 8009b6c:	f04f 0300 	mov.w	r3, #0
 8009b70:	00eb      	lsls	r3, r5, #3
 8009b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b76:	00e2      	lsls	r2, r4, #3
 8009b78:	4614      	mov	r4, r2
 8009b7a:	461d      	mov	r5, r3
 8009b7c:	4643      	mov	r3, r8
 8009b7e:	18e3      	adds	r3, r4, r3
 8009b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b84:	464b      	mov	r3, r9
 8009b86:	eb45 0303 	adc.w	r3, r5, r3
 8009b8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b9e:	f04f 0200 	mov.w	r2, #0
 8009ba2:	f04f 0300 	mov.w	r3, #0
 8009ba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009baa:	4629      	mov	r1, r5
 8009bac:	008b      	lsls	r3, r1, #2
 8009bae:	4621      	mov	r1, r4
 8009bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	008a      	lsls	r2, r1, #2
 8009bb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009bbc:	f7f6 fb20 	bl	8000200 <__aeabi_uldivmod>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	4b60      	ldr	r3, [pc, #384]	; (8009d48 <UART_SetConfig+0x4e4>)
 8009bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8009bca:	095b      	lsrs	r3, r3, #5
 8009bcc:	011c      	lsls	r4, r3, #4
 8009bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009bd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009bdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009be0:	4642      	mov	r2, r8
 8009be2:	464b      	mov	r3, r9
 8009be4:	1891      	adds	r1, r2, r2
 8009be6:	61b9      	str	r1, [r7, #24]
 8009be8:	415b      	adcs	r3, r3
 8009bea:	61fb      	str	r3, [r7, #28]
 8009bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009bf0:	4641      	mov	r1, r8
 8009bf2:	1851      	adds	r1, r2, r1
 8009bf4:	6139      	str	r1, [r7, #16]
 8009bf6:	4649      	mov	r1, r9
 8009bf8:	414b      	adcs	r3, r1
 8009bfa:	617b      	str	r3, [r7, #20]
 8009bfc:	f04f 0200 	mov.w	r2, #0
 8009c00:	f04f 0300 	mov.w	r3, #0
 8009c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c08:	4659      	mov	r1, fp
 8009c0a:	00cb      	lsls	r3, r1, #3
 8009c0c:	4651      	mov	r1, sl
 8009c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c12:	4651      	mov	r1, sl
 8009c14:	00ca      	lsls	r2, r1, #3
 8009c16:	4610      	mov	r0, r2
 8009c18:	4619      	mov	r1, r3
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	4642      	mov	r2, r8
 8009c1e:	189b      	adds	r3, r3, r2
 8009c20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c24:	464b      	mov	r3, r9
 8009c26:	460a      	mov	r2, r1
 8009c28:	eb42 0303 	adc.w	r3, r2, r3
 8009c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009c3c:	f04f 0200 	mov.w	r2, #0
 8009c40:	f04f 0300 	mov.w	r3, #0
 8009c44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009c48:	4649      	mov	r1, r9
 8009c4a:	008b      	lsls	r3, r1, #2
 8009c4c:	4641      	mov	r1, r8
 8009c4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c52:	4641      	mov	r1, r8
 8009c54:	008a      	lsls	r2, r1, #2
 8009c56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009c5a:	f7f6 fad1 	bl	8000200 <__aeabi_uldivmod>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4b39      	ldr	r3, [pc, #228]	; (8009d48 <UART_SetConfig+0x4e4>)
 8009c64:	fba3 1302 	umull	r1, r3, r3, r2
 8009c68:	095b      	lsrs	r3, r3, #5
 8009c6a:	2164      	movs	r1, #100	; 0x64
 8009c6c:	fb01 f303 	mul.w	r3, r1, r3
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	3332      	adds	r3, #50	; 0x32
 8009c76:	4a34      	ldr	r2, [pc, #208]	; (8009d48 <UART_SetConfig+0x4e4>)
 8009c78:	fba2 2303 	umull	r2, r3, r2, r3
 8009c7c:	095b      	lsrs	r3, r3, #5
 8009c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c82:	441c      	add	r4, r3
 8009c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c88:	2200      	movs	r2, #0
 8009c8a:	673b      	str	r3, [r7, #112]	; 0x70
 8009c8c:	677a      	str	r2, [r7, #116]	; 0x74
 8009c8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009c92:	4642      	mov	r2, r8
 8009c94:	464b      	mov	r3, r9
 8009c96:	1891      	adds	r1, r2, r2
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	415b      	adcs	r3, r3
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ca2:	4641      	mov	r1, r8
 8009ca4:	1851      	adds	r1, r2, r1
 8009ca6:	6039      	str	r1, [r7, #0]
 8009ca8:	4649      	mov	r1, r9
 8009caa:	414b      	adcs	r3, r1
 8009cac:	607b      	str	r3, [r7, #4]
 8009cae:	f04f 0200 	mov.w	r2, #0
 8009cb2:	f04f 0300 	mov.w	r3, #0
 8009cb6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009cba:	4659      	mov	r1, fp
 8009cbc:	00cb      	lsls	r3, r1, #3
 8009cbe:	4651      	mov	r1, sl
 8009cc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cc4:	4651      	mov	r1, sl
 8009cc6:	00ca      	lsls	r2, r1, #3
 8009cc8:	4610      	mov	r0, r2
 8009cca:	4619      	mov	r1, r3
 8009ccc:	4603      	mov	r3, r0
 8009cce:	4642      	mov	r2, r8
 8009cd0:	189b      	adds	r3, r3, r2
 8009cd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cd4:	464b      	mov	r3, r9
 8009cd6:	460a      	mov	r2, r1
 8009cd8:	eb42 0303 	adc.w	r3, r2, r3
 8009cdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	663b      	str	r3, [r7, #96]	; 0x60
 8009ce8:	667a      	str	r2, [r7, #100]	; 0x64
 8009cea:	f04f 0200 	mov.w	r2, #0
 8009cee:	f04f 0300 	mov.w	r3, #0
 8009cf2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009cf6:	4649      	mov	r1, r9
 8009cf8:	008b      	lsls	r3, r1, #2
 8009cfa:	4641      	mov	r1, r8
 8009cfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d00:	4641      	mov	r1, r8
 8009d02:	008a      	lsls	r2, r1, #2
 8009d04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009d08:	f7f6 fa7a 	bl	8000200 <__aeabi_uldivmod>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4b0d      	ldr	r3, [pc, #52]	; (8009d48 <UART_SetConfig+0x4e4>)
 8009d12:	fba3 1302 	umull	r1, r3, r3, r2
 8009d16:	095b      	lsrs	r3, r3, #5
 8009d18:	2164      	movs	r1, #100	; 0x64
 8009d1a:	fb01 f303 	mul.w	r3, r1, r3
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	011b      	lsls	r3, r3, #4
 8009d22:	3332      	adds	r3, #50	; 0x32
 8009d24:	4a08      	ldr	r2, [pc, #32]	; (8009d48 <UART_SetConfig+0x4e4>)
 8009d26:	fba2 2303 	umull	r2, r3, r2, r3
 8009d2a:	095b      	lsrs	r3, r3, #5
 8009d2c:	f003 020f 	and.w	r2, r3, #15
 8009d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4422      	add	r2, r4
 8009d38:	609a      	str	r2, [r3, #8]
}
 8009d3a:	bf00      	nop
 8009d3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009d40:	46bd      	mov	sp, r7
 8009d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d46:	bf00      	nop
 8009d48:	51eb851f 	.word	0x51eb851f

08009d4c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d123      	bne.n	8009da6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009d66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	6851      	ldr	r1, [r2, #4]
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	6892      	ldr	r2, [r2, #8]
 8009d72:	4311      	orrs	r1, r2
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	68d2      	ldr	r2, [r2, #12]
 8009d78:	4311      	orrs	r1, r2
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	6912      	ldr	r2, [r2, #16]
 8009d7e:	4311      	orrs	r1, r2
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	6952      	ldr	r2, [r2, #20]
 8009d84:	4311      	orrs	r1, r2
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	6992      	ldr	r2, [r2, #24]
 8009d8a:	4311      	orrs	r1, r2
 8009d8c:	683a      	ldr	r2, [r7, #0]
 8009d8e:	69d2      	ldr	r2, [r2, #28]
 8009d90:	4311      	orrs	r1, r2
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	6a12      	ldr	r2, [r2, #32]
 8009d96:	4311      	orrs	r1, r2
 8009d98:	683a      	ldr	r2, [r7, #0]
 8009d9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d9c:	430a      	orrs	r2, r1
 8009d9e:	431a      	orrs	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	e028      	b.n	8009df8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	69d9      	ldr	r1, [r3, #28]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	6a1b      	ldr	r3, [r3, #32]
 8009db6:	4319      	orrs	r1, r3
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbc:	430b      	orrs	r3, r1
 8009dbe:	431a      	orrs	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009dcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	6851      	ldr	r1, [r2, #4]
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	6892      	ldr	r2, [r2, #8]
 8009dd8:	4311      	orrs	r1, r2
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	68d2      	ldr	r2, [r2, #12]
 8009dde:	4311      	orrs	r1, r2
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	6912      	ldr	r2, [r2, #16]
 8009de4:	4311      	orrs	r1, r2
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	6952      	ldr	r2, [r2, #20]
 8009dea:	4311      	orrs	r1, r2
 8009dec:	683a      	ldr	r2, [r7, #0]
 8009dee:	6992      	ldr	r2, [r2, #24]
 8009df0:	430a      	orrs	r2, r1
 8009df2:	431a      	orrs	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009e06:	b480      	push	{r7}
 8009e08:	b085      	sub	sp, #20
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	60f8      	str	r0, [r7, #12]
 8009e0e:	60b9      	str	r1, [r7, #8]
 8009e10:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d128      	bne.n	8009e6a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	1e59      	subs	r1, r3, #1
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	011b      	lsls	r3, r3, #4
 8009e2e:	4319      	orrs	r1, r3
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	021b      	lsls	r3, r3, #8
 8009e38:	4319      	orrs	r1, r3
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	031b      	lsls	r3, r3, #12
 8009e42:	4319      	orrs	r1, r3
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	041b      	lsls	r3, r3, #16
 8009e4c:	4319      	orrs	r1, r3
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	695b      	ldr	r3, [r3, #20]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	051b      	lsls	r3, r3, #20
 8009e56:	4319      	orrs	r1, r3
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	699b      	ldr	r3, [r3, #24]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	061b      	lsls	r3, r3, #24
 8009e60:	430b      	orrs	r3, r1
 8009e62:	431a      	orrs	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	609a      	str	r2, [r3, #8]
 8009e68:	e02f      	b.n	8009eca <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	68d2      	ldr	r2, [r2, #12]
 8009e7a:	3a01      	subs	r2, #1
 8009e7c:	0311      	lsls	r1, r2, #12
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	6952      	ldr	r2, [r2, #20]
 8009e82:	3a01      	subs	r2, #1
 8009e84:	0512      	lsls	r2, r2, #20
 8009e86:	430a      	orrs	r2, r1
 8009e88:	431a      	orrs	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	1e59      	subs	r1, r3, #1
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	011b      	lsls	r3, r3, #4
 8009ea4:	4319      	orrs	r1, r3
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	021b      	lsls	r3, r3, #8
 8009eae:	4319      	orrs	r1, r3
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	041b      	lsls	r3, r3, #16
 8009eb8:	4319      	orrs	r1, r3
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	061b      	lsls	r3, r3, #24
 8009ec2:	430b      	orrs	r3, r1
 8009ec4:	431a      	orrs	r2, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	0d9b      	lsrs	r3, r3, #22
 8009eee:	059b      	lsls	r3, r3, #22
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	6811      	ldr	r1, [r2, #0]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	6852      	ldr	r2, [r2, #4]
 8009ef8:	4311      	orrs	r1, r2
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	6892      	ldr	r2, [r2, #8]
 8009efe:	3a01      	subs	r2, #1
 8009f00:	0152      	lsls	r2, r2, #5
 8009f02:	4311      	orrs	r1, r2
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	68d2      	ldr	r2, [r2, #12]
 8009f08:	0252      	lsls	r2, r2, #9
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	431a      	orrs	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8009f12:	f7f9 fa99 	bl	8003448 <HAL_GetTick>
 8009f16:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009f18:	e010      	b.n	8009f3c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f20:	d00c      	beq.n	8009f3c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d007      	beq.n	8009f38 <FMC_SDRAM_SendCommand+0x60>
 8009f28:	f7f9 fa8e 	bl	8003448 <HAL_GetTick>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d201      	bcs.n	8009f3c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e006      	b.n	8009f4a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	f003 0320 	and.w	r3, r3, #32
 8009f44:	2b20      	cmp	r3, #32
 8009f46:	d0e8      	beq.n	8009f1a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3718      	adds	r7, #24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b083      	sub	sp, #12
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	695b      	ldr	r3, [r3, #20]
 8009f60:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009f64:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	0052      	lsls	r2, r2, #1
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f80:	b084      	sub	sp, #16
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b084      	sub	sp, #16
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	f107 001c 	add.w	r0, r7, #28
 8009f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d122      	bne.n	8009fde <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d105      	bne.n	8009fd2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f9c0 	bl	800a358 <USB_CoreReset>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	73fb      	strb	r3, [r7, #15]
 8009fdc:	e01a      	b.n	800a014 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f9b4 	bl	800a358 <USB_CoreReset>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d106      	bne.n	800a008 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ffe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	639a      	str	r2, [r3, #56]	; 0x38
 800a006:	e005      	b.n	800a014 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a016:	2b01      	cmp	r3, #1
 800a018:	d10b      	bne.n	800a032 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f043 0206 	orr.w	r2, r3, #6
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	f043 0220 	orr.w	r2, r3, #32
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a032:	7bfb      	ldrb	r3, [r7, #15]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a03e:	b004      	add	sp, #16
 800a040:	4770      	bx	lr

0800a042 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a042:	b480      	push	{r7}
 800a044:	b083      	sub	sp, #12
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	f043 0201 	orr.w	r2, r3, #1
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	f023 0201 	bic.w	r2, r3, #1
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	370c      	adds	r7, #12
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b084      	sub	sp, #16
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	460b      	mov	r3, r1
 800a090:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a092:	2300      	movs	r3, #0
 800a094:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a0a2:	78fb      	ldrb	r3, [r7, #3]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d115      	bne.n	800a0d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a0b4:	2001      	movs	r0, #1
 800a0b6:	f7f9 f9d3 	bl	8003460 <HAL_Delay>
      ms++;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f93a 	bl	800a33a <USB_GetMode>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d01e      	beq.n	800a10a <USB_SetCurrentMode+0x84>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2b31      	cmp	r3, #49	; 0x31
 800a0d0:	d9f0      	bls.n	800a0b4 <USB_SetCurrentMode+0x2e>
 800a0d2:	e01a      	b.n	800a10a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d115      	bne.n	800a106 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a0e6:	2001      	movs	r0, #1
 800a0e8:	f7f9 f9ba 	bl	8003460 <HAL_Delay>
      ms++;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f921 	bl	800a33a <USB_GetMode>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d005      	beq.n	800a10a <USB_SetCurrentMode+0x84>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b31      	cmp	r3, #49	; 0x31
 800a102:	d9f0      	bls.n	800a0e6 <USB_SetCurrentMode+0x60>
 800a104:	e001      	b.n	800a10a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e005      	b.n	800a116 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2b32      	cmp	r3, #50	; 0x32
 800a10e:	d101      	bne.n	800a114 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e000      	b.n	800a116 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
	...

0800a120 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a12a:	2300      	movs	r3, #0
 800a12c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3301      	adds	r3, #1
 800a132:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4a13      	ldr	r2, [pc, #76]	; (800a184 <USB_FlushTxFifo+0x64>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d901      	bls.n	800a140 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e01b      	b.n	800a178 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	2b00      	cmp	r3, #0
 800a146:	daf2      	bge.n	800a12e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a148:	2300      	movs	r3, #0
 800a14a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	019b      	lsls	r3, r3, #6
 800a150:	f043 0220 	orr.w	r2, r3, #32
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	3301      	adds	r3, #1
 800a15c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	4a08      	ldr	r2, [pc, #32]	; (800a184 <USB_FlushTxFifo+0x64>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d901      	bls.n	800a16a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e006      	b.n	800a178 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	f003 0320 	and.w	r3, r3, #32
 800a172:	2b20      	cmp	r3, #32
 800a174:	d0f0      	beq.n	800a158 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	00030d40 	.word	0x00030d40

0800a188 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a190:	2300      	movs	r3, #0
 800a192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	3301      	adds	r3, #1
 800a198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	4a11      	ldr	r2, [pc, #68]	; (800a1e4 <USB_FlushRxFifo+0x5c>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d901      	bls.n	800a1a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e018      	b.n	800a1d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	daf2      	bge.n	800a194 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2210      	movs	r2, #16
 800a1b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	4a08      	ldr	r2, [pc, #32]	; (800a1e4 <USB_FlushRxFifo+0x5c>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d901      	bls.n	800a1ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	e006      	b.n	800a1d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	f003 0310 	and.w	r3, r3, #16
 800a1d2:	2b10      	cmp	r3, #16
 800a1d4:	d0f0      	beq.n	800a1b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	00030d40 	.word	0x00030d40

0800a1e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b089      	sub	sp, #36	; 0x24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	71fb      	strb	r3, [r7, #7]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a206:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d123      	bne.n	800a256 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a20e:	88bb      	ldrh	r3, [r7, #4]
 800a210:	3303      	adds	r3, #3
 800a212:	089b      	lsrs	r3, r3, #2
 800a214:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a216:	2300      	movs	r3, #0
 800a218:	61bb      	str	r3, [r7, #24]
 800a21a:	e018      	b.n	800a24e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a21c:	79fb      	ldrb	r3, [r7, #7]
 800a21e:	031a      	lsls	r2, r3, #12
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	4413      	add	r3, r2
 800a224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a228:	461a      	mov	r2, r3
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	3301      	adds	r3, #1
 800a234:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	3301      	adds	r3, #1
 800a23a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	3301      	adds	r3, #1
 800a240:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	3301      	adds	r3, #1
 800a246:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	3301      	adds	r3, #1
 800a24c:	61bb      	str	r3, [r7, #24]
 800a24e:	69ba      	ldr	r2, [r7, #24]
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	429a      	cmp	r2, r3
 800a254:	d3e2      	bcc.n	800a21c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3724      	adds	r7, #36	; 0x24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a264:	b480      	push	{r7}
 800a266:	b08b      	sub	sp, #44	; 0x2c
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	4613      	mov	r3, r2
 800a270:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a27a:	88fb      	ldrh	r3, [r7, #6]
 800a27c:	089b      	lsrs	r3, r3, #2
 800a27e:	b29b      	uxth	r3, r3
 800a280:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a282:	88fb      	ldrh	r3, [r7, #6]
 800a284:	f003 0303 	and.w	r3, r3, #3
 800a288:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a28a:	2300      	movs	r3, #0
 800a28c:	623b      	str	r3, [r7, #32]
 800a28e:	e014      	b.n	800a2ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29e:	3301      	adds	r3, #1
 800a2a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	623b      	str	r3, [r7, #32]
 800a2ba:	6a3a      	ldr	r2, [r7, #32]
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d3e6      	bcc.n	800a290 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a2c2:	8bfb      	ldrh	r3, [r7, #30]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d01e      	beq.n	800a306 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f107 0310 	add.w	r3, r7, #16
 800a2d8:	6812      	ldr	r2, [r2, #0]
 800a2da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	00db      	lsls	r3, r3, #3
 800a2e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e8:	b2da      	uxtb	r2, r3
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ec:	701a      	strb	r2, [r3, #0]
      i++;
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a2fa:	8bfb      	ldrh	r3, [r7, #30]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a300:	8bfb      	ldrh	r3, [r7, #30]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1ea      	bne.n	800a2dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a308:	4618      	mov	r0, r3
 800a30a:	372c      	adds	r7, #44	; 0x2c
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	4013      	ands	r3, r2
 800a32a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a32c:	68fb      	ldr	r3, [r7, #12]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3714      	adds	r7, #20
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b083      	sub	sp, #12
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	f003 0301 	and.w	r3, r3, #1
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
	...

0800a358 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a360:	2300      	movs	r3, #0
 800a362:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	3301      	adds	r3, #1
 800a368:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	4a13      	ldr	r2, [pc, #76]	; (800a3bc <USB_CoreReset+0x64>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d901      	bls.n	800a376 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e01b      	b.n	800a3ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	daf2      	bge.n	800a364 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a37e:	2300      	movs	r3, #0
 800a380:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	f043 0201 	orr.w	r2, r3, #1
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3301      	adds	r3, #1
 800a392:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	4a09      	ldr	r2, [pc, #36]	; (800a3bc <USB_CoreReset+0x64>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d901      	bls.n	800a3a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a39c:	2303      	movs	r3, #3
 800a39e:	e006      	b.n	800a3ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	f003 0301 	and.w	r3, r3, #1
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d0f0      	beq.n	800a38e <USB_CoreReset+0x36>

  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	00030d40 	.word	0x00030d40

0800a3c0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a3c0:	b084      	sub	sp, #16
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b086      	sub	sp, #24
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a3ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a402:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a412:	2b00      	cmp	r3, #0
 800a414:	d018      	beq.n	800a448 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d10a      	bne.n	800a432 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a42a:	f043 0304 	orr.w	r3, r3, #4
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	e014      	b.n	800a45c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a440:	f023 0304 	bic.w	r3, r3, #4
 800a444:	6013      	str	r3, [r2, #0]
 800a446:	e009      	b.n	800a45c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a456:	f023 0304 	bic.w	r3, r3, #4
 800a45a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a45c:	2110      	movs	r1, #16
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7ff fe5e 	bl	800a120 <USB_FlushTxFifo>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d001      	beq.n	800a46e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7ff fe8a 	bl	800a188 <USB_FlushRxFifo>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d001      	beq.n	800a47e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a47e:	2300      	movs	r3, #0
 800a480:	613b      	str	r3, [r7, #16]
 800a482:	e015      	b.n	800a4b0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a490:	461a      	mov	r2, r3
 800a492:	f04f 33ff 	mov.w	r3, #4294967295
 800a496:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	015a      	lsls	r2, r3, #5
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	4413      	add	r3, r2
 800a4a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	613b      	str	r3, [r7, #16]
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d3e5      	bcc.n	800a484 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00b      	beq.n	800a4ea <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a13      	ldr	r2, [pc, #76]	; (800a52c <USB_HostInit+0x16c>)
 800a4de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a13      	ldr	r2, [pc, #76]	; (800a530 <USB_HostInit+0x170>)
 800a4e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a4e8:	e009      	b.n	800a4fe <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2280      	movs	r2, #128	; 0x80
 800a4ee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a10      	ldr	r2, [pc, #64]	; (800a534 <USB_HostInit+0x174>)
 800a4f4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a0f      	ldr	r2, [pc, #60]	; (800a538 <USB_HostInit+0x178>)
 800a4fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a500:	2b00      	cmp	r3, #0
 800a502:	d105      	bne.n	800a510 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	f043 0210 	orr.w	r2, r3, #16
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	699a      	ldr	r2, [r3, #24]
 800a514:	4b09      	ldr	r3, [pc, #36]	; (800a53c <USB_HostInit+0x17c>)
 800a516:	4313      	orrs	r3, r2
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a51c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3718      	adds	r7, #24
 800a522:	46bd      	mov	sp, r7
 800a524:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a528:	b004      	add	sp, #16
 800a52a:	4770      	bx	lr
 800a52c:	01000200 	.word	0x01000200
 800a530:	00e00300 	.word	0x00e00300
 800a534:	00600080 	.word	0x00600080
 800a538:	004000e0 	.word	0x004000e0
 800a53c:	a3200008 	.word	0xa3200008

0800a540 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	460b      	mov	r3, r1
 800a54a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a55e:	f023 0303 	bic.w	r3, r3, #3
 800a562:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	78fb      	ldrb	r3, [r7, #3]
 800a56e:	f003 0303 	and.w	r3, r3, #3
 800a572:	68f9      	ldr	r1, [r7, #12]
 800a574:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a578:	4313      	orrs	r3, r2
 800a57a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a57c:	78fb      	ldrb	r3, [r7, #3]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d107      	bne.n	800a592 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a588:	461a      	mov	r2, r3
 800a58a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a58e:	6053      	str	r3, [r2, #4]
 800a590:	e009      	b.n	800a5a6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a592:	78fb      	ldrb	r3, [r7, #3]
 800a594:	2b02      	cmp	r3, #2
 800a596:	d106      	bne.n	800a5a6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a59e:	461a      	mov	r2, r3
 800a5a0:	f241 7370 	movw	r3, #6000	; 0x1770
 800a5a4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a5d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a5de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a5e4:	2064      	movs	r0, #100	; 0x64
 800a5e6:	f7f8 ff3b 	bl	8003460 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a5f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a5f8:	200a      	movs	r0, #10
 800a5fa:	f7f8 ff31 	bl	8003460 <HAL_Delay>

  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	460b      	mov	r3, r1
 800a612:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a618:	2300      	movs	r3, #0
 800a61a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a62c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a634:	2b00      	cmp	r3, #0
 800a636:	d109      	bne.n	800a64c <USB_DriveVbus+0x44>
 800a638:	78fb      	ldrb	r3, [r7, #3]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d106      	bne.n	800a64c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a646:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a64a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a656:	d109      	bne.n	800a66c <USB_DriveVbus+0x64>
 800a658:	78fb      	ldrb	r3, [r7, #3]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d106      	bne.n	800a66c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a66a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3714      	adds	r7, #20
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b085      	sub	sp, #20
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a686:	2300      	movs	r3, #0
 800a688:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	0c5b      	lsrs	r3, r3, #17
 800a698:	f003 0303 	and.w	r3, r3, #3
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	b29b      	uxth	r3, r3
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3714      	adds	r7, #20
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
	...

0800a6cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b088      	sub	sp, #32
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	4608      	mov	r0, r1
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	461a      	mov	r2, r3
 800a6da:	4603      	mov	r3, r0
 800a6dc:	70fb      	strb	r3, [r7, #3]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	70bb      	strb	r3, [r7, #2]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a6ee:	78fb      	ldrb	r3, [r7, #3]
 800a6f0:	015a      	lsls	r2, r3, #5
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a700:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a702:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a706:	2b03      	cmp	r3, #3
 800a708:	d87e      	bhi.n	800a808 <USB_HC_Init+0x13c>
 800a70a:	a201      	add	r2, pc, #4	; (adr r2, 800a710 <USB_HC_Init+0x44>)
 800a70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a710:	0800a721 	.word	0x0800a721
 800a714:	0800a7cb 	.word	0x0800a7cb
 800a718:	0800a721 	.word	0x0800a721
 800a71c:	0800a78d 	.word	0x0800a78d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a720:	78fb      	ldrb	r3, [r7, #3]
 800a722:	015a      	lsls	r2, r3, #5
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	4413      	add	r3, r2
 800a728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a72c:	461a      	mov	r2, r3
 800a72e:	f240 439d 	movw	r3, #1181	; 0x49d
 800a732:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a734:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	da10      	bge.n	800a75e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	015a      	lsls	r2, r3, #5
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	4413      	add	r3, r2
 800a744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	78fa      	ldrb	r2, [r7, #3]
 800a74c:	0151      	lsls	r1, r2, #5
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	440a      	add	r2, r1
 800a752:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a75a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a75c:	e057      	b.n	800a80e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a766:	2b00      	cmp	r3, #0
 800a768:	d051      	beq.n	800a80e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a76a:	78fb      	ldrb	r3, [r7, #3]
 800a76c:	015a      	lsls	r2, r3, #5
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	4413      	add	r3, r2
 800a772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	78fa      	ldrb	r2, [r7, #3]
 800a77a:	0151      	lsls	r1, r2, #5
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	440a      	add	r2, r1
 800a780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a784:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a788:	60d3      	str	r3, [r2, #12]
      break;
 800a78a:	e040      	b.n	800a80e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a78c:	78fb      	ldrb	r3, [r7, #3]
 800a78e:	015a      	lsls	r2, r3, #5
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	4413      	add	r3, r2
 800a794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a798:	461a      	mov	r2, r3
 800a79a:	f240 639d 	movw	r3, #1693	; 0x69d
 800a79e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a7a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	da34      	bge.n	800a812 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a7a8:	78fb      	ldrb	r3, [r7, #3]
 800a7aa:	015a      	lsls	r2, r3, #5
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	78fa      	ldrb	r2, [r7, #3]
 800a7b8:	0151      	lsls	r1, r2, #5
 800a7ba:	693a      	ldr	r2, [r7, #16]
 800a7bc:	440a      	add	r2, r1
 800a7be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7c6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a7c8:	e023      	b.n	800a812 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a7ca:	78fb      	ldrb	r3, [r7, #3]
 800a7cc:	015a      	lsls	r2, r3, #5
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f240 2325 	movw	r3, #549	; 0x225
 800a7dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a7de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	da17      	bge.n	800a816 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a7e6:	78fb      	ldrb	r3, [r7, #3]
 800a7e8:	015a      	lsls	r2, r3, #5
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	78fa      	ldrb	r2, [r7, #3]
 800a7f6:	0151      	lsls	r1, r2, #5
 800a7f8:	693a      	ldr	r2, [r7, #16]
 800a7fa:	440a      	add	r2, r1
 800a7fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a800:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a804:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a806:	e006      	b.n	800a816 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	77fb      	strb	r3, [r7, #31]
      break;
 800a80c:	e004      	b.n	800a818 <USB_HC_Init+0x14c>
      break;
 800a80e:	bf00      	nop
 800a810:	e002      	b.n	800a818 <USB_HC_Init+0x14c>
      break;
 800a812:	bf00      	nop
 800a814:	e000      	b.n	800a818 <USB_HC_Init+0x14c>
      break;
 800a816:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a818:	78fb      	ldrb	r3, [r7, #3]
 800a81a:	015a      	lsls	r2, r3, #5
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	4413      	add	r3, r2
 800a820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	78fa      	ldrb	r2, [r7, #3]
 800a828:	0151      	lsls	r1, r2, #5
 800a82a:	693a      	ldr	r2, [r7, #16]
 800a82c:	440a      	add	r2, r1
 800a82e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a832:	f043 0302 	orr.w	r3, r3, #2
 800a836:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a83e:	699a      	ldr	r2, [r3, #24]
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	f003 030f 	and.w	r3, r3, #15
 800a846:	2101      	movs	r1, #1
 800a848:	fa01 f303 	lsl.w	r3, r1, r3
 800a84c:	6939      	ldr	r1, [r7, #16]
 800a84e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a852:	4313      	orrs	r3, r2
 800a854:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a862:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a866:	2b00      	cmp	r3, #0
 800a868:	da03      	bge.n	800a872 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a86a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a86e:	61bb      	str	r3, [r7, #24]
 800a870:	e001      	b.n	800a876 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a872:	2300      	movs	r3, #0
 800a874:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7ff feff 	bl	800a67a <USB_GetHostSpeed>
 800a87c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a87e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a882:	2b02      	cmp	r3, #2
 800a884:	d106      	bne.n	800a894 <USB_HC_Init+0x1c8>
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2b02      	cmp	r3, #2
 800a88a:	d003      	beq.n	800a894 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a88c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a890:	617b      	str	r3, [r7, #20]
 800a892:	e001      	b.n	800a898 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a894:	2300      	movs	r3, #0
 800a896:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a898:	787b      	ldrb	r3, [r7, #1]
 800a89a:	059b      	lsls	r3, r3, #22
 800a89c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a8a0:	78bb      	ldrb	r3, [r7, #2]
 800a8a2:	02db      	lsls	r3, r3, #11
 800a8a4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a8a8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a8aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a8ae:	049b      	lsls	r3, r3, #18
 800a8b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a8b4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a8b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a8b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a8bc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a8c2:	78fb      	ldrb	r3, [r7, #3]
 800a8c4:	0159      	lsls	r1, r3, #5
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	440b      	add	r3, r1
 800a8ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8ce:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a8d4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a8d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	d003      	beq.n	800a8e6 <USB_HC_Init+0x21a>
 800a8de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d10f      	bne.n	800a906 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a8e6:	78fb      	ldrb	r3, [r7, #3]
 800a8e8:	015a      	lsls	r2, r3, #5
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	78fa      	ldrb	r2, [r7, #3]
 800a8f6:	0151      	lsls	r1, r2, #5
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	440a      	add	r2, r1
 800a8fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a900:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a904:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a906:	7ffb      	ldrb	r3, [r7, #31]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3720      	adds	r7, #32
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b08c      	sub	sp, #48	; 0x30
 800a914:	af02      	add	r7, sp, #8
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	4613      	mov	r3, r2
 800a91c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	785b      	ldrb	r3, [r3, #1]
 800a926:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a92c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a936:	2b00      	cmp	r3, #0
 800a938:	d02d      	beq.n	800a996 <USB_HC_StartXfer+0x86>
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	791b      	ldrb	r3, [r3, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d129      	bne.n	800a996 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a942:	79fb      	ldrb	r3, [r7, #7]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d117      	bne.n	800a978 <USB_HC_StartXfer+0x68>
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	79db      	ldrb	r3, [r3, #7]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d003      	beq.n	800a958 <USB_HC_StartXfer+0x48>
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	79db      	ldrb	r3, [r3, #7]
 800a954:	2b02      	cmp	r3, #2
 800a956:	d10f      	bne.n	800a978 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	015a      	lsls	r2, r3, #5
 800a95c:	6a3b      	ldr	r3, [r7, #32]
 800a95e:	4413      	add	r3, r2
 800a960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	69fa      	ldr	r2, [r7, #28]
 800a968:	0151      	lsls	r1, r2, #5
 800a96a:	6a3a      	ldr	r2, [r7, #32]
 800a96c:	440a      	add	r2, r1
 800a96e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a976:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a978:	79fb      	ldrb	r3, [r7, #7]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d10b      	bne.n	800a996 <USB_HC_StartXfer+0x86>
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	795b      	ldrb	r3, [r3, #5]
 800a982:	2b01      	cmp	r3, #1
 800a984:	d107      	bne.n	800a996 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	785b      	ldrb	r3, [r3, #1]
 800a98a:	4619      	mov	r1, r3
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f000 fa0f 	bl	800adb0 <USB_DoPing>
      return HAL_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	e0f8      	b.n	800ab88 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d018      	beq.n	800a9d0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	695b      	ldr	r3, [r3, #20]
 800a9a2:	68ba      	ldr	r2, [r7, #8]
 800a9a4:	8912      	ldrh	r2, [r2, #8]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	8912      	ldrh	r2, [r2, #8]
 800a9ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9b2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a9b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a9b6:	8b7b      	ldrh	r3, [r7, #26]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d90b      	bls.n	800a9d4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a9bc:	8b7b      	ldrh	r3, [r7, #26]
 800a9be:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a9c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	8912      	ldrh	r2, [r2, #8]
 800a9c6:	fb03 f202 	mul.w	r2, r3, r2
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	611a      	str	r2, [r3, #16]
 800a9ce:	e001      	b.n	800a9d4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	78db      	ldrb	r3, [r3, #3]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d007      	beq.n	800a9ec <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a9dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	8912      	ldrh	r2, [r2, #8]
 800a9e2:	fb03 f202 	mul.w	r2, r3, r2
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	611a      	str	r2, [r3, #16]
 800a9ea:	e003      	b.n	800a9f4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	695a      	ldr	r2, [r3, #20]
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a9fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a9fe:	04d9      	lsls	r1, r3, #19
 800aa00:	4b63      	ldr	r3, [pc, #396]	; (800ab90 <USB_HC_StartXfer+0x280>)
 800aa02:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aa04:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	7a9b      	ldrb	r3, [r3, #10]
 800aa0a:	075b      	lsls	r3, r3, #29
 800aa0c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aa10:	69f9      	ldr	r1, [r7, #28]
 800aa12:	0148      	lsls	r0, r1, #5
 800aa14:	6a39      	ldr	r1, [r7, #32]
 800aa16:	4401      	add	r1, r0
 800aa18:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aa1c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aa1e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800aa20:	79fb      	ldrb	r3, [r7, #7]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d009      	beq.n	800aa3a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	68d9      	ldr	r1, [r3, #12]
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	015a      	lsls	r2, r3, #5
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	4413      	add	r3, r2
 800aa32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa36:	460a      	mov	r2, r1
 800aa38:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bf0c      	ite	eq
 800aa4a:	2301      	moveq	r3, #1
 800aa4c:	2300      	movne	r3, #0
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	015a      	lsls	r2, r3, #5
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	4413      	add	r3, r2
 800aa5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	69fa      	ldr	r2, [r7, #28]
 800aa62:	0151      	lsls	r1, r2, #5
 800aa64:	6a3a      	ldr	r2, [r7, #32]
 800aa66:	440a      	add	r2, r1
 800aa68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aa70:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	015a      	lsls	r2, r3, #5
 800aa76:	6a3b      	ldr	r3, [r7, #32]
 800aa78:	4413      	add	r3, r2
 800aa7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	7e7b      	ldrb	r3, [r7, #25]
 800aa82:	075b      	lsls	r3, r3, #29
 800aa84:	69f9      	ldr	r1, [r7, #28]
 800aa86:	0148      	lsls	r0, r1, #5
 800aa88:	6a39      	ldr	r1, [r7, #32]
 800aa8a:	4401      	add	r1, r0
 800aa8c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800aa90:	4313      	orrs	r3, r2
 800aa92:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	015a      	lsls	r2, r3, #5
 800aa98:	6a3b      	ldr	r3, [r7, #32]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aaaa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	78db      	ldrb	r3, [r3, #3]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d004      	beq.n	800aabe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaba:	613b      	str	r3, [r7, #16]
 800aabc:	e003      	b.n	800aac6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aac4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aacc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	015a      	lsls	r2, r3, #5
 800aad2:	6a3b      	ldr	r3, [r7, #32]
 800aad4:	4413      	add	r3, r2
 800aad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aada:	461a      	mov	r2, r3
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800aae0:	79fb      	ldrb	r3, [r7, #7]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	e04e      	b.n	800ab88 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	78db      	ldrb	r3, [r3, #3]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d149      	bne.n	800ab86 <USB_HC_StartXfer+0x276>
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d045      	beq.n	800ab86 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	79db      	ldrb	r3, [r3, #7]
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d830      	bhi.n	800ab64 <USB_HC_StartXfer+0x254>
 800ab02:	a201      	add	r2, pc, #4	; (adr r2, 800ab08 <USB_HC_StartXfer+0x1f8>)
 800ab04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab08:	0800ab19 	.word	0x0800ab19
 800ab0c:	0800ab3d 	.word	0x0800ab3d
 800ab10:	0800ab19 	.word	0x0800ab19
 800ab14:	0800ab3d 	.word	0x0800ab3d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	3303      	adds	r3, #3
 800ab1e:	089b      	lsrs	r3, r3, #2
 800ab20:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ab22:	8afa      	ldrh	r2, [r7, #22]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d91c      	bls.n	800ab68 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	f043 0220 	orr.w	r2, r3, #32
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	619a      	str	r2, [r3, #24]
        }
        break;
 800ab3a:	e015      	b.n	800ab68 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	695b      	ldr	r3, [r3, #20]
 800ab40:	3303      	adds	r3, #3
 800ab42:	089b      	lsrs	r3, r3, #2
 800ab44:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ab46:	8afa      	ldrh	r2, [r7, #22]
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d90a      	bls.n	800ab6c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	699b      	ldr	r3, [r3, #24]
 800ab5a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	619a      	str	r2, [r3, #24]
        }
        break;
 800ab62:	e003      	b.n	800ab6c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ab64:	bf00      	nop
 800ab66:	e002      	b.n	800ab6e <USB_HC_StartXfer+0x25e>
        break;
 800ab68:	bf00      	nop
 800ab6a:	e000      	b.n	800ab6e <USB_HC_StartXfer+0x25e>
        break;
 800ab6c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	68d9      	ldr	r1, [r3, #12]
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	785a      	ldrb	r2, [r3, #1]
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	9000      	str	r0, [sp, #0]
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f7ff fb31 	bl	800a1e8 <USB_WritePacket>
  }

  return HAL_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3728      	adds	r7, #40	; 0x28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	1ff80000 	.word	0x1ff80000

0800ab94 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	b29b      	uxth	r3, r3
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800abb6:	b480      	push	{r7}
 800abb8:	b089      	sub	sp, #36	; 0x24
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
 800abbe:	460b      	mov	r3, r1
 800abc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800abc6:	78fb      	ldrb	r3, [r7, #3]
 800abc8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800abca:	2300      	movs	r3, #0
 800abcc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	015a      	lsls	r2, r3, #5
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	4413      	add	r3, r2
 800abd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	0c9b      	lsrs	r3, r3, #18
 800abde:	f003 0303 	and.w	r3, r3, #3
 800abe2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	4413      	add	r3, r2
 800abec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	0fdb      	lsrs	r3, r3, #31
 800abf4:	f003 0301 	and.w	r3, r3, #1
 800abf8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f003 0320 	and.w	r3, r3, #32
 800ac02:	2b20      	cmp	r3, #32
 800ac04:	d104      	bne.n	800ac10 <USB_HC_Halt+0x5a>
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	e0c8      	b.n	800ada2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d002      	beq.n	800ac1c <USB_HC_Halt+0x66>
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d163      	bne.n	800ace4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	015a      	lsls	r2, r3, #5
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	4413      	add	r3, r2
 800ac24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	69ba      	ldr	r2, [r7, #24]
 800ac2c:	0151      	lsls	r1, r2, #5
 800ac2e:	69fa      	ldr	r2, [r7, #28]
 800ac30:	440a      	add	r2, r1
 800ac32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac3a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f003 0320 	and.w	r3, r3, #32
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f040 80ab 	bne.w	800ada0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d133      	bne.n	800acbe <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	015a      	lsls	r2, r3, #5
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	69ba      	ldr	r2, [r7, #24]
 800ac66:	0151      	lsls	r1, r2, #5
 800ac68:	69fa      	ldr	r2, [r7, #28]
 800ac6a:	440a      	add	r2, r1
 800ac6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac74:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	015a      	lsls	r2, r3, #5
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	69ba      	ldr	r2, [r7, #24]
 800ac86:	0151      	lsls	r1, r2, #5
 800ac88:	69fa      	ldr	r2, [r7, #28]
 800ac8a:	440a      	add	r2, r1
 800ac8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac94:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aca2:	d81d      	bhi.n	800ace0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	015a      	lsls	r2, r3, #5
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	4413      	add	r3, r2
 800acac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acba:	d0ec      	beq.n	800ac96 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800acbc:	e070      	b.n	800ada0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	015a      	lsls	r2, r3, #5
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	4413      	add	r3, r2
 800acc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	69ba      	ldr	r2, [r7, #24]
 800acce:	0151      	lsls	r1, r2, #5
 800acd0:	69fa      	ldr	r2, [r7, #28]
 800acd2:	440a      	add	r2, r1
 800acd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acdc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800acde:	e05f      	b.n	800ada0 <USB_HC_Halt+0x1ea>
            break;
 800ace0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ace2:	e05d      	b.n	800ada0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	015a      	lsls	r2, r3, #5
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	4413      	add	r3, r2
 800acec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	69ba      	ldr	r2, [r7, #24]
 800acf4:	0151      	lsls	r1, r2, #5
 800acf6:	69fa      	ldr	r2, [r7, #28]
 800acf8:	440a      	add	r2, r1
 800acfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad02:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d133      	bne.n	800ad7c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	015a      	lsls	r2, r3, #5
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	0151      	lsls	r1, r2, #5
 800ad26:	69fa      	ldr	r2, [r7, #28]
 800ad28:	440a      	add	r2, r1
 800ad2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad32:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	015a      	lsls	r2, r3, #5
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	69ba      	ldr	r2, [r7, #24]
 800ad44:	0151      	lsls	r1, r2, #5
 800ad46:	69fa      	ldr	r2, [r7, #28]
 800ad48:	440a      	add	r2, r1
 800ad4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad52:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	3301      	adds	r3, #1
 800ad58:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad60:	d81d      	bhi.n	800ad9e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	015a      	lsls	r2, r3, #5
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	4413      	add	r3, r2
 800ad6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad78:	d0ec      	beq.n	800ad54 <USB_HC_Halt+0x19e>
 800ad7a:	e011      	b.n	800ada0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	015a      	lsls	r2, r3, #5
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	4413      	add	r3, r2
 800ad84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	69ba      	ldr	r2, [r7, #24]
 800ad8c:	0151      	lsls	r1, r2, #5
 800ad8e:	69fa      	ldr	r2, [r7, #28]
 800ad90:	440a      	add	r2, r1
 800ad92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad9a:	6013      	str	r3, [r2, #0]
 800ad9c:	e000      	b.n	800ada0 <USB_HC_Halt+0x1ea>
          break;
 800ad9e:	bf00      	nop
    }
  }

  return HAL_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3724      	adds	r7, #36	; 0x24
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr
	...

0800adb0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b087      	sub	sp, #28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800adc0:	78fb      	ldrb	r3, [r7, #3]
 800adc2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800adc4:	2301      	movs	r3, #1
 800adc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	04da      	lsls	r2, r3, #19
 800adcc:	4b15      	ldr	r3, [pc, #84]	; (800ae24 <USB_DoPing+0x74>)
 800adce:	4013      	ands	r3, r2
 800add0:	693a      	ldr	r2, [r7, #16]
 800add2:	0151      	lsls	r1, r2, #5
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	440a      	add	r2, r1
 800add8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800addc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ade0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	015a      	lsls	r2, r3, #5
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	4413      	add	r3, r2
 800adea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800adf8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae00:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	015a      	lsls	r2, r3, #5
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	4413      	add	r3, r2
 800ae0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae0e:	461a      	mov	r2, r3
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	371c      	adds	r7, #28
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	1ff80000 	.word	0x1ff80000

0800ae28 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b088      	sub	sp, #32
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ae30:	2300      	movs	r3, #0
 800ae32:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff f911 	bl	800a064 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ae42:	2110      	movs	r1, #16
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7ff f96b 	bl	800a120 <USB_FlushTxFifo>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f7ff f997 	bl	800a188 <USB_FlushRxFifo>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d001      	beq.n	800ae64 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ae64:	2300      	movs	r3, #0
 800ae66:	61bb      	str	r3, [r7, #24]
 800ae68:	e01f      	b.n	800aeaa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	015a      	lsls	r2, r3, #5
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	4413      	add	r3, r2
 800ae72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	015a      	lsls	r2, r3, #5
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	4413      	add	r3, r2
 800ae9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae9e:	461a      	mov	r2, r3
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	3301      	adds	r3, #1
 800aea8:	61bb      	str	r3, [r7, #24]
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	2b0f      	cmp	r3, #15
 800aeae:	d9dc      	bls.n	800ae6a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	61bb      	str	r3, [r7, #24]
 800aeb4:	e034      	b.n	800af20 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	015a      	lsls	r2, r3, #5
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	4413      	add	r3, r2
 800aebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aecc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aed4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aedc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	015a      	lsls	r2, r3, #5
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeea:	461a      	mov	r2, r3
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	3301      	adds	r3, #1
 800aef4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aefc:	d80c      	bhi.n	800af18 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	015a      	lsls	r2, r3, #5
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	4413      	add	r3, r2
 800af06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af14:	d0ec      	beq.n	800aef0 <USB_StopHost+0xc8>
 800af16:	e000      	b.n	800af1a <USB_StopHost+0xf2>
        break;
 800af18:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	3301      	adds	r3, #1
 800af1e:	61bb      	str	r3, [r7, #24]
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	2b0f      	cmp	r3, #15
 800af24:	d9c7      	bls.n	800aeb6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af2c:	461a      	mov	r2, r3
 800af2e:	f04f 33ff 	mov.w	r3, #4294967295
 800af32:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f04f 32ff 	mov.w	r2, #4294967295
 800af3a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff f880 	bl	800a042 <USB_EnableGlobalInt>

  return ret;
 800af42:	7ffb      	ldrb	r3, [r7, #31]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3720      	adds	r7, #32
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b085      	sub	sp, #20
 800af50:	af00      	add	r7, sp, #0
 800af52:	4603      	mov	r3, r0
 800af54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800af56:	2300      	movs	r3, #0
 800af58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800af5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af5e:	2b84      	cmp	r3, #132	; 0x84
 800af60:	d005      	beq.n	800af6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800af62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	4413      	add	r3, r2
 800af6a:	3303      	adds	r3, #3
 800af6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800af6e:	68fb      	ldr	r3, [r7, #12]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3714      	adds	r7, #20
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af82:	f3ef 8305 	mrs	r3, IPSR
 800af86:	607b      	str	r3, [r7, #4]
  return(result);
 800af88:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	bf14      	ite	ne
 800af8e:	2301      	movne	r3, #1
 800af90:	2300      	moveq	r3, #0
 800af92:	b2db      	uxtb	r3, r3
}
 800af94:	4618      	mov	r0, r3
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800afa4:	f001 fdcc 	bl	800cb40 <vTaskStartScheduler>
  
  return osOK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	bd80      	pop	{r7, pc}

0800afae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800afae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afb0:	b089      	sub	sp, #36	; 0x24
 800afb2:	af04      	add	r7, sp, #16
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	695b      	ldr	r3, [r3, #20]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d020      	beq.n	800b002 <osThreadCreate+0x54>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d01c      	beq.n	800b002 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	685c      	ldr	r4, [r3, #4]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681d      	ldr	r5, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	691e      	ldr	r6, [r3, #16]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800afda:	4618      	mov	r0, r3
 800afdc:	f7ff ffb6 	bl	800af4c <makeFreeRtosPriority>
 800afe0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afea:	9202      	str	r2, [sp, #8]
 800afec:	9301      	str	r3, [sp, #4]
 800afee:	9100      	str	r1, [sp, #0]
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	4632      	mov	r2, r6
 800aff4:	4629      	mov	r1, r5
 800aff6:	4620      	mov	r0, r4
 800aff8:	f001 fb4a 	bl	800c690 <xTaskCreateStatic>
 800affc:	4603      	mov	r3, r0
 800affe:	60fb      	str	r3, [r7, #12]
 800b000:	e01c      	b.n	800b03c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	685c      	ldr	r4, [r3, #4]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b00e:	b29e      	uxth	r6, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b016:	4618      	mov	r0, r3
 800b018:	f7ff ff98 	bl	800af4c <makeFreeRtosPriority>
 800b01c:	4602      	mov	r2, r0
 800b01e:	f107 030c 	add.w	r3, r7, #12
 800b022:	9301      	str	r3, [sp, #4]
 800b024:	9200      	str	r2, [sp, #0]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	4632      	mov	r2, r6
 800b02a:	4629      	mov	r1, r5
 800b02c:	4620      	mov	r0, r4
 800b02e:	f001 fb8c 	bl	800c74a <xTaskCreate>
 800b032:	4603      	mov	r3, r0
 800b034:	2b01      	cmp	r3, #1
 800b036:	d001      	beq.n	800b03c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b038:	2300      	movs	r3, #0
 800b03a:	e000      	b.n	800b03e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b03c:	68fb      	ldr	r3, [r7, #12]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3714      	adds	r7, #20
 800b042:	46bd      	mov	sp, r7
 800b044:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b046 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b084      	sub	sp, #16
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <osDelay+0x16>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	e000      	b.n	800b05e <osDelay+0x18>
 800b05c:	2301      	movs	r3, #1
 800b05e:	4618      	mov	r0, r3
 800b060:	f001 fd3a 	bl	800cad8 <vTaskDelay>
  
  return osOK;
 800b064:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b066:	4618      	mov	r0, r3
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b06e:	b590      	push	{r4, r7, lr}
 800b070:	b085      	sub	sp, #20
 800b072:	af02      	add	r7, sp, #8
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d011      	beq.n	800b0a4 <osMessageCreate+0x36>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00d      	beq.n	800b0a4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6818      	ldr	r0, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6859      	ldr	r1, [r3, #4]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	689a      	ldr	r2, [r3, #8]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	2400      	movs	r4, #0
 800b09a:	9400      	str	r4, [sp, #0]
 800b09c:	f000 fe1c 	bl	800bcd8 <xQueueGenericCreateStatic>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	e008      	b.n	800b0b6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6818      	ldr	r0, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	f000 fe8a 	bl	800bdc8 <xQueueGenericCreate>
 800b0b4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	370c      	adds	r7, #12
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd90      	pop	{r4, r7, pc}
	...

0800b0c0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <osMessagePut+0x1e>
    ticks = 1;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b0de:	f7ff ff4d 	bl	800af7c <inHandlerMode>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d018      	beq.n	800b11a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b0e8:	f107 0210 	add.w	r2, r7, #16
 800b0ec:	f107 0108 	add.w	r1, r7, #8
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f000 ffc0 	bl	800c078 <xQueueGenericSendFromISR>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d001      	beq.n	800b102 <osMessagePut+0x42>
      return osErrorOS;
 800b0fe:	23ff      	movs	r3, #255	; 0xff
 800b100:	e018      	b.n	800b134 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d014      	beq.n	800b132 <osMessagePut+0x72>
 800b108:	4b0c      	ldr	r3, [pc, #48]	; (800b13c <osMessagePut+0x7c>)
 800b10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b10e:	601a      	str	r2, [r3, #0]
 800b110:	f3bf 8f4f 	dsb	sy
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	e00b      	b.n	800b132 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b11a:	f107 0108 	add.w	r1, r7, #8
 800b11e:	2300      	movs	r3, #0
 800b120:	697a      	ldr	r2, [r7, #20]
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f000 feaa 	bl	800be7c <xQueueGenericSend>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d001      	beq.n	800b132 <osMessagePut+0x72>
      return osErrorOS;
 800b12e:	23ff      	movs	r3, #255	; 0xff
 800b130:	e000      	b.n	800b134 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	3718      	adds	r7, #24
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	e000ed04 	.word	0xe000ed04

0800b140 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b140:	b590      	push	{r4, r7, lr}
 800b142:	b08b      	sub	sp, #44	; 0x2c
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b150:	2300      	movs	r3, #0
 800b152:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10a      	bne.n	800b170 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b15a:	2380      	movs	r3, #128	; 0x80
 800b15c:	617b      	str	r3, [r7, #20]
    return event;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	461c      	mov	r4, r3
 800b162:	f107 0314 	add.w	r3, r7, #20
 800b166:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b16a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b16e:	e054      	b.n	800b21a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b170:	2300      	movs	r3, #0
 800b172:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b174:	2300      	movs	r3, #0
 800b176:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b17e:	d103      	bne.n	800b188 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b180:	f04f 33ff 	mov.w	r3, #4294967295
 800b184:	627b      	str	r3, [r7, #36]	; 0x24
 800b186:	e009      	b.n	800b19c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d006      	beq.n	800b19c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b194:	2b00      	cmp	r3, #0
 800b196:	d101      	bne.n	800b19c <osMessageGet+0x5c>
      ticks = 1;
 800b198:	2301      	movs	r3, #1
 800b19a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b19c:	f7ff feee 	bl	800af7c <inHandlerMode>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d01c      	beq.n	800b1e0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b1a6:	f107 0220 	add.w	r2, r7, #32
 800b1aa:	f107 0314 	add.w	r3, r7, #20
 800b1ae:	3304      	adds	r3, #4
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	68b8      	ldr	r0, [r7, #8]
 800b1b4:	f001 f8dc 	bl	800c370 <xQueueReceiveFromISR>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d102      	bne.n	800b1c4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b1be:	2310      	movs	r3, #16
 800b1c0:	617b      	str	r3, [r7, #20]
 800b1c2:	e001      	b.n	800b1c8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b1c8:	6a3b      	ldr	r3, [r7, #32]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d01d      	beq.n	800b20a <osMessageGet+0xca>
 800b1ce:	4b15      	ldr	r3, [pc, #84]	; (800b224 <osMessageGet+0xe4>)
 800b1d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	e014      	b.n	800b20a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b1e0:	f107 0314 	add.w	r3, r7, #20
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	68b8      	ldr	r0, [r7, #8]
 800b1ec:	f000 ffe0 	bl	800c1b0 <xQueueReceive>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d102      	bne.n	800b1fc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b1f6:	2310      	movs	r3, #16
 800b1f8:	617b      	str	r3, [r7, #20]
 800b1fa:	e006      	b.n	800b20a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d101      	bne.n	800b206 <osMessageGet+0xc6>
 800b202:	2300      	movs	r3, #0
 800b204:	e000      	b.n	800b208 <osMessageGet+0xc8>
 800b206:	2340      	movs	r3, #64	; 0x40
 800b208:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	461c      	mov	r4, r3
 800b20e:	f107 0314 	add.w	r3, r7, #20
 800b212:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b216:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	372c      	adds	r7, #44	; 0x2c
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd90      	pop	{r4, r7, pc}
 800b222:	bf00      	nop
 800b224:	e000ed04 	.word	0xe000ed04

0800b228 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b08a      	sub	sp, #40	; 0x28
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b230:	2300      	movs	r3, #0
 800b232:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b234:	f001 fce4 	bl	800cc00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b238:	4b5b      	ldr	r3, [pc, #364]	; (800b3a8 <pvPortMalloc+0x180>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d101      	bne.n	800b244 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b240:	f000 f920 	bl	800b484 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b244:	4b59      	ldr	r3, [pc, #356]	; (800b3ac <pvPortMalloc+0x184>)
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4013      	ands	r3, r2
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f040 8093 	bne.w	800b378 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d01d      	beq.n	800b294 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b258:	2208      	movs	r2, #8
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4413      	add	r3, r2
 800b25e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f003 0307 	and.w	r3, r3, #7
 800b266:	2b00      	cmp	r3, #0
 800b268:	d014      	beq.n	800b294 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f023 0307 	bic.w	r3, r3, #7
 800b270:	3308      	adds	r3, #8
 800b272:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f003 0307 	and.w	r3, r3, #7
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d00a      	beq.n	800b294 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b290:	bf00      	nop
 800b292:	e7fe      	b.n	800b292 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d06e      	beq.n	800b378 <pvPortMalloc+0x150>
 800b29a:	4b45      	ldr	r3, [pc, #276]	; (800b3b0 <pvPortMalloc+0x188>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d869      	bhi.n	800b378 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b2a4:	4b43      	ldr	r3, [pc, #268]	; (800b3b4 <pvPortMalloc+0x18c>)
 800b2a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b2a8:	4b42      	ldr	r3, [pc, #264]	; (800b3b4 <pvPortMalloc+0x18c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b2ae:	e004      	b.n	800b2ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d903      	bls.n	800b2cc <pvPortMalloc+0xa4>
 800b2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d1f1      	bne.n	800b2b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b2cc:	4b36      	ldr	r3, [pc, #216]	; (800b3a8 <pvPortMalloc+0x180>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d050      	beq.n	800b378 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b2d6:	6a3b      	ldr	r3, [r7, #32]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2208      	movs	r2, #8
 800b2dc:	4413      	add	r3, r2
 800b2de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	6a3b      	ldr	r3, [r7, #32]
 800b2e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	1ad2      	subs	r2, r2, r3
 800b2f0:	2308      	movs	r3, #8
 800b2f2:	005b      	lsls	r3, r3, #1
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d91f      	bls.n	800b338 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b2f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	f003 0307 	and.w	r3, r3, #7
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00a      	beq.n	800b320 <pvPortMalloc+0xf8>
	__asm volatile
 800b30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	613b      	str	r3, [r7, #16]
}
 800b31c:	bf00      	nop
 800b31e:	e7fe      	b.n	800b31e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b322:	685a      	ldr	r2, [r3, #4]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	1ad2      	subs	r2, r2, r3
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b332:	69b8      	ldr	r0, [r7, #24]
 800b334:	f000 f908 	bl	800b548 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b338:	4b1d      	ldr	r3, [pc, #116]	; (800b3b0 <pvPortMalloc+0x188>)
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	4a1b      	ldr	r2, [pc, #108]	; (800b3b0 <pvPortMalloc+0x188>)
 800b344:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b346:	4b1a      	ldr	r3, [pc, #104]	; (800b3b0 <pvPortMalloc+0x188>)
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	4b1b      	ldr	r3, [pc, #108]	; (800b3b8 <pvPortMalloc+0x190>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d203      	bcs.n	800b35a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b352:	4b17      	ldr	r3, [pc, #92]	; (800b3b0 <pvPortMalloc+0x188>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a18      	ldr	r2, [pc, #96]	; (800b3b8 <pvPortMalloc+0x190>)
 800b358:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	4b13      	ldr	r3, [pc, #76]	; (800b3ac <pvPortMalloc+0x184>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	431a      	orrs	r2, r3
 800b364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b366:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36a:	2200      	movs	r2, #0
 800b36c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b36e:	4b13      	ldr	r3, [pc, #76]	; (800b3bc <pvPortMalloc+0x194>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	3301      	adds	r3, #1
 800b374:	4a11      	ldr	r2, [pc, #68]	; (800b3bc <pvPortMalloc+0x194>)
 800b376:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b378:	f001 fc50 	bl	800cc1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	f003 0307 	and.w	r3, r3, #7
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00a      	beq.n	800b39c <pvPortMalloc+0x174>
	__asm volatile
 800b386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38a:	f383 8811 	msr	BASEPRI, r3
 800b38e:	f3bf 8f6f 	isb	sy
 800b392:	f3bf 8f4f 	dsb	sy
 800b396:	60fb      	str	r3, [r7, #12]
}
 800b398:	bf00      	nop
 800b39a:	e7fe      	b.n	800b39a <pvPortMalloc+0x172>
	return pvReturn;
 800b39c:	69fb      	ldr	r3, [r7, #28]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3728      	adds	r7, #40	; 0x28
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	20004538 	.word	0x20004538
 800b3ac:	2000454c 	.word	0x2000454c
 800b3b0:	2000453c 	.word	0x2000453c
 800b3b4:	20004530 	.word	0x20004530
 800b3b8:	20004540 	.word	0x20004540
 800b3bc:	20004544 	.word	0x20004544

0800b3c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d04d      	beq.n	800b46e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b3d2:	2308      	movs	r3, #8
 800b3d4:	425b      	negs	r3, r3
 800b3d6:	697a      	ldr	r2, [r7, #20]
 800b3d8:	4413      	add	r3, r2
 800b3da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	685a      	ldr	r2, [r3, #4]
 800b3e4:	4b24      	ldr	r3, [pc, #144]	; (800b478 <vPortFree+0xb8>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10a      	bne.n	800b404 <vPortFree+0x44>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	60fb      	str	r3, [r7, #12]
}
 800b400:	bf00      	nop
 800b402:	e7fe      	b.n	800b402 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00a      	beq.n	800b422 <vPortFree+0x62>
	__asm volatile
 800b40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b410:	f383 8811 	msr	BASEPRI, r3
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	f3bf 8f4f 	dsb	sy
 800b41c:	60bb      	str	r3, [r7, #8]
}
 800b41e:	bf00      	nop
 800b420:	e7fe      	b.n	800b420 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	685a      	ldr	r2, [r3, #4]
 800b426:	4b14      	ldr	r3, [pc, #80]	; (800b478 <vPortFree+0xb8>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4013      	ands	r3, r2
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01e      	beq.n	800b46e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d11a      	bne.n	800b46e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	4b0e      	ldr	r3, [pc, #56]	; (800b478 <vPortFree+0xb8>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	43db      	mvns	r3, r3
 800b442:	401a      	ands	r2, r3
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b448:	f001 fbda 	bl	800cc00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	685a      	ldr	r2, [r3, #4]
 800b450:	4b0a      	ldr	r3, [pc, #40]	; (800b47c <vPortFree+0xbc>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4413      	add	r3, r2
 800b456:	4a09      	ldr	r2, [pc, #36]	; (800b47c <vPortFree+0xbc>)
 800b458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b45a:	6938      	ldr	r0, [r7, #16]
 800b45c:	f000 f874 	bl	800b548 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b460:	4b07      	ldr	r3, [pc, #28]	; (800b480 <vPortFree+0xc0>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	3301      	adds	r3, #1
 800b466:	4a06      	ldr	r2, [pc, #24]	; (800b480 <vPortFree+0xc0>)
 800b468:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b46a:	f001 fbd7 	bl	800cc1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b46e:	bf00      	nop
 800b470:	3718      	adds	r7, #24
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	2000454c 	.word	0x2000454c
 800b47c:	2000453c 	.word	0x2000453c
 800b480:	20004548 	.word	0x20004548

0800b484 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b48a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b48e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b490:	4b27      	ldr	r3, [pc, #156]	; (800b530 <prvHeapInit+0xac>)
 800b492:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f003 0307 	and.w	r3, r3, #7
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00c      	beq.n	800b4b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	3307      	adds	r3, #7
 800b4a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f023 0307 	bic.w	r3, r3, #7
 800b4aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	4a1f      	ldr	r2, [pc, #124]	; (800b530 <prvHeapInit+0xac>)
 800b4b4:	4413      	add	r3, r2
 800b4b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b4bc:	4a1d      	ldr	r2, [pc, #116]	; (800b534 <prvHeapInit+0xb0>)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b4c2:	4b1c      	ldr	r3, [pc, #112]	; (800b534 <prvHeapInit+0xb0>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b4d0:	2208      	movs	r2, #8
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	1a9b      	subs	r3, r3, r2
 800b4d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f023 0307 	bic.w	r3, r3, #7
 800b4de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	4a15      	ldr	r2, [pc, #84]	; (800b538 <prvHeapInit+0xb4>)
 800b4e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b4e6:	4b14      	ldr	r3, [pc, #80]	; (800b538 <prvHeapInit+0xb4>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b4ee:	4b12      	ldr	r3, [pc, #72]	; (800b538 <prvHeapInit+0xb4>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	1ad2      	subs	r2, r2, r3
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b504:	4b0c      	ldr	r3, [pc, #48]	; (800b538 <prvHeapInit+0xb4>)
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	4a0a      	ldr	r2, [pc, #40]	; (800b53c <prvHeapInit+0xb8>)
 800b512:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	4a09      	ldr	r2, [pc, #36]	; (800b540 <prvHeapInit+0xbc>)
 800b51a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b51c:	4b09      	ldr	r3, [pc, #36]	; (800b544 <prvHeapInit+0xc0>)
 800b51e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b522:	601a      	str	r2, [r3, #0]
}
 800b524:	bf00      	nop
 800b526:	3714      	adds	r7, #20
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	20000930 	.word	0x20000930
 800b534:	20004530 	.word	0x20004530
 800b538:	20004538 	.word	0x20004538
 800b53c:	20004540 	.word	0x20004540
 800b540:	2000453c 	.word	0x2000453c
 800b544:	2000454c 	.word	0x2000454c

0800b548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b550:	4b28      	ldr	r3, [pc, #160]	; (800b5f4 <prvInsertBlockIntoFreeList+0xac>)
 800b552:	60fb      	str	r3, [r7, #12]
 800b554:	e002      	b.n	800b55c <prvInsertBlockIntoFreeList+0x14>
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	60fb      	str	r3, [r7, #12]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	429a      	cmp	r2, r3
 800b564:	d8f7      	bhi.n	800b556 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	4413      	add	r3, r2
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	429a      	cmp	r2, r3
 800b576:	d108      	bne.n	800b58a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	685a      	ldr	r2, [r3, #4]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	441a      	add	r2, r3
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	441a      	add	r2, r3
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d118      	bne.n	800b5d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	4b15      	ldr	r3, [pc, #84]	; (800b5f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d00d      	beq.n	800b5c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	685a      	ldr	r2, [r3, #4]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	441a      	add	r2, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	601a      	str	r2, [r3, #0]
 800b5c4:	e008      	b.n	800b5d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b5c6:	4b0c      	ldr	r3, [pc, #48]	; (800b5f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	601a      	str	r2, [r3, #0]
 800b5ce:	e003      	b.n	800b5d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d002      	beq.n	800b5e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5e6:	bf00      	nop
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	20004530 	.word	0x20004530
 800b5f8:	20004538 	.word	0x20004538

0800b5fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f103 0208 	add.w	r2, r3, #8
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f04f 32ff 	mov.w	r2, #4294967295
 800b614:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f103 0208 	add.w	r2, r3, #8
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f103 0208 	add.w	r2, r3, #8
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b64a:	bf00      	nop
 800b64c:	370c      	adds	r7, #12
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr

0800b656 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b656:	b480      	push	{r7}
 800b658:	b085      	sub	sp, #20
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	689a      	ldr	r2, [r3, #8]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	683a      	ldr	r2, [r7, #0]
 800b680:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	1c5a      	adds	r2, r3, #1
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	601a      	str	r2, [r3, #0]
}
 800b692:	bf00      	nop
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b69e:	b480      	push	{r7}
 800b6a0:	b085      	sub	sp, #20
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6b4:	d103      	bne.n	800b6be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	60fb      	str	r3, [r7, #12]
 800b6bc:	e00c      	b.n	800b6d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	3308      	adds	r3, #8
 800b6c2:	60fb      	str	r3, [r7, #12]
 800b6c4:	e002      	b.n	800b6cc <vListInsert+0x2e>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	60fb      	str	r3, [r7, #12]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	68ba      	ldr	r2, [r7, #8]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d2f6      	bcs.n	800b6c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	685a      	ldr	r2, [r3, #4]
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	683a      	ldr	r2, [r7, #0]
 800b6e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	683a      	ldr	r2, [r7, #0]
 800b6f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	601a      	str	r2, [r3, #0]
}
 800b704:	bf00      	nop
 800b706:	3714      	adds	r7, #20
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	6892      	ldr	r2, [r2, #8]
 800b726:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	6852      	ldr	r2, [r2, #4]
 800b730:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d103      	bne.n	800b744 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	689a      	ldr	r2, [r3, #8]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	1e5a      	subs	r2, r3, #1
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	3b04      	subs	r3, #4
 800b774:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b77c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3b04      	subs	r3, #4
 800b782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	f023 0201 	bic.w	r2, r3, #1
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	3b04      	subs	r3, #4
 800b792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b794:	4a0c      	ldr	r2, [pc, #48]	; (800b7c8 <pxPortInitialiseStack+0x64>)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	3b14      	subs	r3, #20
 800b79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	3b04      	subs	r3, #4
 800b7aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f06f 0202 	mvn.w	r2, #2
 800b7b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	3b20      	subs	r3, #32
 800b7b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3714      	adds	r7, #20
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	0800b7cd 	.word	0x0800b7cd

0800b7cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b7d6:	4b12      	ldr	r3, [pc, #72]	; (800b820 <prvTaskExitError+0x54>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7de:	d00a      	beq.n	800b7f6 <prvTaskExitError+0x2a>
	__asm volatile
 800b7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	60fb      	str	r3, [r7, #12]
}
 800b7f2:	bf00      	nop
 800b7f4:	e7fe      	b.n	800b7f4 <prvTaskExitError+0x28>
	__asm volatile
 800b7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fa:	f383 8811 	msr	BASEPRI, r3
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f3bf 8f4f 	dsb	sy
 800b806:	60bb      	str	r3, [r7, #8]
}
 800b808:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b80a:	bf00      	nop
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d0fc      	beq.n	800b80c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b812:	bf00      	nop
 800b814:	bf00      	nop
 800b816:	3714      	adds	r7, #20
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr
 800b820:	20000068 	.word	0x20000068
	...

0800b830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b830:	4b07      	ldr	r3, [pc, #28]	; (800b850 <pxCurrentTCBConst2>)
 800b832:	6819      	ldr	r1, [r3, #0]
 800b834:	6808      	ldr	r0, [r1, #0]
 800b836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b83a:	f380 8809 	msr	PSP, r0
 800b83e:	f3bf 8f6f 	isb	sy
 800b842:	f04f 0000 	mov.w	r0, #0
 800b846:	f380 8811 	msr	BASEPRI, r0
 800b84a:	4770      	bx	lr
 800b84c:	f3af 8000 	nop.w

0800b850 <pxCurrentTCBConst2>:
 800b850:	20004558 	.word	0x20004558
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b854:	bf00      	nop
 800b856:	bf00      	nop

0800b858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b858:	4808      	ldr	r0, [pc, #32]	; (800b87c <prvPortStartFirstTask+0x24>)
 800b85a:	6800      	ldr	r0, [r0, #0]
 800b85c:	6800      	ldr	r0, [r0, #0]
 800b85e:	f380 8808 	msr	MSP, r0
 800b862:	f04f 0000 	mov.w	r0, #0
 800b866:	f380 8814 	msr	CONTROL, r0
 800b86a:	b662      	cpsie	i
 800b86c:	b661      	cpsie	f
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	f3bf 8f6f 	isb	sy
 800b876:	df00      	svc	0
 800b878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b87a:	bf00      	nop
 800b87c:	e000ed08 	.word	0xe000ed08

0800b880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b886:	4b46      	ldr	r3, [pc, #280]	; (800b9a0 <xPortStartScheduler+0x120>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a46      	ldr	r2, [pc, #280]	; (800b9a4 <xPortStartScheduler+0x124>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d10a      	bne.n	800b8a6 <xPortStartScheduler+0x26>
	__asm volatile
 800b890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b894:	f383 8811 	msr	BASEPRI, r3
 800b898:	f3bf 8f6f 	isb	sy
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	613b      	str	r3, [r7, #16]
}
 800b8a2:	bf00      	nop
 800b8a4:	e7fe      	b.n	800b8a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b8a6:	4b3e      	ldr	r3, [pc, #248]	; (800b9a0 <xPortStartScheduler+0x120>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a3f      	ldr	r2, [pc, #252]	; (800b9a8 <xPortStartScheduler+0x128>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d10a      	bne.n	800b8c6 <xPortStartScheduler+0x46>
	__asm volatile
 800b8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	60fb      	str	r3, [r7, #12]
}
 800b8c2:	bf00      	nop
 800b8c4:	e7fe      	b.n	800b8c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b8c6:	4b39      	ldr	r3, [pc, #228]	; (800b9ac <xPortStartScheduler+0x12c>)
 800b8c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	22ff      	movs	r2, #255	; 0xff
 800b8d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8e0:	78fb      	ldrb	r3, [r7, #3]
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b8e8:	b2da      	uxtb	r2, r3
 800b8ea:	4b31      	ldr	r3, [pc, #196]	; (800b9b0 <xPortStartScheduler+0x130>)
 800b8ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b8ee:	4b31      	ldr	r3, [pc, #196]	; (800b9b4 <xPortStartScheduler+0x134>)
 800b8f0:	2207      	movs	r2, #7
 800b8f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8f4:	e009      	b.n	800b90a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b8f6:	4b2f      	ldr	r3, [pc, #188]	; (800b9b4 <xPortStartScheduler+0x134>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	4a2d      	ldr	r2, [pc, #180]	; (800b9b4 <xPortStartScheduler+0x134>)
 800b8fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b900:	78fb      	ldrb	r3, [r7, #3]
 800b902:	b2db      	uxtb	r3, r3
 800b904:	005b      	lsls	r3, r3, #1
 800b906:	b2db      	uxtb	r3, r3
 800b908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b90a:	78fb      	ldrb	r3, [r7, #3]
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b912:	2b80      	cmp	r3, #128	; 0x80
 800b914:	d0ef      	beq.n	800b8f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b916:	4b27      	ldr	r3, [pc, #156]	; (800b9b4 <xPortStartScheduler+0x134>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f1c3 0307 	rsb	r3, r3, #7
 800b91e:	2b04      	cmp	r3, #4
 800b920:	d00a      	beq.n	800b938 <xPortStartScheduler+0xb8>
	__asm volatile
 800b922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	60bb      	str	r3, [r7, #8]
}
 800b934:	bf00      	nop
 800b936:	e7fe      	b.n	800b936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b938:	4b1e      	ldr	r3, [pc, #120]	; (800b9b4 <xPortStartScheduler+0x134>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	021b      	lsls	r3, r3, #8
 800b93e:	4a1d      	ldr	r2, [pc, #116]	; (800b9b4 <xPortStartScheduler+0x134>)
 800b940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b942:	4b1c      	ldr	r3, [pc, #112]	; (800b9b4 <xPortStartScheduler+0x134>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b94a:	4a1a      	ldr	r2, [pc, #104]	; (800b9b4 <xPortStartScheduler+0x134>)
 800b94c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	b2da      	uxtb	r2, r3
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b956:	4b18      	ldr	r3, [pc, #96]	; (800b9b8 <xPortStartScheduler+0x138>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a17      	ldr	r2, [pc, #92]	; (800b9b8 <xPortStartScheduler+0x138>)
 800b95c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b962:	4b15      	ldr	r3, [pc, #84]	; (800b9b8 <xPortStartScheduler+0x138>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a14      	ldr	r2, [pc, #80]	; (800b9b8 <xPortStartScheduler+0x138>)
 800b968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b96c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b96e:	f000 f8dd 	bl	800bb2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b972:	4b12      	ldr	r3, [pc, #72]	; (800b9bc <xPortStartScheduler+0x13c>)
 800b974:	2200      	movs	r2, #0
 800b976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b978:	f000 f8fc 	bl	800bb74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b97c:	4b10      	ldr	r3, [pc, #64]	; (800b9c0 <xPortStartScheduler+0x140>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a0f      	ldr	r2, [pc, #60]	; (800b9c0 <xPortStartScheduler+0x140>)
 800b982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b988:	f7ff ff66 	bl	800b858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b98c:	f001 fa9a 	bl	800cec4 <vTaskSwitchContext>
	prvTaskExitError();
 800b990:	f7ff ff1c 	bl	800b7cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3718      	adds	r7, #24
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	e000ed00 	.word	0xe000ed00
 800b9a4:	410fc271 	.word	0x410fc271
 800b9a8:	410fc270 	.word	0x410fc270
 800b9ac:	e000e400 	.word	0xe000e400
 800b9b0:	20004550 	.word	0x20004550
 800b9b4:	20004554 	.word	0x20004554
 800b9b8:	e000ed20 	.word	0xe000ed20
 800b9bc:	20000068 	.word	0x20000068
 800b9c0:	e000ef34 	.word	0xe000ef34

0800b9c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
	__asm volatile
 800b9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ce:	f383 8811 	msr	BASEPRI, r3
 800b9d2:	f3bf 8f6f 	isb	sy
 800b9d6:	f3bf 8f4f 	dsb	sy
 800b9da:	607b      	str	r3, [r7, #4]
}
 800b9dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b9de:	4b0f      	ldr	r3, [pc, #60]	; (800ba1c <vPortEnterCritical+0x58>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	4a0d      	ldr	r2, [pc, #52]	; (800ba1c <vPortEnterCritical+0x58>)
 800b9e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b9e8:	4b0c      	ldr	r3, [pc, #48]	; (800ba1c <vPortEnterCritical+0x58>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d10f      	bne.n	800ba10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b9f0:	4b0b      	ldr	r3, [pc, #44]	; (800ba20 <vPortEnterCritical+0x5c>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00a      	beq.n	800ba10 <vPortEnterCritical+0x4c>
	__asm volatile
 800b9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	603b      	str	r3, [r7, #0]
}
 800ba0c:	bf00      	nop
 800ba0e:	e7fe      	b.n	800ba0e <vPortEnterCritical+0x4a>
	}
}
 800ba10:	bf00      	nop
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr
 800ba1c:	20000068 	.word	0x20000068
 800ba20:	e000ed04 	.word	0xe000ed04

0800ba24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba2a:	4b12      	ldr	r3, [pc, #72]	; (800ba74 <vPortExitCritical+0x50>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d10a      	bne.n	800ba48 <vPortExitCritical+0x24>
	__asm volatile
 800ba32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba36:	f383 8811 	msr	BASEPRI, r3
 800ba3a:	f3bf 8f6f 	isb	sy
 800ba3e:	f3bf 8f4f 	dsb	sy
 800ba42:	607b      	str	r3, [r7, #4]
}
 800ba44:	bf00      	nop
 800ba46:	e7fe      	b.n	800ba46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba48:	4b0a      	ldr	r3, [pc, #40]	; (800ba74 <vPortExitCritical+0x50>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	4a09      	ldr	r2, [pc, #36]	; (800ba74 <vPortExitCritical+0x50>)
 800ba50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba52:	4b08      	ldr	r3, [pc, #32]	; (800ba74 <vPortExitCritical+0x50>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d105      	bne.n	800ba66 <vPortExitCritical+0x42>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba66:	bf00      	nop
 800ba68:	370c      	adds	r7, #12
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	20000068 	.word	0x20000068
	...

0800ba80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba80:	f3ef 8009 	mrs	r0, PSP
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	4b15      	ldr	r3, [pc, #84]	; (800bae0 <pxCurrentTCBConst>)
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	f01e 0f10 	tst.w	lr, #16
 800ba90:	bf08      	it	eq
 800ba92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ba96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9a:	6010      	str	r0, [r2, #0]
 800ba9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800baa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800baa4:	f380 8811 	msr	BASEPRI, r0
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f001 fa08 	bl	800cec4 <vTaskSwitchContext>
 800bab4:	f04f 0000 	mov.w	r0, #0
 800bab8:	f380 8811 	msr	BASEPRI, r0
 800babc:	bc09      	pop	{r0, r3}
 800babe:	6819      	ldr	r1, [r3, #0]
 800bac0:	6808      	ldr	r0, [r1, #0]
 800bac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac6:	f01e 0f10 	tst.w	lr, #16
 800baca:	bf08      	it	eq
 800bacc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bad0:	f380 8809 	msr	PSP, r0
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	f3af 8000 	nop.w

0800bae0 <pxCurrentTCBConst>:
 800bae0:	20004558 	.word	0x20004558
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bae4:	bf00      	nop
 800bae6:	bf00      	nop

0800bae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
	__asm volatile
 800baee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	607b      	str	r3, [r7, #4]
}
 800bb00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb02:	f001 f927 	bl	800cd54 <xTaskIncrementTick>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d003      	beq.n	800bb14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb0c:	4b06      	ldr	r3, [pc, #24]	; (800bb28 <SysTick_Handler+0x40>)
 800bb0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb12:	601a      	str	r2, [r3, #0]
 800bb14:	2300      	movs	r3, #0
 800bb16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	f383 8811 	msr	BASEPRI, r3
}
 800bb1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb20:	bf00      	nop
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	e000ed04 	.word	0xe000ed04

0800bb2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb30:	4b0b      	ldr	r3, [pc, #44]	; (800bb60 <vPortSetupTimerInterrupt+0x34>)
 800bb32:	2200      	movs	r2, #0
 800bb34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb36:	4b0b      	ldr	r3, [pc, #44]	; (800bb64 <vPortSetupTimerInterrupt+0x38>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb3c:	4b0a      	ldr	r3, [pc, #40]	; (800bb68 <vPortSetupTimerInterrupt+0x3c>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a0a      	ldr	r2, [pc, #40]	; (800bb6c <vPortSetupTimerInterrupt+0x40>)
 800bb42:	fba2 2303 	umull	r2, r3, r2, r3
 800bb46:	099b      	lsrs	r3, r3, #6
 800bb48:	4a09      	ldr	r2, [pc, #36]	; (800bb70 <vPortSetupTimerInterrupt+0x44>)
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb4e:	4b04      	ldr	r3, [pc, #16]	; (800bb60 <vPortSetupTimerInterrupt+0x34>)
 800bb50:	2207      	movs	r2, #7
 800bb52:	601a      	str	r2, [r3, #0]
}
 800bb54:	bf00      	nop
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	e000e010 	.word	0xe000e010
 800bb64:	e000e018 	.word	0xe000e018
 800bb68:	2000005c 	.word	0x2000005c
 800bb6c:	10624dd3 	.word	0x10624dd3
 800bb70:	e000e014 	.word	0xe000e014

0800bb74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bb74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bb84 <vPortEnableVFP+0x10>
 800bb78:	6801      	ldr	r1, [r0, #0]
 800bb7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bb7e:	6001      	str	r1, [r0, #0]
 800bb80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bb82:	bf00      	nop
 800bb84:	e000ed88 	.word	0xe000ed88

0800bb88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb8e:	f3ef 8305 	mrs	r3, IPSR
 800bb92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2b0f      	cmp	r3, #15
 800bb98:	d914      	bls.n	800bbc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb9a:	4a17      	ldr	r2, [pc, #92]	; (800bbf8 <vPortValidateInterruptPriority+0x70>)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	4413      	add	r3, r2
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bba4:	4b15      	ldr	r3, [pc, #84]	; (800bbfc <vPortValidateInterruptPriority+0x74>)
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	7afa      	ldrb	r2, [r7, #11]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d20a      	bcs.n	800bbc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb2:	f383 8811 	msr	BASEPRI, r3
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	607b      	str	r3, [r7, #4]
}
 800bbc0:	bf00      	nop
 800bbc2:	e7fe      	b.n	800bbc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bbc4:	4b0e      	ldr	r3, [pc, #56]	; (800bc00 <vPortValidateInterruptPriority+0x78>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bbcc:	4b0d      	ldr	r3, [pc, #52]	; (800bc04 <vPortValidateInterruptPriority+0x7c>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d90a      	bls.n	800bbea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	603b      	str	r3, [r7, #0]
}
 800bbe6:	bf00      	nop
 800bbe8:	e7fe      	b.n	800bbe8 <vPortValidateInterruptPriority+0x60>
	}
 800bbea:	bf00      	nop
 800bbec:	3714      	adds	r7, #20
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop
 800bbf8:	e000e3f0 	.word	0xe000e3f0
 800bbfc:	20004550 	.word	0x20004550
 800bc00:	e000ed0c 	.word	0xe000ed0c
 800bc04:	20004554 	.word	0x20004554

0800bc08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10a      	bne.n	800bc32 <xQueueGenericReset+0x2a>
	__asm volatile
 800bc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	60bb      	str	r3, [r7, #8]
}
 800bc2e:	bf00      	nop
 800bc30:	e7fe      	b.n	800bc30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bc32:	f7ff fec7 	bl	800b9c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc3e:	68f9      	ldr	r1, [r7, #12]
 800bc40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc42:	fb01 f303 	mul.w	r3, r1, r3
 800bc46:	441a      	add	r2, r3
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc62:	3b01      	subs	r3, #1
 800bc64:	68f9      	ldr	r1, [r7, #12]
 800bc66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc68:	fb01 f303 	mul.w	r3, r1, r3
 800bc6c:	441a      	add	r2, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	22ff      	movs	r2, #255	; 0xff
 800bc76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	22ff      	movs	r2, #255	; 0xff
 800bc7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d114      	bne.n	800bcb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	691b      	ldr	r3, [r3, #16]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d01a      	beq.n	800bcc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	3310      	adds	r3, #16
 800bc94:	4618      	mov	r0, r3
 800bc96:	f001 f995 	bl	800cfc4 <xTaskRemoveFromEventList>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d012      	beq.n	800bcc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bca0:	4b0c      	ldr	r3, [pc, #48]	; (800bcd4 <xQueueGenericReset+0xcc>)
 800bca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bca6:	601a      	str	r2, [r3, #0]
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	e009      	b.n	800bcc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	3310      	adds	r3, #16
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7ff fca0 	bl	800b5fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	3324      	adds	r3, #36	; 0x24
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7ff fc9b 	bl	800b5fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bcc6:	f7ff fead 	bl	800ba24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bcca:	2301      	movs	r3, #1
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	e000ed04 	.word	0xe000ed04

0800bcd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b08e      	sub	sp, #56	; 0x38
 800bcdc:	af02      	add	r7, sp, #8
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	607a      	str	r2, [r7, #4]
 800bce4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d10a      	bne.n	800bd02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bcec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf0:	f383 8811 	msr	BASEPRI, r3
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcfe:	bf00      	nop
 800bd00:	e7fe      	b.n	800bd00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d10a      	bne.n	800bd1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0c:	f383 8811 	msr	BASEPRI, r3
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd1a:	bf00      	nop
 800bd1c:	e7fe      	b.n	800bd1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d002      	beq.n	800bd2a <xQueueGenericCreateStatic+0x52>
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <xQueueGenericCreateStatic+0x56>
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e000      	b.n	800bd30 <xQueueGenericCreateStatic+0x58>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10a      	bne.n	800bd4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	623b      	str	r3, [r7, #32]
}
 800bd46:	bf00      	nop
 800bd48:	e7fe      	b.n	800bd48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d102      	bne.n	800bd56 <xQueueGenericCreateStatic+0x7e>
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <xQueueGenericCreateStatic+0x82>
 800bd56:	2301      	movs	r3, #1
 800bd58:	e000      	b.n	800bd5c <xQueueGenericCreateStatic+0x84>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10a      	bne.n	800bd76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	61fb      	str	r3, [r7, #28]
}
 800bd72:	bf00      	nop
 800bd74:	e7fe      	b.n	800bd74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd76:	2348      	movs	r3, #72	; 0x48
 800bd78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	2b48      	cmp	r3, #72	; 0x48
 800bd7e:	d00a      	beq.n	800bd96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	f383 8811 	msr	BASEPRI, r3
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	61bb      	str	r3, [r7, #24]
}
 800bd92:	bf00      	nop
 800bd94:	e7fe      	b.n	800bd94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00d      	beq.n	800bdbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda4:	2201      	movs	r2, #1
 800bda6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bdaa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	68b9      	ldr	r1, [r7, #8]
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f000 f83f 	bl	800be3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3730      	adds	r7, #48	; 0x30
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b08a      	sub	sp, #40	; 0x28
 800bdcc:	af02      	add	r7, sp, #8
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10a      	bne.n	800bdf2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	613b      	str	r3, [r7, #16]
}
 800bdee:	bf00      	nop
 800bdf0:	e7fe      	b.n	800bdf0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	fb02 f303 	mul.w	r3, r2, r3
 800bdfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	3348      	adds	r3, #72	; 0x48
 800be00:	4618      	mov	r0, r3
 800be02:	f7ff fa11 	bl	800b228 <pvPortMalloc>
 800be06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800be08:	69bb      	ldr	r3, [r7, #24]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d011      	beq.n	800be32 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	3348      	adds	r3, #72	; 0x48
 800be16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be20:	79fa      	ldrb	r2, [r7, #7]
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	4613      	mov	r3, r2
 800be28:	697a      	ldr	r2, [r7, #20]
 800be2a:	68b9      	ldr	r1, [r7, #8]
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f000 f805 	bl	800be3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be32:	69bb      	ldr	r3, [r7, #24]
	}
 800be34:	4618      	mov	r0, r3
 800be36:	3720      	adds	r7, #32
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
 800be48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d103      	bne.n	800be58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	69ba      	ldr	r2, [r7, #24]
 800be54:	601a      	str	r2, [r3, #0]
 800be56:	e002      	b.n	800be5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	68ba      	ldr	r2, [r7, #8]
 800be68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be6a:	2101      	movs	r1, #1
 800be6c:	69b8      	ldr	r0, [r7, #24]
 800be6e:	f7ff fecb 	bl	800bc08 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be72:	bf00      	nop
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
	...

0800be7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b08e      	sub	sp, #56	; 0x38
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
 800be88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be8a:	2300      	movs	r3, #0
 800be8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10a      	bne.n	800beae <xQueueGenericSend+0x32>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800beaa:	bf00      	nop
 800beac:	e7fe      	b.n	800beac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d103      	bne.n	800bebc <xQueueGenericSend+0x40>
 800beb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d101      	bne.n	800bec0 <xQueueGenericSend+0x44>
 800bebc:	2301      	movs	r3, #1
 800bebe:	e000      	b.n	800bec2 <xQueueGenericSend+0x46>
 800bec0:	2300      	movs	r3, #0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10a      	bne.n	800bedc <xQueueGenericSend+0x60>
	__asm volatile
 800bec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beca:	f383 8811 	msr	BASEPRI, r3
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f3bf 8f4f 	dsb	sy
 800bed6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bed8:	bf00      	nop
 800beda:	e7fe      	b.n	800beda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	2b02      	cmp	r3, #2
 800bee0:	d103      	bne.n	800beea <xQueueGenericSend+0x6e>
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d101      	bne.n	800beee <xQueueGenericSend+0x72>
 800beea:	2301      	movs	r3, #1
 800beec:	e000      	b.n	800bef0 <xQueueGenericSend+0x74>
 800beee:	2300      	movs	r3, #0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10a      	bne.n	800bf0a <xQueueGenericSend+0x8e>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	623b      	str	r3, [r7, #32]
}
 800bf06:	bf00      	nop
 800bf08:	e7fe      	b.n	800bf08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf0a:	f001 fa17 	bl	800d33c <xTaskGetSchedulerState>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d102      	bne.n	800bf1a <xQueueGenericSend+0x9e>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d101      	bne.n	800bf1e <xQueueGenericSend+0xa2>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e000      	b.n	800bf20 <xQueueGenericSend+0xa4>
 800bf1e:	2300      	movs	r3, #0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d10a      	bne.n	800bf3a <xQueueGenericSend+0xbe>
	__asm volatile
 800bf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf28:	f383 8811 	msr	BASEPRI, r3
 800bf2c:	f3bf 8f6f 	isb	sy
 800bf30:	f3bf 8f4f 	dsb	sy
 800bf34:	61fb      	str	r3, [r7, #28]
}
 800bf36:	bf00      	nop
 800bf38:	e7fe      	b.n	800bf38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf3a:	f7ff fd43 	bl	800b9c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d302      	bcc.n	800bf50 <xQueueGenericSend+0xd4>
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	2b02      	cmp	r3, #2
 800bf4e:	d129      	bne.n	800bfa4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf50:	683a      	ldr	r2, [r7, #0]
 800bf52:	68b9      	ldr	r1, [r7, #8]
 800bf54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf56:	f000 fa8b 	bl	800c470 <prvCopyDataToQueue>
 800bf5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d010      	beq.n	800bf86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf66:	3324      	adds	r3, #36	; 0x24
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f001 f82b 	bl	800cfc4 <xTaskRemoveFromEventList>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d013      	beq.n	800bf9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf74:	4b3f      	ldr	r3, [pc, #252]	; (800c074 <xQueueGenericSend+0x1f8>)
 800bf76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf7a:	601a      	str	r2, [r3, #0]
 800bf7c:	f3bf 8f4f 	dsb	sy
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	e00a      	b.n	800bf9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d007      	beq.n	800bf9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf8c:	4b39      	ldr	r3, [pc, #228]	; (800c074 <xQueueGenericSend+0x1f8>)
 800bf8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf9c:	f7ff fd42 	bl	800ba24 <vPortExitCritical>
				return pdPASS;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e063      	b.n	800c06c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d103      	bne.n	800bfb2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bfaa:	f7ff fd3b 	bl	800ba24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	e05c      	b.n	800c06c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d106      	bne.n	800bfc6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfb8:	f107 0314 	add.w	r3, r7, #20
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f001 f863 	bl	800d088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfc6:	f7ff fd2d 	bl	800ba24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfca:	f000 fe19 	bl	800cc00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfce:	f7ff fcf9 	bl	800b9c4 <vPortEnterCritical>
 800bfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfd8:	b25b      	sxtb	r3, r3
 800bfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfde:	d103      	bne.n	800bfe8 <xQueueGenericSend+0x16c>
 800bfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfee:	b25b      	sxtb	r3, r3
 800bff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff4:	d103      	bne.n	800bffe <xQueueGenericSend+0x182>
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bffe:	f7ff fd11 	bl	800ba24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c002:	1d3a      	adds	r2, r7, #4
 800c004:	f107 0314 	add.w	r3, r7, #20
 800c008:	4611      	mov	r1, r2
 800c00a:	4618      	mov	r0, r3
 800c00c:	f001 f852 	bl	800d0b4 <xTaskCheckForTimeOut>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d124      	bne.n	800c060 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c016:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c018:	f000 fb22 	bl	800c660 <prvIsQueueFull>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d018      	beq.n	800c054 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c024:	3310      	adds	r3, #16
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	4611      	mov	r1, r2
 800c02a:	4618      	mov	r0, r3
 800c02c:	f000 ffa6 	bl	800cf7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c032:	f000 faad 	bl	800c590 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c036:	f000 fdf1 	bl	800cc1c <xTaskResumeAll>
 800c03a:	4603      	mov	r3, r0
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f47f af7c 	bne.w	800bf3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c042:	4b0c      	ldr	r3, [pc, #48]	; (800c074 <xQueueGenericSend+0x1f8>)
 800c044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c048:	601a      	str	r2, [r3, #0]
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	f3bf 8f6f 	isb	sy
 800c052:	e772      	b.n	800bf3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c056:	f000 fa9b 	bl	800c590 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c05a:	f000 fddf 	bl	800cc1c <xTaskResumeAll>
 800c05e:	e76c      	b.n	800bf3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c062:	f000 fa95 	bl	800c590 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c066:	f000 fdd9 	bl	800cc1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c06a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3738      	adds	r7, #56	; 0x38
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	e000ed04 	.word	0xe000ed04

0800c078 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b090      	sub	sp, #64	; 0x40
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10a      	bne.n	800c0a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c094:	f383 8811 	msr	BASEPRI, r3
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0a2:	bf00      	nop
 800c0a4:	e7fe      	b.n	800c0a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d103      	bne.n	800c0b4 <xQueueGenericSendFromISR+0x3c>
 800c0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d101      	bne.n	800c0b8 <xQueueGenericSendFromISR+0x40>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e000      	b.n	800c0ba <xQueueGenericSendFromISR+0x42>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10a      	bne.n	800c0d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0d0:	bf00      	nop
 800c0d2:	e7fe      	b.n	800c0d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d103      	bne.n	800c0e2 <xQueueGenericSendFromISR+0x6a>
 800c0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d101      	bne.n	800c0e6 <xQueueGenericSendFromISR+0x6e>
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e000      	b.n	800c0e8 <xQueueGenericSendFromISR+0x70>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d10a      	bne.n	800c102 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f0:	f383 8811 	msr	BASEPRI, r3
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	f3bf 8f4f 	dsb	sy
 800c0fc:	623b      	str	r3, [r7, #32]
}
 800c0fe:	bf00      	nop
 800c100:	e7fe      	b.n	800c100 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c102:	f7ff fd41 	bl	800bb88 <vPortValidateInterruptPriority>
	__asm volatile
 800c106:	f3ef 8211 	mrs	r2, BASEPRI
 800c10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10e:	f383 8811 	msr	BASEPRI, r3
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	61fa      	str	r2, [r7, #28]
 800c11c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c11e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c120:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d302      	bcc.n	800c134 <xQueueGenericSendFromISR+0xbc>
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	2b02      	cmp	r3, #2
 800c132:	d12f      	bne.n	800c194 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c142:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c144:	683a      	ldr	r2, [r7, #0]
 800c146:	68b9      	ldr	r1, [r7, #8]
 800c148:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c14a:	f000 f991 	bl	800c470 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c14e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c156:	d112      	bne.n	800c17e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d016      	beq.n	800c18e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c162:	3324      	adds	r3, #36	; 0x24
 800c164:	4618      	mov	r0, r3
 800c166:	f000 ff2d 	bl	800cfc4 <xTaskRemoveFromEventList>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00e      	beq.n	800c18e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00b      	beq.n	800c18e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	601a      	str	r2, [r3, #0]
 800c17c:	e007      	b.n	800c18e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c17e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c182:	3301      	adds	r3, #1
 800c184:	b2db      	uxtb	r3, r3
 800c186:	b25a      	sxtb	r2, r3
 800c188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c18e:	2301      	movs	r3, #1
 800c190:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c192:	e001      	b.n	800c198 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c194:	2300      	movs	r3, #0
 800c196:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	f383 8811 	msr	BASEPRI, r3
}
 800c1a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3740      	adds	r7, #64	; 0x40
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
	...

0800c1b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b08c      	sub	sp, #48	; 0x30
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10a      	bne.n	800c1e0 <xQueueReceive+0x30>
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	623b      	str	r3, [r7, #32]
}
 800c1dc:	bf00      	nop
 800c1de:	e7fe      	b.n	800c1de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d103      	bne.n	800c1ee <xQueueReceive+0x3e>
 800c1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d101      	bne.n	800c1f2 <xQueueReceive+0x42>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e000      	b.n	800c1f4 <xQueueReceive+0x44>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d10a      	bne.n	800c20e <xQueueReceive+0x5e>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	61fb      	str	r3, [r7, #28]
}
 800c20a:	bf00      	nop
 800c20c:	e7fe      	b.n	800c20c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c20e:	f001 f895 	bl	800d33c <xTaskGetSchedulerState>
 800c212:	4603      	mov	r3, r0
 800c214:	2b00      	cmp	r3, #0
 800c216:	d102      	bne.n	800c21e <xQueueReceive+0x6e>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d101      	bne.n	800c222 <xQueueReceive+0x72>
 800c21e:	2301      	movs	r3, #1
 800c220:	e000      	b.n	800c224 <xQueueReceive+0x74>
 800c222:	2300      	movs	r3, #0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10a      	bne.n	800c23e <xQueueReceive+0x8e>
	__asm volatile
 800c228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22c:	f383 8811 	msr	BASEPRI, r3
 800c230:	f3bf 8f6f 	isb	sy
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	61bb      	str	r3, [r7, #24]
}
 800c23a:	bf00      	nop
 800c23c:	e7fe      	b.n	800c23c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c23e:	f7ff fbc1 	bl	800b9c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c246:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d01f      	beq.n	800c28e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c24e:	68b9      	ldr	r1, [r7, #8]
 800c250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c252:	f000 f977 	bl	800c544 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c258:	1e5a      	subs	r2, r3, #1
 800c25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c260:	691b      	ldr	r3, [r3, #16]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00f      	beq.n	800c286 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c268:	3310      	adds	r3, #16
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 feaa 	bl	800cfc4 <xTaskRemoveFromEventList>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d007      	beq.n	800c286 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c276:	4b3d      	ldr	r3, [pc, #244]	; (800c36c <xQueueReceive+0x1bc>)
 800c278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c27c:	601a      	str	r2, [r3, #0]
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c286:	f7ff fbcd 	bl	800ba24 <vPortExitCritical>
				return pdPASS;
 800c28a:	2301      	movs	r3, #1
 800c28c:	e069      	b.n	800c362 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d103      	bne.n	800c29c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c294:	f7ff fbc6 	bl	800ba24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c298:	2300      	movs	r3, #0
 800c29a:	e062      	b.n	800c362 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d106      	bne.n	800c2b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2a2:	f107 0310 	add.w	r3, r7, #16
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 feee 	bl	800d088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2b0:	f7ff fbb8 	bl	800ba24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2b4:	f000 fca4 	bl	800cc00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2b8:	f7ff fb84 	bl	800b9c4 <vPortEnterCritical>
 800c2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2c2:	b25b      	sxtb	r3, r3
 800c2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c8:	d103      	bne.n	800c2d2 <xQueueReceive+0x122>
 800c2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2d8:	b25b      	sxtb	r3, r3
 800c2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2de:	d103      	bne.n	800c2e8 <xQueueReceive+0x138>
 800c2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2e8:	f7ff fb9c 	bl	800ba24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2ec:	1d3a      	adds	r2, r7, #4
 800c2ee:	f107 0310 	add.w	r3, r7, #16
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f000 fedd 	bl	800d0b4 <xTaskCheckForTimeOut>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d123      	bne.n	800c348 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c302:	f000 f997 	bl	800c634 <prvIsQueueEmpty>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d017      	beq.n	800c33c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30e:	3324      	adds	r3, #36	; 0x24
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	4611      	mov	r1, r2
 800c314:	4618      	mov	r0, r3
 800c316:	f000 fe31 	bl	800cf7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c31a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c31c:	f000 f938 	bl	800c590 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c320:	f000 fc7c 	bl	800cc1c <xTaskResumeAll>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d189      	bne.n	800c23e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c32a:	4b10      	ldr	r3, [pc, #64]	; (800c36c <xQueueReceive+0x1bc>)
 800c32c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c330:	601a      	str	r2, [r3, #0]
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	e780      	b.n	800c23e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c33c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c33e:	f000 f927 	bl	800c590 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c342:	f000 fc6b 	bl	800cc1c <xTaskResumeAll>
 800c346:	e77a      	b.n	800c23e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c34a:	f000 f921 	bl	800c590 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c34e:	f000 fc65 	bl	800cc1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c354:	f000 f96e 	bl	800c634 <prvIsQueueEmpty>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f43f af6f 	beq.w	800c23e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c360:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c362:	4618      	mov	r0, r3
 800c364:	3730      	adds	r7, #48	; 0x30
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	e000ed04 	.word	0xe000ed04

0800c370 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b08e      	sub	sp, #56	; 0x38
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c382:	2b00      	cmp	r3, #0
 800c384:	d10a      	bne.n	800c39c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38a:	f383 8811 	msr	BASEPRI, r3
 800c38e:	f3bf 8f6f 	isb	sy
 800c392:	f3bf 8f4f 	dsb	sy
 800c396:	623b      	str	r3, [r7, #32]
}
 800c398:	bf00      	nop
 800c39a:	e7fe      	b.n	800c39a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d103      	bne.n	800c3aa <xQueueReceiveFromISR+0x3a>
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d101      	bne.n	800c3ae <xQueueReceiveFromISR+0x3e>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e000      	b.n	800c3b0 <xQueueReceiveFromISR+0x40>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d10a      	bne.n	800c3ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b8:	f383 8811 	msr	BASEPRI, r3
 800c3bc:	f3bf 8f6f 	isb	sy
 800c3c0:	f3bf 8f4f 	dsb	sy
 800c3c4:	61fb      	str	r3, [r7, #28]
}
 800c3c6:	bf00      	nop
 800c3c8:	e7fe      	b.n	800c3c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3ca:	f7ff fbdd 	bl	800bb88 <vPortValidateInterruptPriority>
	__asm volatile
 800c3ce:	f3ef 8211 	mrs	r2, BASEPRI
 800c3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	61ba      	str	r2, [r7, #24]
 800c3e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c3e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d02f      	beq.n	800c456 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c400:	68b9      	ldr	r1, [r7, #8]
 800c402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c404:	f000 f89e 	bl	800c544 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40a:	1e5a      	subs	r2, r3, #1
 800c40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c410:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c418:	d112      	bne.n	800c440 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41c:	691b      	ldr	r3, [r3, #16]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d016      	beq.n	800c450 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c424:	3310      	adds	r3, #16
 800c426:	4618      	mov	r0, r3
 800c428:	f000 fdcc 	bl	800cfc4 <xTaskRemoveFromEventList>
 800c42c:	4603      	mov	r3, r0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00e      	beq.n	800c450 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00b      	beq.n	800c450 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	601a      	str	r2, [r3, #0]
 800c43e:	e007      	b.n	800c450 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c444:	3301      	adds	r3, #1
 800c446:	b2db      	uxtb	r3, r3
 800c448:	b25a      	sxtb	r2, r3
 800c44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c450:	2301      	movs	r3, #1
 800c452:	637b      	str	r3, [r7, #52]	; 0x34
 800c454:	e001      	b.n	800c45a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c456:	2300      	movs	r3, #0
 800c458:	637b      	str	r3, [r7, #52]	; 0x34
 800c45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	f383 8811 	msr	BASEPRI, r3
}
 800c464:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3738      	adds	r7, #56	; 0x38
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b086      	sub	sp, #24
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c47c:	2300      	movs	r3, #0
 800c47e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c484:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10d      	bne.n	800c4aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d14d      	bne.n	800c532 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f000 ff6c 	bl	800d378 <xTaskPriorityDisinherit>
 800c4a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	609a      	str	r2, [r3, #8]
 800c4a8:	e043      	b.n	800c532 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d119      	bne.n	800c4e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6858      	ldr	r0, [r3, #4]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	68b9      	ldr	r1, [r7, #8]
 800c4bc:	f003 fdd4 	bl	8010068 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	685a      	ldr	r2, [r3, #4]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c8:	441a      	add	r2, r3
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	685a      	ldr	r2, [r3, #4]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d32b      	bcc.n	800c532 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	605a      	str	r2, [r3, #4]
 800c4e2:	e026      	b.n	800c532 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	68d8      	ldr	r0, [r3, #12]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	68b9      	ldr	r1, [r7, #8]
 800c4f0:	f003 fdba 	bl	8010068 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	68da      	ldr	r2, [r3, #12]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4fc:	425b      	negs	r3, r3
 800c4fe:	441a      	add	r2, r3
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	68da      	ldr	r2, [r3, #12]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d207      	bcs.n	800c520 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	689a      	ldr	r2, [r3, #8]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c518:	425b      	negs	r3, r3
 800c51a:	441a      	add	r2, r3
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b02      	cmp	r3, #2
 800c524:	d105      	bne.n	800c532 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	3b01      	subs	r3, #1
 800c530:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	1c5a      	adds	r2, r3, #1
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c53a:	697b      	ldr	r3, [r7, #20]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3718      	adds	r7, #24
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c552:	2b00      	cmp	r3, #0
 800c554:	d018      	beq.n	800c588 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68da      	ldr	r2, [r3, #12]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c55e:	441a      	add	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	68da      	ldr	r2, [r3, #12]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d303      	bcc.n	800c578 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	68d9      	ldr	r1, [r3, #12]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c580:	461a      	mov	r2, r3
 800c582:	6838      	ldr	r0, [r7, #0]
 800c584:	f003 fd70 	bl	8010068 <memcpy>
	}
}
 800c588:	bf00      	nop
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c598:	f7ff fa14 	bl	800b9c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c5a4:	e011      	b.n	800c5ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d012      	beq.n	800c5d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	3324      	adds	r3, #36	; 0x24
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f000 fd06 	bl	800cfc4 <xTaskRemoveFromEventList>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d001      	beq.n	800c5c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c5be:	f000 fddb 	bl	800d178 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c5c2:	7bfb      	ldrb	r3, [r7, #15]
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c5ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	dce9      	bgt.n	800c5a6 <prvUnlockQueue+0x16>
 800c5d2:	e000      	b.n	800c5d6 <prvUnlockQueue+0x46>
					break;
 800c5d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	22ff      	movs	r2, #255	; 0xff
 800c5da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c5de:	f7ff fa21 	bl	800ba24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c5e2:	f7ff f9ef 	bl	800b9c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c5ee:	e011      	b.n	800c614 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	691b      	ldr	r3, [r3, #16]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d012      	beq.n	800c61e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	3310      	adds	r3, #16
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f000 fce1 	bl	800cfc4 <xTaskRemoveFromEventList>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d001      	beq.n	800c60c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c608:	f000 fdb6 	bl	800d178 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c60c:	7bbb      	ldrb	r3, [r7, #14]
 800c60e:	3b01      	subs	r3, #1
 800c610:	b2db      	uxtb	r3, r3
 800c612:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c614:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	dce9      	bgt.n	800c5f0 <prvUnlockQueue+0x60>
 800c61c:	e000      	b.n	800c620 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c61e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	22ff      	movs	r2, #255	; 0xff
 800c624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c628:	f7ff f9fc 	bl	800ba24 <vPortExitCritical>
}
 800c62c:	bf00      	nop
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c63c:	f7ff f9c2 	bl	800b9c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c644:	2b00      	cmp	r3, #0
 800c646:	d102      	bne.n	800c64e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c648:	2301      	movs	r3, #1
 800c64a:	60fb      	str	r3, [r7, #12]
 800c64c:	e001      	b.n	800c652 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c64e:	2300      	movs	r3, #0
 800c650:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c652:	f7ff f9e7 	bl	800ba24 <vPortExitCritical>

	return xReturn;
 800c656:	68fb      	ldr	r3, [r7, #12]
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3710      	adds	r7, #16
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c668:	f7ff f9ac 	bl	800b9c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c674:	429a      	cmp	r2, r3
 800c676:	d102      	bne.n	800c67e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c678:	2301      	movs	r3, #1
 800c67a:	60fb      	str	r3, [r7, #12]
 800c67c:	e001      	b.n	800c682 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c67e:	2300      	movs	r3, #0
 800c680:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c682:	f7ff f9cf 	bl	800ba24 <vPortExitCritical>

	return xReturn;
 800c686:	68fb      	ldr	r3, [r7, #12]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c690:	b580      	push	{r7, lr}
 800c692:	b08e      	sub	sp, #56	; 0x38
 800c694:	af04      	add	r7, sp, #16
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	607a      	str	r2, [r7, #4]
 800c69c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d10a      	bne.n	800c6ba <xTaskCreateStatic+0x2a>
	__asm volatile
 800c6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a8:	f383 8811 	msr	BASEPRI, r3
 800c6ac:	f3bf 8f6f 	isb	sy
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	623b      	str	r3, [r7, #32]
}
 800c6b6:	bf00      	nop
 800c6b8:	e7fe      	b.n	800c6b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d10a      	bne.n	800c6d6 <xTaskCreateStatic+0x46>
	__asm volatile
 800c6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c4:	f383 8811 	msr	BASEPRI, r3
 800c6c8:	f3bf 8f6f 	isb	sy
 800c6cc:	f3bf 8f4f 	dsb	sy
 800c6d0:	61fb      	str	r3, [r7, #28]
}
 800c6d2:	bf00      	nop
 800c6d4:	e7fe      	b.n	800c6d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c6d6:	2354      	movs	r3, #84	; 0x54
 800c6d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	2b54      	cmp	r3, #84	; 0x54
 800c6de:	d00a      	beq.n	800c6f6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e4:	f383 8811 	msr	BASEPRI, r3
 800c6e8:	f3bf 8f6f 	isb	sy
 800c6ec:	f3bf 8f4f 	dsb	sy
 800c6f0:	61bb      	str	r3, [r7, #24]
}
 800c6f2:	bf00      	nop
 800c6f4:	e7fe      	b.n	800c6f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c6f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d01e      	beq.n	800c73c <xTaskCreateStatic+0xac>
 800c6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c700:	2b00      	cmp	r3, #0
 800c702:	d01b      	beq.n	800c73c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c706:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c70c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c710:	2202      	movs	r2, #2
 800c712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c716:	2300      	movs	r3, #0
 800c718:	9303      	str	r3, [sp, #12]
 800c71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71c:	9302      	str	r3, [sp, #8]
 800c71e:	f107 0314 	add.w	r3, r7, #20
 800c722:	9301      	str	r3, [sp, #4]
 800c724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c726:	9300      	str	r3, [sp, #0]
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	68b9      	ldr	r1, [r7, #8]
 800c72e:	68f8      	ldr	r0, [r7, #12]
 800c730:	f000 f850 	bl	800c7d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c734:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c736:	f000 f8d5 	bl	800c8e4 <prvAddNewTaskToReadyList>
 800c73a:	e001      	b.n	800c740 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c73c:	2300      	movs	r3, #0
 800c73e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c740:	697b      	ldr	r3, [r7, #20]
	}
 800c742:	4618      	mov	r0, r3
 800c744:	3728      	adds	r7, #40	; 0x28
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b08c      	sub	sp, #48	; 0x30
 800c74e:	af04      	add	r7, sp, #16
 800c750:	60f8      	str	r0, [r7, #12]
 800c752:	60b9      	str	r1, [r7, #8]
 800c754:	603b      	str	r3, [r7, #0]
 800c756:	4613      	mov	r3, r2
 800c758:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c75a:	88fb      	ldrh	r3, [r7, #6]
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	4618      	mov	r0, r3
 800c760:	f7fe fd62 	bl	800b228 <pvPortMalloc>
 800c764:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00e      	beq.n	800c78a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c76c:	2054      	movs	r0, #84	; 0x54
 800c76e:	f7fe fd5b 	bl	800b228 <pvPortMalloc>
 800c772:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d003      	beq.n	800c782 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	697a      	ldr	r2, [r7, #20]
 800c77e:	631a      	str	r2, [r3, #48]	; 0x30
 800c780:	e005      	b.n	800c78e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c782:	6978      	ldr	r0, [r7, #20]
 800c784:	f7fe fe1c 	bl	800b3c0 <vPortFree>
 800c788:	e001      	b.n	800c78e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c78a:	2300      	movs	r3, #0
 800c78c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d017      	beq.n	800c7c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	2200      	movs	r2, #0
 800c798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c79c:	88fa      	ldrh	r2, [r7, #6]
 800c79e:	2300      	movs	r3, #0
 800c7a0:	9303      	str	r3, [sp, #12]
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	9302      	str	r3, [sp, #8]
 800c7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a8:	9301      	str	r3, [sp, #4]
 800c7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	68b9      	ldr	r1, [r7, #8]
 800c7b2:	68f8      	ldr	r0, [r7, #12]
 800c7b4:	f000 f80e 	bl	800c7d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c7b8:	69f8      	ldr	r0, [r7, #28]
 800c7ba:	f000 f893 	bl	800c8e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	61bb      	str	r3, [r7, #24]
 800c7c2:	e002      	b.n	800c7ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c7ca:	69bb      	ldr	r3, [r7, #24]
	}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3720      	adds	r7, #32
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b088      	sub	sp, #32
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	607a      	str	r2, [r7, #4]
 800c7e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	4413      	add	r3, r2
 800c7f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c7f4:	69bb      	ldr	r3, [r7, #24]
 800c7f6:	f023 0307 	bic.w	r3, r3, #7
 800c7fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	f003 0307 	and.w	r3, r3, #7
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00a      	beq.n	800c81c <prvInitialiseNewTask+0x48>
	__asm volatile
 800c806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	617b      	str	r3, [r7, #20]
}
 800c818:	bf00      	nop
 800c81a:	e7fe      	b.n	800c81a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d01f      	beq.n	800c862 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c822:	2300      	movs	r3, #0
 800c824:	61fb      	str	r3, [r7, #28]
 800c826:	e012      	b.n	800c84e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c828:	68ba      	ldr	r2, [r7, #8]
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	4413      	add	r3, r2
 800c82e:	7819      	ldrb	r1, [r3, #0]
 800c830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	4413      	add	r3, r2
 800c836:	3334      	adds	r3, #52	; 0x34
 800c838:	460a      	mov	r2, r1
 800c83a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c83c:	68ba      	ldr	r2, [r7, #8]
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	4413      	add	r3, r2
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d006      	beq.n	800c856 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	3301      	adds	r3, #1
 800c84c:	61fb      	str	r3, [r7, #28]
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	2b0f      	cmp	r3, #15
 800c852:	d9e9      	bls.n	800c828 <prvInitialiseNewTask+0x54>
 800c854:	e000      	b.n	800c858 <prvInitialiseNewTask+0x84>
			{
				break;
 800c856:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85a:	2200      	movs	r2, #0
 800c85c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c860:	e003      	b.n	800c86a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c864:	2200      	movs	r2, #0
 800c866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86c:	2b06      	cmp	r3, #6
 800c86e:	d901      	bls.n	800c874 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c870:	2306      	movs	r3, #6
 800c872:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c878:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c87e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c882:	2200      	movs	r2, #0
 800c884:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c888:	3304      	adds	r3, #4
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fe fed6 	bl	800b63c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c892:	3318      	adds	r3, #24
 800c894:	4618      	mov	r0, r3
 800c896:	f7fe fed1 	bl	800b63c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c89e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a2:	f1c3 0207 	rsb	r2, r3, #7
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	68f9      	ldr	r1, [r7, #12]
 800c8c2:	69b8      	ldr	r0, [r7, #24]
 800c8c4:	f7fe ff4e 	bl	800b764 <pxPortInitialiseStack>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d002      	beq.n	800c8da <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8da:	bf00      	nop
 800c8dc:	3720      	adds	r7, #32
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
	...

0800c8e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c8ec:	f7ff f86a 	bl	800b9c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c8f0:	4b2a      	ldr	r3, [pc, #168]	; (800c99c <prvAddNewTaskToReadyList+0xb8>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	4a29      	ldr	r2, [pc, #164]	; (800c99c <prvAddNewTaskToReadyList+0xb8>)
 800c8f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c8fa:	4b29      	ldr	r3, [pc, #164]	; (800c9a0 <prvAddNewTaskToReadyList+0xbc>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d109      	bne.n	800c916 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c902:	4a27      	ldr	r2, [pc, #156]	; (800c9a0 <prvAddNewTaskToReadyList+0xbc>)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c908:	4b24      	ldr	r3, [pc, #144]	; (800c99c <prvAddNewTaskToReadyList+0xb8>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d110      	bne.n	800c932 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c910:	f000 fc56 	bl	800d1c0 <prvInitialiseTaskLists>
 800c914:	e00d      	b.n	800c932 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c916:	4b23      	ldr	r3, [pc, #140]	; (800c9a4 <prvAddNewTaskToReadyList+0xc0>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d109      	bne.n	800c932 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c91e:	4b20      	ldr	r3, [pc, #128]	; (800c9a0 <prvAddNewTaskToReadyList+0xbc>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c928:	429a      	cmp	r2, r3
 800c92a:	d802      	bhi.n	800c932 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c92c:	4a1c      	ldr	r2, [pc, #112]	; (800c9a0 <prvAddNewTaskToReadyList+0xbc>)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c932:	4b1d      	ldr	r3, [pc, #116]	; (800c9a8 <prvAddNewTaskToReadyList+0xc4>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3301      	adds	r3, #1
 800c938:	4a1b      	ldr	r2, [pc, #108]	; (800c9a8 <prvAddNewTaskToReadyList+0xc4>)
 800c93a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c940:	2201      	movs	r2, #1
 800c942:	409a      	lsls	r2, r3
 800c944:	4b19      	ldr	r3, [pc, #100]	; (800c9ac <prvAddNewTaskToReadyList+0xc8>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4313      	orrs	r3, r2
 800c94a:	4a18      	ldr	r2, [pc, #96]	; (800c9ac <prvAddNewTaskToReadyList+0xc8>)
 800c94c:	6013      	str	r3, [r2, #0]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c952:	4613      	mov	r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	4413      	add	r3, r2
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	4a15      	ldr	r2, [pc, #84]	; (800c9b0 <prvAddNewTaskToReadyList+0xcc>)
 800c95c:	441a      	add	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	3304      	adds	r3, #4
 800c962:	4619      	mov	r1, r3
 800c964:	4610      	mov	r0, r2
 800c966:	f7fe fe76 	bl	800b656 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c96a:	f7ff f85b 	bl	800ba24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c96e:	4b0d      	ldr	r3, [pc, #52]	; (800c9a4 <prvAddNewTaskToReadyList+0xc0>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00e      	beq.n	800c994 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c976:	4b0a      	ldr	r3, [pc, #40]	; (800c9a0 <prvAddNewTaskToReadyList+0xbc>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c980:	429a      	cmp	r2, r3
 800c982:	d207      	bcs.n	800c994 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c984:	4b0b      	ldr	r3, [pc, #44]	; (800c9b4 <prvAddNewTaskToReadyList+0xd0>)
 800c986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c98a:	601a      	str	r2, [r3, #0]
 800c98c:	f3bf 8f4f 	dsb	sy
 800c990:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c994:	bf00      	nop
 800c996:	3708      	adds	r7, #8
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	20004658 	.word	0x20004658
 800c9a0:	20004558 	.word	0x20004558
 800c9a4:	20004664 	.word	0x20004664
 800c9a8:	20004674 	.word	0x20004674
 800c9ac:	20004660 	.word	0x20004660
 800c9b0:	2000455c 	.word	0x2000455c
 800c9b4:	e000ed04 	.word	0xe000ed04

0800c9b8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c9c0:	f7ff f800 	bl	800b9c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d102      	bne.n	800c9d0 <vTaskDelete+0x18>
 800c9ca:	4b39      	ldr	r3, [pc, #228]	; (800cab0 <vTaskDelete+0xf8>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	e000      	b.n	800c9d2 <vTaskDelete+0x1a>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fe fe99 	bl	800b710 <uxListRemove>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d115      	bne.n	800ca10 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9e8:	4932      	ldr	r1, [pc, #200]	; (800cab4 <vTaskDelete+0xfc>)
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	4413      	add	r3, r2
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	440b      	add	r3, r1
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10a      	bne.n	800ca10 <vTaskDelete+0x58>
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9fe:	2201      	movs	r2, #1
 800ca00:	fa02 f303 	lsl.w	r3, r2, r3
 800ca04:	43da      	mvns	r2, r3
 800ca06:	4b2c      	ldr	r3, [pc, #176]	; (800cab8 <vTaskDelete+0x100>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	4a2a      	ldr	r2, [pc, #168]	; (800cab8 <vTaskDelete+0x100>)
 800ca0e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d004      	beq.n	800ca22 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	3318      	adds	r3, #24
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7fe fe77 	bl	800b710 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ca22:	4b26      	ldr	r3, [pc, #152]	; (800cabc <vTaskDelete+0x104>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	3301      	adds	r3, #1
 800ca28:	4a24      	ldr	r2, [pc, #144]	; (800cabc <vTaskDelete+0x104>)
 800ca2a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ca2c:	4b20      	ldr	r3, [pc, #128]	; (800cab0 <vTaskDelete+0xf8>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	68fa      	ldr	r2, [r7, #12]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d10b      	bne.n	800ca4e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	3304      	adds	r3, #4
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	4820      	ldr	r0, [pc, #128]	; (800cac0 <vTaskDelete+0x108>)
 800ca3e:	f7fe fe0a 	bl	800b656 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ca42:	4b20      	ldr	r3, [pc, #128]	; (800cac4 <vTaskDelete+0x10c>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	3301      	adds	r3, #1
 800ca48:	4a1e      	ldr	r2, [pc, #120]	; (800cac4 <vTaskDelete+0x10c>)
 800ca4a:	6013      	str	r3, [r2, #0]
 800ca4c:	e009      	b.n	800ca62 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ca4e:	4b1e      	ldr	r3, [pc, #120]	; (800cac8 <vTaskDelete+0x110>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	3b01      	subs	r3, #1
 800ca54:	4a1c      	ldr	r2, [pc, #112]	; (800cac8 <vTaskDelete+0x110>)
 800ca56:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f000 fc1f 	bl	800d29c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ca5e:	f000 fc4d 	bl	800d2fc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ca62:	f7fe ffdf 	bl	800ba24 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ca66:	4b19      	ldr	r3, [pc, #100]	; (800cacc <vTaskDelete+0x114>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d01b      	beq.n	800caa6 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800ca6e:	4b10      	ldr	r3, [pc, #64]	; (800cab0 <vTaskDelete+0xf8>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	68fa      	ldr	r2, [r7, #12]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d116      	bne.n	800caa6 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ca78:	4b15      	ldr	r3, [pc, #84]	; (800cad0 <vTaskDelete+0x118>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00a      	beq.n	800ca96 <vTaskDelete+0xde>
	__asm volatile
 800ca80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca84:	f383 8811 	msr	BASEPRI, r3
 800ca88:	f3bf 8f6f 	isb	sy
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	60bb      	str	r3, [r7, #8]
}
 800ca92:	bf00      	nop
 800ca94:	e7fe      	b.n	800ca94 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800ca96:	4b0f      	ldr	r3, [pc, #60]	; (800cad4 <vTaskDelete+0x11c>)
 800ca98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca9c:	601a      	str	r2, [r3, #0]
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800caa6:	bf00      	nop
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	20004558 	.word	0x20004558
 800cab4:	2000455c 	.word	0x2000455c
 800cab8:	20004660 	.word	0x20004660
 800cabc:	20004674 	.word	0x20004674
 800cac0:	2000462c 	.word	0x2000462c
 800cac4:	20004640 	.word	0x20004640
 800cac8:	20004658 	.word	0x20004658
 800cacc:	20004664 	.word	0x20004664
 800cad0:	20004680 	.word	0x20004680
 800cad4:	e000ed04 	.word	0xe000ed04

0800cad8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cae0:	2300      	movs	r3, #0
 800cae2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d017      	beq.n	800cb1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800caea:	4b13      	ldr	r3, [pc, #76]	; (800cb38 <vTaskDelay+0x60>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00a      	beq.n	800cb08 <vTaskDelay+0x30>
	__asm volatile
 800caf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf6:	f383 8811 	msr	BASEPRI, r3
 800cafa:	f3bf 8f6f 	isb	sy
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	60bb      	str	r3, [r7, #8]
}
 800cb04:	bf00      	nop
 800cb06:	e7fe      	b.n	800cb06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cb08:	f000 f87a 	bl	800cc00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 fcb8 	bl	800d484 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb14:	f000 f882 	bl	800cc1c <xTaskResumeAll>
 800cb18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d107      	bne.n	800cb30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cb20:	4b06      	ldr	r3, [pc, #24]	; (800cb3c <vTaskDelay+0x64>)
 800cb22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb26:	601a      	str	r2, [r3, #0]
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb30:	bf00      	nop
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	20004680 	.word	0x20004680
 800cb3c:	e000ed04 	.word	0xe000ed04

0800cb40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b08a      	sub	sp, #40	; 0x28
 800cb44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cb46:	2300      	movs	r3, #0
 800cb48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cb4e:	463a      	mov	r2, r7
 800cb50:	1d39      	adds	r1, r7, #4
 800cb52:	f107 0308 	add.w	r3, r7, #8
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7f3 fcd4 	bl	8000504 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cb5c:	6839      	ldr	r1, [r7, #0]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	68ba      	ldr	r2, [r7, #8]
 800cb62:	9202      	str	r2, [sp, #8]
 800cb64:	9301      	str	r3, [sp, #4]
 800cb66:	2300      	movs	r3, #0
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	460a      	mov	r2, r1
 800cb6e:	491e      	ldr	r1, [pc, #120]	; (800cbe8 <vTaskStartScheduler+0xa8>)
 800cb70:	481e      	ldr	r0, [pc, #120]	; (800cbec <vTaskStartScheduler+0xac>)
 800cb72:	f7ff fd8d 	bl	800c690 <xTaskCreateStatic>
 800cb76:	4603      	mov	r3, r0
 800cb78:	4a1d      	ldr	r2, [pc, #116]	; (800cbf0 <vTaskStartScheduler+0xb0>)
 800cb7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cb7c:	4b1c      	ldr	r3, [pc, #112]	; (800cbf0 <vTaskStartScheduler+0xb0>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d002      	beq.n	800cb8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cb84:	2301      	movs	r3, #1
 800cb86:	617b      	str	r3, [r7, #20]
 800cb88:	e001      	b.n	800cb8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d116      	bne.n	800cbc2 <vTaskStartScheduler+0x82>
	__asm volatile
 800cb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb98:	f383 8811 	msr	BASEPRI, r3
 800cb9c:	f3bf 8f6f 	isb	sy
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	613b      	str	r3, [r7, #16]
}
 800cba6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cba8:	4b12      	ldr	r3, [pc, #72]	; (800cbf4 <vTaskStartScheduler+0xb4>)
 800cbaa:	f04f 32ff 	mov.w	r2, #4294967295
 800cbae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cbb0:	4b11      	ldr	r3, [pc, #68]	; (800cbf8 <vTaskStartScheduler+0xb8>)
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cbb6:	4b11      	ldr	r3, [pc, #68]	; (800cbfc <vTaskStartScheduler+0xbc>)
 800cbb8:	2200      	movs	r2, #0
 800cbba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cbbc:	f7fe fe60 	bl	800b880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cbc0:	e00e      	b.n	800cbe0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbc8:	d10a      	bne.n	800cbe0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800cbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbce:	f383 8811 	msr	BASEPRI, r3
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	60fb      	str	r3, [r7, #12]
}
 800cbdc:	bf00      	nop
 800cbde:	e7fe      	b.n	800cbde <vTaskStartScheduler+0x9e>
}
 800cbe0:	bf00      	nop
 800cbe2:	3718      	adds	r7, #24
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	08010330 	.word	0x08010330
 800cbec:	0800d191 	.word	0x0800d191
 800cbf0:	2000467c 	.word	0x2000467c
 800cbf4:	20004678 	.word	0x20004678
 800cbf8:	20004664 	.word	0x20004664
 800cbfc:	2000465c 	.word	0x2000465c

0800cc00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cc00:	b480      	push	{r7}
 800cc02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cc04:	4b04      	ldr	r3, [pc, #16]	; (800cc18 <vTaskSuspendAll+0x18>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	4a03      	ldr	r2, [pc, #12]	; (800cc18 <vTaskSuspendAll+0x18>)
 800cc0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cc0e:	bf00      	nop
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr
 800cc18:	20004680 	.word	0x20004680

0800cc1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cc22:	2300      	movs	r3, #0
 800cc24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cc26:	2300      	movs	r3, #0
 800cc28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cc2a:	4b41      	ldr	r3, [pc, #260]	; (800cd30 <xTaskResumeAll+0x114>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d10a      	bne.n	800cc48 <xTaskResumeAll+0x2c>
	__asm volatile
 800cc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc36:	f383 8811 	msr	BASEPRI, r3
 800cc3a:	f3bf 8f6f 	isb	sy
 800cc3e:	f3bf 8f4f 	dsb	sy
 800cc42:	603b      	str	r3, [r7, #0]
}
 800cc44:	bf00      	nop
 800cc46:	e7fe      	b.n	800cc46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc48:	f7fe febc 	bl	800b9c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc4c:	4b38      	ldr	r3, [pc, #224]	; (800cd30 <xTaskResumeAll+0x114>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	3b01      	subs	r3, #1
 800cc52:	4a37      	ldr	r2, [pc, #220]	; (800cd30 <xTaskResumeAll+0x114>)
 800cc54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc56:	4b36      	ldr	r3, [pc, #216]	; (800cd30 <xTaskResumeAll+0x114>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d161      	bne.n	800cd22 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cc5e:	4b35      	ldr	r3, [pc, #212]	; (800cd34 <xTaskResumeAll+0x118>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d05d      	beq.n	800cd22 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc66:	e02e      	b.n	800ccc6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc68:	4b33      	ldr	r3, [pc, #204]	; (800cd38 <xTaskResumeAll+0x11c>)
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	3318      	adds	r3, #24
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7fe fd4b 	bl	800b710 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	3304      	adds	r3, #4
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fe fd46 	bl	800b710 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc88:	2201      	movs	r2, #1
 800cc8a:	409a      	lsls	r2, r3
 800cc8c:	4b2b      	ldr	r3, [pc, #172]	; (800cd3c <xTaskResumeAll+0x120>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4313      	orrs	r3, r2
 800cc92:	4a2a      	ldr	r2, [pc, #168]	; (800cd3c <xTaskResumeAll+0x120>)
 800cc94:	6013      	str	r3, [r2, #0]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	4413      	add	r3, r2
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	4a27      	ldr	r2, [pc, #156]	; (800cd40 <xTaskResumeAll+0x124>)
 800cca4:	441a      	add	r2, r3
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	3304      	adds	r3, #4
 800ccaa:	4619      	mov	r1, r3
 800ccac:	4610      	mov	r0, r2
 800ccae:	f7fe fcd2 	bl	800b656 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccb6:	4b23      	ldr	r3, [pc, #140]	; (800cd44 <xTaskResumeAll+0x128>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d302      	bcc.n	800ccc6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ccc0:	4b21      	ldr	r3, [pc, #132]	; (800cd48 <xTaskResumeAll+0x12c>)
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ccc6:	4b1c      	ldr	r3, [pc, #112]	; (800cd38 <xTaskResumeAll+0x11c>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1cc      	bne.n	800cc68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d001      	beq.n	800ccd8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ccd4:	f000 fb12 	bl	800d2fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ccd8:	4b1c      	ldr	r3, [pc, #112]	; (800cd4c <xTaskResumeAll+0x130>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d010      	beq.n	800cd06 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cce4:	f000 f836 	bl	800cd54 <xTaskIncrementTick>
 800cce8:	4603      	mov	r3, r0
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d002      	beq.n	800ccf4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ccee:	4b16      	ldr	r3, [pc, #88]	; (800cd48 <xTaskResumeAll+0x12c>)
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d1f1      	bne.n	800cce4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cd00:	4b12      	ldr	r3, [pc, #72]	; (800cd4c <xTaskResumeAll+0x130>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cd06:	4b10      	ldr	r3, [pc, #64]	; (800cd48 <xTaskResumeAll+0x12c>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d009      	beq.n	800cd22 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cd12:	4b0f      	ldr	r3, [pc, #60]	; (800cd50 <xTaskResumeAll+0x134>)
 800cd14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd18:	601a      	str	r2, [r3, #0]
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd22:	f7fe fe7f 	bl	800ba24 <vPortExitCritical>

	return xAlreadyYielded;
 800cd26:	68bb      	ldr	r3, [r7, #8]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	20004680 	.word	0x20004680
 800cd34:	20004658 	.word	0x20004658
 800cd38:	20004618 	.word	0x20004618
 800cd3c:	20004660 	.word	0x20004660
 800cd40:	2000455c 	.word	0x2000455c
 800cd44:	20004558 	.word	0x20004558
 800cd48:	2000466c 	.word	0x2000466c
 800cd4c:	20004668 	.word	0x20004668
 800cd50:	e000ed04 	.word	0xe000ed04

0800cd54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd5e:	4b4e      	ldr	r3, [pc, #312]	; (800ce98 <xTaskIncrementTick+0x144>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f040 808e 	bne.w	800ce84 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cd68:	4b4c      	ldr	r3, [pc, #304]	; (800ce9c <xTaskIncrementTick+0x148>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cd70:	4a4a      	ldr	r2, [pc, #296]	; (800ce9c <xTaskIncrementTick+0x148>)
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d120      	bne.n	800cdbe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cd7c:	4b48      	ldr	r3, [pc, #288]	; (800cea0 <xTaskIncrementTick+0x14c>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d00a      	beq.n	800cd9c <xTaskIncrementTick+0x48>
	__asm volatile
 800cd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
 800cd96:	603b      	str	r3, [r7, #0]
}
 800cd98:	bf00      	nop
 800cd9a:	e7fe      	b.n	800cd9a <xTaskIncrementTick+0x46>
 800cd9c:	4b40      	ldr	r3, [pc, #256]	; (800cea0 <xTaskIncrementTick+0x14c>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	60fb      	str	r3, [r7, #12]
 800cda2:	4b40      	ldr	r3, [pc, #256]	; (800cea4 <xTaskIncrementTick+0x150>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a3e      	ldr	r2, [pc, #248]	; (800cea0 <xTaskIncrementTick+0x14c>)
 800cda8:	6013      	str	r3, [r2, #0]
 800cdaa:	4a3e      	ldr	r2, [pc, #248]	; (800cea4 <xTaskIncrementTick+0x150>)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	6013      	str	r3, [r2, #0]
 800cdb0:	4b3d      	ldr	r3, [pc, #244]	; (800cea8 <xTaskIncrementTick+0x154>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	4a3c      	ldr	r2, [pc, #240]	; (800cea8 <xTaskIncrementTick+0x154>)
 800cdb8:	6013      	str	r3, [r2, #0]
 800cdba:	f000 fa9f 	bl	800d2fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cdbe:	4b3b      	ldr	r3, [pc, #236]	; (800ceac <xTaskIncrementTick+0x158>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	693a      	ldr	r2, [r7, #16]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d348      	bcc.n	800ce5a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdc8:	4b35      	ldr	r3, [pc, #212]	; (800cea0 <xTaskIncrementTick+0x14c>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d104      	bne.n	800cddc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdd2:	4b36      	ldr	r3, [pc, #216]	; (800ceac <xTaskIncrementTick+0x158>)
 800cdd4:	f04f 32ff 	mov.w	r2, #4294967295
 800cdd8:	601a      	str	r2, [r3, #0]
					break;
 800cdda:	e03e      	b.n	800ce5a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cddc:	4b30      	ldr	r3, [pc, #192]	; (800cea0 <xTaskIncrementTick+0x14c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cdec:	693a      	ldr	r2, [r7, #16]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d203      	bcs.n	800cdfc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cdf4:	4a2d      	ldr	r2, [pc, #180]	; (800ceac <xTaskIncrementTick+0x158>)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cdfa:	e02e      	b.n	800ce5a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	3304      	adds	r3, #4
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7fe fc85 	bl	800b710 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d004      	beq.n	800ce18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	3318      	adds	r3, #24
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7fe fc7c 	bl	800b710 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	409a      	lsls	r2, r3
 800ce20:	4b23      	ldr	r3, [pc, #140]	; (800ceb0 <xTaskIncrementTick+0x15c>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4313      	orrs	r3, r2
 800ce26:	4a22      	ldr	r2, [pc, #136]	; (800ceb0 <xTaskIncrementTick+0x15c>)
 800ce28:	6013      	str	r3, [r2, #0]
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2e:	4613      	mov	r3, r2
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	4413      	add	r3, r2
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	4a1f      	ldr	r2, [pc, #124]	; (800ceb4 <xTaskIncrementTick+0x160>)
 800ce38:	441a      	add	r2, r3
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	3304      	adds	r3, #4
 800ce3e:	4619      	mov	r1, r3
 800ce40:	4610      	mov	r0, r2
 800ce42:	f7fe fc08 	bl	800b656 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce4a:	4b1b      	ldr	r3, [pc, #108]	; (800ceb8 <xTaskIncrementTick+0x164>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d3b9      	bcc.n	800cdc8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ce54:	2301      	movs	r3, #1
 800ce56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce58:	e7b6      	b.n	800cdc8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ce5a:	4b17      	ldr	r3, [pc, #92]	; (800ceb8 <xTaskIncrementTick+0x164>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce60:	4914      	ldr	r1, [pc, #80]	; (800ceb4 <xTaskIncrementTick+0x160>)
 800ce62:	4613      	mov	r3, r2
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4413      	add	r3, r2
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	440b      	add	r3, r1
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d901      	bls.n	800ce76 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ce72:	2301      	movs	r3, #1
 800ce74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ce76:	4b11      	ldr	r3, [pc, #68]	; (800cebc <xTaskIncrementTick+0x168>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d007      	beq.n	800ce8e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	617b      	str	r3, [r7, #20]
 800ce82:	e004      	b.n	800ce8e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ce84:	4b0e      	ldr	r3, [pc, #56]	; (800cec0 <xTaskIncrementTick+0x16c>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	4a0d      	ldr	r2, [pc, #52]	; (800cec0 <xTaskIncrementTick+0x16c>)
 800ce8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ce8e:	697b      	ldr	r3, [r7, #20]
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3718      	adds	r7, #24
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	20004680 	.word	0x20004680
 800ce9c:	2000465c 	.word	0x2000465c
 800cea0:	20004610 	.word	0x20004610
 800cea4:	20004614 	.word	0x20004614
 800cea8:	20004670 	.word	0x20004670
 800ceac:	20004678 	.word	0x20004678
 800ceb0:	20004660 	.word	0x20004660
 800ceb4:	2000455c 	.word	0x2000455c
 800ceb8:	20004558 	.word	0x20004558
 800cebc:	2000466c 	.word	0x2000466c
 800cec0:	20004668 	.word	0x20004668

0800cec4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cec4:	b480      	push	{r7}
 800cec6:	b087      	sub	sp, #28
 800cec8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ceca:	4b27      	ldr	r3, [pc, #156]	; (800cf68 <vTaskSwitchContext+0xa4>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d003      	beq.n	800ceda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ced2:	4b26      	ldr	r3, [pc, #152]	; (800cf6c <vTaskSwitchContext+0xa8>)
 800ced4:	2201      	movs	r2, #1
 800ced6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ced8:	e03f      	b.n	800cf5a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800ceda:	4b24      	ldr	r3, [pc, #144]	; (800cf6c <vTaskSwitchContext+0xa8>)
 800cedc:	2200      	movs	r2, #0
 800cede:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cee0:	4b23      	ldr	r3, [pc, #140]	; (800cf70 <vTaskSwitchContext+0xac>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	fab3 f383 	clz	r3, r3
 800ceec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ceee:	7afb      	ldrb	r3, [r7, #11]
 800cef0:	f1c3 031f 	rsb	r3, r3, #31
 800cef4:	617b      	str	r3, [r7, #20]
 800cef6:	491f      	ldr	r1, [pc, #124]	; (800cf74 <vTaskSwitchContext+0xb0>)
 800cef8:	697a      	ldr	r2, [r7, #20]
 800cefa:	4613      	mov	r3, r2
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	4413      	add	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	440b      	add	r3, r1
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d10a      	bne.n	800cf20 <vTaskSwitchContext+0x5c>
	__asm volatile
 800cf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0e:	f383 8811 	msr	BASEPRI, r3
 800cf12:	f3bf 8f6f 	isb	sy
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	607b      	str	r3, [r7, #4]
}
 800cf1c:	bf00      	nop
 800cf1e:	e7fe      	b.n	800cf1e <vTaskSwitchContext+0x5a>
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	4613      	mov	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	4413      	add	r3, r2
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	4a12      	ldr	r2, [pc, #72]	; (800cf74 <vTaskSwitchContext+0xb0>)
 800cf2c:	4413      	add	r3, r2
 800cf2e:	613b      	str	r3, [r7, #16]
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	685a      	ldr	r2, [r3, #4]
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	605a      	str	r2, [r3, #4]
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	685a      	ldr	r2, [r3, #4]
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	3308      	adds	r3, #8
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d104      	bne.n	800cf50 <vTaskSwitchContext+0x8c>
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	685a      	ldr	r2, [r3, #4]
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	605a      	str	r2, [r3, #4]
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	4a08      	ldr	r2, [pc, #32]	; (800cf78 <vTaskSwitchContext+0xb4>)
 800cf58:	6013      	str	r3, [r2, #0]
}
 800cf5a:	bf00      	nop
 800cf5c:	371c      	adds	r7, #28
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	20004680 	.word	0x20004680
 800cf6c:	2000466c 	.word	0x2000466c
 800cf70:	20004660 	.word	0x20004660
 800cf74:	2000455c 	.word	0x2000455c
 800cf78:	20004558 	.word	0x20004558

0800cf7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d10a      	bne.n	800cfa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	60fb      	str	r3, [r7, #12]
}
 800cf9e:	bf00      	nop
 800cfa0:	e7fe      	b.n	800cfa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cfa2:	4b07      	ldr	r3, [pc, #28]	; (800cfc0 <vTaskPlaceOnEventList+0x44>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	3318      	adds	r3, #24
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f7fe fb77 	bl	800b69e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cfb0:	2101      	movs	r1, #1
 800cfb2:	6838      	ldr	r0, [r7, #0]
 800cfb4:	f000 fa66 	bl	800d484 <prvAddCurrentTaskToDelayedList>
}
 800cfb8:	bf00      	nop
 800cfba:	3710      	adds	r7, #16
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	20004558 	.word	0x20004558

0800cfc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b086      	sub	sp, #24
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d10a      	bne.n	800cff0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfde:	f383 8811 	msr	BASEPRI, r3
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	60fb      	str	r3, [r7, #12]
}
 800cfec:	bf00      	nop
 800cfee:	e7fe      	b.n	800cfee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	3318      	adds	r3, #24
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7fe fb8b 	bl	800b710 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cffa:	4b1d      	ldr	r3, [pc, #116]	; (800d070 <xTaskRemoveFromEventList+0xac>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d11c      	bne.n	800d03c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	3304      	adds	r3, #4
 800d006:	4618      	mov	r0, r3
 800d008:	f7fe fb82 	bl	800b710 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d010:	2201      	movs	r2, #1
 800d012:	409a      	lsls	r2, r3
 800d014:	4b17      	ldr	r3, [pc, #92]	; (800d074 <xTaskRemoveFromEventList+0xb0>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4313      	orrs	r3, r2
 800d01a:	4a16      	ldr	r2, [pc, #88]	; (800d074 <xTaskRemoveFromEventList+0xb0>)
 800d01c:	6013      	str	r3, [r2, #0]
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d022:	4613      	mov	r3, r2
 800d024:	009b      	lsls	r3, r3, #2
 800d026:	4413      	add	r3, r2
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	4a13      	ldr	r2, [pc, #76]	; (800d078 <xTaskRemoveFromEventList+0xb4>)
 800d02c:	441a      	add	r2, r3
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	3304      	adds	r3, #4
 800d032:	4619      	mov	r1, r3
 800d034:	4610      	mov	r0, r2
 800d036:	f7fe fb0e 	bl	800b656 <vListInsertEnd>
 800d03a:	e005      	b.n	800d048 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	3318      	adds	r3, #24
 800d040:	4619      	mov	r1, r3
 800d042:	480e      	ldr	r0, [pc, #56]	; (800d07c <xTaskRemoveFromEventList+0xb8>)
 800d044:	f7fe fb07 	bl	800b656 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d04c:	4b0c      	ldr	r3, [pc, #48]	; (800d080 <xTaskRemoveFromEventList+0xbc>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d052:	429a      	cmp	r2, r3
 800d054:	d905      	bls.n	800d062 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d056:	2301      	movs	r3, #1
 800d058:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d05a:	4b0a      	ldr	r3, [pc, #40]	; (800d084 <xTaskRemoveFromEventList+0xc0>)
 800d05c:	2201      	movs	r2, #1
 800d05e:	601a      	str	r2, [r3, #0]
 800d060:	e001      	b.n	800d066 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d062:	2300      	movs	r3, #0
 800d064:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d066:	697b      	ldr	r3, [r7, #20]
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3718      	adds	r7, #24
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	20004680 	.word	0x20004680
 800d074:	20004660 	.word	0x20004660
 800d078:	2000455c 	.word	0x2000455c
 800d07c:	20004618 	.word	0x20004618
 800d080:	20004558 	.word	0x20004558
 800d084:	2000466c 	.word	0x2000466c

0800d088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d088:	b480      	push	{r7}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d090:	4b06      	ldr	r3, [pc, #24]	; (800d0ac <vTaskInternalSetTimeOutState+0x24>)
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d098:	4b05      	ldr	r3, [pc, #20]	; (800d0b0 <vTaskInternalSetTimeOutState+0x28>)
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	605a      	str	r2, [r3, #4]
}
 800d0a0:	bf00      	nop
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr
 800d0ac:	20004670 	.word	0x20004670
 800d0b0:	2000465c 	.word	0x2000465c

0800d0b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b088      	sub	sp, #32
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10a      	bne.n	800d0da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	613b      	str	r3, [r7, #16]
}
 800d0d6:	bf00      	nop
 800d0d8:	e7fe      	b.n	800d0d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10a      	bne.n	800d0f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e4:	f383 8811 	msr	BASEPRI, r3
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	60fb      	str	r3, [r7, #12]
}
 800d0f2:	bf00      	nop
 800d0f4:	e7fe      	b.n	800d0f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d0f6:	f7fe fc65 	bl	800b9c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d0fa:	4b1d      	ldr	r3, [pc, #116]	; (800d170 <xTaskCheckForTimeOut+0xbc>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	69ba      	ldr	r2, [r7, #24]
 800d106:	1ad3      	subs	r3, r2, r3
 800d108:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d112:	d102      	bne.n	800d11a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d114:	2300      	movs	r3, #0
 800d116:	61fb      	str	r3, [r7, #28]
 800d118:	e023      	b.n	800d162 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	4b15      	ldr	r3, [pc, #84]	; (800d174 <xTaskCheckForTimeOut+0xc0>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	429a      	cmp	r2, r3
 800d124:	d007      	beq.n	800d136 <xTaskCheckForTimeOut+0x82>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	69ba      	ldr	r2, [r7, #24]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d302      	bcc.n	800d136 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d130:	2301      	movs	r3, #1
 800d132:	61fb      	str	r3, [r7, #28]
 800d134:	e015      	b.n	800d162 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	697a      	ldr	r2, [r7, #20]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d20b      	bcs.n	800d158 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	1ad2      	subs	r2, r2, r3
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f7ff ff9b 	bl	800d088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d152:	2300      	movs	r3, #0
 800d154:	61fb      	str	r3, [r7, #28]
 800d156:	e004      	b.n	800d162 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	2200      	movs	r2, #0
 800d15c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d15e:	2301      	movs	r3, #1
 800d160:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d162:	f7fe fc5f 	bl	800ba24 <vPortExitCritical>

	return xReturn;
 800d166:	69fb      	ldr	r3, [r7, #28]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3720      	adds	r7, #32
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	2000465c 	.word	0x2000465c
 800d174:	20004670 	.word	0x20004670

0800d178 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d178:	b480      	push	{r7}
 800d17a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d17c:	4b03      	ldr	r3, [pc, #12]	; (800d18c <vTaskMissedYield+0x14>)
 800d17e:	2201      	movs	r2, #1
 800d180:	601a      	str	r2, [r3, #0]
}
 800d182:	bf00      	nop
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr
 800d18c:	2000466c 	.word	0x2000466c

0800d190 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d198:	f000 f852 	bl	800d240 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d19c:	4b06      	ldr	r3, [pc, #24]	; (800d1b8 <prvIdleTask+0x28>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d9f9      	bls.n	800d198 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d1a4:	4b05      	ldr	r3, [pc, #20]	; (800d1bc <prvIdleTask+0x2c>)
 800d1a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1aa:	601a      	str	r2, [r3, #0]
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d1b4:	e7f0      	b.n	800d198 <prvIdleTask+0x8>
 800d1b6:	bf00      	nop
 800d1b8:	2000455c 	.word	0x2000455c
 800d1bc:	e000ed04 	.word	0xe000ed04

0800d1c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	607b      	str	r3, [r7, #4]
 800d1ca:	e00c      	b.n	800d1e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	4613      	mov	r3, r2
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	4413      	add	r3, r2
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	4a12      	ldr	r2, [pc, #72]	; (800d220 <prvInitialiseTaskLists+0x60>)
 800d1d8:	4413      	add	r3, r2
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fe fa0e 	bl	800b5fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	607b      	str	r3, [r7, #4]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2b06      	cmp	r3, #6
 800d1ea:	d9ef      	bls.n	800d1cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d1ec:	480d      	ldr	r0, [pc, #52]	; (800d224 <prvInitialiseTaskLists+0x64>)
 800d1ee:	f7fe fa05 	bl	800b5fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d1f2:	480d      	ldr	r0, [pc, #52]	; (800d228 <prvInitialiseTaskLists+0x68>)
 800d1f4:	f7fe fa02 	bl	800b5fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d1f8:	480c      	ldr	r0, [pc, #48]	; (800d22c <prvInitialiseTaskLists+0x6c>)
 800d1fa:	f7fe f9ff 	bl	800b5fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d1fe:	480c      	ldr	r0, [pc, #48]	; (800d230 <prvInitialiseTaskLists+0x70>)
 800d200:	f7fe f9fc 	bl	800b5fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d204:	480b      	ldr	r0, [pc, #44]	; (800d234 <prvInitialiseTaskLists+0x74>)
 800d206:	f7fe f9f9 	bl	800b5fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d20a:	4b0b      	ldr	r3, [pc, #44]	; (800d238 <prvInitialiseTaskLists+0x78>)
 800d20c:	4a05      	ldr	r2, [pc, #20]	; (800d224 <prvInitialiseTaskLists+0x64>)
 800d20e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d210:	4b0a      	ldr	r3, [pc, #40]	; (800d23c <prvInitialiseTaskLists+0x7c>)
 800d212:	4a05      	ldr	r2, [pc, #20]	; (800d228 <prvInitialiseTaskLists+0x68>)
 800d214:	601a      	str	r2, [r3, #0]
}
 800d216:	bf00      	nop
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	2000455c 	.word	0x2000455c
 800d224:	200045e8 	.word	0x200045e8
 800d228:	200045fc 	.word	0x200045fc
 800d22c:	20004618 	.word	0x20004618
 800d230:	2000462c 	.word	0x2000462c
 800d234:	20004644 	.word	0x20004644
 800d238:	20004610 	.word	0x20004610
 800d23c:	20004614 	.word	0x20004614

0800d240 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d246:	e019      	b.n	800d27c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d248:	f7fe fbbc 	bl	800b9c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d24c:	4b10      	ldr	r3, [pc, #64]	; (800d290 <prvCheckTasksWaitingTermination+0x50>)
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	68db      	ldr	r3, [r3, #12]
 800d252:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	3304      	adds	r3, #4
 800d258:	4618      	mov	r0, r3
 800d25a:	f7fe fa59 	bl	800b710 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d25e:	4b0d      	ldr	r3, [pc, #52]	; (800d294 <prvCheckTasksWaitingTermination+0x54>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	3b01      	subs	r3, #1
 800d264:	4a0b      	ldr	r2, [pc, #44]	; (800d294 <prvCheckTasksWaitingTermination+0x54>)
 800d266:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d268:	4b0b      	ldr	r3, [pc, #44]	; (800d298 <prvCheckTasksWaitingTermination+0x58>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	3b01      	subs	r3, #1
 800d26e:	4a0a      	ldr	r2, [pc, #40]	; (800d298 <prvCheckTasksWaitingTermination+0x58>)
 800d270:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d272:	f7fe fbd7 	bl	800ba24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 f810 	bl	800d29c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d27c:	4b06      	ldr	r3, [pc, #24]	; (800d298 <prvCheckTasksWaitingTermination+0x58>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1e1      	bne.n	800d248 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d284:	bf00      	nop
 800d286:	bf00      	nop
 800d288:	3708      	adds	r7, #8
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	2000462c 	.word	0x2000462c
 800d294:	20004658 	.word	0x20004658
 800d298:	20004640 	.word	0x20004640

0800d29c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d108      	bne.n	800d2c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7fe f884 	bl	800b3c0 <vPortFree>
				vPortFree( pxTCB );
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f7fe f881 	bl	800b3c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d2be:	e018      	b.n	800d2f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d103      	bne.n	800d2d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f7fe f878 	bl	800b3c0 <vPortFree>
	}
 800d2d0:	e00f      	b.n	800d2f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d2d8:	2b02      	cmp	r3, #2
 800d2da:	d00a      	beq.n	800d2f2 <prvDeleteTCB+0x56>
	__asm volatile
 800d2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e0:	f383 8811 	msr	BASEPRI, r3
 800d2e4:	f3bf 8f6f 	isb	sy
 800d2e8:	f3bf 8f4f 	dsb	sy
 800d2ec:	60fb      	str	r3, [r7, #12]
}
 800d2ee:	bf00      	nop
 800d2f0:	e7fe      	b.n	800d2f0 <prvDeleteTCB+0x54>
	}
 800d2f2:	bf00      	nop
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
	...

0800d2fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d302:	4b0c      	ldr	r3, [pc, #48]	; (800d334 <prvResetNextTaskUnblockTime+0x38>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d104      	bne.n	800d316 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d30c:	4b0a      	ldr	r3, [pc, #40]	; (800d338 <prvResetNextTaskUnblockTime+0x3c>)
 800d30e:	f04f 32ff 	mov.w	r2, #4294967295
 800d312:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d314:	e008      	b.n	800d328 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d316:	4b07      	ldr	r3, [pc, #28]	; (800d334 <prvResetNextTaskUnblockTime+0x38>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	4a04      	ldr	r2, [pc, #16]	; (800d338 <prvResetNextTaskUnblockTime+0x3c>)
 800d326:	6013      	str	r3, [r2, #0]
}
 800d328:	bf00      	nop
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr
 800d334:	20004610 	.word	0x20004610
 800d338:	20004678 	.word	0x20004678

0800d33c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d342:	4b0b      	ldr	r3, [pc, #44]	; (800d370 <xTaskGetSchedulerState+0x34>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d102      	bne.n	800d350 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d34a:	2301      	movs	r3, #1
 800d34c:	607b      	str	r3, [r7, #4]
 800d34e:	e008      	b.n	800d362 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d350:	4b08      	ldr	r3, [pc, #32]	; (800d374 <xTaskGetSchedulerState+0x38>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d102      	bne.n	800d35e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d358:	2302      	movs	r3, #2
 800d35a:	607b      	str	r3, [r7, #4]
 800d35c:	e001      	b.n	800d362 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d35e:	2300      	movs	r3, #0
 800d360:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d362:	687b      	ldr	r3, [r7, #4]
	}
 800d364:	4618      	mov	r0, r3
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr
 800d370:	20004664 	.word	0x20004664
 800d374:	20004680 	.word	0x20004680

0800d378 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b086      	sub	sp, #24
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d384:	2300      	movs	r3, #0
 800d386:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d06e      	beq.n	800d46c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d38e:	4b3a      	ldr	r3, [pc, #232]	; (800d478 <xTaskPriorityDisinherit+0x100>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	693a      	ldr	r2, [r7, #16]
 800d394:	429a      	cmp	r2, r3
 800d396:	d00a      	beq.n	800d3ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39c:	f383 8811 	msr	BASEPRI, r3
 800d3a0:	f3bf 8f6f 	isb	sy
 800d3a4:	f3bf 8f4f 	dsb	sy
 800d3a8:	60fb      	str	r3, [r7, #12]
}
 800d3aa:	bf00      	nop
 800d3ac:	e7fe      	b.n	800d3ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10a      	bne.n	800d3cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ba:	f383 8811 	msr	BASEPRI, r3
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	60bb      	str	r3, [r7, #8]
}
 800d3c8:	bf00      	nop
 800d3ca:	e7fe      	b.n	800d3ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3d0:	1e5a      	subs	r2, r3, #1
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d044      	beq.n	800d46c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d140      	bne.n	800d46c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	3304      	adds	r3, #4
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7fe f98e 	bl	800b710 <uxListRemove>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d115      	bne.n	800d426 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3fe:	491f      	ldr	r1, [pc, #124]	; (800d47c <xTaskPriorityDisinherit+0x104>)
 800d400:	4613      	mov	r3, r2
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	4413      	add	r3, r2
 800d406:	009b      	lsls	r3, r3, #2
 800d408:	440b      	add	r3, r1
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d10a      	bne.n	800d426 <xTaskPriorityDisinherit+0xae>
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d414:	2201      	movs	r2, #1
 800d416:	fa02 f303 	lsl.w	r3, r2, r3
 800d41a:	43da      	mvns	r2, r3
 800d41c:	4b18      	ldr	r3, [pc, #96]	; (800d480 <xTaskPriorityDisinherit+0x108>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4013      	ands	r3, r2
 800d422:	4a17      	ldr	r2, [pc, #92]	; (800d480 <xTaskPriorityDisinherit+0x108>)
 800d424:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d432:	f1c3 0207 	rsb	r2, r3, #7
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d43e:	2201      	movs	r2, #1
 800d440:	409a      	lsls	r2, r3
 800d442:	4b0f      	ldr	r3, [pc, #60]	; (800d480 <xTaskPriorityDisinherit+0x108>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4313      	orrs	r3, r2
 800d448:	4a0d      	ldr	r2, [pc, #52]	; (800d480 <xTaskPriorityDisinherit+0x108>)
 800d44a:	6013      	str	r3, [r2, #0]
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d450:	4613      	mov	r3, r2
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	4413      	add	r3, r2
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	4a08      	ldr	r2, [pc, #32]	; (800d47c <xTaskPriorityDisinherit+0x104>)
 800d45a:	441a      	add	r2, r3
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	3304      	adds	r3, #4
 800d460:	4619      	mov	r1, r3
 800d462:	4610      	mov	r0, r2
 800d464:	f7fe f8f7 	bl	800b656 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d468:	2301      	movs	r3, #1
 800d46a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d46c:	697b      	ldr	r3, [r7, #20]
	}
 800d46e:	4618      	mov	r0, r3
 800d470:	3718      	adds	r7, #24
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	20004558 	.word	0x20004558
 800d47c:	2000455c 	.word	0x2000455c
 800d480:	20004660 	.word	0x20004660

0800d484 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d48e:	4b29      	ldr	r3, [pc, #164]	; (800d534 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d494:	4b28      	ldr	r3, [pc, #160]	; (800d538 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	3304      	adds	r3, #4
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7fe f938 	bl	800b710 <uxListRemove>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d10b      	bne.n	800d4be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d4a6:	4b24      	ldr	r3, [pc, #144]	; (800d538 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d4b2:	43da      	mvns	r2, r3
 800d4b4:	4b21      	ldr	r3, [pc, #132]	; (800d53c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4013      	ands	r3, r2
 800d4ba:	4a20      	ldr	r2, [pc, #128]	; (800d53c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d4bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c4:	d10a      	bne.n	800d4dc <prvAddCurrentTaskToDelayedList+0x58>
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d007      	beq.n	800d4dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4cc:	4b1a      	ldr	r3, [pc, #104]	; (800d538 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	3304      	adds	r3, #4
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	481a      	ldr	r0, [pc, #104]	; (800d540 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d4d6:	f7fe f8be 	bl	800b656 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d4da:	e026      	b.n	800d52a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d4dc:	68fa      	ldr	r2, [r7, #12]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d4e4:	4b14      	ldr	r3, [pc, #80]	; (800d538 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	68ba      	ldr	r2, [r7, #8]
 800d4ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d4ec:	68ba      	ldr	r2, [r7, #8]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d209      	bcs.n	800d508 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4f4:	4b13      	ldr	r3, [pc, #76]	; (800d544 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	4b0f      	ldr	r3, [pc, #60]	; (800d538 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3304      	adds	r3, #4
 800d4fe:	4619      	mov	r1, r3
 800d500:	4610      	mov	r0, r2
 800d502:	f7fe f8cc 	bl	800b69e <vListInsert>
}
 800d506:	e010      	b.n	800d52a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d508:	4b0f      	ldr	r3, [pc, #60]	; (800d548 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	4b0a      	ldr	r3, [pc, #40]	; (800d538 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	3304      	adds	r3, #4
 800d512:	4619      	mov	r1, r3
 800d514:	4610      	mov	r0, r2
 800d516:	f7fe f8c2 	bl	800b69e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d51a:	4b0c      	ldr	r3, [pc, #48]	; (800d54c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	68ba      	ldr	r2, [r7, #8]
 800d520:	429a      	cmp	r2, r3
 800d522:	d202      	bcs.n	800d52a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d524:	4a09      	ldr	r2, [pc, #36]	; (800d54c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	6013      	str	r3, [r2, #0]
}
 800d52a:	bf00      	nop
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	2000465c 	.word	0x2000465c
 800d538:	20004558 	.word	0x20004558
 800d53c:	20004660 	.word	0x20004660
 800d540:	20004644 	.word	0x20004644
 800d544:	20004614 	.word	0x20004614
 800d548:	20004610 	.word	0x20004610
 800d54c:	20004678 	.word	0x20004678

0800d550 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d550:	b590      	push	{r4, r7, lr}
 800d552:	b089      	sub	sp, #36	; 0x24
 800d554:	af04      	add	r7, sp, #16
 800d556:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d558:	2301      	movs	r3, #1
 800d55a:	2202      	movs	r2, #2
 800d55c:	2102      	movs	r1, #2
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 fcb8 	bl	800ded4 <USBH_FindInterface>
 800d564:	4603      	mov	r3, r0
 800d566:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d568:	7bfb      	ldrb	r3, [r7, #15]
 800d56a:	2bff      	cmp	r3, #255	; 0xff
 800d56c:	d002      	beq.n	800d574 <USBH_CDC_InterfaceInit+0x24>
 800d56e:	7bfb      	ldrb	r3, [r7, #15]
 800d570:	2b01      	cmp	r3, #1
 800d572:	d901      	bls.n	800d578 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d574:	2302      	movs	r3, #2
 800d576:	e13d      	b.n	800d7f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d578:	7bfb      	ldrb	r3, [r7, #15]
 800d57a:	4619      	mov	r1, r3
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f000 fc8d 	bl	800de9c <USBH_SelectInterface>
 800d582:	4603      	mov	r3, r0
 800d584:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d586:	7bbb      	ldrb	r3, [r7, #14]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d001      	beq.n	800d590 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d58c:	2302      	movs	r3, #2
 800d58e:	e131      	b.n	800d7f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800d596:	2050      	movs	r0, #80	; 0x50
 800d598:	f002 fd56 	bl	8010048 <malloc>
 800d59c:	4603      	mov	r3, r0
 800d59e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5a6:	69db      	ldr	r3, [r3, #28]
 800d5a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d101      	bne.n	800d5b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d5b0:	2302      	movs	r3, #2
 800d5b2:	e11f      	b.n	800d7f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d5b4:	2250      	movs	r2, #80	; 0x50
 800d5b6:	2100      	movs	r1, #0
 800d5b8:	68b8      	ldr	r0, [r7, #8]
 800d5ba:	f002 fd63 	bl	8010084 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d5be:	7bfb      	ldrb	r3, [r7, #15]
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	211a      	movs	r1, #26
 800d5c4:	fb01 f303 	mul.w	r3, r1, r3
 800d5c8:	4413      	add	r3, r2
 800d5ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	b25b      	sxtb	r3, r3
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	da15      	bge.n	800d602 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d5d6:	7bfb      	ldrb	r3, [r7, #15]
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	211a      	movs	r1, #26
 800d5dc:	fb01 f303 	mul.w	r3, r1, r3
 800d5e0:	4413      	add	r3, r2
 800d5e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d5e6:	781a      	ldrb	r2, [r3, #0]
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d5ec:	7bfb      	ldrb	r3, [r7, #15]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	211a      	movs	r1, #26
 800d5f2:	fb01 f303 	mul.w	r3, r1, r3
 800d5f6:	4413      	add	r3, r2
 800d5f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d5fc:	881a      	ldrh	r2, [r3, #0]
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	785b      	ldrb	r3, [r3, #1]
 800d606:	4619      	mov	r1, r3
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f002 f988 	bl	800f91e <USBH_AllocPipe>
 800d60e:	4603      	mov	r3, r0
 800d610:	461a      	mov	r2, r3
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	7819      	ldrb	r1, [r3, #0]
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	7858      	ldrb	r0, [r3, #1]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d62a:	68ba      	ldr	r2, [r7, #8]
 800d62c:	8952      	ldrh	r2, [r2, #10]
 800d62e:	9202      	str	r2, [sp, #8]
 800d630:	2203      	movs	r2, #3
 800d632:	9201      	str	r2, [sp, #4]
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	4623      	mov	r3, r4
 800d638:	4602      	mov	r2, r0
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f002 f940 	bl	800f8c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	2200      	movs	r2, #0
 800d646:	4619      	mov	r1, r3
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f002 fc4f 	bl	800feec <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800d64e:	2300      	movs	r3, #0
 800d650:	2200      	movs	r2, #0
 800d652:	210a      	movs	r1, #10
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f000 fc3d 	bl	800ded4 <USBH_FindInterface>
 800d65a:	4603      	mov	r3, r0
 800d65c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d65e:	7bfb      	ldrb	r3, [r7, #15]
 800d660:	2bff      	cmp	r3, #255	; 0xff
 800d662:	d002      	beq.n	800d66a <USBH_CDC_InterfaceInit+0x11a>
 800d664:	7bfb      	ldrb	r3, [r7, #15]
 800d666:	2b01      	cmp	r3, #1
 800d668:	d901      	bls.n	800d66e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d66a:	2302      	movs	r3, #2
 800d66c:	e0c2      	b.n	800d7f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d66e:	7bfb      	ldrb	r3, [r7, #15]
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	211a      	movs	r1, #26
 800d674:	fb01 f303 	mul.w	r3, r1, r3
 800d678:	4413      	add	r3, r2
 800d67a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	b25b      	sxtb	r3, r3
 800d682:	2b00      	cmp	r3, #0
 800d684:	da16      	bge.n	800d6b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d686:	7bfb      	ldrb	r3, [r7, #15]
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	211a      	movs	r1, #26
 800d68c:	fb01 f303 	mul.w	r3, r1, r3
 800d690:	4413      	add	r3, r2
 800d692:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d696:	781a      	ldrb	r2, [r3, #0]
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	211a      	movs	r1, #26
 800d6a2:	fb01 f303 	mul.w	r3, r1, r3
 800d6a6:	4413      	add	r3, r2
 800d6a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d6ac:	881a      	ldrh	r2, [r3, #0]
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	835a      	strh	r2, [r3, #26]
 800d6b2:	e015      	b.n	800d6e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d6b4:	7bfb      	ldrb	r3, [r7, #15]
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	211a      	movs	r1, #26
 800d6ba:	fb01 f303 	mul.w	r3, r1, r3
 800d6be:	4413      	add	r3, r2
 800d6c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d6c4:	781a      	ldrb	r2, [r3, #0]
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d6ca:	7bfb      	ldrb	r3, [r7, #15]
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	211a      	movs	r1, #26
 800d6d0:	fb01 f303 	mul.w	r3, r1, r3
 800d6d4:	4413      	add	r3, r2
 800d6d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d6da:	881a      	ldrh	r2, [r3, #0]
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800d6e0:	7bfb      	ldrb	r3, [r7, #15]
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	211a      	movs	r1, #26
 800d6e6:	fb01 f303 	mul.w	r3, r1, r3
 800d6ea:	4413      	add	r3, r2
 800d6ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	b25b      	sxtb	r3, r3
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	da16      	bge.n	800d726 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d6f8:	7bfb      	ldrb	r3, [r7, #15]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	211a      	movs	r1, #26
 800d6fe:	fb01 f303 	mul.w	r3, r1, r3
 800d702:	4413      	add	r3, r2
 800d704:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d708:	781a      	ldrb	r2, [r3, #0]
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d70e:	7bfb      	ldrb	r3, [r7, #15]
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	211a      	movs	r1, #26
 800d714:	fb01 f303 	mul.w	r3, r1, r3
 800d718:	4413      	add	r3, r2
 800d71a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d71e:	881a      	ldrh	r2, [r3, #0]
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	835a      	strh	r2, [r3, #26]
 800d724:	e015      	b.n	800d752 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d726:	7bfb      	ldrb	r3, [r7, #15]
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	211a      	movs	r1, #26
 800d72c:	fb01 f303 	mul.w	r3, r1, r3
 800d730:	4413      	add	r3, r2
 800d732:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d736:	781a      	ldrb	r2, [r3, #0]
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d73c:	7bfb      	ldrb	r3, [r7, #15]
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	211a      	movs	r1, #26
 800d742:	fb01 f303 	mul.w	r3, r1, r3
 800d746:	4413      	add	r3, r2
 800d748:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d74c:	881a      	ldrh	r2, [r3, #0]
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	7b9b      	ldrb	r3, [r3, #14]
 800d756:	4619      	mov	r1, r3
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f002 f8e0 	bl	800f91e <USBH_AllocPipe>
 800d75e:	4603      	mov	r3, r0
 800d760:	461a      	mov	r2, r3
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	7bdb      	ldrb	r3, [r3, #15]
 800d76a:	4619      	mov	r1, r3
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f002 f8d6 	bl	800f91e <USBH_AllocPipe>
 800d772:	4603      	mov	r3, r0
 800d774:	461a      	mov	r2, r3
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	7b59      	ldrb	r1, [r3, #13]
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	7b98      	ldrb	r0, [r3, #14]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d78e:	68ba      	ldr	r2, [r7, #8]
 800d790:	8b12      	ldrh	r2, [r2, #24]
 800d792:	9202      	str	r2, [sp, #8]
 800d794:	2202      	movs	r2, #2
 800d796:	9201      	str	r2, [sp, #4]
 800d798:	9300      	str	r3, [sp, #0]
 800d79a:	4623      	mov	r3, r4
 800d79c:	4602      	mov	r2, r0
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f002 f88e 	bl	800f8c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	7b19      	ldrb	r1, [r3, #12]
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	7bd8      	ldrb	r0, [r3, #15]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d7b8:	68ba      	ldr	r2, [r7, #8]
 800d7ba:	8b52      	ldrh	r2, [r2, #26]
 800d7bc:	9202      	str	r2, [sp, #8]
 800d7be:	2202      	movs	r2, #2
 800d7c0:	9201      	str	r2, [sp, #4]
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	4623      	mov	r3, r4
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f002 f879 	bl	800f8c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	7b5b      	ldrb	r3, [r3, #13]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	4619      	mov	r1, r3
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f002 fb84 	bl	800feec <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	7b1b      	ldrb	r3, [r3, #12]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f002 fb7d 	bl	800feec <USBH_LL_SetToggle>

  return USBH_OK;
 800d7f2:	2300      	movs	r3, #0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3714      	adds	r7, #20
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd90      	pop	{r4, r7, pc}

0800d7fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d80a:	69db      	ldr	r3, [r3, #28]
 800d80c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d00e      	beq.n	800d834 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	4619      	mov	r1, r3
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f002 f86e 	bl	800f8fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	4619      	mov	r1, r3
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f002 f899 	bl	800f960 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2200      	movs	r2, #0
 800d832:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	7b1b      	ldrb	r3, [r3, #12]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00e      	beq.n	800d85a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	7b1b      	ldrb	r3, [r3, #12]
 800d840:	4619      	mov	r1, r3
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f002 f85b 	bl	800f8fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	7b1b      	ldrb	r3, [r3, #12]
 800d84c:	4619      	mov	r1, r3
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f002 f886 	bl	800f960 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	7b5b      	ldrb	r3, [r3, #13]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00e      	beq.n	800d880 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	7b5b      	ldrb	r3, [r3, #13]
 800d866:	4619      	mov	r1, r3
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f002 f848 	bl	800f8fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	7b5b      	ldrb	r3, [r3, #13]
 800d872:	4619      	mov	r1, r3
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f002 f873 	bl	800f960 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2200      	movs	r2, #0
 800d87e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d886:	69db      	ldr	r3, [r3, #28]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00b      	beq.n	800d8a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d892:	69db      	ldr	r3, [r3, #28]
 800d894:	4618      	mov	r0, r3
 800d896:	f002 fbdf 	bl	8010058 <free>
    phost->pActiveClass->pData = 0U;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3710      	adds	r7, #16
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}

0800d8ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b084      	sub	sp, #16
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d8bc:	69db      	ldr	r3, [r3, #28]
 800d8be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	3340      	adds	r3, #64	; 0x40
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f000 f8b1 	bl	800da2e <GetLineCoding>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800d8d0:	7afb      	ldrb	r3, [r7, #11]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d105      	bne.n	800d8e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d8dc:	2102      	movs	r1, #2
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800d8e2:	7afb      	ldrb	r3, [r7, #11]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3710      	adds	r7, #16
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d902:	69db      	ldr	r3, [r3, #28]
 800d904:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d90c:	2b04      	cmp	r3, #4
 800d90e:	d877      	bhi.n	800da00 <USBH_CDC_Process+0x114>
 800d910:	a201      	add	r2, pc, #4	; (adr r2, 800d918 <USBH_CDC_Process+0x2c>)
 800d912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d916:	bf00      	nop
 800d918:	0800d92d 	.word	0x0800d92d
 800d91c:	0800d933 	.word	0x0800d933
 800d920:	0800d963 	.word	0x0800d963
 800d924:	0800d9d7 	.word	0x0800d9d7
 800d928:	0800d9e5 	.word	0x0800d9e5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800d92c:	2300      	movs	r3, #0
 800d92e:	73fb      	strb	r3, [r7, #15]
      break;
 800d930:	e06d      	b.n	800da0e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d936:	4619      	mov	r1, r3
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 f897 	bl	800da6c <SetLineCoding>
 800d93e:	4603      	mov	r3, r0
 800d940:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d942:	7bbb      	ldrb	r3, [r7, #14]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d104      	bne.n	800d952 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	2202      	movs	r2, #2
 800d94c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d950:	e058      	b.n	800da04 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800d952:	7bbb      	ldrb	r3, [r7, #14]
 800d954:	2b01      	cmp	r3, #1
 800d956:	d055      	beq.n	800da04 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	2204      	movs	r2, #4
 800d95c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d960:	e050      	b.n	800da04 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	3340      	adds	r3, #64	; 0x40
 800d966:	4619      	mov	r1, r3
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 f860 	bl	800da2e <GetLineCoding>
 800d96e:	4603      	mov	r3, r0
 800d970:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d972:	7bbb      	ldrb	r3, [r7, #14]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d126      	bne.n	800d9c6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d98a:	791b      	ldrb	r3, [r3, #4]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d13b      	bne.n	800da08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d99a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d133      	bne.n	800da08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9aa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d12b      	bne.n	800da08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9b8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d124      	bne.n	800da08 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 f982 	bl	800dcc8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d9c4:	e020      	b.n	800da08 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800d9c6:	7bbb      	ldrb	r3, [r7, #14]
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d01d      	beq.n	800da08 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	2204      	movs	r2, #4
 800d9d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d9d4:	e018      	b.n	800da08 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 f867 	bl	800daaa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f000 f8f6 	bl	800dbce <CDC_ProcessReception>
      break;
 800d9e2:	e014      	b.n	800da0e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f001 f95b 	bl	800eca2 <USBH_ClrFeature>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d9f0:	7bbb      	ldrb	r3, [r7, #14]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d10a      	bne.n	800da0c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800d9fe:	e005      	b.n	800da0c <USBH_CDC_Process+0x120>

    default:
      break;
 800da00:	bf00      	nop
 800da02:	e004      	b.n	800da0e <USBH_CDC_Process+0x122>
      break;
 800da04:	bf00      	nop
 800da06:	e002      	b.n	800da0e <USBH_CDC_Process+0x122>
      break;
 800da08:	bf00      	nop
 800da0a:	e000      	b.n	800da0e <USBH_CDC_Process+0x122>
      break;
 800da0c:	bf00      	nop

  }

  return status;
 800da0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800da20:	2300      	movs	r3, #0
}
 800da22:	4618      	mov	r0, r3
 800da24:	370c      	adds	r7, #12
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr

0800da2e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b082      	sub	sp, #8
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	22a1      	movs	r2, #161	; 0xa1
 800da3c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2221      	movs	r2, #33	; 0x21
 800da42:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2200      	movs	r2, #0
 800da48:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2207      	movs	r2, #7
 800da54:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	2207      	movs	r2, #7
 800da5a:	4619      	mov	r1, r3
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f001 fbed 	bl	800f23c <USBH_CtlReq>
 800da62:	4603      	mov	r3, r0
}
 800da64:	4618      	mov	r0, r3
 800da66:	3708      	adds	r7, #8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2221      	movs	r2, #33	; 0x21
 800da7a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2220      	movs	r2, #32
 800da80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2200      	movs	r2, #0
 800da86:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2207      	movs	r2, #7
 800da92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	2207      	movs	r2, #7
 800da98:	4619      	mov	r1, r3
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f001 fbce 	bl	800f23c <USBH_CtlReq>
 800daa0:	4603      	mov	r3, r0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3708      	adds	r7, #8
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800daaa:	b580      	push	{r7, lr}
 800daac:	b086      	sub	sp, #24
 800daae:	af02      	add	r7, sp, #8
 800dab0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dab8:	69db      	ldr	r3, [r3, #28]
 800daba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dabc:	2300      	movs	r3, #0
 800dabe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d002      	beq.n	800dad0 <CDC_ProcessTransmission+0x26>
 800daca:	2b02      	cmp	r3, #2
 800dacc:	d023      	beq.n	800db16 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800dace:	e07a      	b.n	800dbc6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad4:	68fa      	ldr	r2, [r7, #12]
 800dad6:	8b12      	ldrh	r2, [r2, #24]
 800dad8:	4293      	cmp	r3, r2
 800dada:	d90b      	bls.n	800daf4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	69d9      	ldr	r1, [r3, #28]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	8b1a      	ldrh	r2, [r3, #24]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	7b5b      	ldrb	r3, [r3, #13]
 800dae8:	2001      	movs	r0, #1
 800daea:	9000      	str	r0, [sp, #0]
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f001 fea4 	bl	800f83a <USBH_BulkSendData>
 800daf2:	e00b      	b.n	800db0c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	7b5b      	ldrb	r3, [r3, #13]
 800db02:	2001      	movs	r0, #1
 800db04:	9000      	str	r0, [sp, #0]
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f001 fe97 	bl	800f83a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2202      	movs	r2, #2
 800db10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800db14:	e057      	b.n	800dbc6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	7b5b      	ldrb	r3, [r3, #13]
 800db1a:	4619      	mov	r1, r3
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f002 f9bb 	bl	800fe98 <USBH_LL_GetURBState>
 800db22:	4603      	mov	r3, r0
 800db24:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800db26:	7afb      	ldrb	r3, [r7, #11]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d136      	bne.n	800db9a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db30:	68fa      	ldr	r2, [r7, #12]
 800db32:	8b12      	ldrh	r2, [r2, #24]
 800db34:	4293      	cmp	r3, r2
 800db36:	d90e      	bls.n	800db56 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3c:	68fa      	ldr	r2, [r7, #12]
 800db3e:	8b12      	ldrh	r2, [r2, #24]
 800db40:	1a9a      	subs	r2, r3, r2
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	69db      	ldr	r3, [r3, #28]
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	8b12      	ldrh	r2, [r2, #24]
 800db4e:	441a      	add	r2, r3
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	61da      	str	r2, [r3, #28]
 800db54:	e002      	b.n	800db5c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2200      	movs	r2, #0
 800db5a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db60:	2b00      	cmp	r3, #0
 800db62:	d004      	beq.n	800db6e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2201      	movs	r2, #1
 800db68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800db6c:	e006      	b.n	800db7c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2200      	movs	r2, #0
 800db72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f000 f892 	bl	800dca0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2204      	movs	r2, #4
 800db80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800db90:	2200      	movs	r2, #0
 800db92:	4619      	mov	r1, r3
 800db94:	f7fd fa94 	bl	800b0c0 <osMessagePut>
      break;
 800db98:	e014      	b.n	800dbc4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800db9a:	7afb      	ldrb	r3, [r7, #11]
 800db9c:	2b02      	cmp	r3, #2
 800db9e:	d111      	bne.n	800dbc4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2201      	movs	r2, #1
 800dba4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2204      	movs	r2, #4
 800dbac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	f7fd fa7e 	bl	800b0c0 <osMessagePut>
      break;
 800dbc4:	bf00      	nop
  }
}
 800dbc6:	bf00      	nop
 800dbc8:	3710      	adds	r7, #16
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b086      	sub	sp, #24
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dbdc:	69db      	ldr	r3, [r3, #28]
 800dbde:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800dbea:	2b03      	cmp	r3, #3
 800dbec:	d002      	beq.n	800dbf4 <CDC_ProcessReception+0x26>
 800dbee:	2b04      	cmp	r3, #4
 800dbf0:	d00e      	beq.n	800dc10 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800dbf2:	e051      	b.n	800dc98 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	6a19      	ldr	r1, [r3, #32]
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	8b5a      	ldrh	r2, [r3, #26]
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	7b1b      	ldrb	r3, [r3, #12]
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f001 fe3f 	bl	800f884 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	2204      	movs	r2, #4
 800dc0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800dc0e:	e043      	b.n	800dc98 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	7b1b      	ldrb	r3, [r3, #12]
 800dc14:	4619      	mov	r1, r3
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f002 f93e 	bl	800fe98 <USBH_LL_GetURBState>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800dc20:	7cfb      	ldrb	r3, [r7, #19]
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d137      	bne.n	800dc96 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	7b1b      	ldrb	r3, [r3, #12]
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f002 f8a1 	bl	800fd74 <USBH_LL_GetLastXferSize>
 800dc32:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc38:	68fa      	ldr	r2, [r7, #12]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d016      	beq.n	800dc6c <CDC_ProcessReception+0x9e>
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	8b5b      	ldrh	r3, [r3, #26]
 800dc42:	461a      	mov	r2, r3
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d910      	bls.n	800dc6c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	1ad2      	subs	r2, r2, r3
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	6a1a      	ldr	r2, [r3, #32]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	441a      	add	r2, r3
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	2203      	movs	r2, #3
 800dc66:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800dc6a:	e006      	b.n	800dc7a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f000 f81d 	bl	800dcb4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2204      	movs	r2, #4
 800dc7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dc8e:	2200      	movs	r2, #0
 800dc90:	4619      	mov	r1, r3
 800dc92:	f7fd fa15 	bl	800b0c0 <osMessagePut>
      break;
 800dc96:	bf00      	nop
  }
}
 800dc98:	bf00      	nop
 800dc9a:	3718      	adds	r7, #24
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dca8:	bf00      	nop
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr

0800dcb4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b083      	sub	sp, #12
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dcbc:	bf00      	nop
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr

0800dcc8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b083      	sub	sp, #12
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dcd0:	bf00      	nop
 800dcd2:	370c      	adds	r7, #12
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr

0800dcdc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800dcdc:	b5b0      	push	{r4, r5, r7, lr}
 800dcde:	b090      	sub	sp, #64	; 0x40
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	4613      	mov	r3, r2
 800dce8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d101      	bne.n	800dcf4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800dcf0:	2302      	movs	r3, #2
 800dcf2:	e04d      	b.n	800dd90 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	79fa      	ldrb	r2, [r7, #7]
 800dcf8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800dd0c:	68f8      	ldr	r0, [r7, #12]
 800dd0e:	f000 f847 	bl	800dda0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2200      	movs	r2, #0
 800dd16:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2200      	movs	r2, #0
 800dd26:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d003      	beq.n	800dd40 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	68ba      	ldr	r2, [r7, #8]
 800dd3c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800dd40:	4b15      	ldr	r3, [pc, #84]	; (800dd98 <USBH_Init+0xbc>)
 800dd42:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800dd46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800dd4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dd50:	2100      	movs	r1, #0
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fd f98b 	bl	800b06e <osMessageCreate>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800dd60:	4b0e      	ldr	r3, [pc, #56]	; (800dd9c <USBH_Init+0xc0>)
 800dd62:	f107 0414 	add.w	r4, r7, #20
 800dd66:	461d      	mov	r5, r3
 800dd68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800dd74:	f107 0314 	add.w	r3, r7, #20
 800dd78:	68f9      	ldr	r1, [r7, #12]
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7fd f917 	bl	800afae <osThreadCreate>
 800dd80:	4602      	mov	r2, r0
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f001 ff35 	bl	800fbf8 <USBH_LL_Init>

  return USBH_OK;
 800dd8e:	2300      	movs	r3, #0
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3740      	adds	r7, #64	; 0x40
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bdb0      	pop	{r4, r5, r7, pc}
 800dd98:	08010348 	.word	0x08010348
 800dd9c:	08010358 	.word	0x08010358

0800dda0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b085      	sub	sp, #20
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ddac:	2300      	movs	r3, #0
 800ddae:	60fb      	str	r3, [r7, #12]
 800ddb0:	e009      	b.n	800ddc6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	33e0      	adds	r3, #224	; 0xe0
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	4413      	add	r3, r2
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	60fb      	str	r3, [r7, #12]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2b0f      	cmp	r3, #15
 800ddca:	d9f2      	bls.n	800ddb2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ddcc:	2300      	movs	r3, #0
 800ddce:	60fb      	str	r3, [r7, #12]
 800ddd0:	e009      	b.n	800dde6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dddc:	2200      	movs	r2, #0
 800ddde:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	3301      	adds	r3, #1
 800dde4:	60fb      	str	r3, [r7, #12]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddec:	d3f1      	bcc.n	800ddd2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2200      	movs	r2, #0
 800de04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2201      	movs	r2, #1
 800de0c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2240      	movs	r2, #64	; 0x40
 800de12:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2200      	movs	r2, #0
 800de1e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2201      	movs	r2, #1
 800de26:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2200      	movs	r2, #0
 800de2e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3714      	adds	r7, #20
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800de48:	b480      	push	{r7}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800de52:	2300      	movs	r3, #0
 800de54:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d016      	beq.n	800de8a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800de62:	2b00      	cmp	r3, #0
 800de64:	d10e      	bne.n	800de84 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800de6c:	1c59      	adds	r1, r3, #1
 800de6e:	687a      	ldr	r2, [r7, #4]
 800de70:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	33de      	adds	r3, #222	; 0xde
 800de78:	6839      	ldr	r1, [r7, #0]
 800de7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800de7e:	2300      	movs	r3, #0
 800de80:	73fb      	strb	r3, [r7, #15]
 800de82:	e004      	b.n	800de8e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800de84:	2302      	movs	r3, #2
 800de86:	73fb      	strb	r3, [r7, #15]
 800de88:	e001      	b.n	800de8e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800de8a:	2302      	movs	r3, #2
 800de8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800de8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de90:	4618      	mov	r0, r3
 800de92:	3714      	adds	r7, #20
 800de94:	46bd      	mov	sp, r7
 800de96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9a:	4770      	bx	lr

0800de9c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	460b      	mov	r3, r1
 800dea6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800dea8:	2300      	movs	r3, #0
 800deaa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800deb2:	78fa      	ldrb	r2, [r7, #3]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d204      	bcs.n	800dec2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	78fa      	ldrb	r2, [r7, #3]
 800debc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800dec0:	e001      	b.n	800dec6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800dec2:	2302      	movs	r3, #2
 800dec4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800dec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3714      	adds	r7, #20
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr

0800ded4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b087      	sub	sp, #28
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	4608      	mov	r0, r1
 800dede:	4611      	mov	r1, r2
 800dee0:	461a      	mov	r2, r3
 800dee2:	4603      	mov	r3, r0
 800dee4:	70fb      	strb	r3, [r7, #3]
 800dee6:	460b      	mov	r3, r1
 800dee8:	70bb      	strb	r3, [r7, #2]
 800deea:	4613      	mov	r3, r2
 800deec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800deee:	2300      	movs	r3, #0
 800def0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800def2:	2300      	movs	r3, #0
 800def4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800defc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800defe:	e025      	b.n	800df4c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800df00:	7dfb      	ldrb	r3, [r7, #23]
 800df02:	221a      	movs	r2, #26
 800df04:	fb02 f303 	mul.w	r3, r2, r3
 800df08:	3308      	adds	r3, #8
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	4413      	add	r3, r2
 800df0e:	3302      	adds	r3, #2
 800df10:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	795b      	ldrb	r3, [r3, #5]
 800df16:	78fa      	ldrb	r2, [r7, #3]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d002      	beq.n	800df22 <USBH_FindInterface+0x4e>
 800df1c:	78fb      	ldrb	r3, [r7, #3]
 800df1e:	2bff      	cmp	r3, #255	; 0xff
 800df20:	d111      	bne.n	800df46 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800df26:	78ba      	ldrb	r2, [r7, #2]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d002      	beq.n	800df32 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800df2c:	78bb      	ldrb	r3, [r7, #2]
 800df2e:	2bff      	cmp	r3, #255	; 0xff
 800df30:	d109      	bne.n	800df46 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800df36:	787a      	ldrb	r2, [r7, #1]
 800df38:	429a      	cmp	r2, r3
 800df3a:	d002      	beq.n	800df42 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800df3c:	787b      	ldrb	r3, [r7, #1]
 800df3e:	2bff      	cmp	r3, #255	; 0xff
 800df40:	d101      	bne.n	800df46 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800df42:	7dfb      	ldrb	r3, [r7, #23]
 800df44:	e006      	b.n	800df54 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800df46:	7dfb      	ldrb	r3, [r7, #23]
 800df48:	3301      	adds	r3, #1
 800df4a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800df4c:	7dfb      	ldrb	r3, [r7, #23]
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d9d6      	bls.n	800df00 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800df52:	23ff      	movs	r3, #255	; 0xff
}
 800df54:	4618      	mov	r0, r3
 800df56:	371c      	adds	r7, #28
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f001 fe8b 	bl	800fc84 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800df6e:	2101      	movs	r1, #1
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f001 ffa4 	bl	800febe <USBH_LL_DriverVBUS>

  return USBH_OK;
 800df76:	2300      	movs	r3, #0
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3708      	adds	r7, #8
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b088      	sub	sp, #32
 800df84:	af04      	add	r7, sp, #16
 800df86:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800df88:	2302      	movs	r3, #2
 800df8a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800df8c:	2300      	movs	r3, #0
 800df8e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800df96:	b2db      	uxtb	r3, r3
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d102      	bne.n	800dfa2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2203      	movs	r2, #3
 800dfa0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	2b0b      	cmp	r3, #11
 800dfaa:	f200 8247 	bhi.w	800e43c <USBH_Process+0x4bc>
 800dfae:	a201      	add	r2, pc, #4	; (adr r2, 800dfb4 <USBH_Process+0x34>)
 800dfb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb4:	0800dfe5 	.word	0x0800dfe5
 800dfb8:	0800e033 	.word	0x0800e033
 800dfbc:	0800e0b7 	.word	0x0800e0b7
 800dfc0:	0800e3bb 	.word	0x0800e3bb
 800dfc4:	0800e43d 	.word	0x0800e43d
 800dfc8:	0800e177 	.word	0x0800e177
 800dfcc:	0800e345 	.word	0x0800e345
 800dfd0:	0800e1c9 	.word	0x0800e1c9
 800dfd4:	0800e205 	.word	0x0800e205
 800dfd8:	0800e23f 	.word	0x0800e23f
 800dfdc:	0800e29d 	.word	0x0800e29d
 800dfe0:	0800e3a3 	.word	0x0800e3a3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	f000 8227 	beq.w	800e440 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2201      	movs	r2, #1
 800dff6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800dff8:	20c8      	movs	r0, #200	; 0xc8
 800dffa:	f001 ffa7 	bl	800ff4c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f001 fe9d 	bl	800fd3e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2200      	movs	r2, #0
 800e010:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2201      	movs	r2, #1
 800e018:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e028:	2200      	movs	r2, #0
 800e02a:	4619      	mov	r1, r3
 800e02c:	f7fd f848 	bl	800b0c0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e030:	e206      	b.n	800e440 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d107      	bne.n	800e04c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2200      	movs	r2, #0
 800e040:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2202      	movs	r2, #2
 800e048:	701a      	strb	r2, [r3, #0]
 800e04a:	e025      	b.n	800e098 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e056:	d914      	bls.n	800e082 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e05e:	3301      	adds	r3, #1
 800e060:	b2da      	uxtb	r2, r3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e06e:	2b03      	cmp	r3, #3
 800e070:	d903      	bls.n	800e07a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	220d      	movs	r2, #13
 800e076:	701a      	strb	r2, [r3, #0]
 800e078:	e00e      	b.n	800e098 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2200      	movs	r2, #0
 800e07e:	701a      	strb	r2, [r3, #0]
 800e080:	e00a      	b.n	800e098 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e088:	f103 020a 	add.w	r2, r3, #10
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e092:	200a      	movs	r0, #10
 800e094:	f001 ff5a 	bl	800ff4c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	4619      	mov	r1, r3
 800e0b0:	f7fd f806 	bl	800b0c0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e0b4:	e1cb      	b.n	800e44e <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d005      	beq.n	800e0cc <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e0c6:	2104      	movs	r1, #4
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e0cc:	2064      	movs	r0, #100	; 0x64
 800e0ce:	f001 ff3d 	bl	800ff4c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f001 fe0c 	bl	800fcf0 <USBH_LL_GetSpeed>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	461a      	mov	r2, r3
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2205      	movs	r2, #5
 800e0e6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f001 fc17 	bl	800f91e <USBH_AllocPipe>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e0f8:	2180      	movs	r1, #128	; 0x80
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f001 fc0f 	bl	800f91e <USBH_AllocPipe>
 800e100:	4603      	mov	r3, r0
 800e102:	461a      	mov	r2, r3
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	7919      	ldrb	r1, [r3, #4]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e11c:	b292      	uxth	r2, r2
 800e11e:	9202      	str	r2, [sp, #8]
 800e120:	2200      	movs	r2, #0
 800e122:	9201      	str	r2, [sp, #4]
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	4603      	mov	r3, r0
 800e128:	2280      	movs	r2, #128	; 0x80
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f001 fbc8 	bl	800f8c0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	7959      	ldrb	r1, [r3, #5]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e144:	b292      	uxth	r2, r2
 800e146:	9202      	str	r2, [sp, #8]
 800e148:	2200      	movs	r2, #0
 800e14a:	9201      	str	r2, [sp, #4]
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	4603      	mov	r3, r0
 800e150:	2200      	movs	r2, #0
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f001 fbb4 	bl	800f8c0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2201      	movs	r2, #1
 800e15c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e16c:	2200      	movs	r2, #0
 800e16e:	4619      	mov	r1, r3
 800e170:	f7fc ffa6 	bl	800b0c0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e174:	e16b      	b.n	800e44e <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 f96e 	bl	800e458 <USBH_HandleEnum>
 800e17c:	4603      	mov	r3, r0
 800e17e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e180:	7bbb      	ldrb	r3, [r7, #14]
 800e182:	b2db      	uxtb	r3, r3
 800e184:	2b00      	cmp	r3, #0
 800e186:	f040 815d 	bne.w	800e444 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d103      	bne.n	800e1a4 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2208      	movs	r2, #8
 800e1a0:	701a      	strb	r2, [r3, #0]
 800e1a2:	e002      	b.n	800e1aa <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2207      	movs	r2, #7
 800e1a8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2205      	movs	r2, #5
 800e1ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e1be:	2200      	movs	r2, #0
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	f7fc ff7d 	bl	800b0c0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e1c6:	e13d      	b.n	800e444 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	f000 813a 	beq.w	800e448 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e1da:	2101      	movs	r1, #1
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2208      	movs	r2, #8
 800e1e4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2205      	movs	r2, #5
 800e1ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	f7fc ff5f 	bl	800b0c0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800e202:	e121      	b.n	800e448 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	4619      	mov	r1, r3
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 fd00 	bl	800ec14 <USBH_SetCfg>
 800e214:	4603      	mov	r3, r0
 800e216:	2b00      	cmp	r3, #0
 800e218:	d102      	bne.n	800e220 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2209      	movs	r2, #9
 800e21e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2201      	movs	r2, #1
 800e224:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e234:	2200      	movs	r2, #0
 800e236:	4619      	mov	r1, r3
 800e238:	f7fc ff42 	bl	800b0c0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e23c:	e107      	b.n	800e44e <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e244:	f003 0320 	and.w	r3, r3, #32
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d015      	beq.n	800e278 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800e24c:	2101      	movs	r1, #1
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 fd03 	bl	800ec5a <USBH_SetFeature>
 800e254:	4603      	mov	r3, r0
 800e256:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e258:	7bbb      	ldrb	r3, [r7, #14]
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d103      	bne.n	800e268 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	220a      	movs	r2, #10
 800e264:	701a      	strb	r2, [r3, #0]
 800e266:	e00a      	b.n	800e27e <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800e268:	7bbb      	ldrb	r3, [r7, #14]
 800e26a:	b2db      	uxtb	r3, r3
 800e26c:	2b03      	cmp	r3, #3
 800e26e:	d106      	bne.n	800e27e <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	220a      	movs	r2, #10
 800e274:	701a      	strb	r2, [r3, #0]
 800e276:	e002      	b.n	800e27e <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	220a      	movs	r2, #10
 800e27c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2201      	movs	r2, #1
 800e282:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e292:	2200      	movs	r2, #0
 800e294:	4619      	mov	r1, r3
 800e296:	f7fc ff13 	bl	800b0c0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e29a:	e0d8      	b.n	800e44e <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d03f      	beq.n	800e326 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	73fb      	strb	r3, [r7, #15]
 800e2b2:	e016      	b.n	800e2e2 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e2b4:	7bfa      	ldrb	r2, [r7, #15]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	32de      	adds	r2, #222	; 0xde
 800e2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2be:	791a      	ldrb	r2, [r3, #4]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d108      	bne.n	800e2dc <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e2ca:	7bfa      	ldrb	r2, [r7, #15]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	32de      	adds	r2, #222	; 0xde
 800e2d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e2da:	e005      	b.n	800e2e8 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e2dc:	7bfb      	ldrb	r3, [r7, #15]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	73fb      	strb	r3, [r7, #15]
 800e2e2:	7bfb      	ldrb	r3, [r7, #15]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d0e5      	beq.n	800e2b4 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d016      	beq.n	800e320 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	4798      	blx	r3
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d109      	bne.n	800e318 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2206      	movs	r2, #6
 800e308:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e310:	2103      	movs	r1, #3
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	4798      	blx	r3
 800e316:	e006      	b.n	800e326 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	220d      	movs	r2, #13
 800e31c:	701a      	strb	r2, [r3, #0]
 800e31e:	e002      	b.n	800e326 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	220d      	movs	r2, #13
 800e324:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2205      	movs	r2, #5
 800e32a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e33a:	2200      	movs	r2, #0
 800e33c:	4619      	mov	r1, r3
 800e33e:	f7fc febf 	bl	800b0c0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e342:	e084      	b.n	800e44e <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d017      	beq.n	800e37e <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e354:	691b      	ldr	r3, [r3, #16]
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	4798      	blx	r3
 800e35a:	4603      	mov	r3, r0
 800e35c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e35e:	7bbb      	ldrb	r3, [r7, #14]
 800e360:	b2db      	uxtb	r3, r3
 800e362:	2b00      	cmp	r3, #0
 800e364:	d103      	bne.n	800e36e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	220b      	movs	r2, #11
 800e36a:	701a      	strb	r2, [r3, #0]
 800e36c:	e00a      	b.n	800e384 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800e36e:	7bbb      	ldrb	r3, [r7, #14]
 800e370:	b2db      	uxtb	r3, r3
 800e372:	2b02      	cmp	r3, #2
 800e374:	d106      	bne.n	800e384 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	220d      	movs	r2, #13
 800e37a:	701a      	strb	r2, [r3, #0]
 800e37c:	e002      	b.n	800e384 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	220d      	movs	r2, #13
 800e382:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2205      	movs	r2, #5
 800e388:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e398:	2200      	movs	r2, #0
 800e39a:	4619      	mov	r1, r3
 800e39c:	f7fc fe90 	bl	800b0c0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e3a0:	e055      	b.n	800e44e <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d04f      	beq.n	800e44c <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e3b2:	695b      	ldr	r3, [r3, #20]
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	4798      	blx	r3
      }
      break;
 800e3b8:	e048      	b.n	800e44c <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f7ff fcec 	bl	800dda0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d009      	beq.n	800e3e6 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d005      	beq.n	800e3fc <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e3f6:	2105      	movs	r1, #5
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e402:	b2db      	uxtb	r3, r3
 800e404:	2b01      	cmp	r3, #1
 800e406:	d107      	bne.n	800e418 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2200      	movs	r2, #0
 800e40c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f7ff fda5 	bl	800df60 <USBH_Start>
 800e416:	e002      	b.n	800e41e <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f001 fc33 	bl	800fc84 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2201      	movs	r2, #1
 800e422:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e432:	2200      	movs	r2, #0
 800e434:	4619      	mov	r1, r3
 800e436:	f7fc fe43 	bl	800b0c0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e43a:	e008      	b.n	800e44e <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800e43c:	bf00      	nop
 800e43e:	e006      	b.n	800e44e <USBH_Process+0x4ce>
      break;
 800e440:	bf00      	nop
 800e442:	e004      	b.n	800e44e <USBH_Process+0x4ce>
      break;
 800e444:	bf00      	nop
 800e446:	e002      	b.n	800e44e <USBH_Process+0x4ce>
    break;
 800e448:	bf00      	nop
 800e44a:	e000      	b.n	800e44e <USBH_Process+0x4ce>
      break;
 800e44c:	bf00      	nop
  }
  return USBH_OK;
 800e44e:	2300      	movs	r3, #0
}
 800e450:	4618      	mov	r0, r3
 800e452:	3710      	adds	r7, #16
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b088      	sub	sp, #32
 800e45c:	af04      	add	r7, sp, #16
 800e45e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e460:	2301      	movs	r3, #1
 800e462:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e464:	2301      	movs	r3, #1
 800e466:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	785b      	ldrb	r3, [r3, #1]
 800e46c:	2b07      	cmp	r3, #7
 800e46e:	f200 8208 	bhi.w	800e882 <USBH_HandleEnum+0x42a>
 800e472:	a201      	add	r2, pc, #4	; (adr r2, 800e478 <USBH_HandleEnum+0x20>)
 800e474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e478:	0800e499 	.word	0x0800e499
 800e47c:	0800e557 	.word	0x0800e557
 800e480:	0800e5c1 	.word	0x0800e5c1
 800e484:	0800e64f 	.word	0x0800e64f
 800e488:	0800e6b9 	.word	0x0800e6b9
 800e48c:	0800e729 	.word	0x0800e729
 800e490:	0800e7c5 	.word	0x0800e7c5
 800e494:	0800e843 	.word	0x0800e843
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e498:	2108      	movs	r1, #8
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 faea 	bl	800ea74 <USBH_Get_DevDesc>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e4a4:	7bbb      	ldrb	r3, [r7, #14]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d130      	bne.n	800e50c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	7919      	ldrb	r1, [r3, #4]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e4ce:	b292      	uxth	r2, r2
 800e4d0:	9202      	str	r2, [sp, #8]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	9201      	str	r2, [sp, #4]
 800e4d6:	9300      	str	r3, [sp, #0]
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2280      	movs	r2, #128	; 0x80
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f001 f9ef 	bl	800f8c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	7959      	ldrb	r1, [r3, #5]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e4f6:	b292      	uxth	r2, r2
 800e4f8:	9202      	str	r2, [sp, #8]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	9201      	str	r2, [sp, #4]
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	4603      	mov	r3, r0
 800e502:	2200      	movs	r2, #0
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f001 f9db 	bl	800f8c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e50a:	e1bc      	b.n	800e886 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e50c:	7bbb      	ldrb	r3, [r7, #14]
 800e50e:	2b03      	cmp	r3, #3
 800e510:	f040 81b9 	bne.w	800e886 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e51a:	3301      	adds	r3, #1
 800e51c:	b2da      	uxtb	r2, r3
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e52a:	2b03      	cmp	r3, #3
 800e52c:	d903      	bls.n	800e536 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	220d      	movs	r2, #13
 800e532:	701a      	strb	r2, [r3, #0]
      break;
 800e534:	e1a7      	b.n	800e886 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	795b      	ldrb	r3, [r3, #5]
 800e53a:	4619      	mov	r1, r3
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f001 fa0f 	bl	800f960 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	791b      	ldrb	r3, [r3, #4]
 800e546:	4619      	mov	r1, r3
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f001 fa09 	bl	800f960 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2200      	movs	r2, #0
 800e552:	701a      	strb	r2, [r3, #0]
      break;
 800e554:	e197      	b.n	800e886 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e556:	2112      	movs	r1, #18
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 fa8b 	bl	800ea74 <USBH_Get_DevDesc>
 800e55e:	4603      	mov	r3, r0
 800e560:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e562:	7bbb      	ldrb	r3, [r7, #14]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d103      	bne.n	800e570 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2202      	movs	r2, #2
 800e56c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e56e:	e18c      	b.n	800e88a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e570:	7bbb      	ldrb	r3, [r7, #14]
 800e572:	2b03      	cmp	r3, #3
 800e574:	f040 8189 	bne.w	800e88a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e57e:	3301      	adds	r3, #1
 800e580:	b2da      	uxtb	r2, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e58e:	2b03      	cmp	r3, #3
 800e590:	d903      	bls.n	800e59a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	220d      	movs	r2, #13
 800e596:	701a      	strb	r2, [r3, #0]
      break;
 800e598:	e177      	b.n	800e88a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	795b      	ldrb	r3, [r3, #5]
 800e59e:	4619      	mov	r1, r3
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f001 f9dd 	bl	800f960 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	791b      	ldrb	r3, [r3, #4]
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f001 f9d7 	bl	800f960 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	701a      	strb	r2, [r3, #0]
      break;
 800e5be:	e164      	b.n	800e88a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e5c0:	2101      	movs	r1, #1
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 fb02 	bl	800ebcc <USBH_SetAddress>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e5cc:	7bbb      	ldrb	r3, [r7, #14]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d132      	bne.n	800e638 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800e5d2:	2002      	movs	r0, #2
 800e5d4:	f001 fcba 	bl	800ff4c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2203      	movs	r2, #3
 800e5e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	7919      	ldrb	r1, [r3, #4]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e5fa:	b292      	uxth	r2, r2
 800e5fc:	9202      	str	r2, [sp, #8]
 800e5fe:	2200      	movs	r2, #0
 800e600:	9201      	str	r2, [sp, #4]
 800e602:	9300      	str	r3, [sp, #0]
 800e604:	4603      	mov	r3, r0
 800e606:	2280      	movs	r2, #128	; 0x80
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f001 f959 	bl	800f8c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	7959      	ldrb	r1, [r3, #5]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e622:	b292      	uxth	r2, r2
 800e624:	9202      	str	r2, [sp, #8]
 800e626:	2200      	movs	r2, #0
 800e628:	9201      	str	r2, [sp, #4]
 800e62a:	9300      	str	r3, [sp, #0]
 800e62c:	4603      	mov	r3, r0
 800e62e:	2200      	movs	r2, #0
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f001 f945 	bl	800f8c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e636:	e12a      	b.n	800e88e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e638:	7bbb      	ldrb	r3, [r7, #14]
 800e63a:	2b03      	cmp	r3, #3
 800e63c:	f040 8127 	bne.w	800e88e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	220d      	movs	r2, #13
 800e644:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	705a      	strb	r2, [r3, #1]
      break;
 800e64c:	e11f      	b.n	800e88e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e64e:	2109      	movs	r1, #9
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 fa37 	bl	800eac4 <USBH_Get_CfgDesc>
 800e656:	4603      	mov	r3, r0
 800e658:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e65a:	7bbb      	ldrb	r3, [r7, #14]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d103      	bne.n	800e668 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2204      	movs	r2, #4
 800e664:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e666:	e114      	b.n	800e892 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e668:	7bbb      	ldrb	r3, [r7, #14]
 800e66a:	2b03      	cmp	r3, #3
 800e66c:	f040 8111 	bne.w	800e892 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e676:	3301      	adds	r3, #1
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e686:	2b03      	cmp	r3, #3
 800e688:	d903      	bls.n	800e692 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	220d      	movs	r2, #13
 800e68e:	701a      	strb	r2, [r3, #0]
      break;
 800e690:	e0ff      	b.n	800e892 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	795b      	ldrb	r3, [r3, #5]
 800e696:	4619      	mov	r1, r3
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f001 f961 	bl	800f960 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	791b      	ldrb	r3, [r3, #4]
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f001 f95b 	bl	800f960 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	701a      	strb	r2, [r3, #0]
      break;
 800e6b6:	e0ec      	b.n	800e892 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800e6be:	4619      	mov	r1, r3
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f000 f9ff 	bl	800eac4 <USBH_Get_CfgDesc>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e6ca:	7bbb      	ldrb	r3, [r7, #14]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d103      	bne.n	800e6d8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2205      	movs	r2, #5
 800e6d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e6d6:	e0de      	b.n	800e896 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e6d8:	7bbb      	ldrb	r3, [r7, #14]
 800e6da:	2b03      	cmp	r3, #3
 800e6dc:	f040 80db 	bne.w	800e896 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	b2da      	uxtb	r2, r3
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e6f6:	2b03      	cmp	r3, #3
 800e6f8:	d903      	bls.n	800e702 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	220d      	movs	r2, #13
 800e6fe:	701a      	strb	r2, [r3, #0]
      break;
 800e700:	e0c9      	b.n	800e896 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	795b      	ldrb	r3, [r3, #5]
 800e706:	4619      	mov	r1, r3
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f001 f929 	bl	800f960 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	791b      	ldrb	r3, [r3, #4]
 800e712:	4619      	mov	r1, r3
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f001 f923 	bl	800f960 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2200      	movs	r2, #0
 800e71e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2200      	movs	r2, #0
 800e724:	701a      	strb	r2, [r3, #0]
      break;
 800e726:	e0b6      	b.n	800e896 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d036      	beq.n	800e7a0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e73e:	23ff      	movs	r3, #255	; 0xff
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f000 f9e3 	bl	800eb0c <USBH_Get_StringDesc>
 800e746:	4603      	mov	r3, r0
 800e748:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e74a:	7bbb      	ldrb	r3, [r7, #14]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d111      	bne.n	800e774 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2206      	movs	r2, #6
 800e754:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2205      	movs	r2, #5
 800e75a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e76a:	2200      	movs	r2, #0
 800e76c:	4619      	mov	r1, r3
 800e76e:	f7fc fca7 	bl	800b0c0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e772:	e092      	b.n	800e89a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e774:	7bbb      	ldrb	r3, [r7, #14]
 800e776:	2b03      	cmp	r3, #3
 800e778:	f040 808f 	bne.w	800e89a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2206      	movs	r2, #6
 800e780:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2205      	movs	r2, #5
 800e786:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e796:	2200      	movs	r2, #0
 800e798:	4619      	mov	r1, r3
 800e79a:	f7fc fc91 	bl	800b0c0 <osMessagePut>
      break;
 800e79e:	e07c      	b.n	800e89a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2206      	movs	r2, #6
 800e7a4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2205      	movs	r2, #5
 800e7aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	4619      	mov	r1, r3
 800e7be:	f7fc fc7f 	bl	800b0c0 <osMessagePut>
      break;
 800e7c2:	e06a      	b.n	800e89a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d027      	beq.n	800e81e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e7da:	23ff      	movs	r3, #255	; 0xff
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 f995 	bl	800eb0c <USBH_Get_StringDesc>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e7e6:	7bbb      	ldrb	r3, [r7, #14]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d103      	bne.n	800e7f4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2207      	movs	r2, #7
 800e7f0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e7f2:	e054      	b.n	800e89e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e7f4:	7bbb      	ldrb	r3, [r7, #14]
 800e7f6:	2b03      	cmp	r3, #3
 800e7f8:	d151      	bne.n	800e89e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2207      	movs	r2, #7
 800e7fe:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2205      	movs	r2, #5
 800e804:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e814:	2200      	movs	r2, #0
 800e816:	4619      	mov	r1, r3
 800e818:	f7fc fc52 	bl	800b0c0 <osMessagePut>
      break;
 800e81c:	e03f      	b.n	800e89e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2207      	movs	r2, #7
 800e822:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2205      	movs	r2, #5
 800e828:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e838:	2200      	movs	r2, #0
 800e83a:	4619      	mov	r1, r3
 800e83c:	f7fc fc40 	bl	800b0c0 <osMessagePut>
      break;
 800e840:	e02d      	b.n	800e89e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d017      	beq.n	800e87c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e858:	23ff      	movs	r3, #255	; 0xff
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 f956 	bl	800eb0c <USBH_Get_StringDesc>
 800e860:	4603      	mov	r3, r0
 800e862:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e864:	7bbb      	ldrb	r3, [r7, #14]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d102      	bne.n	800e870 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e86a:	2300      	movs	r3, #0
 800e86c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e86e:	e018      	b.n	800e8a2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e870:	7bbb      	ldrb	r3, [r7, #14]
 800e872:	2b03      	cmp	r3, #3
 800e874:	d115      	bne.n	800e8a2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800e876:	2300      	movs	r3, #0
 800e878:	73fb      	strb	r3, [r7, #15]
      break;
 800e87a:	e012      	b.n	800e8a2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800e87c:	2300      	movs	r3, #0
 800e87e:	73fb      	strb	r3, [r7, #15]
      break;
 800e880:	e00f      	b.n	800e8a2 <USBH_HandleEnum+0x44a>

    default:
      break;
 800e882:	bf00      	nop
 800e884:	e00e      	b.n	800e8a4 <USBH_HandleEnum+0x44c>
      break;
 800e886:	bf00      	nop
 800e888:	e00c      	b.n	800e8a4 <USBH_HandleEnum+0x44c>
      break;
 800e88a:	bf00      	nop
 800e88c:	e00a      	b.n	800e8a4 <USBH_HandleEnum+0x44c>
      break;
 800e88e:	bf00      	nop
 800e890:	e008      	b.n	800e8a4 <USBH_HandleEnum+0x44c>
      break;
 800e892:	bf00      	nop
 800e894:	e006      	b.n	800e8a4 <USBH_HandleEnum+0x44c>
      break;
 800e896:	bf00      	nop
 800e898:	e004      	b.n	800e8a4 <USBH_HandleEnum+0x44c>
      break;
 800e89a:	bf00      	nop
 800e89c:	e002      	b.n	800e8a4 <USBH_HandleEnum+0x44c>
      break;
 800e89e:	bf00      	nop
 800e8a0:	e000      	b.n	800e8a4 <USBH_HandleEnum+0x44c>
      break;
 800e8a2:	bf00      	nop
  }
  return Status;
 800e8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop

0800e8b0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b083      	sub	sp, #12
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	683a      	ldr	r2, [r7, #0]
 800e8be:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800e8c2:	bf00      	nop
 800e8c4:	370c      	adds	r7, #12
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr

0800e8ce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e8ce:	b580      	push	{r7, lr}
 800e8d0:	b082      	sub	sp, #8
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e8dc:	1c5a      	adds	r2, r3, #1
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f000 f804 	bl	800e8f2 <USBH_HandleSof>
}
 800e8ea:	bf00      	nop
 800e8ec:	3708      	adds	r7, #8
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e8f2:	b580      	push	{r7, lr}
 800e8f4:	b082      	sub	sp, #8
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	2b0b      	cmp	r3, #11
 800e902:	d10a      	bne.n	800e91a <USBH_HandleSof+0x28>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d005      	beq.n	800e91a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	4798      	blx	r3
  }
}
 800e91a:	bf00      	nop
 800e91c:	3708      	adds	r7, #8
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e922:	b580      	push	{r7, lr}
 800e924:	b082      	sub	sp, #8
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2201      	movs	r2, #1
 800e92e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2201      	movs	r2, #1
 800e936:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e946:	2200      	movs	r2, #0
 800e948:	4619      	mov	r1, r3
 800e94a:	f7fc fbb9 	bl	800b0c0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800e94e:	bf00      	nop
}
 800e950:	3708      	adds	r7, #8
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}

0800e956 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e956:	b480      	push	{r7}
 800e958:	b083      	sub	sp, #12
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2200      	movs	r2, #0
 800e962:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e966:	bf00      	nop
}
 800e968:	370c      	adds	r7, #12
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr

0800e972 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e972:	b580      	push	{r7, lr}
 800e974:	b082      	sub	sp, #8
 800e976:	af00      	add	r7, sp, #0
 800e978:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2201      	movs	r2, #1
 800e97e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2200      	movs	r2, #0
 800e986:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2200      	movs	r2, #0
 800e98e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2201      	movs	r2, #1
 800e996:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	f7fc fb89 	bl	800b0c0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e9ae:	2300      	movs	r3, #0
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f001 f96e 	bl	800fcba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	791b      	ldrb	r3, [r3, #4]
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f000 ffbb 	bl	800f960 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	795b      	ldrb	r3, [r3, #5]
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f000 ffb5 	bl	800f960 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	f7fc fb57 	bl	800b0c0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ea12:	2300      	movs	r3, #0
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800ea2a:	f107 030c 	add.w	r3, r7, #12
 800ea2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7fc fb84 	bl	800b140 <osMessageGet>
    if (event.status == osEventMessage)
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2b10      	cmp	r3, #16
 800ea3c:	d1f2      	bne.n	800ea24 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f7ff fa9e 	bl	800df80 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800ea44:	e7ee      	b.n	800ea24 <USBH_Process_OS+0x8>

0800ea46 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800ea46:	b580      	push	{r7, lr}
 800ea48:	b082      	sub	sp, #8
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2201      	movs	r2, #1
 800ea52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ea62:	2200      	movs	r2, #0
 800ea64:	4619      	mov	r1, r3
 800ea66:	f7fc fb2b 	bl	800b0c0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800ea6a:	2300      	movs	r3, #0
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b086      	sub	sp, #24
 800ea78:	af02      	add	r7, sp, #8
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ea86:	78fb      	ldrb	r3, [r7, #3]
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	9300      	str	r3, [sp, #0]
 800ea8c:	4613      	mov	r3, r2
 800ea8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ea92:	2100      	movs	r1, #0
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f000 f864 	bl	800eb62 <USBH_GetDescriptor>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ea9e:	7bfb      	ldrb	r3, [r7, #15]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d10a      	bne.n	800eaba <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800eab0:	78fa      	ldrb	r2, [r7, #3]
 800eab2:	b292      	uxth	r2, r2
 800eab4:	4619      	mov	r1, r3
 800eab6:	f000 f918 	bl	800ecea <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800eaba:	7bfb      	ldrb	r3, [r7, #15]
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3710      	adds	r7, #16
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b086      	sub	sp, #24
 800eac8:	af02      	add	r7, sp, #8
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	460b      	mov	r3, r1
 800eace:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	331c      	adds	r3, #28
 800ead4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ead6:	887b      	ldrh	r3, [r7, #2]
 800ead8:	9300      	str	r3, [sp, #0]
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eae0:	2100      	movs	r1, #0
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f000 f83d 	bl	800eb62 <USBH_GetDescriptor>
 800eae8:	4603      	mov	r3, r0
 800eaea:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800eaec:	7bfb      	ldrb	r3, [r7, #15]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d107      	bne.n	800eb02 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800eaf2:	887b      	ldrh	r3, [r7, #2]
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	68b9      	ldr	r1, [r7, #8]
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f000 f987 	bl	800ee0c <USBH_ParseCfgDesc>
 800eafe:	4603      	mov	r3, r0
 800eb00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3710      	adds	r7, #16
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b088      	sub	sp, #32
 800eb10:	af02      	add	r7, sp, #8
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	607a      	str	r2, [r7, #4]
 800eb16:	461a      	mov	r2, r3
 800eb18:	460b      	mov	r3, r1
 800eb1a:	72fb      	strb	r3, [r7, #11]
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800eb20:	7afb      	ldrb	r3, [r7, #11]
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800eb28:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800eb30:	893b      	ldrh	r3, [r7, #8]
 800eb32:	9300      	str	r3, [sp, #0]
 800eb34:	460b      	mov	r3, r1
 800eb36:	2100      	movs	r1, #0
 800eb38:	68f8      	ldr	r0, [r7, #12]
 800eb3a:	f000 f812 	bl	800eb62 <USBH_GetDescriptor>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800eb42:	7dfb      	ldrb	r3, [r7, #23]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d107      	bne.n	800eb58 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800eb4e:	893a      	ldrh	r2, [r7, #8]
 800eb50:	6879      	ldr	r1, [r7, #4]
 800eb52:	4618      	mov	r0, r3
 800eb54:	f000 fb24 	bl	800f1a0 <USBH_ParseStringDesc>
  }

  return status;
 800eb58:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3718      	adds	r7, #24
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}

0800eb62 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b084      	sub	sp, #16
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	60f8      	str	r0, [r7, #12]
 800eb6a:	607b      	str	r3, [r7, #4]
 800eb6c:	460b      	mov	r3, r1
 800eb6e:	72fb      	strb	r3, [r7, #11]
 800eb70:	4613      	mov	r3, r2
 800eb72:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	789b      	ldrb	r3, [r3, #2]
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d11c      	bne.n	800ebb6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800eb7c:	7afb      	ldrb	r3, [r7, #11]
 800eb7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eb82:	b2da      	uxtb	r2, r3
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2206      	movs	r2, #6
 800eb8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	893a      	ldrh	r2, [r7, #8]
 800eb92:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800eb94:	893b      	ldrh	r3, [r7, #8]
 800eb96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eb9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb9e:	d104      	bne.n	800ebaa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f240 4209 	movw	r2, #1033	; 0x409
 800eba6:	829a      	strh	r2, [r3, #20]
 800eba8:	e002      	b.n	800ebb0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2200      	movs	r2, #0
 800ebae:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	8b3a      	ldrh	r2, [r7, #24]
 800ebb4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ebb6:	8b3b      	ldrh	r3, [r7, #24]
 800ebb8:	461a      	mov	r2, r3
 800ebba:	6879      	ldr	r1, [r7, #4]
 800ebbc:	68f8      	ldr	r0, [r7, #12]
 800ebbe:	f000 fb3d 	bl	800f23c <USBH_CtlReq>
 800ebc2:	4603      	mov	r3, r0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3710      	adds	r7, #16
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	460b      	mov	r3, r1
 800ebd6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	789b      	ldrb	r3, [r3, #2]
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d10f      	bne.n	800ec00 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2205      	movs	r2, #5
 800ebea:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ebec:	78fb      	ldrb	r3, [r7, #3]
 800ebee:	b29a      	uxth	r2, r3
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ec00:	2200      	movs	r2, #0
 800ec02:	2100      	movs	r1, #0
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f000 fb19 	bl	800f23c <USBH_CtlReq>
 800ec0a:	4603      	mov	r3, r0
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3708      	adds	r7, #8
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	789b      	ldrb	r3, [r3, #2]
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d10e      	bne.n	800ec46 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2209      	movs	r2, #9
 800ec32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	887a      	ldrh	r2, [r7, #2]
 800ec38:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2200      	movs	r2, #0
 800ec44:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ec46:	2200      	movs	r2, #0
 800ec48:	2100      	movs	r1, #0
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f000 faf6 	bl	800f23c <USBH_CtlReq>
 800ec50:	4603      	mov	r3, r0
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3708      	adds	r7, #8
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b082      	sub	sp, #8
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
 800ec62:	460b      	mov	r3, r1
 800ec64:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	789b      	ldrb	r3, [r3, #2]
 800ec6a:	2b01      	cmp	r3, #1
 800ec6c:	d10f      	bne.n	800ec8e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2200      	movs	r2, #0
 800ec72:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2203      	movs	r2, #3
 800ec78:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ec7a:	78fb      	ldrb	r3, [r7, #3]
 800ec7c:	b29a      	uxth	r2, r3
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2200      	movs	r2, #0
 800ec86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ec8e:	2200      	movs	r2, #0
 800ec90:	2100      	movs	r1, #0
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 fad2 	bl	800f23c <USBH_CtlReq>
 800ec98:	4603      	mov	r3, r0
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}

0800eca2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800eca2:	b580      	push	{r7, lr}
 800eca4:	b082      	sub	sp, #8
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
 800ecaa:	460b      	mov	r3, r1
 800ecac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	789b      	ldrb	r3, [r3, #2]
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d10f      	bne.n	800ecd6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2202      	movs	r2, #2
 800ecba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ecc8:	78fb      	ldrb	r3, [r7, #3]
 800ecca:	b29a      	uxth	r2, r3
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	2100      	movs	r1, #0
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f000 faae 	bl	800f23c <USBH_CtlReq>
 800ece0:	4603      	mov	r3, r0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}

0800ecea <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ecea:	b480      	push	{r7}
 800ecec:	b085      	sub	sp, #20
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	60f8      	str	r0, [r7, #12]
 800ecf2:	60b9      	str	r1, [r7, #8]
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	781a      	ldrb	r2, [r3, #0]
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	785a      	ldrb	r2, [r3, #1]
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	3302      	adds	r3, #2
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	b29a      	uxth	r2, r3
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	3303      	adds	r3, #3
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	021b      	lsls	r3, r3, #8
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	4313      	orrs	r3, r2
 800ed1e:	b29a      	uxth	r2, r3
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	791a      	ldrb	r2, [r3, #4]
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	795a      	ldrb	r2, [r3, #5]
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	799a      	ldrb	r2, [r3, #6]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	79da      	ldrb	r2, [r3, #7]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	79db      	ldrb	r3, [r3, #7]
 800ed48:	2b20      	cmp	r3, #32
 800ed4a:	dc11      	bgt.n	800ed70 <USBH_ParseDevDesc+0x86>
 800ed4c:	2b08      	cmp	r3, #8
 800ed4e:	db16      	blt.n	800ed7e <USBH_ParseDevDesc+0x94>
 800ed50:	3b08      	subs	r3, #8
 800ed52:	2201      	movs	r2, #1
 800ed54:	fa02 f303 	lsl.w	r3, r2, r3
 800ed58:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800ed5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	bf14      	ite	ne
 800ed64:	2301      	movne	r3, #1
 800ed66:	2300      	moveq	r3, #0
 800ed68:	b2db      	uxtb	r3, r3
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d102      	bne.n	800ed74 <USBH_ParseDevDesc+0x8a>
 800ed6e:	e006      	b.n	800ed7e <USBH_ParseDevDesc+0x94>
 800ed70:	2b40      	cmp	r3, #64	; 0x40
 800ed72:	d104      	bne.n	800ed7e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	79da      	ldrb	r2, [r3, #7]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	71da      	strb	r2, [r3, #7]
      break;
 800ed7c:	e003      	b.n	800ed86 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	2240      	movs	r2, #64	; 0x40
 800ed82:	71da      	strb	r2, [r3, #7]
      break;
 800ed84:	bf00      	nop
  }

  if (length > 8U)
 800ed86:	88fb      	ldrh	r3, [r7, #6]
 800ed88:	2b08      	cmp	r3, #8
 800ed8a:	d939      	bls.n	800ee00 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	3308      	adds	r3, #8
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	3309      	adds	r3, #9
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	021b      	lsls	r3, r3, #8
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	4313      	orrs	r3, r2
 800eda2:	b29a      	uxth	r2, r3
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	330a      	adds	r3, #10
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	b29a      	uxth	r2, r3
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	330b      	adds	r3, #11
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	021b      	lsls	r3, r3, #8
 800edba:	b29b      	uxth	r3, r3
 800edbc:	4313      	orrs	r3, r2
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	330c      	adds	r3, #12
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	b29a      	uxth	r2, r3
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	330d      	adds	r3, #13
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	021b      	lsls	r3, r3, #8
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	4313      	orrs	r3, r2
 800edda:	b29a      	uxth	r2, r3
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	7b9a      	ldrb	r2, [r3, #14]
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	7bda      	ldrb	r2, [r3, #15]
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	7c1a      	ldrb	r2, [r3, #16]
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	7c5a      	ldrb	r2, [r3, #17]
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	745a      	strb	r2, [r3, #17]
  }
}
 800ee00:	bf00      	nop
 800ee02:	3714      	adds	r7, #20
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b08c      	sub	sp, #48	; 0x30
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	4613      	mov	r3, r2
 800ee18:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ee20:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ee22:	2300      	movs	r3, #0
 800ee24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800ee32:	2300      	movs	r3, #0
 800ee34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	781a      	ldrb	r2, [r3, #0]
 800ee40:	6a3b      	ldr	r3, [r7, #32]
 800ee42:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	785a      	ldrb	r2, [r3, #1]
 800ee48:	6a3b      	ldr	r3, [r7, #32]
 800ee4a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	3302      	adds	r3, #2
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	3303      	adds	r3, #3
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	021b      	lsls	r3, r3, #8
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	4313      	orrs	r3, r2
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee68:	bf28      	it	cs
 800ee6a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ee6e:	b29a      	uxth	r2, r3
 800ee70:	6a3b      	ldr	r3, [r7, #32]
 800ee72:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	791a      	ldrb	r2, [r3, #4]
 800ee78:	6a3b      	ldr	r3, [r7, #32]
 800ee7a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	795a      	ldrb	r2, [r3, #5]
 800ee80:	6a3b      	ldr	r3, [r7, #32]
 800ee82:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	799a      	ldrb	r2, [r3, #6]
 800ee88:	6a3b      	ldr	r3, [r7, #32]
 800ee8a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	79da      	ldrb	r2, [r3, #7]
 800ee90:	6a3b      	ldr	r3, [r7, #32]
 800ee92:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	7a1a      	ldrb	r2, [r3, #8]
 800ee98:	6a3b      	ldr	r3, [r7, #32]
 800ee9a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800ee9c:	6a3b      	ldr	r3, [r7, #32]
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	2b09      	cmp	r3, #9
 800eea2:	d002      	beq.n	800eeaa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800eea4:	6a3b      	ldr	r3, [r7, #32]
 800eea6:	2209      	movs	r2, #9
 800eea8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800eeaa:	88fb      	ldrh	r3, [r7, #6]
 800eeac:	2b09      	cmp	r3, #9
 800eeae:	f240 809d 	bls.w	800efec <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800eeb2:	2309      	movs	r3, #9
 800eeb4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800eeba:	e081      	b.n	800efc0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800eebc:	f107 0316 	add.w	r3, r7, #22
 800eec0:	4619      	mov	r1, r3
 800eec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eec4:	f000 f99f 	bl	800f206 <USBH_GetNextDesc>
 800eec8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800eeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eecc:	785b      	ldrb	r3, [r3, #1]
 800eece:	2b04      	cmp	r3, #4
 800eed0:	d176      	bne.n	800efc0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800eed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed4:	781b      	ldrb	r3, [r3, #0]
 800eed6:	2b09      	cmp	r3, #9
 800eed8:	d002      	beq.n	800eee0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800eeda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eedc:	2209      	movs	r2, #9
 800eede:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800eee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eee4:	221a      	movs	r2, #26
 800eee6:	fb02 f303 	mul.w	r3, r2, r3
 800eeea:	3308      	adds	r3, #8
 800eeec:	6a3a      	ldr	r2, [r7, #32]
 800eeee:	4413      	add	r3, r2
 800eef0:	3302      	adds	r3, #2
 800eef2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800eef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eef6:	69f8      	ldr	r0, [r7, #28]
 800eef8:	f000 f87e 	bl	800eff8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800eefc:	2300      	movs	r3, #0
 800eefe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ef02:	2300      	movs	r3, #0
 800ef04:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ef06:	e043      	b.n	800ef90 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ef08:	f107 0316 	add.w	r3, r7, #22
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef10:	f000 f979 	bl	800f206 <USBH_GetNextDesc>
 800ef14:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ef16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef18:	785b      	ldrb	r3, [r3, #1]
 800ef1a:	2b05      	cmp	r3, #5
 800ef1c:	d138      	bne.n	800ef90 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800ef1e:	69fb      	ldr	r3, [r7, #28]
 800ef20:	795b      	ldrb	r3, [r3, #5]
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d10f      	bne.n	800ef46 <USBH_ParseCfgDesc+0x13a>
 800ef26:	69fb      	ldr	r3, [r7, #28]
 800ef28:	799b      	ldrb	r3, [r3, #6]
 800ef2a:	2b02      	cmp	r3, #2
 800ef2c:	d10b      	bne.n	800ef46 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ef2e:	69fb      	ldr	r3, [r7, #28]
 800ef30:	79db      	ldrb	r3, [r3, #7]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d10f      	bne.n	800ef56 <USBH_ParseCfgDesc+0x14a>
 800ef36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	2b09      	cmp	r3, #9
 800ef3c:	d00b      	beq.n	800ef56 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800ef3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef40:	2209      	movs	r2, #9
 800ef42:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ef44:	e007      	b.n	800ef56 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800ef46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	2b07      	cmp	r3, #7
 800ef4c:	d004      	beq.n	800ef58 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ef4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef50:	2207      	movs	r2, #7
 800ef52:	701a      	strb	r2, [r3, #0]
 800ef54:	e000      	b.n	800ef58 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ef56:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ef58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef5c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ef60:	3201      	adds	r2, #1
 800ef62:	00d2      	lsls	r2, r2, #3
 800ef64:	211a      	movs	r1, #26
 800ef66:	fb01 f303 	mul.w	r3, r1, r3
 800ef6a:	4413      	add	r3, r2
 800ef6c:	3308      	adds	r3, #8
 800ef6e:	6a3a      	ldr	r2, [r7, #32]
 800ef70:	4413      	add	r3, r2
 800ef72:	3304      	adds	r3, #4
 800ef74:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ef76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef78:	69b9      	ldr	r1, [r7, #24]
 800ef7a:	68f8      	ldr	r0, [r7, #12]
 800ef7c:	f000 f86b 	bl	800f056 <USBH_ParseEPDesc>
 800ef80:	4603      	mov	r3, r0
 800ef82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800ef86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	791b      	ldrb	r3, [r3, #4]
 800ef94:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d204      	bcs.n	800efa6 <USBH_ParseCfgDesc+0x19a>
 800ef9c:	6a3b      	ldr	r3, [r7, #32]
 800ef9e:	885a      	ldrh	r2, [r3, #2]
 800efa0:	8afb      	ldrh	r3, [r7, #22]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d8b0      	bhi.n	800ef08 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800efa6:	69fb      	ldr	r3, [r7, #28]
 800efa8:	791b      	ldrb	r3, [r3, #4]
 800efaa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800efae:	429a      	cmp	r2, r3
 800efb0:	d201      	bcs.n	800efb6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800efb2:	2303      	movs	r3, #3
 800efb4:	e01c      	b.n	800eff0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800efb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efba:	3301      	adds	r3, #1
 800efbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800efc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d805      	bhi.n	800efd4 <USBH_ParseCfgDesc+0x1c8>
 800efc8:	6a3b      	ldr	r3, [r7, #32]
 800efca:	885a      	ldrh	r2, [r3, #2]
 800efcc:	8afb      	ldrh	r3, [r7, #22]
 800efce:	429a      	cmp	r2, r3
 800efd0:	f63f af74 	bhi.w	800eebc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800efd4:	6a3b      	ldr	r3, [r7, #32]
 800efd6:	791b      	ldrb	r3, [r3, #4]
 800efd8:	2b02      	cmp	r3, #2
 800efda:	bf28      	it	cs
 800efdc:	2302      	movcs	r3, #2
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d201      	bcs.n	800efec <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800efe8:	2303      	movs	r3, #3
 800efea:	e001      	b.n	800eff0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800efec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3730      	adds	r7, #48	; 0x30
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	781a      	ldrb	r2, [r3, #0]
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	785a      	ldrb	r2, [r3, #1]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	789a      	ldrb	r2, [r3, #2]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	78da      	ldrb	r2, [r3, #3]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	791a      	ldrb	r2, [r3, #4]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	795a      	ldrb	r2, [r3, #5]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	799a      	ldrb	r2, [r3, #6]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	79da      	ldrb	r2, [r3, #7]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	7a1a      	ldrb	r2, [r3, #8]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	721a      	strb	r2, [r3, #8]
}
 800f04a:	bf00      	nop
 800f04c:	370c      	adds	r7, #12
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr

0800f056 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800f056:	b480      	push	{r7}
 800f058:	b087      	sub	sp, #28
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	60f8      	str	r0, [r7, #12]
 800f05e:	60b9      	str	r1, [r7, #8]
 800f060:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800f062:	2300      	movs	r3, #0
 800f064:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	781a      	ldrb	r2, [r3, #0]
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	785a      	ldrb	r2, [r3, #1]
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	789a      	ldrb	r2, [r3, #2]
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	78da      	ldrb	r2, [r3, #3]
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	3304      	adds	r3, #4
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	b29a      	uxth	r2, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	3305      	adds	r3, #5
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	b29b      	uxth	r3, r3
 800f096:	021b      	lsls	r3, r3, #8
 800f098:	b29b      	uxth	r3, r3
 800f09a:	4313      	orrs	r3, r2
 800f09c:	b29a      	uxth	r2, r3
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	799a      	ldrb	r2, [r3, #6]
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	889b      	ldrh	r3, [r3, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d102      	bne.n	800f0b8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800f0b2:	2303      	movs	r3, #3
 800f0b4:	75fb      	strb	r3, [r7, #23]
 800f0b6:	e033      	b.n	800f120 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	889b      	ldrh	r3, [r3, #4]
 800f0bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f0c0:	f023 0307 	bic.w	r3, r3, #7
 800f0c4:	b29a      	uxth	r2, r3
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	889b      	ldrh	r3, [r3, #4]
 800f0ce:	b21a      	sxth	r2, r3
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	3304      	adds	r3, #4
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	b299      	uxth	r1, r3
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	3305      	adds	r3, #5
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	021b      	lsls	r3, r3, #8
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	430b      	orrs	r3, r1
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d110      	bne.n	800f112 <USBH_ParseEPDesc+0xbc>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	3304      	adds	r3, #4
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	b299      	uxth	r1, r3
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	3305      	adds	r3, #5
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	b29b      	uxth	r3, r3
 800f100:	021b      	lsls	r3, r3, #8
 800f102:	b29b      	uxth	r3, r3
 800f104:	430b      	orrs	r3, r1
 800f106:	b29b      	uxth	r3, r3
 800f108:	b21b      	sxth	r3, r3
 800f10a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f10e:	b21b      	sxth	r3, r3
 800f110:	e001      	b.n	800f116 <USBH_ParseEPDesc+0xc0>
 800f112:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f116:	4313      	orrs	r3, r2
 800f118:	b21b      	sxth	r3, r3
 800f11a:	b29a      	uxth	r2, r3
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f126:	2b00      	cmp	r3, #0
 800f128:	d116      	bne.n	800f158 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	78db      	ldrb	r3, [r3, #3]
 800f12e:	f003 0303 	and.w	r3, r3, #3
 800f132:	2b01      	cmp	r3, #1
 800f134:	d005      	beq.n	800f142 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	78db      	ldrb	r3, [r3, #3]
 800f13a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f13e:	2b03      	cmp	r3, #3
 800f140:	d127      	bne.n	800f192 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	799b      	ldrb	r3, [r3, #6]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d003      	beq.n	800f152 <USBH_ParseEPDesc+0xfc>
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	799b      	ldrb	r3, [r3, #6]
 800f14e:	2b10      	cmp	r3, #16
 800f150:	d91f      	bls.n	800f192 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800f152:	2303      	movs	r3, #3
 800f154:	75fb      	strb	r3, [r7, #23]
 800f156:	e01c      	b.n	800f192 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	78db      	ldrb	r3, [r3, #3]
 800f15c:	f003 0303 	and.w	r3, r3, #3
 800f160:	2b01      	cmp	r3, #1
 800f162:	d10a      	bne.n	800f17a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	799b      	ldrb	r3, [r3, #6]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d003      	beq.n	800f174 <USBH_ParseEPDesc+0x11e>
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	799b      	ldrb	r3, [r3, #6]
 800f170:	2b10      	cmp	r3, #16
 800f172:	d90e      	bls.n	800f192 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800f174:	2303      	movs	r3, #3
 800f176:	75fb      	strb	r3, [r7, #23]
 800f178:	e00b      	b.n	800f192 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	78db      	ldrb	r3, [r3, #3]
 800f17e:	f003 0303 	and.w	r3, r3, #3
 800f182:	2b03      	cmp	r3, #3
 800f184:	d105      	bne.n	800f192 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	799b      	ldrb	r3, [r3, #6]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d101      	bne.n	800f192 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800f18e:	2303      	movs	r3, #3
 800f190:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800f192:	7dfb      	ldrb	r3, [r7, #23]
}
 800f194:	4618      	mov	r0, r3
 800f196:	371c      	adds	r7, #28
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr

0800f1a0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b087      	sub	sp, #28
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	4613      	mov	r3, r2
 800f1ac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	2b03      	cmp	r3, #3
 800f1b6:	d120      	bne.n	800f1fa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	1e9a      	subs	r2, r3, #2
 800f1be:	88fb      	ldrh	r3, [r7, #6]
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	bf28      	it	cs
 800f1c4:	4613      	movcs	r3, r2
 800f1c6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	3302      	adds	r3, #2
 800f1cc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	82fb      	strh	r3, [r7, #22]
 800f1d2:	e00b      	b.n	800f1ec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f1d4:	8afb      	ldrh	r3, [r7, #22]
 800f1d6:	68fa      	ldr	r2, [r7, #12]
 800f1d8:	4413      	add	r3, r2
 800f1da:	781a      	ldrb	r2, [r3, #0]
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f1e6:	8afb      	ldrh	r3, [r7, #22]
 800f1e8:	3302      	adds	r3, #2
 800f1ea:	82fb      	strh	r3, [r7, #22]
 800f1ec:	8afa      	ldrh	r2, [r7, #22]
 800f1ee:	8abb      	ldrh	r3, [r7, #20]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d3ef      	bcc.n	800f1d4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	701a      	strb	r2, [r3, #0]
  }
}
 800f1fa:	bf00      	nop
 800f1fc:	371c      	adds	r7, #28
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr

0800f206 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f206:	b480      	push	{r7}
 800f208:	b085      	sub	sp, #20
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
 800f20e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	881a      	ldrh	r2, [r3, #0]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	b29b      	uxth	r3, r3
 800f21a:	4413      	add	r3, r2
 800f21c:	b29a      	uxth	r2, r3
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	4413      	add	r3, r2
 800f22c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f22e:	68fb      	ldr	r3, [r7, #12]
}
 800f230:	4618      	mov	r0, r3
 800f232:	3714      	adds	r7, #20
 800f234:	46bd      	mov	sp, r7
 800f236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23a:	4770      	bx	lr

0800f23c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b086      	sub	sp, #24
 800f240:	af00      	add	r7, sp, #0
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	4613      	mov	r3, r2
 800f248:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f24a:	2301      	movs	r3, #1
 800f24c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	789b      	ldrb	r3, [r3, #2]
 800f252:	2b01      	cmp	r3, #1
 800f254:	d002      	beq.n	800f25c <USBH_CtlReq+0x20>
 800f256:	2b02      	cmp	r3, #2
 800f258:	d01d      	beq.n	800f296 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800f25a:	e043      	b.n	800f2e4 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	68ba      	ldr	r2, [r7, #8]
 800f260:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	88fa      	ldrh	r2, [r7, #6]
 800f266:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2201      	movs	r2, #1
 800f26c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2202      	movs	r2, #2
 800f272:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f274:	2301      	movs	r3, #1
 800f276:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2203      	movs	r2, #3
 800f27c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f28c:	2200      	movs	r2, #0
 800f28e:	4619      	mov	r1, r3
 800f290:	f7fb ff16 	bl	800b0c0 <osMessagePut>
      break;
 800f294:	e026      	b.n	800f2e4 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800f296:	68f8      	ldr	r0, [r7, #12]
 800f298:	f000 f82a 	bl	800f2f0 <USBH_HandleControl>
 800f29c:	4603      	mov	r3, r0
 800f29e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f2a0:	7dfb      	ldrb	r3, [r7, #23]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d002      	beq.n	800f2ac <USBH_CtlReq+0x70>
 800f2a6:	7dfb      	ldrb	r3, [r7, #23]
 800f2a8:	2b03      	cmp	r3, #3
 800f2aa:	d106      	bne.n	800f2ba <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	761a      	strb	r2, [r3, #24]
 800f2b8:	e005      	b.n	800f2c6 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800f2ba:	7dfb      	ldrb	r3, [r7, #23]
 800f2bc:	2b02      	cmp	r3, #2
 800f2be:	d102      	bne.n	800f2c6 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2203      	movs	r2, #3
 800f2ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f2da:	2200      	movs	r2, #0
 800f2dc:	4619      	mov	r1, r3
 800f2de:	f7fb feef 	bl	800b0c0 <osMessagePut>
      break;
 800f2e2:	bf00      	nop
  }
  return status;
 800f2e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3718      	adds	r7, #24
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
	...

0800f2f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b086      	sub	sp, #24
 800f2f4:	af02      	add	r7, sp, #8
 800f2f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	7e1b      	ldrb	r3, [r3, #24]
 800f304:	3b01      	subs	r3, #1
 800f306:	2b0a      	cmp	r3, #10
 800f308:	f200 8229 	bhi.w	800f75e <USBH_HandleControl+0x46e>
 800f30c:	a201      	add	r2, pc, #4	; (adr r2, 800f314 <USBH_HandleControl+0x24>)
 800f30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f312:	bf00      	nop
 800f314:	0800f341 	.word	0x0800f341
 800f318:	0800f35b 	.word	0x0800f35b
 800f31c:	0800f3fd 	.word	0x0800f3fd
 800f320:	0800f423 	.word	0x0800f423
 800f324:	0800f4af 	.word	0x0800f4af
 800f328:	0800f4d9 	.word	0x0800f4d9
 800f32c:	0800f59b 	.word	0x0800f59b
 800f330:	0800f5bd 	.word	0x0800f5bd
 800f334:	0800f64f 	.word	0x0800f64f
 800f338:	0800f675 	.word	0x0800f675
 800f33c:	0800f707 	.word	0x0800f707
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f103 0110 	add.w	r1, r3, #16
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	795b      	ldrb	r3, [r3, #5]
 800f34a:	461a      	mov	r2, r3
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f000 fa17 	bl	800f780 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2202      	movs	r2, #2
 800f356:	761a      	strb	r2, [r3, #24]
      break;
 800f358:	e20c      	b.n	800f774 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	795b      	ldrb	r3, [r3, #5]
 800f35e:	4619      	mov	r1, r3
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 fd99 	bl	800fe98 <USBH_LL_GetURBState>
 800f366:	4603      	mov	r3, r0
 800f368:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f36a:	7bbb      	ldrb	r3, [r7, #14]
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d12c      	bne.n	800f3ca <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	7c1b      	ldrb	r3, [r3, #16]
 800f374:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f378:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	8adb      	ldrh	r3, [r3, #22]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d00a      	beq.n	800f398 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f382:	7b7b      	ldrb	r3, [r7, #13]
 800f384:	2b80      	cmp	r3, #128	; 0x80
 800f386:	d103      	bne.n	800f390 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2203      	movs	r2, #3
 800f38c:	761a      	strb	r2, [r3, #24]
 800f38e:	e00d      	b.n	800f3ac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2205      	movs	r2, #5
 800f394:	761a      	strb	r2, [r3, #24]
 800f396:	e009      	b.n	800f3ac <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800f398:	7b7b      	ldrb	r3, [r7, #13]
 800f39a:	2b80      	cmp	r3, #128	; 0x80
 800f39c:	d103      	bne.n	800f3a6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2209      	movs	r2, #9
 800f3a2:	761a      	strb	r2, [r3, #24]
 800f3a4:	e002      	b.n	800f3ac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2207      	movs	r2, #7
 800f3aa:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2203      	movs	r2, #3
 800f3b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	4619      	mov	r1, r3
 800f3c4:	f7fb fe7c 	bl	800b0c0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f3c8:	e1cb      	b.n	800f762 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f3ca:	7bbb      	ldrb	r3, [r7, #14]
 800f3cc:	2b04      	cmp	r3, #4
 800f3ce:	d003      	beq.n	800f3d8 <USBH_HandleControl+0xe8>
 800f3d0:	7bbb      	ldrb	r3, [r7, #14]
 800f3d2:	2b02      	cmp	r3, #2
 800f3d4:	f040 81c5 	bne.w	800f762 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	220b      	movs	r2, #11
 800f3dc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2203      	movs	r2, #3
 800f3e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	f7fb fe63 	bl	800b0c0 <osMessagePut>
      break;
 800f3fa:	e1b2      	b.n	800f762 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f402:	b29a      	uxth	r2, r3
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6899      	ldr	r1, [r3, #8]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	899a      	ldrh	r2, [r3, #12]
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	791b      	ldrb	r3, [r3, #4]
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f000 f9f2 	bl	800f7fe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2204      	movs	r2, #4
 800f41e:	761a      	strb	r2, [r3, #24]
      break;
 800f420:	e1a8      	b.n	800f774 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	791b      	ldrb	r3, [r3, #4]
 800f426:	4619      	mov	r1, r3
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 fd35 	bl	800fe98 <USBH_LL_GetURBState>
 800f42e:	4603      	mov	r3, r0
 800f430:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f432:	7bbb      	ldrb	r3, [r7, #14]
 800f434:	2b01      	cmp	r3, #1
 800f436:	d110      	bne.n	800f45a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2209      	movs	r2, #9
 800f43c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2203      	movs	r2, #3
 800f442:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f452:	2200      	movs	r2, #0
 800f454:	4619      	mov	r1, r3
 800f456:	f7fb fe33 	bl	800b0c0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f45a:	7bbb      	ldrb	r3, [r7, #14]
 800f45c:	2b05      	cmp	r3, #5
 800f45e:	d110      	bne.n	800f482 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f460:	2303      	movs	r3, #3
 800f462:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2203      	movs	r2, #3
 800f468:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f478:	2200      	movs	r2, #0
 800f47a:	4619      	mov	r1, r3
 800f47c:	f7fb fe20 	bl	800b0c0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f480:	e171      	b.n	800f766 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800f482:	7bbb      	ldrb	r3, [r7, #14]
 800f484:	2b04      	cmp	r3, #4
 800f486:	f040 816e 	bne.w	800f766 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	220b      	movs	r2, #11
 800f48e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2203      	movs	r2, #3
 800f494:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	f7fb fe0a 	bl	800b0c0 <osMessagePut>
      break;
 800f4ac:	e15b      	b.n	800f766 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6899      	ldr	r1, [r3, #8]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	899a      	ldrh	r2, [r3, #12]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	795b      	ldrb	r3, [r3, #5]
 800f4ba:	2001      	movs	r0, #1
 800f4bc:	9000      	str	r0, [sp, #0]
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f000 f978 	bl	800f7b4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f4ca:	b29a      	uxth	r2, r3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2206      	movs	r2, #6
 800f4d4:	761a      	strb	r2, [r3, #24]
      break;
 800f4d6:	e14d      	b.n	800f774 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	795b      	ldrb	r3, [r3, #5]
 800f4dc:	4619      	mov	r1, r3
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f000 fcda 	bl	800fe98 <USBH_LL_GetURBState>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f4e8:	7bbb      	ldrb	r3, [r7, #14]
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	d111      	bne.n	800f512 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2207      	movs	r2, #7
 800f4f2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2203      	movs	r2, #3
 800f4f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f508:	2200      	movs	r2, #0
 800f50a:	4619      	mov	r1, r3
 800f50c:	f7fb fdd8 	bl	800b0c0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f510:	e12b      	b.n	800f76a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800f512:	7bbb      	ldrb	r3, [r7, #14]
 800f514:	2b05      	cmp	r3, #5
 800f516:	d113      	bne.n	800f540 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	220c      	movs	r2, #12
 800f51c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f51e:	2303      	movs	r3, #3
 800f520:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2203      	movs	r2, #3
 800f526:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f536:	2200      	movs	r2, #0
 800f538:	4619      	mov	r1, r3
 800f53a:	f7fb fdc1 	bl	800b0c0 <osMessagePut>
      break;
 800f53e:	e114      	b.n	800f76a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f540:	7bbb      	ldrb	r3, [r7, #14]
 800f542:	2b02      	cmp	r3, #2
 800f544:	d111      	bne.n	800f56a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2205      	movs	r2, #5
 800f54a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2203      	movs	r2, #3
 800f550:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f560:	2200      	movs	r2, #0
 800f562:	4619      	mov	r1, r3
 800f564:	f7fb fdac 	bl	800b0c0 <osMessagePut>
      break;
 800f568:	e0ff      	b.n	800f76a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800f56a:	7bbb      	ldrb	r3, [r7, #14]
 800f56c:	2b04      	cmp	r3, #4
 800f56e:	f040 80fc 	bne.w	800f76a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	220b      	movs	r2, #11
 800f576:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f578:	2302      	movs	r3, #2
 800f57a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2203      	movs	r2, #3
 800f580:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f590:	2200      	movs	r2, #0
 800f592:	4619      	mov	r1, r3
 800f594:	f7fb fd94 	bl	800b0c0 <osMessagePut>
      break;
 800f598:	e0e7      	b.n	800f76a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	791b      	ldrb	r3, [r3, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	2100      	movs	r1, #0
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f000 f92b 	bl	800f7fe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2208      	movs	r2, #8
 800f5b8:	761a      	strb	r2, [r3, #24]

      break;
 800f5ba:	e0db      	b.n	800f774 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	791b      	ldrb	r3, [r3, #4]
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 fc68 	bl	800fe98 <USBH_LL_GetURBState>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f5cc:	7bbb      	ldrb	r3, [r7, #14]
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d113      	bne.n	800f5fa <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	220d      	movs	r2, #13
 800f5d6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2203      	movs	r2, #3
 800f5e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	f7fb fd64 	bl	800b0c0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f5f8:	e0b9      	b.n	800f76e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800f5fa:	7bbb      	ldrb	r3, [r7, #14]
 800f5fc:	2b04      	cmp	r3, #4
 800f5fe:	d111      	bne.n	800f624 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	220b      	movs	r2, #11
 800f604:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2203      	movs	r2, #3
 800f60a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f61a:	2200      	movs	r2, #0
 800f61c:	4619      	mov	r1, r3
 800f61e:	f7fb fd4f 	bl	800b0c0 <osMessagePut>
      break;
 800f622:	e0a4      	b.n	800f76e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800f624:	7bbb      	ldrb	r3, [r7, #14]
 800f626:	2b05      	cmp	r3, #5
 800f628:	f040 80a1 	bne.w	800f76e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800f62c:	2303      	movs	r3, #3
 800f62e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2203      	movs	r2, #3
 800f634:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f644:	2200      	movs	r2, #0
 800f646:	4619      	mov	r1, r3
 800f648:	f7fb fd3a 	bl	800b0c0 <osMessagePut>
      break;
 800f64c:	e08f      	b.n	800f76e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	795b      	ldrb	r3, [r3, #5]
 800f652:	2201      	movs	r2, #1
 800f654:	9200      	str	r2, [sp, #0]
 800f656:	2200      	movs	r2, #0
 800f658:	2100      	movs	r1, #0
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f000 f8aa 	bl	800f7b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f666:	b29a      	uxth	r2, r3
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	220a      	movs	r2, #10
 800f670:	761a      	strb	r2, [r3, #24]
      break;
 800f672:	e07f      	b.n	800f774 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	795b      	ldrb	r3, [r3, #5]
 800f678:	4619      	mov	r1, r3
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f000 fc0c 	bl	800fe98 <USBH_LL_GetURBState>
 800f680:	4603      	mov	r3, r0
 800f682:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f684:	7bbb      	ldrb	r3, [r7, #14]
 800f686:	2b01      	cmp	r3, #1
 800f688:	d113      	bne.n	800f6b2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800f68a:	2300      	movs	r3, #0
 800f68c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	220d      	movs	r2, #13
 800f692:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2203      	movs	r2, #3
 800f698:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	f7fb fd08 	bl	800b0c0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f6b0:	e05f      	b.n	800f772 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f6b2:	7bbb      	ldrb	r3, [r7, #14]
 800f6b4:	2b02      	cmp	r3, #2
 800f6b6:	d111      	bne.n	800f6dc <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2209      	movs	r2, #9
 800f6bc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2203      	movs	r2, #3
 800f6c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	f7fb fcf3 	bl	800b0c0 <osMessagePut>
      break;
 800f6da:	e04a      	b.n	800f772 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800f6dc:	7bbb      	ldrb	r3, [r7, #14]
 800f6de:	2b04      	cmp	r3, #4
 800f6e0:	d147      	bne.n	800f772 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	220b      	movs	r2, #11
 800f6e6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2203      	movs	r2, #3
 800f6ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	4619      	mov	r1, r3
 800f700:	f7fb fcde 	bl	800b0c0 <osMessagePut>
      break;
 800f704:	e035      	b.n	800f772 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	7e5b      	ldrb	r3, [r3, #25]
 800f70a:	3301      	adds	r3, #1
 800f70c:	b2da      	uxtb	r2, r3
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	765a      	strb	r2, [r3, #25]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	7e5b      	ldrb	r3, [r3, #25]
 800f716:	2b02      	cmp	r3, #2
 800f718:	d806      	bhi.n	800f728 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2201      	movs	r2, #1
 800f71e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2201      	movs	r2, #1
 800f724:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f726:	e025      	b.n	800f774 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f72e:	2106      	movs	r1, #6
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2200      	movs	r2, #0
 800f738:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	795b      	ldrb	r3, [r3, #5]
 800f73e:	4619      	mov	r1, r3
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f000 f90d 	bl	800f960 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	791b      	ldrb	r3, [r3, #4]
 800f74a:	4619      	mov	r1, r3
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f000 f907 	bl	800f960 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2200      	movs	r2, #0
 800f756:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f758:	2302      	movs	r3, #2
 800f75a:	73fb      	strb	r3, [r7, #15]
      break;
 800f75c:	e00a      	b.n	800f774 <USBH_HandleControl+0x484>

    default:
      break;
 800f75e:	bf00      	nop
 800f760:	e008      	b.n	800f774 <USBH_HandleControl+0x484>
      break;
 800f762:	bf00      	nop
 800f764:	e006      	b.n	800f774 <USBH_HandleControl+0x484>
      break;
 800f766:	bf00      	nop
 800f768:	e004      	b.n	800f774 <USBH_HandleControl+0x484>
      break;
 800f76a:	bf00      	nop
 800f76c:	e002      	b.n	800f774 <USBH_HandleControl+0x484>
      break;
 800f76e:	bf00      	nop
 800f770:	e000      	b.n	800f774 <USBH_HandleControl+0x484>
      break;
 800f772:	bf00      	nop
  }

  return status;
 800f774:	7bfb      	ldrb	r3, [r7, #15]
}
 800f776:	4618      	mov	r0, r3
 800f778:	3710      	adds	r7, #16
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop

0800f780 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b088      	sub	sp, #32
 800f784:	af04      	add	r7, sp, #16
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	60b9      	str	r1, [r7, #8]
 800f78a:	4613      	mov	r3, r2
 800f78c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f78e:	79f9      	ldrb	r1, [r7, #7]
 800f790:	2300      	movs	r3, #0
 800f792:	9303      	str	r3, [sp, #12]
 800f794:	2308      	movs	r3, #8
 800f796:	9302      	str	r3, [sp, #8]
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	9301      	str	r3, [sp, #4]
 800f79c:	2300      	movs	r3, #0
 800f79e:	9300      	str	r3, [sp, #0]
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	68f8      	ldr	r0, [r7, #12]
 800f7a6:	f000 fb46 	bl	800fe36 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800f7aa:	2300      	movs	r3, #0
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3710      	adds	r7, #16
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b088      	sub	sp, #32
 800f7b8:	af04      	add	r7, sp, #16
 800f7ba:	60f8      	str	r0, [r7, #12]
 800f7bc:	60b9      	str	r1, [r7, #8]
 800f7be:	4611      	mov	r1, r2
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	460b      	mov	r3, r1
 800f7c4:	80fb      	strh	r3, [r7, #6]
 800f7c6:	4613      	mov	r3, r2
 800f7c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d001      	beq.n	800f7d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f7d8:	7979      	ldrb	r1, [r7, #5]
 800f7da:	7e3b      	ldrb	r3, [r7, #24]
 800f7dc:	9303      	str	r3, [sp, #12]
 800f7de:	88fb      	ldrh	r3, [r7, #6]
 800f7e0:	9302      	str	r3, [sp, #8]
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	9301      	str	r3, [sp, #4]
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	9300      	str	r3, [sp, #0]
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	68f8      	ldr	r0, [r7, #12]
 800f7f0:	f000 fb21 	bl	800fe36 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f7f4:	2300      	movs	r3, #0
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3710      	adds	r7, #16
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}

0800f7fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b088      	sub	sp, #32
 800f802:	af04      	add	r7, sp, #16
 800f804:	60f8      	str	r0, [r7, #12]
 800f806:	60b9      	str	r1, [r7, #8]
 800f808:	4611      	mov	r1, r2
 800f80a:	461a      	mov	r2, r3
 800f80c:	460b      	mov	r3, r1
 800f80e:	80fb      	strh	r3, [r7, #6]
 800f810:	4613      	mov	r3, r2
 800f812:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f814:	7979      	ldrb	r1, [r7, #5]
 800f816:	2300      	movs	r3, #0
 800f818:	9303      	str	r3, [sp, #12]
 800f81a:	88fb      	ldrh	r3, [r7, #6]
 800f81c:	9302      	str	r3, [sp, #8]
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	9301      	str	r3, [sp, #4]
 800f822:	2301      	movs	r3, #1
 800f824:	9300      	str	r3, [sp, #0]
 800f826:	2300      	movs	r3, #0
 800f828:	2201      	movs	r2, #1
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	f000 fb03 	bl	800fe36 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f830:	2300      	movs	r3, #0

}
 800f832:	4618      	mov	r0, r3
 800f834:	3710      	adds	r7, #16
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}

0800f83a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f83a:	b580      	push	{r7, lr}
 800f83c:	b088      	sub	sp, #32
 800f83e:	af04      	add	r7, sp, #16
 800f840:	60f8      	str	r0, [r7, #12]
 800f842:	60b9      	str	r1, [r7, #8]
 800f844:	4611      	mov	r1, r2
 800f846:	461a      	mov	r2, r3
 800f848:	460b      	mov	r3, r1
 800f84a:	80fb      	strh	r3, [r7, #6]
 800f84c:	4613      	mov	r3, r2
 800f84e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f856:	2b00      	cmp	r3, #0
 800f858:	d001      	beq.n	800f85e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f85a:	2300      	movs	r3, #0
 800f85c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f85e:	7979      	ldrb	r1, [r7, #5]
 800f860:	7e3b      	ldrb	r3, [r7, #24]
 800f862:	9303      	str	r3, [sp, #12]
 800f864:	88fb      	ldrh	r3, [r7, #6]
 800f866:	9302      	str	r3, [sp, #8]
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	9301      	str	r3, [sp, #4]
 800f86c:	2301      	movs	r3, #1
 800f86e:	9300      	str	r3, [sp, #0]
 800f870:	2302      	movs	r3, #2
 800f872:	2200      	movs	r2, #0
 800f874:	68f8      	ldr	r0, [r7, #12]
 800f876:	f000 fade 	bl	800fe36 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f87a:	2300      	movs	r3, #0
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3710      	adds	r7, #16
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b088      	sub	sp, #32
 800f888:	af04      	add	r7, sp, #16
 800f88a:	60f8      	str	r0, [r7, #12]
 800f88c:	60b9      	str	r1, [r7, #8]
 800f88e:	4611      	mov	r1, r2
 800f890:	461a      	mov	r2, r3
 800f892:	460b      	mov	r3, r1
 800f894:	80fb      	strh	r3, [r7, #6]
 800f896:	4613      	mov	r3, r2
 800f898:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f89a:	7979      	ldrb	r1, [r7, #5]
 800f89c:	2300      	movs	r3, #0
 800f89e:	9303      	str	r3, [sp, #12]
 800f8a0:	88fb      	ldrh	r3, [r7, #6]
 800f8a2:	9302      	str	r3, [sp, #8]
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	9301      	str	r3, [sp, #4]
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	9300      	str	r3, [sp, #0]
 800f8ac:	2302      	movs	r3, #2
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	68f8      	ldr	r0, [r7, #12]
 800f8b2:	f000 fac0 	bl	800fe36 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f8b6:	2300      	movs	r3, #0
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3710      	adds	r7, #16
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b086      	sub	sp, #24
 800f8c4:	af04      	add	r7, sp, #16
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	4608      	mov	r0, r1
 800f8ca:	4611      	mov	r1, r2
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	70fb      	strb	r3, [r7, #3]
 800f8d2:	460b      	mov	r3, r1
 800f8d4:	70bb      	strb	r3, [r7, #2]
 800f8d6:	4613      	mov	r3, r2
 800f8d8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f8da:	7878      	ldrb	r0, [r7, #1]
 800f8dc:	78ba      	ldrb	r2, [r7, #2]
 800f8de:	78f9      	ldrb	r1, [r7, #3]
 800f8e0:	8b3b      	ldrh	r3, [r7, #24]
 800f8e2:	9302      	str	r3, [sp, #8]
 800f8e4:	7d3b      	ldrb	r3, [r7, #20]
 800f8e6:	9301      	str	r3, [sp, #4]
 800f8e8:	7c3b      	ldrb	r3, [r7, #16]
 800f8ea:	9300      	str	r3, [sp, #0]
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f000 fa53 	bl	800fd9a <USBH_LL_OpenPipe>

  return USBH_OK;
 800f8f4:	2300      	movs	r3, #0
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3708      	adds	r7, #8
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}

0800f8fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f8fe:	b580      	push	{r7, lr}
 800f900:	b082      	sub	sp, #8
 800f902:	af00      	add	r7, sp, #0
 800f904:	6078      	str	r0, [r7, #4]
 800f906:	460b      	mov	r3, r1
 800f908:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800f90a:	78fb      	ldrb	r3, [r7, #3]
 800f90c:	4619      	mov	r1, r3
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 fa72 	bl	800fdf8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f914:	2300      	movs	r3, #0
}
 800f916:	4618      	mov	r0, r3
 800f918:	3708      	adds	r7, #8
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b084      	sub	sp, #16
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
 800f926:	460b      	mov	r3, r1
 800f928:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f000 f836 	bl	800f99c <USBH_GetFreePipe>
 800f930:	4603      	mov	r3, r0
 800f932:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f934:	89fb      	ldrh	r3, [r7, #14]
 800f936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d00a      	beq.n	800f954 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800f93e:	78fa      	ldrb	r2, [r7, #3]
 800f940:	89fb      	ldrh	r3, [r7, #14]
 800f942:	f003 030f 	and.w	r3, r3, #15
 800f946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f94a:	6879      	ldr	r1, [r7, #4]
 800f94c:	33e0      	adds	r3, #224	; 0xe0
 800f94e:	009b      	lsls	r3, r3, #2
 800f950:	440b      	add	r3, r1
 800f952:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f954:	89fb      	ldrh	r3, [r7, #14]
 800f956:	b2db      	uxtb	r3, r3
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3710      	adds	r7, #16
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f960:	b480      	push	{r7}
 800f962:	b083      	sub	sp, #12
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	460b      	mov	r3, r1
 800f96a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800f96c:	78fb      	ldrb	r3, [r7, #3]
 800f96e:	2b0f      	cmp	r3, #15
 800f970:	d80d      	bhi.n	800f98e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f972:	78fb      	ldrb	r3, [r7, #3]
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	33e0      	adds	r3, #224	; 0xe0
 800f978:	009b      	lsls	r3, r3, #2
 800f97a:	4413      	add	r3, r2
 800f97c:	685a      	ldr	r2, [r3, #4]
 800f97e:	78fb      	ldrb	r3, [r7, #3]
 800f980:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f984:	6879      	ldr	r1, [r7, #4]
 800f986:	33e0      	adds	r3, #224	; 0xe0
 800f988:	009b      	lsls	r3, r3, #2
 800f98a:	440b      	add	r3, r1
 800f98c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f98e:	2300      	movs	r3, #0
}
 800f990:	4618      	mov	r0, r3
 800f992:	370c      	adds	r7, #12
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr

0800f99c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b085      	sub	sp, #20
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	73fb      	strb	r3, [r7, #15]
 800f9ac:	e00f      	b.n	800f9ce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f9ae:	7bfb      	ldrb	r3, [r7, #15]
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	33e0      	adds	r3, #224	; 0xe0
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	4413      	add	r3, r2
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d102      	bne.n	800f9c8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f9c2:	7bfb      	ldrb	r3, [r7, #15]
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	e007      	b.n	800f9d8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800f9c8:	7bfb      	ldrb	r3, [r7, #15]
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	73fb      	strb	r3, [r7, #15]
 800f9ce:	7bfb      	ldrb	r3, [r7, #15]
 800f9d0:	2b0f      	cmp	r3, #15
 800f9d2:	d9ec      	bls.n	800f9ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f9d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3714      	adds	r7, #20
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	490e      	ldr	r1, [pc, #56]	; (800fa24 <MX_USB_HOST_Init+0x40>)
 800f9ec:	480e      	ldr	r0, [pc, #56]	; (800fa28 <MX_USB_HOST_Init+0x44>)
 800f9ee:	f7fe f975 	bl	800dcdc <USBH_Init>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d001      	beq.n	800f9fc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f9f8:	f7f1 ff68 	bl	80018cc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800f9fc:	490b      	ldr	r1, [pc, #44]	; (800fa2c <MX_USB_HOST_Init+0x48>)
 800f9fe:	480a      	ldr	r0, [pc, #40]	; (800fa28 <MX_USB_HOST_Init+0x44>)
 800fa00:	f7fe fa22 	bl	800de48 <USBH_RegisterClass>
 800fa04:	4603      	mov	r3, r0
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d001      	beq.n	800fa0e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800fa0a:	f7f1 ff5f 	bl	80018cc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800fa0e:	4806      	ldr	r0, [pc, #24]	; (800fa28 <MX_USB_HOST_Init+0x44>)
 800fa10:	f7fe faa6 	bl	800df60 <USBH_Start>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d001      	beq.n	800fa1e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800fa1a:	f7f1 ff57 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800fa1e:	bf00      	nop
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop
 800fa24:	0800fa31 	.word	0x0800fa31
 800fa28:	20004684 	.word	0x20004684
 800fa2c:	2000006c 	.word	0x2000006c

0800fa30 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b083      	sub	sp, #12
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	460b      	mov	r3, r1
 800fa3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fa3c:	78fb      	ldrb	r3, [r7, #3]
 800fa3e:	3b01      	subs	r3, #1
 800fa40:	2b04      	cmp	r3, #4
 800fa42:	d819      	bhi.n	800fa78 <USBH_UserProcess+0x48>
 800fa44:	a201      	add	r2, pc, #4	; (adr r2, 800fa4c <USBH_UserProcess+0x1c>)
 800fa46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa4a:	bf00      	nop
 800fa4c:	0800fa79 	.word	0x0800fa79
 800fa50:	0800fa69 	.word	0x0800fa69
 800fa54:	0800fa79 	.word	0x0800fa79
 800fa58:	0800fa71 	.word	0x0800fa71
 800fa5c:	0800fa61 	.word	0x0800fa61
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800fa60:	4b09      	ldr	r3, [pc, #36]	; (800fa88 <USBH_UserProcess+0x58>)
 800fa62:	2203      	movs	r2, #3
 800fa64:	701a      	strb	r2, [r3, #0]
  break;
 800fa66:	e008      	b.n	800fa7a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800fa68:	4b07      	ldr	r3, [pc, #28]	; (800fa88 <USBH_UserProcess+0x58>)
 800fa6a:	2202      	movs	r2, #2
 800fa6c:	701a      	strb	r2, [r3, #0]
  break;
 800fa6e:	e004      	b.n	800fa7a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800fa70:	4b05      	ldr	r3, [pc, #20]	; (800fa88 <USBH_UserProcess+0x58>)
 800fa72:	2201      	movs	r2, #1
 800fa74:	701a      	strb	r2, [r3, #0]
  break;
 800fa76:	e000      	b.n	800fa7a <USBH_UserProcess+0x4a>

  default:
  break;
 800fa78:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800fa7a:	bf00      	nop
 800fa7c:	370c      	adds	r7, #12
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa84:	4770      	bx	lr
 800fa86:	bf00      	nop
 800fa88:	20004a68 	.word	0x20004a68

0800fa8c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b08a      	sub	sp, #40	; 0x28
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa94:	f107 0314 	add.w	r3, r7, #20
 800fa98:	2200      	movs	r2, #0
 800fa9a:	601a      	str	r2, [r3, #0]
 800fa9c:	605a      	str	r2, [r3, #4]
 800fa9e:	609a      	str	r2, [r3, #8]
 800faa0:	60da      	str	r2, [r3, #12]
 800faa2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4a24      	ldr	r2, [pc, #144]	; (800fb3c <HAL_HCD_MspInit+0xb0>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d141      	bne.n	800fb32 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800faae:	2300      	movs	r3, #0
 800fab0:	613b      	str	r3, [r7, #16]
 800fab2:	4b23      	ldr	r3, [pc, #140]	; (800fb40 <HAL_HCD_MspInit+0xb4>)
 800fab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fab6:	4a22      	ldr	r2, [pc, #136]	; (800fb40 <HAL_HCD_MspInit+0xb4>)
 800fab8:	f043 0302 	orr.w	r3, r3, #2
 800fabc:	6313      	str	r3, [r2, #48]	; 0x30
 800fabe:	4b20      	ldr	r3, [pc, #128]	; (800fb40 <HAL_HCD_MspInit+0xb4>)
 800fac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fac2:	f003 0302 	and.w	r3, r3, #2
 800fac6:	613b      	str	r3, [r7, #16]
 800fac8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800faca:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800face:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fad0:	2302      	movs	r3, #2
 800fad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fad4:	2300      	movs	r3, #0
 800fad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fad8:	2300      	movs	r3, #0
 800fada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800fadc:	230c      	movs	r3, #12
 800fade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fae0:	f107 0314 	add.w	r3, r7, #20
 800fae4:	4619      	mov	r1, r3
 800fae6:	4817      	ldr	r0, [pc, #92]	; (800fb44 <HAL_HCD_MspInit+0xb8>)
 800fae8:	f7f4 ff46 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800faec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800faf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800faf2:	2300      	movs	r3, #0
 800faf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800faf6:	2300      	movs	r3, #0
 800faf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800fafa:	f107 0314 	add.w	r3, r7, #20
 800fafe:	4619      	mov	r1, r3
 800fb00:	4810      	ldr	r0, [pc, #64]	; (800fb44 <HAL_HCD_MspInit+0xb8>)
 800fb02:	f7f4 ff39 	bl	8004978 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800fb06:	2300      	movs	r3, #0
 800fb08:	60fb      	str	r3, [r7, #12]
 800fb0a:	4b0d      	ldr	r3, [pc, #52]	; (800fb40 <HAL_HCD_MspInit+0xb4>)
 800fb0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb0e:	4a0c      	ldr	r2, [pc, #48]	; (800fb40 <HAL_HCD_MspInit+0xb4>)
 800fb10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fb14:	6313      	str	r3, [r2, #48]	; 0x30
 800fb16:	4b0a      	ldr	r3, [pc, #40]	; (800fb40 <HAL_HCD_MspInit+0xb4>)
 800fb18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fb1e:	60fb      	str	r3, [r7, #12]
 800fb20:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800fb22:	2200      	movs	r2, #0
 800fb24:	2105      	movs	r1, #5
 800fb26:	204d      	movs	r0, #77	; 0x4d
 800fb28:	f7f4 f986 	bl	8003e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800fb2c:	204d      	movs	r0, #77	; 0x4d
 800fb2e:	f7f4 f99f 	bl	8003e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800fb32:	bf00      	nop
 800fb34:	3728      	adds	r7, #40	; 0x28
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	40040000 	.word	0x40040000
 800fb40:	40023800 	.word	0x40023800
 800fb44:	40020400 	.word	0x40020400

0800fb48 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7fe feb9 	bl	800e8ce <USBH_LL_IncTimer>
}
 800fb5c:	bf00      	nop
 800fb5e:	3708      	adds	r7, #8
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7fe fefd 	bl	800e972 <USBH_LL_Connect>
}
 800fb78:	bf00      	nop
 800fb7a:	3708      	adds	r7, #8
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}

0800fb80 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7fe ff12 	bl	800e9b8 <USBH_LL_Disconnect>
}
 800fb94:	bf00      	nop
 800fb96:	3708      	adds	r7, #8
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	460b      	mov	r3, r1
 800fba6:	70fb      	strb	r3, [r7, #3]
 800fba8:	4613      	mov	r3, r2
 800fbaa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fe ff47 	bl	800ea46 <USBH_LL_NotifyURBChange>
#endif
}
 800fbb8:	bf00      	nop
 800fbba:	3708      	adds	r7, #8
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b082      	sub	sp, #8
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fe fea7 	bl	800e922 <USBH_LL_PortEnabled>
}
 800fbd4:	bf00      	nop
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fe feb3 	bl	800e956 <USBH_LL_PortDisabled>
}
 800fbf0:	bf00      	nop
 800fbf2:	3708      	adds	r7, #8
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d132      	bne.n	800fc70 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800fc0a:	4a1c      	ldr	r2, [pc, #112]	; (800fc7c <USBH_LL_Init+0x84>)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	4a19      	ldr	r2, [pc, #100]	; (800fc7c <USBH_LL_Init+0x84>)
 800fc16:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800fc1a:	4b18      	ldr	r3, [pc, #96]	; (800fc7c <USBH_LL_Init+0x84>)
 800fc1c:	4a18      	ldr	r2, [pc, #96]	; (800fc80 <USBH_LL_Init+0x88>)
 800fc1e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800fc20:	4b16      	ldr	r3, [pc, #88]	; (800fc7c <USBH_LL_Init+0x84>)
 800fc22:	220c      	movs	r2, #12
 800fc24:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800fc26:	4b15      	ldr	r3, [pc, #84]	; (800fc7c <USBH_LL_Init+0x84>)
 800fc28:	2201      	movs	r2, #1
 800fc2a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800fc2c:	4b13      	ldr	r3, [pc, #76]	; (800fc7c <USBH_LL_Init+0x84>)
 800fc2e:	2200      	movs	r2, #0
 800fc30:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800fc32:	4b12      	ldr	r3, [pc, #72]	; (800fc7c <USBH_LL_Init+0x84>)
 800fc34:	2202      	movs	r2, #2
 800fc36:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800fc38:	4b10      	ldr	r3, [pc, #64]	; (800fc7c <USBH_LL_Init+0x84>)
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800fc3e:	4b0f      	ldr	r3, [pc, #60]	; (800fc7c <USBH_LL_Init+0x84>)
 800fc40:	2200      	movs	r2, #0
 800fc42:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800fc44:	4b0d      	ldr	r3, [pc, #52]	; (800fc7c <USBH_LL_Init+0x84>)
 800fc46:	2200      	movs	r2, #0
 800fc48:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800fc4a:	4b0c      	ldr	r3, [pc, #48]	; (800fc7c <USBH_LL_Init+0x84>)
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800fc50:	480a      	ldr	r0, [pc, #40]	; (800fc7c <USBH_LL_Init+0x84>)
 800fc52:	f7f5 f962 	bl	8004f1a <HAL_HCD_Init>
 800fc56:	4603      	mov	r3, r0
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d001      	beq.n	800fc60 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800fc5c:	f7f1 fe36 	bl	80018cc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800fc60:	4806      	ldr	r0, [pc, #24]	; (800fc7c <USBH_LL_Init+0x84>)
 800fc62:	f7f5 fd46 	bl	80056f2 <HAL_HCD_GetCurrentFrame>
 800fc66:	4603      	mov	r3, r0
 800fc68:	4619      	mov	r1, r3
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f7fe fe20 	bl	800e8b0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800fc70:	2300      	movs	r3, #0
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	3708      	adds	r7, #8
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
 800fc7a:	bf00      	nop
 800fc7c:	20004a6c 	.word	0x20004a6c
 800fc80:	40040000 	.word	0x40040000

0800fc84 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b084      	sub	sp, #16
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc90:	2300      	movs	r3, #0
 800fc92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7f5 fcb3 	bl	8005606 <HAL_HCD_Start>
 800fca0:	4603      	mov	r3, r0
 800fca2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fca4:	7bfb      	ldrb	r3, [r7, #15]
 800fca6:	4618      	mov	r0, r3
 800fca8:	f000 f95c 	bl	800ff64 <USBH_Get_USB_Status>
 800fcac:	4603      	mov	r3, r0
 800fcae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3710      	adds	r7, #16
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}

0800fcba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fcba:	b580      	push	{r7, lr}
 800fcbc:	b084      	sub	sp, #16
 800fcbe:	af00      	add	r7, sp, #0
 800fcc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7f5 fcbb 	bl	800564c <HAL_HCD_Stop>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fcda:	7bfb      	ldrb	r3, [r7, #15]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f000 f941 	bl	800ff64 <USBH_Get_USB_Status>
 800fce2:	4603      	mov	r3, r0
 800fce4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fce6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3710      	adds	r7, #16
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7f5 fd03 	bl	800570e <HAL_HCD_GetCurrentSpeed>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	2b02      	cmp	r3, #2
 800fd0c:	d00c      	beq.n	800fd28 <USBH_LL_GetSpeed+0x38>
 800fd0e:	2b02      	cmp	r3, #2
 800fd10:	d80d      	bhi.n	800fd2e <USBH_LL_GetSpeed+0x3e>
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d002      	beq.n	800fd1c <USBH_LL_GetSpeed+0x2c>
 800fd16:	2b01      	cmp	r3, #1
 800fd18:	d003      	beq.n	800fd22 <USBH_LL_GetSpeed+0x32>
 800fd1a:	e008      	b.n	800fd2e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	73fb      	strb	r3, [r7, #15]
    break;
 800fd20:	e008      	b.n	800fd34 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800fd22:	2301      	movs	r3, #1
 800fd24:	73fb      	strb	r3, [r7, #15]
    break;
 800fd26:	e005      	b.n	800fd34 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fd28:	2302      	movs	r3, #2
 800fd2a:	73fb      	strb	r3, [r7, #15]
    break;
 800fd2c:	e002      	b.n	800fd34 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fd2e:	2301      	movs	r3, #1
 800fd30:	73fb      	strb	r3, [r7, #15]
    break;
 800fd32:	bf00      	nop
  }
  return  speed;
 800fd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3710      	adds	r7, #16
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b084      	sub	sp, #16
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd46:	2300      	movs	r3, #0
 800fd48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7f5 fc96 	bl	8005686 <HAL_HCD_ResetPort>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fd5e:	7bfb      	ldrb	r3, [r7, #15]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f000 f8ff 	bl	800ff64 <USBH_Get_USB_Status>
 800fd66:	4603      	mov	r3, r0
 800fd68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3710      	adds	r7, #16
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}

0800fd74 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b082      	sub	sp, #8
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fd86:	78fa      	ldrb	r2, [r7, #3]
 800fd88:	4611      	mov	r1, r2
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7f5 fc9d 	bl	80056ca <HAL_HCD_HC_GetXferCount>
 800fd90:	4603      	mov	r3, r0
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3708      	adds	r7, #8
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}

0800fd9a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fd9a:	b590      	push	{r4, r7, lr}
 800fd9c:	b089      	sub	sp, #36	; 0x24
 800fd9e:	af04      	add	r7, sp, #16
 800fda0:	6078      	str	r0, [r7, #4]
 800fda2:	4608      	mov	r0, r1
 800fda4:	4611      	mov	r1, r2
 800fda6:	461a      	mov	r2, r3
 800fda8:	4603      	mov	r3, r0
 800fdaa:	70fb      	strb	r3, [r7, #3]
 800fdac:	460b      	mov	r3, r1
 800fdae:	70bb      	strb	r3, [r7, #2]
 800fdb0:	4613      	mov	r3, r2
 800fdb2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fdc2:	787c      	ldrb	r4, [r7, #1]
 800fdc4:	78ba      	ldrb	r2, [r7, #2]
 800fdc6:	78f9      	ldrb	r1, [r7, #3]
 800fdc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fdca:	9302      	str	r3, [sp, #8]
 800fdcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fdd0:	9301      	str	r3, [sp, #4]
 800fdd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fdd6:	9300      	str	r3, [sp, #0]
 800fdd8:	4623      	mov	r3, r4
 800fdda:	f7f5 f900 	bl	8004fde <HAL_HCD_HC_Init>
 800fdde:	4603      	mov	r3, r0
 800fde0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fde2:	7bfb      	ldrb	r3, [r7, #15]
 800fde4:	4618      	mov	r0, r3
 800fde6:	f000 f8bd 	bl	800ff64 <USBH_Get_USB_Status>
 800fdea:	4603      	mov	r3, r0
 800fdec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdee:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3714      	adds	r7, #20
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd90      	pop	{r4, r7, pc}

0800fdf8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b084      	sub	sp, #16
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	460b      	mov	r3, r1
 800fe02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe04:	2300      	movs	r3, #0
 800fe06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fe12:	78fa      	ldrb	r2, [r7, #3]
 800fe14:	4611      	mov	r1, r2
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7f5 f970 	bl	80050fc <HAL_HCD_HC_Halt>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fe20:	7bfb      	ldrb	r3, [r7, #15]
 800fe22:	4618      	mov	r0, r3
 800fe24:	f000 f89e 	bl	800ff64 <USBH_Get_USB_Status>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3710      	adds	r7, #16
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}

0800fe36 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fe36:	b590      	push	{r4, r7, lr}
 800fe38:	b089      	sub	sp, #36	; 0x24
 800fe3a:	af04      	add	r7, sp, #16
 800fe3c:	6078      	str	r0, [r7, #4]
 800fe3e:	4608      	mov	r0, r1
 800fe40:	4611      	mov	r1, r2
 800fe42:	461a      	mov	r2, r3
 800fe44:	4603      	mov	r3, r0
 800fe46:	70fb      	strb	r3, [r7, #3]
 800fe48:	460b      	mov	r3, r1
 800fe4a:	70bb      	strb	r3, [r7, #2]
 800fe4c:	4613      	mov	r3, r2
 800fe4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe50:	2300      	movs	r3, #0
 800fe52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fe54:	2300      	movs	r3, #0
 800fe56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fe5e:	787c      	ldrb	r4, [r7, #1]
 800fe60:	78ba      	ldrb	r2, [r7, #2]
 800fe62:	78f9      	ldrb	r1, [r7, #3]
 800fe64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fe68:	9303      	str	r3, [sp, #12]
 800fe6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fe6c:	9302      	str	r3, [sp, #8]
 800fe6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe70:	9301      	str	r3, [sp, #4]
 800fe72:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fe76:	9300      	str	r3, [sp, #0]
 800fe78:	4623      	mov	r3, r4
 800fe7a:	f7f5 f963 	bl	8005144 <HAL_HCD_HC_SubmitRequest>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fe82:	7bfb      	ldrb	r3, [r7, #15]
 800fe84:	4618      	mov	r0, r3
 800fe86:	f000 f86d 	bl	800ff64 <USBH_Get_USB_Status>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3714      	adds	r7, #20
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd90      	pop	{r4, r7, pc}

0800fe98 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	460b      	mov	r3, r1
 800fea2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800feaa:	78fa      	ldrb	r2, [r7, #3]
 800feac:	4611      	mov	r1, r2
 800feae:	4618      	mov	r0, r3
 800feb0:	f7f5 fbf7 	bl	80056a2 <HAL_HCD_HC_GetURBState>
 800feb4:	4603      	mov	r3, r0
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3708      	adds	r7, #8
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}

0800febe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800febe:	b580      	push	{r7, lr}
 800fec0:	b082      	sub	sp, #8
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	6078      	str	r0, [r7, #4]
 800fec6:	460b      	mov	r3, r1
 800fec8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d103      	bne.n	800fedc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800fed4:	78fb      	ldrb	r3, [r7, #3]
 800fed6:	4618      	mov	r0, r3
 800fed8:	f000 f870 	bl	800ffbc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fedc:	20c8      	movs	r0, #200	; 0xc8
 800fede:	f7f3 fabf 	bl	8003460 <HAL_Delay>
  return USBH_OK;
 800fee2:	2300      	movs	r3, #0
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3708      	adds	r7, #8
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800feec:	b480      	push	{r7}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
 800fef4:	460b      	mov	r3, r1
 800fef6:	70fb      	strb	r3, [r7, #3]
 800fef8:	4613      	mov	r3, r2
 800fefa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ff02:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ff04:	78fb      	ldrb	r3, [r7, #3]
 800ff06:	68fa      	ldr	r2, [r7, #12]
 800ff08:	212c      	movs	r1, #44	; 0x2c
 800ff0a:	fb01 f303 	mul.w	r3, r1, r3
 800ff0e:	4413      	add	r3, r2
 800ff10:	333b      	adds	r3, #59	; 0x3b
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d009      	beq.n	800ff2c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ff18:	78fb      	ldrb	r3, [r7, #3]
 800ff1a:	68fa      	ldr	r2, [r7, #12]
 800ff1c:	212c      	movs	r1, #44	; 0x2c
 800ff1e:	fb01 f303 	mul.w	r3, r1, r3
 800ff22:	4413      	add	r3, r2
 800ff24:	3354      	adds	r3, #84	; 0x54
 800ff26:	78ba      	ldrb	r2, [r7, #2]
 800ff28:	701a      	strb	r2, [r3, #0]
 800ff2a:	e008      	b.n	800ff3e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ff2c:	78fb      	ldrb	r3, [r7, #3]
 800ff2e:	68fa      	ldr	r2, [r7, #12]
 800ff30:	212c      	movs	r1, #44	; 0x2c
 800ff32:	fb01 f303 	mul.w	r3, r1, r3
 800ff36:	4413      	add	r3, r2
 800ff38:	3355      	adds	r3, #85	; 0x55
 800ff3a:	78ba      	ldrb	r2, [r7, #2]
 800ff3c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ff3e:	2300      	movs	r3, #0
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3714      	adds	r7, #20
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr

0800ff4c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f7f3 fa83 	bl	8003460 <HAL_Delay>
}
 800ff5a:	bf00      	nop
 800ff5c:	3708      	adds	r7, #8
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
	...

0800ff64 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b085      	sub	sp, #20
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ff72:	79fb      	ldrb	r3, [r7, #7]
 800ff74:	2b03      	cmp	r3, #3
 800ff76:	d817      	bhi.n	800ffa8 <USBH_Get_USB_Status+0x44>
 800ff78:	a201      	add	r2, pc, #4	; (adr r2, 800ff80 <USBH_Get_USB_Status+0x1c>)
 800ff7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff7e:	bf00      	nop
 800ff80:	0800ff91 	.word	0x0800ff91
 800ff84:	0800ff97 	.word	0x0800ff97
 800ff88:	0800ff9d 	.word	0x0800ff9d
 800ff8c:	0800ffa3 	.word	0x0800ffa3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ff90:	2300      	movs	r3, #0
 800ff92:	73fb      	strb	r3, [r7, #15]
    break;
 800ff94:	e00b      	b.n	800ffae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ff96:	2302      	movs	r3, #2
 800ff98:	73fb      	strb	r3, [r7, #15]
    break;
 800ff9a:	e008      	b.n	800ffae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	73fb      	strb	r3, [r7, #15]
    break;
 800ffa0:	e005      	b.n	800ffae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ffa2:	2302      	movs	r3, #2
 800ffa4:	73fb      	strb	r3, [r7, #15]
    break;
 800ffa6:	e002      	b.n	800ffae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ffa8:	2302      	movs	r3, #2
 800ffaa:	73fb      	strb	r3, [r7, #15]
    break;
 800ffac:	bf00      	nop
  }
  return usb_status;
 800ffae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3714      	adds	r7, #20
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffba:	4770      	bx	lr

0800ffbc <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b084      	sub	sp, #16
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ffc6:	79fb      	ldrb	r3, [r7, #7]
 800ffc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800ffca:	79fb      	ldrb	r3, [r7, #7]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d102      	bne.n	800ffd6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	73fb      	strb	r3, [r7, #15]
 800ffd4:	e001      	b.n	800ffda <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800ffda:	7bfb      	ldrb	r3, [r7, #15]
 800ffdc:	461a      	mov	r2, r3
 800ffde:	2110      	movs	r1, #16
 800ffe0:	4803      	ldr	r0, [pc, #12]	; (800fff0 <MX_DriverVbusHS+0x34>)
 800ffe2:	f7f4 ff81 	bl	8004ee8 <HAL_GPIO_WritePin>
}
 800ffe6:	bf00      	nop
 800ffe8:	3710      	adds	r7, #16
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	40020800 	.word	0x40020800

0800fff4 <__errno>:
 800fff4:	4b01      	ldr	r3, [pc, #4]	; (800fffc <__errno+0x8>)
 800fff6:	6818      	ldr	r0, [r3, #0]
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop
 800fffc:	2000008c 	.word	0x2000008c

08010000 <__libc_init_array>:
 8010000:	b570      	push	{r4, r5, r6, lr}
 8010002:	4d0d      	ldr	r5, [pc, #52]	; (8010038 <__libc_init_array+0x38>)
 8010004:	4c0d      	ldr	r4, [pc, #52]	; (801003c <__libc_init_array+0x3c>)
 8010006:	1b64      	subs	r4, r4, r5
 8010008:	10a4      	asrs	r4, r4, #2
 801000a:	2600      	movs	r6, #0
 801000c:	42a6      	cmp	r6, r4
 801000e:	d109      	bne.n	8010024 <__libc_init_array+0x24>
 8010010:	4d0b      	ldr	r5, [pc, #44]	; (8010040 <__libc_init_array+0x40>)
 8010012:	4c0c      	ldr	r4, [pc, #48]	; (8010044 <__libc_init_array+0x44>)
 8010014:	f000 f93c 	bl	8010290 <_init>
 8010018:	1b64      	subs	r4, r4, r5
 801001a:	10a4      	asrs	r4, r4, #2
 801001c:	2600      	movs	r6, #0
 801001e:	42a6      	cmp	r6, r4
 8010020:	d105      	bne.n	801002e <__libc_init_array+0x2e>
 8010022:	bd70      	pop	{r4, r5, r6, pc}
 8010024:	f855 3b04 	ldr.w	r3, [r5], #4
 8010028:	4798      	blx	r3
 801002a:	3601      	adds	r6, #1
 801002c:	e7ee      	b.n	801000c <__libc_init_array+0xc>
 801002e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010032:	4798      	blx	r3
 8010034:	3601      	adds	r6, #1
 8010036:	e7f2      	b.n	801001e <__libc_init_array+0x1e>
 8010038:	08012d2c 	.word	0x08012d2c
 801003c:	08012d2c 	.word	0x08012d2c
 8010040:	08012d2c 	.word	0x08012d2c
 8010044:	08012d30 	.word	0x08012d30

08010048 <malloc>:
 8010048:	4b02      	ldr	r3, [pc, #8]	; (8010054 <malloc+0xc>)
 801004a:	4601      	mov	r1, r0
 801004c:	6818      	ldr	r0, [r3, #0]
 801004e:	f000 b88d 	b.w	801016c <_malloc_r>
 8010052:	bf00      	nop
 8010054:	2000008c 	.word	0x2000008c

08010058 <free>:
 8010058:	4b02      	ldr	r3, [pc, #8]	; (8010064 <free+0xc>)
 801005a:	4601      	mov	r1, r0
 801005c:	6818      	ldr	r0, [r3, #0]
 801005e:	f000 b819 	b.w	8010094 <_free_r>
 8010062:	bf00      	nop
 8010064:	2000008c 	.word	0x2000008c

08010068 <memcpy>:
 8010068:	440a      	add	r2, r1
 801006a:	4291      	cmp	r1, r2
 801006c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010070:	d100      	bne.n	8010074 <memcpy+0xc>
 8010072:	4770      	bx	lr
 8010074:	b510      	push	{r4, lr}
 8010076:	f811 4b01 	ldrb.w	r4, [r1], #1
 801007a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801007e:	4291      	cmp	r1, r2
 8010080:	d1f9      	bne.n	8010076 <memcpy+0xe>
 8010082:	bd10      	pop	{r4, pc}

08010084 <memset>:
 8010084:	4402      	add	r2, r0
 8010086:	4603      	mov	r3, r0
 8010088:	4293      	cmp	r3, r2
 801008a:	d100      	bne.n	801008e <memset+0xa>
 801008c:	4770      	bx	lr
 801008e:	f803 1b01 	strb.w	r1, [r3], #1
 8010092:	e7f9      	b.n	8010088 <memset+0x4>

08010094 <_free_r>:
 8010094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010096:	2900      	cmp	r1, #0
 8010098:	d044      	beq.n	8010124 <_free_r+0x90>
 801009a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801009e:	9001      	str	r0, [sp, #4]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	f1a1 0404 	sub.w	r4, r1, #4
 80100a6:	bfb8      	it	lt
 80100a8:	18e4      	addlt	r4, r4, r3
 80100aa:	f000 f8e3 	bl	8010274 <__malloc_lock>
 80100ae:	4a1e      	ldr	r2, [pc, #120]	; (8010128 <_free_r+0x94>)
 80100b0:	9801      	ldr	r0, [sp, #4]
 80100b2:	6813      	ldr	r3, [r2, #0]
 80100b4:	b933      	cbnz	r3, 80100c4 <_free_r+0x30>
 80100b6:	6063      	str	r3, [r4, #4]
 80100b8:	6014      	str	r4, [r2, #0]
 80100ba:	b003      	add	sp, #12
 80100bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100c0:	f000 b8de 	b.w	8010280 <__malloc_unlock>
 80100c4:	42a3      	cmp	r3, r4
 80100c6:	d908      	bls.n	80100da <_free_r+0x46>
 80100c8:	6825      	ldr	r5, [r4, #0]
 80100ca:	1961      	adds	r1, r4, r5
 80100cc:	428b      	cmp	r3, r1
 80100ce:	bf01      	itttt	eq
 80100d0:	6819      	ldreq	r1, [r3, #0]
 80100d2:	685b      	ldreq	r3, [r3, #4]
 80100d4:	1949      	addeq	r1, r1, r5
 80100d6:	6021      	streq	r1, [r4, #0]
 80100d8:	e7ed      	b.n	80100b6 <_free_r+0x22>
 80100da:	461a      	mov	r2, r3
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	b10b      	cbz	r3, 80100e4 <_free_r+0x50>
 80100e0:	42a3      	cmp	r3, r4
 80100e2:	d9fa      	bls.n	80100da <_free_r+0x46>
 80100e4:	6811      	ldr	r1, [r2, #0]
 80100e6:	1855      	adds	r5, r2, r1
 80100e8:	42a5      	cmp	r5, r4
 80100ea:	d10b      	bne.n	8010104 <_free_r+0x70>
 80100ec:	6824      	ldr	r4, [r4, #0]
 80100ee:	4421      	add	r1, r4
 80100f0:	1854      	adds	r4, r2, r1
 80100f2:	42a3      	cmp	r3, r4
 80100f4:	6011      	str	r1, [r2, #0]
 80100f6:	d1e0      	bne.n	80100ba <_free_r+0x26>
 80100f8:	681c      	ldr	r4, [r3, #0]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	6053      	str	r3, [r2, #4]
 80100fe:	4421      	add	r1, r4
 8010100:	6011      	str	r1, [r2, #0]
 8010102:	e7da      	b.n	80100ba <_free_r+0x26>
 8010104:	d902      	bls.n	801010c <_free_r+0x78>
 8010106:	230c      	movs	r3, #12
 8010108:	6003      	str	r3, [r0, #0]
 801010a:	e7d6      	b.n	80100ba <_free_r+0x26>
 801010c:	6825      	ldr	r5, [r4, #0]
 801010e:	1961      	adds	r1, r4, r5
 8010110:	428b      	cmp	r3, r1
 8010112:	bf04      	itt	eq
 8010114:	6819      	ldreq	r1, [r3, #0]
 8010116:	685b      	ldreq	r3, [r3, #4]
 8010118:	6063      	str	r3, [r4, #4]
 801011a:	bf04      	itt	eq
 801011c:	1949      	addeq	r1, r1, r5
 801011e:	6021      	streq	r1, [r4, #0]
 8010120:	6054      	str	r4, [r2, #4]
 8010122:	e7ca      	b.n	80100ba <_free_r+0x26>
 8010124:	b003      	add	sp, #12
 8010126:	bd30      	pop	{r4, r5, pc}
 8010128:	20004d70 	.word	0x20004d70

0801012c <sbrk_aligned>:
 801012c:	b570      	push	{r4, r5, r6, lr}
 801012e:	4e0e      	ldr	r6, [pc, #56]	; (8010168 <sbrk_aligned+0x3c>)
 8010130:	460c      	mov	r4, r1
 8010132:	6831      	ldr	r1, [r6, #0]
 8010134:	4605      	mov	r5, r0
 8010136:	b911      	cbnz	r1, 801013e <sbrk_aligned+0x12>
 8010138:	f000 f88c 	bl	8010254 <_sbrk_r>
 801013c:	6030      	str	r0, [r6, #0]
 801013e:	4621      	mov	r1, r4
 8010140:	4628      	mov	r0, r5
 8010142:	f000 f887 	bl	8010254 <_sbrk_r>
 8010146:	1c43      	adds	r3, r0, #1
 8010148:	d00a      	beq.n	8010160 <sbrk_aligned+0x34>
 801014a:	1cc4      	adds	r4, r0, #3
 801014c:	f024 0403 	bic.w	r4, r4, #3
 8010150:	42a0      	cmp	r0, r4
 8010152:	d007      	beq.n	8010164 <sbrk_aligned+0x38>
 8010154:	1a21      	subs	r1, r4, r0
 8010156:	4628      	mov	r0, r5
 8010158:	f000 f87c 	bl	8010254 <_sbrk_r>
 801015c:	3001      	adds	r0, #1
 801015e:	d101      	bne.n	8010164 <sbrk_aligned+0x38>
 8010160:	f04f 34ff 	mov.w	r4, #4294967295
 8010164:	4620      	mov	r0, r4
 8010166:	bd70      	pop	{r4, r5, r6, pc}
 8010168:	20004d74 	.word	0x20004d74

0801016c <_malloc_r>:
 801016c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010170:	1ccd      	adds	r5, r1, #3
 8010172:	f025 0503 	bic.w	r5, r5, #3
 8010176:	3508      	adds	r5, #8
 8010178:	2d0c      	cmp	r5, #12
 801017a:	bf38      	it	cc
 801017c:	250c      	movcc	r5, #12
 801017e:	2d00      	cmp	r5, #0
 8010180:	4607      	mov	r7, r0
 8010182:	db01      	blt.n	8010188 <_malloc_r+0x1c>
 8010184:	42a9      	cmp	r1, r5
 8010186:	d905      	bls.n	8010194 <_malloc_r+0x28>
 8010188:	230c      	movs	r3, #12
 801018a:	603b      	str	r3, [r7, #0]
 801018c:	2600      	movs	r6, #0
 801018e:	4630      	mov	r0, r6
 8010190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010194:	4e2e      	ldr	r6, [pc, #184]	; (8010250 <_malloc_r+0xe4>)
 8010196:	f000 f86d 	bl	8010274 <__malloc_lock>
 801019a:	6833      	ldr	r3, [r6, #0]
 801019c:	461c      	mov	r4, r3
 801019e:	bb34      	cbnz	r4, 80101ee <_malloc_r+0x82>
 80101a0:	4629      	mov	r1, r5
 80101a2:	4638      	mov	r0, r7
 80101a4:	f7ff ffc2 	bl	801012c <sbrk_aligned>
 80101a8:	1c43      	adds	r3, r0, #1
 80101aa:	4604      	mov	r4, r0
 80101ac:	d14d      	bne.n	801024a <_malloc_r+0xde>
 80101ae:	6834      	ldr	r4, [r6, #0]
 80101b0:	4626      	mov	r6, r4
 80101b2:	2e00      	cmp	r6, #0
 80101b4:	d140      	bne.n	8010238 <_malloc_r+0xcc>
 80101b6:	6823      	ldr	r3, [r4, #0]
 80101b8:	4631      	mov	r1, r6
 80101ba:	4638      	mov	r0, r7
 80101bc:	eb04 0803 	add.w	r8, r4, r3
 80101c0:	f000 f848 	bl	8010254 <_sbrk_r>
 80101c4:	4580      	cmp	r8, r0
 80101c6:	d13a      	bne.n	801023e <_malloc_r+0xd2>
 80101c8:	6821      	ldr	r1, [r4, #0]
 80101ca:	3503      	adds	r5, #3
 80101cc:	1a6d      	subs	r5, r5, r1
 80101ce:	f025 0503 	bic.w	r5, r5, #3
 80101d2:	3508      	adds	r5, #8
 80101d4:	2d0c      	cmp	r5, #12
 80101d6:	bf38      	it	cc
 80101d8:	250c      	movcc	r5, #12
 80101da:	4629      	mov	r1, r5
 80101dc:	4638      	mov	r0, r7
 80101de:	f7ff ffa5 	bl	801012c <sbrk_aligned>
 80101e2:	3001      	adds	r0, #1
 80101e4:	d02b      	beq.n	801023e <_malloc_r+0xd2>
 80101e6:	6823      	ldr	r3, [r4, #0]
 80101e8:	442b      	add	r3, r5
 80101ea:	6023      	str	r3, [r4, #0]
 80101ec:	e00e      	b.n	801020c <_malloc_r+0xa0>
 80101ee:	6822      	ldr	r2, [r4, #0]
 80101f0:	1b52      	subs	r2, r2, r5
 80101f2:	d41e      	bmi.n	8010232 <_malloc_r+0xc6>
 80101f4:	2a0b      	cmp	r2, #11
 80101f6:	d916      	bls.n	8010226 <_malloc_r+0xba>
 80101f8:	1961      	adds	r1, r4, r5
 80101fa:	42a3      	cmp	r3, r4
 80101fc:	6025      	str	r5, [r4, #0]
 80101fe:	bf18      	it	ne
 8010200:	6059      	strne	r1, [r3, #4]
 8010202:	6863      	ldr	r3, [r4, #4]
 8010204:	bf08      	it	eq
 8010206:	6031      	streq	r1, [r6, #0]
 8010208:	5162      	str	r2, [r4, r5]
 801020a:	604b      	str	r3, [r1, #4]
 801020c:	4638      	mov	r0, r7
 801020e:	f104 060b 	add.w	r6, r4, #11
 8010212:	f000 f835 	bl	8010280 <__malloc_unlock>
 8010216:	f026 0607 	bic.w	r6, r6, #7
 801021a:	1d23      	adds	r3, r4, #4
 801021c:	1af2      	subs	r2, r6, r3
 801021e:	d0b6      	beq.n	801018e <_malloc_r+0x22>
 8010220:	1b9b      	subs	r3, r3, r6
 8010222:	50a3      	str	r3, [r4, r2]
 8010224:	e7b3      	b.n	801018e <_malloc_r+0x22>
 8010226:	6862      	ldr	r2, [r4, #4]
 8010228:	42a3      	cmp	r3, r4
 801022a:	bf0c      	ite	eq
 801022c:	6032      	streq	r2, [r6, #0]
 801022e:	605a      	strne	r2, [r3, #4]
 8010230:	e7ec      	b.n	801020c <_malloc_r+0xa0>
 8010232:	4623      	mov	r3, r4
 8010234:	6864      	ldr	r4, [r4, #4]
 8010236:	e7b2      	b.n	801019e <_malloc_r+0x32>
 8010238:	4634      	mov	r4, r6
 801023a:	6876      	ldr	r6, [r6, #4]
 801023c:	e7b9      	b.n	80101b2 <_malloc_r+0x46>
 801023e:	230c      	movs	r3, #12
 8010240:	603b      	str	r3, [r7, #0]
 8010242:	4638      	mov	r0, r7
 8010244:	f000 f81c 	bl	8010280 <__malloc_unlock>
 8010248:	e7a1      	b.n	801018e <_malloc_r+0x22>
 801024a:	6025      	str	r5, [r4, #0]
 801024c:	e7de      	b.n	801020c <_malloc_r+0xa0>
 801024e:	bf00      	nop
 8010250:	20004d70 	.word	0x20004d70

08010254 <_sbrk_r>:
 8010254:	b538      	push	{r3, r4, r5, lr}
 8010256:	4d06      	ldr	r5, [pc, #24]	; (8010270 <_sbrk_r+0x1c>)
 8010258:	2300      	movs	r3, #0
 801025a:	4604      	mov	r4, r0
 801025c:	4608      	mov	r0, r1
 801025e:	602b      	str	r3, [r5, #0]
 8010260:	f7f3 f84a 	bl	80032f8 <_sbrk>
 8010264:	1c43      	adds	r3, r0, #1
 8010266:	d102      	bne.n	801026e <_sbrk_r+0x1a>
 8010268:	682b      	ldr	r3, [r5, #0]
 801026a:	b103      	cbz	r3, 801026e <_sbrk_r+0x1a>
 801026c:	6023      	str	r3, [r4, #0]
 801026e:	bd38      	pop	{r3, r4, r5, pc}
 8010270:	20004d78 	.word	0x20004d78

08010274 <__malloc_lock>:
 8010274:	4801      	ldr	r0, [pc, #4]	; (801027c <__malloc_lock+0x8>)
 8010276:	f000 b809 	b.w	801028c <__retarget_lock_acquire_recursive>
 801027a:	bf00      	nop
 801027c:	20004d7c 	.word	0x20004d7c

08010280 <__malloc_unlock>:
 8010280:	4801      	ldr	r0, [pc, #4]	; (8010288 <__malloc_unlock+0x8>)
 8010282:	f000 b804 	b.w	801028e <__retarget_lock_release_recursive>
 8010286:	bf00      	nop
 8010288:	20004d7c 	.word	0x20004d7c

0801028c <__retarget_lock_acquire_recursive>:
 801028c:	4770      	bx	lr

0801028e <__retarget_lock_release_recursive>:
 801028e:	4770      	bx	lr

08010290 <_init>:
 8010290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010292:	bf00      	nop
 8010294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010296:	bc08      	pop	{r3}
 8010298:	469e      	mov	lr, r3
 801029a:	4770      	bx	lr

0801029c <_fini>:
 801029c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801029e:	bf00      	nop
 80102a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102a2:	bc08      	pop	{r3}
 80102a4:	469e      	mov	lr, r3
 80102a6:	4770      	bx	lr
